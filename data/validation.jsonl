{"input": "display all the files in the current folder which have been modified in the last 24 hours excluding all directories", "output": "find . \\( -type d ! -name . -prune \\) -o \\( -mtime -1 -print \\)"}
{"input": "Search for the extended regex expanded by\"$MONTH\\/$YEAR.*GET.*ad=$ADVERTISER HTTP\\/1\" in the decompressed contents of the /var/log/apache2/access*.gz files that are newer than ./tmpoldfile and older than ./tmpnewfile", "output": "find /var/log/apache2/access*.gz -type f -newer ./tmpoldfile ! -newer ./tmpnewfile \\ | xargs zcat | grep -E \"$MONTH\\/$YEAR.*GET.*ad=$ADVERTISER HTTP\\/1\" -c"}
{"input": "search for a word in all c files in the current folder", "output": "find . -name '*.c' | xargs grep 'stdlib.h'"}
{"input": "Find all directories under $path", "output": "find $path -type d"}
{"input": "Write the list of all files on the system to \"masterfilelist.out\"", "output": "find  /   -print > masterfilelist.out"}
{"input": "Find all files/directories under directory '.cache/chromium/Default/Cache/' which are bigger than 100MB and which are atleast 1 level deep and delete them", "output": "find .cache/chromium/Default/Cache/ -mindepth 1 -size +100M -delete"}
{"input": "Remove all .php files in the /var/www/ directory", "output": "find /var/www/*.php -type f -exec rm {} \\;"}
{"input": "Print amount of space available on the file system containing path to the current working directory in megabytes.", "output": "df . -B MB | tail -1 | awk {'print $4'} | grep  .[0-9]*"}
{"input": "Find all .txt files in the dir/ directory tree and copy them along with times, permissions, and ownership to dir_txt/", "output": "find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents"}
{"input": "Removes '/var/lib/mongodb/mongod.lock' in 'sudo' mode.", "output": "sudo rm /var/lib/mongodb/mongod.lock"}
{"input": "Finds shell options with 'login' in name.", "output": "shopt | grep login"}
{"input": "display all the files in the current folder excluding those that are present in the sub directory aa and display those files that start with the word \"file\"", "output": "find . \\( -type d -name aa -prune \\) -o \\( -type f -name 'file*' -print \\)"}
{"input": "Continuously print \"123456789\" and line buffer the output via \"grep\" for input to \"{ head -n 1; head -n 1; }\"", "output": "yes 123456789 | grep --line-buffered . | { head -n 1; head -n 1; }"}
{"input": "Search for the string \"ERROR\" in all XML files in the current working directory tree", "output": "find . -name \"*.xml\" -exec grep \"ERROR\" /dev/null '{}' \\+"}
{"input": "Creates temporary file with appended suffix '.cmd' and saves path to it in 'LGT_TEMP_FILE' variable.", "output": "LGT_TEMP_FILE=\"$(mktemp --suffix .cmd)\""}
{"input": "Output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed.", "output": "awk 'NR==16224, NR==16482' file"}
{"input": "Save the current working directory and the directory name of the current script to variable \"DIR\"", "output": "DIR=`pwd`/`dirname $0`"}
{"input": "display all the files in current folder which have not been modified in the last 7 days", "output": "find . -mtime +7"}
{"input": "Convert all characters in \"$a\" to upper case and save to variable \"b\"", "output": "b=`echo \"$a\" | sed 's/./\\U&/g'`"}
{"input": "Find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 10 * 1024 * 2 blocks in size, that is larger than 20480 blocks.", "output": "find . -atime +7 -o -size +`expr 10 \\* 1024 \\* 2` -print"}
{"input": "Find and remove the file with inode number 782263 in the current directory tree", "output": "find . -inum 782263 -exec rm -i {} \\;"}
{"input": "Search the current directory for all files with no 'read' privilege for 'others'", "output": "find . -maxdepth 1 ! -perm  -o=r"}
{"input": "Show the subdirectories of the current directory", "output": "find . -maxdepth 1 -type d -print | xargs echo Directories:"}
{"input": "find all the files in the home folder which have been modified after a file", "output": "find $HOME -newer ~joeuser/lastbatch.txt"}
{"input": "Force create a symbolic link named \"id_rsa\" to \"$keyname\"", "output": "ln -sf $keyname     id_rsa"}
{"input": "find all the jpg files in current folder and sort them", "output": "find . -type f|grep -i \"\\.jpg$\" |sort"}
{"input": "Search the current directory tree for regular files modified within the past 24 hours whose names do not end with \".DS_Store\"", "output": "find . -mtime -1 ! -name '.DS_Store' -type f -printf '%f\\n'"}
{"input": "Get the current shell's executable name from the output of 'ps'.", "output": "ps -p $$ | awk '$1 == PP {print $4}' PP=$$"}
{"input": "Find all *.java files under current directory and change their encoding to utf-8 from cp1252", "output": "find . -type f  -name '*.java' -exec sh -c 'iconv -f cp1252 -t utf-8 \"$1\" > converted && mv converted \"$1\"' -- {} \\;"}
{"input": "find all files that are readable and writable by their owner", "output": "find . -perm -600 -print"}
{"input": "Replace the first occurrence of \"string1\" on each line with \"string2\" in all regular files in the current directory tree", "output": "find ./ -type f -exec sed -i 's/string1/string2/' {} \\;"}
{"input": "Make an archive of .txt files from the dir/ directory tree", "output": "find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2"}
{"input": "searching for all files with the extension mp3", "output": "find / -name *.mp3"}
{"input": "change the extension of all the \".abc\" files in the folder \"/the/path\" to \".edefg\" and do not change in the sub directories. execdir ensures that the command after it is executed only in the folder where the file is found", "output": "find /the/path -type f -name '*.abc' -execdir rename 's/\\.\\/(.+)\\.abc$/version1_$1.abc/' {} \\;"}
{"input": "Print command history", "output": "history"}
{"input": "Prints line count of each file within current directory.", "output": "find . -type f -print | xargs -L1 wc -l"}
{"input": "Finds out what groups a given user has.", "output": "groups user"}
{"input": "List all files/directories under current directory with their inode numbers, disk space, permission, number of hard links, user name, group name, size, status change time in Y-m-d format and name filed,  then write the outptut to /tmp/files.txt", "output": "find . -type f -fprintf /tmp/files.txt \"%i,%b,%M,%n,%u,%g,%s,%CY-%Cm-%Cd %CT,%p\\n\""}
{"input": "show all files in the current directory and all subdirectories", "output": "find . -print"}
{"input": "List each directory in the current directory prefixed with its disk usage in human readable format and sorted from smallest to largest", "output": "du -sh */ | sort -n"}
{"input": "Gets all IP addresses from host network configuration and prints first one.", "output": "ifconfig | grep \"inet addr:\" | grep -v \"127.0.0.1\" | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'  | head -1"}
{"input": "Find all *.m4a files under /home/family/Music directory and convert them to ogg", "output": "find /home/family/Music -name '*.m4a' -print0 | xargs -0 -i ffmpeg -i {} -acodec libvorbis -aq 6 -vn -ac 2 {}.ogg"}
{"input": "Find all directories under /home/username/public_html/sites/default/files and set their permission to 770", "output": "find /home/username/public_html/sites/default/files -type d -exec chmod 770 {} +"}
{"input": "Print all files and directories in the `.' directory tree skipping SCCS directories", "output": "find . -name SCCS -prune -o -print"}
{"input": "Change to location of '$TARGET_FILE' file.", "output": "cd `dirname $TARGET_FILE`"}
{"input": "set alias \"mkdir\" for command \u00a8mkdir -p\u00a8", "output": "alias mkdir=\u00a8mkdir -p\u00a8"}
{"input": "List the directory paths of all *.ext (case insensitive) files under /path directory", "output": "find /path -type f -iname \"*.ext\" -printf \"%h\\n\""}
{"input": "Count the number of lines in \"/dir/file.txt\"", "output": "cat /dir/file.txt | wc -l"}
{"input": "Run 'git pull' in every git repository in the current directory", "output": "find . -name \".git\" -type d | sed 's/\\/.git//' |  xargs -P10 -I{} git -C {} pull"}
{"input": "Print summary of new/missing files, and which files differ between folder1 and folder2.", "output": "diff -arq folder1 folder2"}
{"input": "Updates all software in system, prints update log on terminal and saves to 'mylogfile'.", "output": "yum update | tee mylogfile"}
{"input": "find all files under the current directory, redirecting error messages to the output and filtering any lines containing the text \"Permission denied\", writing the remaining output to some_file", "output": "find . 2>&1 | grep -v 'Permission denied' > some_file"}
{"input": "list all files under .performance_test directory except .performance_test/prune_me directory", "output": "find \".performance_test\" -path \".performance_test/prune_me\" -prune -o -exec bash -c 'echo \"$0\"' {} \\;"}
{"input": "Copy directory hierarchy from \"$sourceDir\" to \"$targetDir\"", "output": "find \"$sourceDir\" -type d | sed -e \"s?$sourceDir?$targetDir?\" | xargs mkdir -p"}
{"input": "Look for any files that have not been modified in the last two days", "output": "find -mtime +2"}
{"input": "Find all files/directories with case insensitive name pattern $TARGET that are located in minimum 10 level down the current directory", "output": "find -mindepth 10 -iname $TARGET"}
{"input": "Find all directories under current directory whose names are 33 characters long", "output": "find . -type d -name \"?????????????????????????????????\""}
{"input": "Find all directories under /path/to/base/dir and change their permission to 755", "output": "find /path/to/base/dir -type d -print0 | xargs -0 chmod 755"}
{"input": "display all the regular/normal files in current directory", "output": "find . -type f"}
{"input": "Find files whose pathnames end in \"config\"", "output": "find .  -path '*/*config'"}
{"input": "Download 10000 web pages \"https://www.example.com/page{}.html\" 100 at a time where \"{}\" ranges from 1 to 10000", "output": "seq 10000 | parallel -j100 wget https://www.example.com/page{}.html"}
{"input": "Find all the files whose permissions are 777 in the current directory", "output": "find . -type f -perm 0777 -print"}
{"input": "Find all directories in maximum 1 level down the current directory and remove the . entry from the output", "output": "find . -maxdepth 1 -type d | sed '/^\\.$/d'"}
{"input": "Find all broken symlinks under /path/to/search directory", "output": "find /path/to/search -type l -xtype l"}
{"input": "Search the current directory recursively for files containing \"needle text\"", "output": "find . -type f -print0 | xargs -0 grep -I \"needle text\""}
{"input": "Find all files that belong to group root", "output": "find / -group root"}
{"input": "change the current working directory to \"A\" and display all the files in that folder and save the output to the file \"tmp.txt\"", "output": "(cd A && find .) > tmp.txt"}
{"input": "Stores date of last month day in the 'lastdaymonth' variable.", "output": "set lastdaymonth=`cal $month $year  |tr -s \" \" \"\\n\"|tail -1`"}
{"input": "Save the name and first line of each .txt file found in the home directory tree to `report.txt'", "output": "find $HOME/. -name *.txt -exec head -n 1 -v {} \\; > report.txt"}
{"input": "Find all pdf files under /dir/containing/unsigned with null character as the delimiter", "output": "find /dir/containing/unsigned -name '*.pdf' -print0"}
{"input": "search for all the regular/normal files in the current folder and display only video/image files", "output": "find folder -type f -print0 | xargs -0 file --media-type | egrep 'image|video' | cut -f1 -d : | tr '\\n' '\\0'"}
{"input": "Search the current directory recursively for *.txt files with lines that match regular expression \"^string\"", "output": "find . -name \"*.txt\" -exec egrep -l '^string' {} \\;"}
{"input": "Remount part of the file hierarchy from \"olddir\" to \"newdir\"", "output": "mount --bind olddir newdir"}
{"input": "Copy all files matching \"*failed.ipynb\" in the current directory tree to \"./fails\" preserving the directory hierarchy", "output": "find . -name \"*failed.ipynb\" | cpio -pd ./fails"}
{"input": "Create symbolic links in the current directory for all files under \"bar1\" that are not directories and do not end in \".cc\"", "output": "find bar1 -name '*foo*' -not -type d -not -name '*.cc' -exec ln -s $PWD/'{}' bar2/ \\;"}
{"input": "Print A record for domain 'domain.' from 8.8.8.8 nameserver", "output": "dig @8.8.8.8 domain. a"}
{"input": "Show files in maximum 1 level down the current directory that were modified less than 1 day ago from today", "output": "less `find -maxdepth 1 -type f -daystart -mtime -1`"}
{"input": "Create the directory '.npm-packages' in the user's home directory($HOME)", "output": "mkdir \"${HOME}/.npm-packages\""}
{"input": "gives the chars in line 5 and chars 5 to 8 of line 5, in tst.txt", "output": "head -5 tst.txt | tail -1 |cut -c 5-8"}
{"input": "display all files in the directory \"dir\" which have been accessed in the last 60 minutes", "output": "find /dir -amin -60"}
{"input": "Find all *.mpg (regular) files under current directory and run an ffmpeg command on each of them", "output": "find . -name \"*.mpg\" -type f -print0 | xargs -0 -I {} -n 1 -P 4 ffmpeg -i {} {}.mp4"}
{"input": "Dump \"file\" as ASCII characters", "output": "od -t c file"}
{"input": "Display differences between /destination/dir/1 and /destination/dir/2 excluding XML files.", "output": "diff /destination/dir/1 /destination/dir/2 -r -x *.xml"}
{"input": "Find all 400 permission files under /data directory, print 'Modifying ' appended with file path for each of them and change their permission to 755", "output": "find /data -type f -perm 400 -exec echo Modifying {} \\; -exec chmod 755 {} \\;"}
{"input": "Decompress ${set1[@]} files with gzip", "output": "gzip -d ${set1[@]} &"}
{"input": "search all the \".sh\" files in the /usr folder and follow the symbolic links to their original file", "output": "find /usr -follow -name '*.sh'"}
{"input": "display all text files in current folder", "output": "find . -name \"*.txt\""}
{"input": "Login to \"user@host\" with key \"keyFile\" and execute \"./script arg1 arg2 > output.txt 2>&1\" in the background", "output": "ssh -i keyFile user@host bash -c \"\\\"nohup ./script arg1 arg2 > output.txt 2>&1 &\\\"\""}
{"input": "find all directories in the current folder", "output": "find -type d"}
{"input": "find all foo.bar files in the entire file system and which are present in the same partition as root.", "output": "find / -name foo.bar -print -xdev"}
{"input": "Search for 'Processed Files' in all $srch* (case insensitive) files under current directory run the sed script 'N;s/(.*)\\n(.*)/\\2 \\1/' on the output and redirect the final output to temp2 file", "output": "find . -iname \"$srch*\" -exec grep \"Processed Files\" {} \\; -print| sed -r 'N;s/(.*)\\n(.*)/\\2 \\1/'  > temp2"}
{"input": "Find all files/directories under '/usr' directory tree that have not been modified in the last 356 days counting days from today", "output": "find /usr -mtime +356 -daystart"}
{"input": "Find all files under $dir directory", "output": "find \"$dir\" -type f"}
{"input": "Find all *foo files/directories under current directory", "output": "find . -name '*foo'"}
{"input": "Create tar archive \"dirall.tar\" and copy all files from directory tree /tmp/a1 to it", "output": "find /tmp/a1 -print0 | tar --null -T- -cvf dirall.tar"}
{"input": "Search the file system for regular files whose pathnames are shorter than 25 characters", "output": "find / -type f|awk -F'/' '{print $NF}'| awk 'length($0) < 25'"}
{"input": "find files in a directory and exit the command if the syntax is correct or display invalid command if the syntax is wrong.", "output": "find \u2026 -exec sh -c 'trap \"echo \\$?\" EXIT; invalid_command \"$0\"' {} \\;"}
{"input": "Print a minimal set of differences between files in directories \"a\" and \"b\", ignore differences in whitespace, and print 0 lines of unified context", "output": "diff -dbU0 a b"}
{"input": "find all raw images in the current folder and pass them one at a time to the xargs command and enable parallel processing of the files", "output": "find . -type f -iname '*.CR2' -print0 | xargs -0 -n 1 -P 8 -I {}"}
{"input": "Delete file with inode number 314167125", "output": "find . -type f -inum 314167125 -delete"}
{"input": "List and remove all regular files named \"core\" under /prog that are larger than 500k", "output": "find /prog -type f -size +1000 -print -name core -exec rm {} \\;"}
{"input": "Execute \"chown -R ask:ask /www/askapache.com\" in the background on server \"askapache\"", "output": "ssh askapache 'sh -c \"( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )\"'"}
{"input": "Shows status of a shell option 'dotglob'.", "output": "shopt dotglob"}
{"input": "display all the text files in the home folder ( case insensitive search )", "output": "find /home -iname \"*.txt\""}
{"input": "find all instances of a specific file in the current directory and discard all the errors and remove all permission denied statements from search results", "output": "find . -name \"openssl\" 2>&1 | sed '/Permission denied/d;'"}
{"input": "Replace \",,\" with \", ,\" twice in \"data.csv\" and display the \",\" delimited result as a table", "output": "sed 's/,,/, ,/g;s/,,/, ,/g' data.csv | column -s, -t"}
{"input": "Run cmd1 and cmd2 on each file/directory under current directory with the file/directory path as a positional argument to those commands", "output": "for i in `find . -exec echo {} \\;`; do cmd1 $i; cmd2 $i; done"}
{"input": "Silently read a single character into variable \"REPLY\"", "output": "read -n1 -s"}
{"input": "Run the file command on every regular file under current directory", "output": "find . -type f -exec file '{}' \\;"}
{"input": "Find all *.m4a files under /home/family/Music directory and convert them to ogg", "output": "find /home/family/Music -name '*.m4a' -exec ffmpeg -i \"{}\" -acodec libvorbis -aq 6 -vn -ac 2 \"{}.ogg\" \\;"}
{"input": "Show process tree with command-line arguments of a process that has id 20238.", "output": "pstree -a -p 20238"}
{"input": "Print content of 'file' file reverted characterwise", "output": "rev file"}
{"input": "display all the files in the home folder which begin with \"arrow\" and end with \"xbm\"", "output": "find ~ -name 'arrow*.xbm'"}
{"input": "replaces the last occurrence of 'a' with 'c'", "output": "tac infile.txt | sed \"s/a/c/; ta ; b ; :a ; N ; ba\" | tac"}
{"input": "find all the regular files in a folder which do not start with the word find and assign the output to a variable", "output": "files = \"`find \"'\"$dirs\"'\" -type f |& grep -v '^find: '`\""}
{"input": "Creates alias for network interface 'eth0' with IP address '192.0.2.55' and network mask '255.255.255.255'.", "output": "ifconfig eth0:fakenfs 192.0.2.55 netmask 255.255.255.255"}
{"input": "Counts total lines in all *.php files in the current directory recursively", "output": "find . -name '*.php' -type f | xargs cat | wc -l"}
{"input": "Split \"INPUT_FILE_NAME\" into files of at most 500 MiB each with a numeric suffix of length 4 and prefix \"input.part.\"", "output": "split -b 500M -d -a 4 INPUT_FILE_NAME input.part."}
{"input": "Find all files under current directory that match the case insensitive regex .\\|./.git and replace (all occurrences) the text matching the case insensitive regex expanded by $1 with $upper2 in these files", "output": "find . -type f \\! -iregex '.\\|./.git' -exec perl -i'' -pe \"s/$1/$upper2/gi\" {} +"}
{"input": "Find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end", "output": "find /etc -maxdepth 1 -name \"*.conf\" | tail"}
{"input": "Compress all \".txt\" files in the current directory tree with gzip", "output": "find . -type f -name \"*.txt\" -exec gzip {} \\;"}
{"input": "Find all regular files starting from / that have permissions 777", "output": "find / -type f -perm 0777"}
{"input": "Gets a job with defined number back to the foreground.", "output": "fg 1"}
{"input": "display all files in the current folder which start with met", "output": "find -name met*"}
{"input": "Move all files from the `sourceDir' directory tree to the `destDir' directory", "output": "find sourceDir -mindepth 1 -exec mv \"{}\" --target-directory=destDir \\;"}
{"input": "display all the empty files in the folder /opt (file size 0 bytes)", "output": "find /opt -type f -empty"}
{"input": "Find all directories in the /data1/realtime directory tree that were modified within the last 60 minutes", "output": "find /data1/realtime -mmin -60 -type d"}
{"input": "Find files with 002 permission in entire file system", "output": "find / -type f -perm -002"}
{"input": "Archive \"/path/to/copy\" to \"/path/to/local/storage\" on host \"host.remoted.from\" as user \"user\" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission", "output": "rsync -chavzP --stats /path/to/copy user@host.remoted.from:/path/to/local/storage"}
{"input": "find all the files in the current folder which are bigger than 1MB", "output": "find . \u2014 size +1000k -print"}
{"input": "Show files in /home owned by group `test'", "output": "find /home -group test"}
{"input": "Delete all matches to the regex '^.*iframe bla bla bla.*$' in all the php files under current directory tree and modify the files in-place", "output": "find ./ -type f -name \\*.php -exec sed -i \u2019s/^.*iframe bla bla bla.*$//g\u2019 {} \\;"}
{"input": "Find all PHP files under current directory", "output": "find . -type f -name *.php"}
{"input": "Filter out current date in current time zone from the GMT+30 and GMT+20 representations of current date and show the last one", "output": "echo -e \"$(TZ=GMT+30 date +%Y-%m-%d)\\n$(TZ=GMT+20 date +%Y-%m-%d)\" | grep -v $(date +%Y-%m-%d) | tail -1"}
{"input": "Find and remove all .core files", "output": "find / -name \"*.core\" | xargs rm"}
{"input": "Send one ping request to host with local address in the 10.0.0.x range, with last number specified by variable \"i\", waiting 1 second for a reply, and output only lines containing \"from\" to standard output.", "output": "ping -W 1 -c 1 10.0.0.$i | grep 'from' &"}
{"input": "Replace \"foo\" with \"bar\" in all files in the current directory tree", "output": "find . | xargs sed -i \u2018s/foo/bar/g\u2019"}
{"input": "find all the \".c\" files in the folder \"/home/you\" which have been accessed in the last 30*24 hours", "output": "find /home/you -iname \"*.c\" -atime -30 -type -f"}
{"input": "find all the links that have been modified on a specific day and copy them to another directory", "output": "find . -type l -daystart -mtime $date_dif -exec copy_it.sh $verbose -s {} -t $to_dir \\;"}
{"input": "Find all empty directories under /tmp and below", "output": "find /tmp -type d -empty"}
{"input": "Find all files under /somefolder matching the extended regex '\\./(.*\\.error.*|second.*log|.*FFPC\\.log)$' in their paths", "output": "find -E /somefolder -type f -regex '\\./(.*\\.error.*|second.*log|.*FFPC\\.log)$'"}
{"input": "search for regular/normal file with the name \"myfile\" in the entire file system and discard all the errors", "output": "find / -name myfile -type f -print 2> /dev/null"}
{"input": "Find files with 002 permission in entire file system and print them with the string 'has world write permissions' appended after every path", "output": "find / -type f -perm -002 -printf '%p has world write permissions\\n'"}
{"input": "Print which files differ between \"folder1\" and \"folder2\" treating all files as text", "output": "diff -arq folder1 folder2"}
{"input": "List all IPV4 addresses found in all files under /etc directory", "output": "find /etc -type f -exec cat '{}' \\; | tr -c '.[:digit:]' '\\n'  | grep '^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$'"}
{"input": "Create a copy of index.html in all directories in current directory, pausing for confirmation before overwriting any existing files - names may not contain spaces - names may not contain spaces.", "output": "find . -mindepth 1 -maxdepth 1 -type d| xargs -n 1 cp -i index.html"}
{"input": "Delete all directories found in $LOGDIR that are more than a work-week old", "output": "find $LOGDIR -type d -mtime +5 -exec rm -rf {} \\;"}
{"input": "Find files in the current directory tree that match \"pattern\" and run \"git diff\" on them", "output": "find . -name \"pattern\" | xargs git diff --"}
{"input": "insert \"e\" when it's pressed", "output": "bind '\"e\":self-insert'"}
{"input": "find files with the extension .conf in the /etc directory", "output": "find /etc -name '*.conf'"}
{"input": "Find all files/directories named 'findcommandexamples.txt' (case insensitive) in the entire filesystem", "output": "find  / -iname findcommandexamples.txt"}
{"input": "Find all hidden files in the current directory", "output": "find . -type f -name \".*\""}
{"input": "Find with combine multiple search criterias , in this command serach  files that begin with abc in there name and dont have .py extension .", "output": "find . -type f -name 'abc*' ! -name '*.py'"}
{"input": "Find all files under /path/you/need, calculate their md5sums and redirect the results to checksums.md5", "output": "find /path/you/need -type f -exec md5sum {} \\; > checksums.md5"}
{"input": "find all the files in the current directory and display them", "output": "find . -exec echo {} ;"}
{"input": "download a file \"http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip\" using cookies \"oraclelicense=accept-securebackup-cookie\"", "output": "curl -L -C - -b \"oraclelicense=accept-securebackup-cookie\" -O http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip"}
{"input": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"${1:-Are you sure? [y/N]} \"", "output": "read -r -p \"${1:-Are you sure? [y/N]} \" response"}
{"input": "Find files named tecmint.txt  of owner root in the entire file system", "output": "find / -user root -name tecmint.txt"}
{"input": "Find all Name* files under ../../$name-module and rename them by replacing 'Name' with $Name (will be expanded in the current shell) in their names", "output": "find ../../$name-module -name 'Name*' -type f -exec bash -c \"mv \\\"\\$1\\\" \\\"\\${1/Name/$Name}\\\"\" -- {} \\;"}
{"input": "Find all files named \"something\" in the current folder and below and run them through the ls -l command, one by one.", "output": "find . -name something -exec ls -l {} \\;"}
{"input": "Find all files in the current directory and below with extension .php and replace \"php\" with \"html\" in their names", "output": "find ./ -type f -name \"*.php\"  | xargs -r rename \"s/php/html/\""}
{"input": "wait 2 seconds and then print \"hello\"", "output": "echo \"hello `sleep 2 &`\""}
{"input": "Find the number of regular files under and below directory /path/to/dir", "output": "find /path/to/dir -type f -exec printf %.sX {} + | wc -c"}
{"input": "remove all the files in the folder \"myfiiles\" which have not been accessed in the last 30*24 hours", "output": "find /myfiles -atime +30 -exec rm {} ;"}
{"input": "Find all sample*_1.txt files/directories under current directory, remove _1.txt from the end of file paths and pipe them to the command `parallel program {}-out {}_1.txt {}_2.txt`", "output": "find . -name \"sample*_1.txt\" | perl -pe 's/_1\\.txt$//' | parallel program {}-out {}_1.txt {}_2.txt"}
{"input": "Runs 'tty' command in a subshell that is opened by built-in function 'true'.", "output": "true | echo `tty | sed 's:/dev/::'`"}
{"input": "List all *.jar files/directories under /usr, /home and /tmp directory without reporting errors", "output": "find /usr /home  /tmp -name \"*.jar\" 2>/dev/null"}
{"input": "Find regular files under / that contain \"stringtofind\" and clear out their contents", "output": "find / -maxdepth 1 -xdev -type f -exec grep -li \"stringtofind\" {} + | parallel sed \"'/./d'\" '{}'"}
{"input": "Find all regular files recursively in the current directory", "output": "find . -type f"}
{"input": "Read a line from standard input into variable \"PASSWORD\"", "output": "read PASSWORD"}
{"input": "Save the list of files in the current directory hierarchy separting file names with zeroes", "output": "find . -print0 > mypipe"}
{"input": "Change user to \"amzadm\" and group to \"root\" of \"/usr/bin/aws\"", "output": "chown amzadm.root  /usr/bin/aws"}
{"input": "Remove with prompting all files starting in /mydir that have not been accessed in over 100 days", "output": "find /mydir -atime +100 -ok rm {} \\;"}
{"input": "Unsets shell variable 'latest'.", "output": "unset -v latest"}
{"input": "List all cron jobs where the minute part is either * or a number from 0 to 14.", "output": "crontab -l | awk '$1 == \"*\" || $1 ~ /^[0-9]+$/ && $1 < 15 {print}'"}
{"input": "Find & calculate total number of worlds in all .txt file from current directory", "output": "find .  -type f  -name '*.txt' -exec wc -w {} \\; | awk '{total += $1} END{print total}'"}
{"input": "find all the files ending with jpg in current folder and display their count ( case insensitive )", "output": "find ./ -type f -regex \".*\\.[Jj][Pp][gG]$\" | wc -l"}
{"input": "Find all files under current directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter", "output": "find . -name .snapshot -prune -o \\( -type f -mtime 0 -print0 \\)"}
{"input": "Execute find with \"$@\" arguments", "output": "exec /usr/bin/find \"$@\""}
{"input": "get the count of all the files that have been accessed in the last 30 days", "output": "find . -atime +30 -exec ls \\; | wc -l"}
{"input": "Remove all files matching the pattern *[+{;\"\\\\=?~()<>&*|$ ]* under current directory", "output": "find . -name '*[+{;\"\\\\=?~()<>&*|$ ]*' -exec rm -f '{}' \\;"}
{"input": "search for the file test2 in the current folder", "output": "find -name test2"}
{"input": "find all the files in the current folder which have been modified in the last one day", "output": "find . -daystart -mtime -1 -ls"}
{"input": "Create a table containing all information from S43.txt and S44.txt, merging lines where the first field of both files matches, and keeping the line that starts with \"Gene\" at the start of the file.", "output": "join -a1 -a2 <(sed s/^Gene/00ne/ S43.txt | sort) <(sed s/^Gene/00ne/ S44.txt | sort) | column -t | sed s/^00ne/Gene/"}
{"input": "delete all the empty file in the file system after user confirmation", "output": "find / -size 0 -ok rm { } \\;"}
{"input": "Send SIGTERM signal to all 'firefox' processes, requesting them to terminate.", "output": "kill `pidof firefox`"}
{"input": "find all the files in the current folder which are smaller than 9MB", "output": "find . -size -9k"}
{"input": "Recursively removes all files and folders named '.svn' in a current folder.", "output": "find . -name .svn -exec rm -rf {} \\;"}
{"input": "Replace \"foo\" with \"bar\" in all PHP files in the current directory tree", "output": "find . -name \"*.php\" -exec sed -i 's/foo/bar/g' {} \\;"}
{"input": "Print true directory name of the current directory", "output": "readlink `pwd`"}
{"input": "find all jar files in current folder and search for a file in all these jar's", "output": "find . -name \"*.jar\" -exec jar -tf {} \\;|grep  \"message_track.properties\""}
{"input": "list in long format all files from / whose filename ends in \"jbd\", not descending into directories that are not readable while searching.", "output": "find / \\! -readable -prune -o -name '*.jbd' -ls"}
{"input": "find all the regular/normal files in the current folder", "output": "find -type f"}
{"input": "same as above example with -exec , in this example with -OK it should ask for confirmation before executing the rm command . that is called user intractive command", "output": "find . -name core -ok rm {} \\;"}
{"input": "SSH into server \"server.com\" as user \"remote_user\"", "output": "ssh remote_user@server.com"}
{"input": "Remove all directories called \"test\" from the current directory tree", "output": "find . -name test -type d -exec rm -r {} \\;"}
{"input": "change permission of all the files in the entire file system which have permissions 777.", "output": "find / -type f -perm 0777 -print -exec chmod 644 {} \\;"}
{"input": "Format file \"list-of-entries.txt\" with no column delimiter", "output": "column -t -s '' list-of-entries.txt"}
{"input": "display all files in the current folder with the name test excluding those that are present in the sub folders of the test folder", "output": "find . -name test -prune"}
{"input": "Find regular files that are bigger than 500 MB in size under current directoryt tree", "output": "find . -type f -size +500M"}
{"input": "List the current directory recursively ignoring ./src/emacs/ and all its contents", "output": "find . -path ./src/emacs -prune -o -print"}
{"input": "Print space separated numbers from 1 to 10", "output": "seq 10 | xargs echo"}
{"input": "List all files in the /var directory tree whose size is greater than 10 megabytes", "output": "find /var/ -size +10M -ls"}
{"input": "Output the specified path removing all containing directories and the .txt suffix, in this case \"filename\".", "output": "basename /path/to/dir/filename.txt .txt"}
{"input": "Search for files in the current user's home directory and below for files that have not been accessed for more than 100 days and ask the user for permission to delete each file, one by one.", "output": "find ~/ -atime +100 -exec rm -i {} \\;"}
{"input": "Display operating system type, ie. GNU/Linux", "output": "uname -o"}
{"input": "Print the list of 1st level subdirectories in /fss/fin", "output": "find /fss/fin -d 1 -type d -name \"*\" -print"}
{"input": "Find files with 002 permission in entire file system with the null character as the delimiter", "output": "find / -type f -perm -002 -print0"}
{"input": "Print the names of all the files from directory tree ~/some/directory whose names end in \"rb\"", "output": "find ~/some/directory -name \"*rb\" -exec basename {} \\;"}
{"input": "search for all the regular files in the folder /home which have the permission 077", "output": "find /home -type f -perm 0777 -print"}
{"input": "Installs 'glibc' package.", "output": "sudo yum install glibc"}
{"input": "make a copy of file file1 named file2", "output": "su - jetty cp file1 file2"}
{"input": "Print the list of files modified within a fortnight ago removing the leading ./ from the file names", "output": "find .  -mtime -14 | sed -e 's/^\\.\\///'"}
{"input": "Find all *.* files under current directory", "output": "find . -type f -a -name '*.*'"}
{"input": "Archive \"/local/path/some_file\" to \"/some/path\" on host \"server.com\" authenticating as user \"usr\", compress data during transmission, show progress details.", "output": "rsync -avz --progress local/path/some_file usr@server.com:\"/some/path/\""}
{"input": "Keep the last 4 ASCII characters (bytes) of a string.", "output": "echo \"0a.00.1 usb controller some text device 4dc9\" | rev | cut -b1-4 | rev"}
{"input": "Check if the file \"somelink\" links to exists", "output": "ls `readlink somelink`"}
{"input": "Write \"suspend\" to standard output and to file \"/sys/bus/usb/devices/usb3/power/level\"", "output": "echo suspend | sudo tee /sys/bus/usb/devices/usb3/power/level"}
{"input": "Prints logged in users in sorted order.", "output": "w | sort"}
{"input": "find all files ending with \"js.compiled\" in current folder (print0 is used to handle files with newlines in their names)", "output": "find ./js/ -name \"*.js.compiled\" -print0"}
{"input": "Report file system containing the current directory disk usage in kilobytes.", "output": "df -k ."}
{"input": "Search the current directory recursively for regular files with the extension given as variable $extension", "output": "find . -type f -name \"*.$extension\""}
{"input": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"", "output": "find . -name \\*.c -print | xargs grep wait_event_interruptible /dev/null"}
{"input": "Find all the files which are modified in last 1 hour", "output": "find / -mmin -60"}
{"input": "Find all 100MB+ files and delete them", "output": "find / -size +100M -exec rm -rf {} \\;"}
{"input": "Find and remove multiple *.txt files", "output": "find . -type f -name \"*.txt\" -exec rm -f {} \\;"}
{"input": "Find files that are writable by both the \u201cother\u201d and the group under the plsql directory", "output": "find plsql -type f  -perm -ug=rw -exec ls -l {} \\; 2>/dev/null"}
{"input": "Read a line from standard input into the first argument (\"$1\") using an interactive shell with prompt \"> \"", "output": "read -e -p '> ' $1"}
{"input": "Find all files residing in /home/dm/Video or below that were last changed at least 10 days ago", "output": "find /home/dm/Video -mtime +10"}
{"input": "search for all html files in current folder and replace a pattern in all the files", "output": "find . -type f -name \"*html\" -exec perl -pi -e 's|pibeta.psi.ch/~stefan|midas.psi.ch/~stefan|g' {} ;"}
{"input": "Search the home directory for filenames starting with \"xx\" except for \"xxx\" files", "output": "find ~ -name 'xx*' -and -not -name 'xxx'"}
{"input": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles", "output": "find . -type f -print | xargs /usr/bin/grep -il 'bin/ksh' | tee /tmp/allfiles"}
{"input": "Find all files and directories that have been modified in the last seven days.", "output": "find . -mtime -7"}
{"input": "display all the text files and hidden files in the home folder", "output": "find ~ -name \"*.txt\" \u2014 print -o -name \".*\" \u2014 print"}
{"input": "Redirect the current process's standard error to standard out and write to console and append to \"$HOME/logfile\"", "output": "exec > >(tee -a $HOME/logfile) 2>&1"}
{"input": "Fiind and remove multiple files such as *.mp3 or *.txt", "output": "find . -type f -name \"*.txt\" -exec rm -f {} \\;"}
{"input": "search for all the rpm files in the file system which reside in the same partition as that of the root", "output": "find / -xdev -name \"*.rpm\""}
{"input": "find all the regular/normal files in the current folder which belong to the user \"sedlav\"", "output": "find . -user sedlav -type f"}
{"input": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)", "output": "find . -name '*.log' -mtime +3 -print0 | xargs -0 -n 500 -P 4 bzip2"}
{"input": "find all the files in the file system which have been modified in the last 30*24 hours", "output": "find / -mtime -30 -print"}
{"input": "Save to report.txt the first line of every text file in the home directory", "output": "find $HOME/. -name *.txt -exec head -n 1 -v {} \\; > report.txt"}
{"input": "Displays status of currently active network interfaces.", "output": "ifconfig"}
{"input": "Find files/directories named 'filename' in the entire filesystem", "output": "find / -name filename -print"}
{"input": "this will recursively grep all the files, compressed or uncompressed.2 If you want to grep only the compressed files then find + zgrep would be a better option.", "output": "find /path/to/dir -name '*.gz' -exec zgrep -- 'pattern' {} +"}
{"input": "Search for 'mystring' in all *.txt files under current directory", "output": "find . -name \"*.txt\" -exec egrep mystring {} \\;"}
{"input": "Find all symlinks under /myfiles directory", "output": "find /myfiles -type l"}
{"input": "List root's regular files with permissions 4000", "output": "find / -type f -user root -perm -4000 -exec ls -l {} \\;"}
{"input": "Find all regular files in the current directory tree and count them", "output": "find -type f -printf '.' | wc -c"}
{"input": "Find all regular files under '/usr/bin' directory tree that are less than 50 bytes in size", "output": "find /usr/bin -type f -size -50c"}
{"input": "find all *.java files/directories under current directory", "output": "find . -name  \"*.java\""}
{"input": "Print a single line of numbers from \"001\" to \"100\"", "output": "yes | grep y | sed 100q | awk '{printf( \"%03d \", NR )}'; echo"}
{"input": "Write a random list of numbers to /tmp/lst and stdout.", "output": "seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') **...**"}
{"input": "Find all *.txt files/directories under your home directory", "output": "find ~/ -name '*.txt'"}
{"input": "Show the number of regular files in the current directory tree", "output": "find . -type f | wc -l"}
{"input": "change the directory to the last found folder in the directory 'a'", "output": "cd `find a |sed '$!d'`"}
{"input": "Move all *.php~ (case insensitive) files under current directory to /mydir", "output": "for D in `find . -iname \"*.php~\"`; do mv ${D} /mydir; done"}
{"input": "Find all files under and below /dir that were changed or created less than 60 minutes ago", "output": "find /dir -cmin -60"}
{"input": "Calculate the md5 sum of \"yourstring\"", "output": "echo -n \"yourstring\" |md5sum"}
{"input": "Find all files in the current directory tree whose pathnames match pattern '*/1/lang/en.css'", "output": "find . -path \u2018*/1/lang/en.css\u2019 -print"}
{"input": "find all *.java files/directories under current directory", "output": "find . -name  \\*.java"}
{"input": "The cpio command is a copy command designed to copy files into and out of a cpio or tar archive, automatically preserving permissions, times, and ownership of files and subdirectories.", "output": "find . | cpio -pdumv /path/to/destination/dirrectory"}
{"input": "Recursively change the owner of npm's directories(lib/node_modules, bin and share) to the current user", "output": "sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}"}
{"input": "Recursively removes all empty folders under current folder.", "output": "find -depth -type d -empty -exec rmdir {} \\;"}
{"input": "find all the files which start with the name \"Metallica\" in the folder \"/mp3-collection\" and which are bigger than 10MB", "output": "find /mp3-collection -name 'Metallica*' -and -size +10000k"}
{"input": "Search the /home/bozo/projects directory tree for files modified within the last 24 hours", "output": "find /home/bozo/projects -mtime 1"}
{"input": "Find all files with the extension jpg regardless of case", "output": "find . -type f -iname '*.jpg' -print0"}
{"input": "Print the directory name of the full real path to the current script", "output": "echo \"dirname/readlink: $(dirname $(readlink -f $0))\""}
{"input": "List file contents of compressed file $i", "output": "gzip -l $i"}
{"input": "Find all *.gz files/directories under asia and emea directory", "output": "find asia emea -name \\*.gz -print0 | xargs -0"}
{"input": "Find all directories under /home/me/target_dir_1", "output": "find /home/me/target_dir_1 -type d"}
{"input": "Recursively find files in the current directory with a modification time more than 7 days ago, save the filenames to \"compressedP.list\", and compress each file in parallel", "output": "find . -type f  -mtime +7 | tee compressedP.list | parallel compress"}
{"input": "Remove empty directories from directory tree /srv/${x}", "output": "find /srv/${x} -type d -empty -exec rmdir {} \\;"}
{"input": "change owner and group  of all files and directory into current directory to user and group apache", "output": "find . -maxdepth 1 -not -name \".\" -print0 | xargs --null chown -R apache:apache"}
{"input": "Set variable 'vara' to 3", "output": "source <(echo vara=3)"}
{"input": "Find all files/directories matching the regex pattern \".*\\\\.rb$\" under current directory", "output": "find . -regex \".*\\\\.rb$\""}
{"input": "Search for 'class Pool' in all *.java (case insensitive) files under current directory", "output": "find -iname '*.java'|xargs grep 'class Pool'"}
{"input": "Display a long listing of the oldest file under '/hom/backups' directory tree", "output": "find /home/backups -printf \"%T@ %p\\n\" | sort -n | head -1 | cut -d\" \" -f2- | xargs ls -al"}
{"input": "Find all files of the user with UID=1000", "output": "find -user 1000"}
{"input": "Split \"input.txt\" into files with 1 line each and use a prefix \"output.\" and a suffix length of 5", "output": "split --lines=1 --suffix-length=5 input.txt output."}
{"input": "Execute all commands in \"/path/to/commands-inc.sh\" on server \"remote\" as user \"user\"", "output": "ssh user@remote 'bash -s' < /path/to/commands-inc.sh"}
{"input": "Extract number from $filename of the form \"something_12345_else\" and set the variable \"number\" to this number.", "output": "number=$(echo $filename | awk -F _ '{ print $2 }')"}
{"input": "display a long listing of all regular files  in current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60 -type f -exec ls -l {} \\;"}
{"input": "Remove ESC key bind", "output": "bind -r '\\e'"}
{"input": "List every directory under current directory with their child executable files", "output": "find `pwd` -perm 111 -type f | sort -r | xargs -n1 -I{} sh -c \"dirname {};basename {}\" | awk '/^\\// {dir=$0 ; if (dir != lastdir) {print;lastdir=dir}} !/^\\// {print}'"}
{"input": "Archive \"/home/user1\" to \"wobgalaxy02:/home/user1\" excluding hidden files", "output": "rsync -av /home/user1 wobgalaxy02:/home/user1"}
{"input": "Display the mimetype of \"filename\"", "output": "file -i filename"}
{"input": "Search for the regex expanded by the variable $SEARCH in all regular files under $DIR directory tree", "output": "find \"$DIR\" -type f -exec grep -q \"$SEARCH\" {} + ;"}
{"input": "find all files that are readable or writable by their owner", "output": "find . -perm +600 -print"}
{"input": "Find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format", "output": "find -type f -name \"*.htm\" | sed 's@^./@@g;s@/@-@g' | awk -F'-' '{print $1 \"-\" $2 \"-\" $3 \"-\" substr($4, 5, 2) \"-\" $5}'"}
{"input": "Search all *.txt files under ~/documents for the word \"DOGS\"", "output": "find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \\; -print"}
{"input": "Find all files named \"filename\"", "output": "find -name \"filename\""}
{"input": "display all the header files  and cpp files in the current folder", "output": "find . -name \\*.h -print -o -name \\*.cpp -print"}
{"input": "Saves file sctipt.sh size in 'size' variable.", "output": "size=`cat script.sh | wc -c`"}
{"input": "Print file system disk space usage in posix and human readable format, format as a table", "output": "df -Ph | column -t"}
{"input": "Find all $2 files in $1 path and search for the regex expanded by $3 in those files", "output": "find $1 -name \"$2\" -exec grep -Hn \"$3\" {} \\;"}
{"input": "Installs locally located 'ffmpeg-2.6.4-1.fc22.x86_64.rpm' package.", "output": "yum install ffmpeg-2.6.4-1.fc22.x86_64.rpm"}
{"input": "find all the files in current folder which have spaces and save the long listing of these files to log file before deleting them", "output": "find . -name \"filename including space\" -print0 | xargs -0 -I '{}' sh -c 'ls -aldF {} >> log.txt; rm -rdf {}'"}
{"input": "Write the standard output and error of \"someCommand\" to the console and \"someFile\"", "output": "someCommand 2>&1 | tee someFile"}
{"input": "Wrap each line in \"file.txt\" to fit in 80 characters", "output": "cat file.txt | fold"}
{"input": "find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file", "output": "find . -name \"*.jar\" -print -exec jar -tf {} \\; | awk '{if($1~/jar$/)jar=$1;else if($1~/message_track/)arr[jar]=$1;}END{for(i in arr){print i \" contains \" arr[i]}}'"}
{"input": "find a difference between website content of \"http://tldp.org/LDP/abs/html/\" and \"http://www.redhat.com/mirrors/LDP/LDP/abs/html/\"", "output": "diff <(curl -s http://tldp.org/LDP/abs/html/) <(curl -s http://www.redhat.com/mirrors/LDP/LDP/abs/html/)"}
{"input": "Set up a local SSH tunnel from port 80 to port 3000", "output": "ssh $USERNAME@localhost -L 80:localhost:3000 -N"}
{"input": "Remove all .txt files in and below the current directory", "output": "find . -name \"*.txt\" -print0 | xargs -0 rm"}
{"input": "Find all httpd.conf files in entire file system", "output": "find / -name httpd.conf"}
{"input": "find all the files in the current folder which are exactly 1234 bytes", "output": "find . -size 1234c"}
{"input": "Find all broken symlinks under current directory", "output": "find ./ -type l -exec file {} \\; |grep broken"}
{"input": "Determine if user \"$USER\" is logged in", "output": "who | grep $USER"}
{"input": "Create a symbolic link in directory \"~/newlinks\" for each file listed in \"results2.txt\"", "output": "cat results2.txt | xargs -I{} ln -s {} ~/newlinks"}
{"input": "Write list of files present only in dir1 to file \"difference1.txt\".", "output": "diff -r dir1 dir2 | grep 'Only in' | grep dir1 | awk '{print $4}' > difference1.txt"}
{"input": "find all the text files in  the current folder and do not search in somedir, bin directories", "output": "find . -name somedir -prune , -name bin -prune -o -name \"*.txt\" -print"}
{"input": "Print the list of the current directory's subdirectories", "output": "find . -type d -maxdepth 1"}
{"input": "Find all directories under maximum 1 level down the /parent  directory and set their permission to 700 recursively", "output": "find /parent -maxdepth 1 -type d -print0 | xargs -0 chmod -R 700"}
{"input": "Change all directories under \"./storage/\" to owner \"apache\" and group \"laravel\"", "output": "sudo find ./storage/ -type d -exec chown apache:laravel {} \\;"}
{"input": "Display the output of \"ls\" for an 80 character wide display", "output": "ls | column -c 80"}
{"input": "Counts lines in each of *.php files in current folder with subfolders and prints total count as well.", "output": "find . -name '*.php' | xargs wc -l | sort -r"}
{"input": "replaces the last occurrence of 'a' with 'c' in file", "output": "tac file | sed '/a/ {s//c/; :loop; n; b loop}' | tac"}
{"input": "Search for files greater than 20MB under your home directory (/home/user)", "output": "find ~ -size +20M"}
{"input": "Find files matching the pattern \"./sr*sc\" in their paths under current directory", "output": "find . -path \"./sr*sc\""}
{"input": "Search \"file1\" for lines matching regex patterns listed in \"file2\" and list the unique results (sorted alphabetically)", "output": "grep -f file2 file1 | sort -u"}
{"input": "Print the file type of the full path of \"rename\"", "output": "file $(readlink -f $(type -p rename))"}
{"input": "Find all 'test' directories in the current directory tree and remove them", "output": "find . -name test -type d -print0|xargs -0 rm -r --"}
{"input": "Search the current directory recursively for files with the exact permissions u=rwx,g=rx,o=rx", "output": "find . -perm u=rwx,g=rx,o=rx"}
{"input": "Count number of A records of domain '$domain' on nameserver '$server' and save value in 'result' variable", "output": "result=\"$(dig +short @\"$server\" \"$domain\" | wc -l)\""}
{"input": "run command \"command\" as user username with a full login simulation", "output": "su - username command"}
{"input": "Remove all files from the current directory tree whose names contain whitespaces", "output": "find . -name \"* *\" -exec rm -f {} \\;"}
{"input": "Find all \"G*.html\" files modified more than 7 days ago in the current directory tree", "output": "find . -mtime +7 -name \"G*.html\""}
{"input": "Counts total lines in PHP and JS files.", "output": "find . -name '*.js' -or -name '*.php' | xargs wc -l | grep 'total'  | awk '{ SUM += $1; print $1} END { print \"Total text lines in PHP and JS\",SUM }'"}
{"input": "Send SIGTERM signal to all python processes running script \"csp_build.py\"", "output": "kill $(pgrep 'python csp_build.py')"}
{"input": "Create a symbolic link named \"/lib/libc.so.0\" to \"/lib/libc.so.6\"", "output": "ln -s /lib/libc.so.6 /lib/libc.so.0"}
{"input": "Search the current directory and directories below for .sql files", "output": "find . -name \\*.sql"}
{"input": "Archive the directory structure under current directory into dirstructure.tar", "output": "find . -type d -print0 | tar cf dirstructure.tar --null --files-from - --no-recursion"}
{"input": "search for all the jpg files in the folder \"/mnt/hda1/zdjecia/test1/\" and copy these files to the folder  /mnt/hda1/test/<same name as the found file>", "output": "find /mnt/hda1/zdjecia/test1/ -iname \u201c*.jpg\u201d -type f -exec cp {} -rv /mnt/hda1/test{} \u2018;\u2019"}
{"input": "Change permissions to 755 for all subdirectories of the current directory", "output": "find . -type d -print | sed -e 's/^/\"/' -e 's/$/\"/' | xargs chmod 755"}
{"input": "find all the normal/regular files in /etc/sysconfig which have been accesses in the last 30 minutes", "output": "find /etc/sysconfig -amin -30 -type f"}
{"input": "Process all files matching pattern 'file*' and residing in the xargstest/ directory tree with script `myscript.sh'", "output": "find xargstest/ -name 'file*' -print0 | xargs -0 myscript.sh"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree", "output": "find . -type f | sed -e 's/.*\\.//' | sed -e 's/.*\\///' | sort -u"}
{"input": "find all the *.conf files under / (root) redirecting error messages to /dev/null", "output": "find / -name \"*.conf\" 2>>/dev/null"}
{"input": "Print the largest 20 files under current directory", "output": "find . -type f -printf '%k %p\\n' |sort -n |tail -n 20"}
{"input": "Make directory \"/etc/cron.15sec\"", "output": "mkdir /etc/cron.15sec"}
{"input": "Finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.", "output": "find . -name '*.js' -exec grep -i 'string to search for' {} \\; -print"}
{"input": "Search the 'tmp' directory for .mp3 files", "output": "find tmp -maxdepth 1 -name '*.mp3'"}
{"input": "print full path of relative filename", "output": "echo $(pwd)/$filename"}
{"input": "Print the date followed by the host name", "output": "echo `date` `hostname`"}
{"input": "Find all files named \"MyCProgam.c\" (ignoring the case) and calculate each file's md5sum.", "output": "find -iname \"MyCProgram.c\" -exec md5sum {} \\;"}
{"input": "Move files from $sourcePath to $destPath that have not been modified in the last 10 days", "output": "find $sourcePath -type f -mtime +10 -name \"*.log\" -exec mv {} $destPath \\;"}
{"input": "List the 10 largest files or directories and their sizes under (and including) \"/var\"", "output": "du -a /var | sort -n -r | head -n 10"}
{"input": "display all the files in the folder \"/dev\" which belong to the user \"peter\"", "output": "find /dev -user \"peter\" |more"}
{"input": "Print the IP address of your SSH session", "output": "who am i|awk '{ print $5}'"}
{"input": "find all files in the current directory and sub-directories that were accessed after modifying /etc/hosts", "output": "find -anewer /etc/hosts"}
{"input": "Set the 'verbose' shell option causing bash to print shell input lines as they are read", "output": "set -o verbose"}
{"input": "locate large files (> 100 MB) in /home/ for 'cleaning'", "output": "find /home -type f -size +100M -delete"}
{"input": "Search for \"whatever\" in all files under /dir directory ensuring white space safety in filenames", "output": "find /dir -type f -print0 | xargs -0i cat {} | grep whatever"}
{"input": "ERROR - Probably means -pgoDt (capital D)", "output": "sudo rsync -pgodt /home/ /newhome/"}
{"input": "Find all files/directories whose names start with 'readme' (case insensitive) under '/usr/share/doc' directory tree", "output": "find /usr/share/doc -iname readme\\*"}
{"input": "SSH into SERVER, execute \"command,\" and start up a login shell when it completes", "output": "ssh -t SERVER 'command; bash -l'"}
{"input": "Find files under /tmp that are larger than 10KB and smaller than 20KB", "output": "find /tmp -size +10k -size -20k"}
{"input": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"", "output": "find . -iname .svn -exec rm -rf {} \\;"}
{"input": "Find all regular files under and below /home/user/demo/", "output": "find /home/user/demo -type f -print"}
{"input": "Remove all CVS directories from the current directory tree", "output": "find . -name 'CVS' -type d -exec rm -rf {} \\;"}
{"input": "Find all the files whose permissions are 777", "output": "find . -type f -perm 0777 -print"}
{"input": "Remove all files last modified more than 10 days ago from the current directory tree", "output": "find . -mtime +10 | xargs rm"}
{"input": "find all the files in the /usr folder which have modification date less than or equal to the file \"/FirstFile\"", "output": "find /usr ! -newer /FirstFile -print"}
{"input": "Replace spaces with underscores in the names of all files and directories in the current directory tree", "output": "find . -depth -name '* *'  | while IFS= read -r f ; do mv -i \"$f\" \"$(dirname \"$f\")/$(basename \"$f\"|tr ' ' _)\" ; done"}
{"input": "Find all files/directories with '.mp4' extension and all regular files with '.flv' extension, sort them according to their names and display the first 500 of them", "output": "find /storage -name \"*.mp4\" -o -name \"*.flv\" -type f | sort | head -n500"}
{"input": "Split \"complete.out\" into files with at most \"$lines_per_file\" lines each", "output": "split --lines $lines_per_file complete.out"}
{"input": "List all .c and .h files in the current directory tree that contain \"thing\"", "output": "find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing"}
{"input": "List all environment variables containing 'USER' in their name or value that would result in running a command with 'sudo env'.", "output": "sudo env |grep USER"}
{"input": "Search the current directory tree for executable regular files", "output": "find . -executable -type f"}
{"input": "Create a symbolic link named \"/usr/local/bin/subl\" to \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\"", "output": "sudo ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl"}
{"input": "Print all business days in the current month without column titles", "output": "cal -h | cut -c 4-17 | tail -n +3"}
{"input": "change the permissions of al the directories in the current folder", "output": "sudo find . -type d -exec chmod 755 {} +"}
{"input": "Changes group ownership of '/home/www-user/php_user.sh'  to 'www-data'.", "output": "chgrp www-data /home/www-user/php_user.sh"}
{"input": "Search for line 111 in file \"active_record.rb\" with 2 lines of context", "output": "nl -ba  -nln  active_record.rb  | grep -C 2 '^111 '"}
{"input": "Reverse the space separated words in \"35 53 102 342\"", "output": "echo 35 53 102 342|tr ' ' '\\n'|tac|tr '\\n' ' '"}
{"input": "Change owner of \"folder\" to \"user_name\"", "output": "chown user_name folder"}
{"input": "Create an empty index.html in each directory under the current one, updating timestamps of already existing index.html files.", "output": "find . -type d -exec touch {}/index.html \\;"}
{"input": "Find all *.p[lm] files under /users/tom directory that matches both the regex '->get(' and '#hyphenate' in their contents", "output": "find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(' {} + | xargs grep -l '#hyphenate'"}
{"input": "find all configuration files in a folder", "output": "find /home/pat -iname \"*.conf\""}
{"input": "Recursively change owner to \"tomcat6\" of \"webapps\", \"temp\", \"logs\", \"work\", and \"conf\"", "output": "chown -R tomcat6 webapps temp logs work conf"}
{"input": "Find all *.swp files/directories under current directory", "output": "find . -name \"*.swp\""}
{"input": "find all the zip files in the current folder and create a tar ball of these zip files", "output": "find . -type f -name '*.zip' -print0 | xargs -0 tar -xzf"}
{"input": "Print whether \"$file\" and \"${file/${dir1}/${dir2}}\" differ", "output": "diff -q \"$file\" \"${file/${dir1}/${dir2}}\""}
{"input": "Search the /tmp directory tree for files owned by user `ian'", "output": "find /tmp -user ian"}
{"input": "Prints git log message with a custom time format string", "output": "date -d @$(git log -n1 --format=\"%at\") +%Y%m%d%H%M"}
{"input": "Set timestamp of old_file.dat to specified timestamp.", "output": "touch -t 200510071138 old_file.dat"}
{"input": "Shows state of 'globstar' shell option.", "output": "shopt globstar"}
{"input": "Join columns in \"file1\" and \"file2\" if their first field matches and format the output as a table", "output": "awk 'NR==FNR{m[$1]=$2\" \"$3; next} {print $0, m[$1]}' file2 file1 | column -t"}
{"input": "display all the jars in the current folder", "output": "find . -iname '*.jar'"}
{"input": "Find files/directories under '/dir' directory tree that are newer than 'yesterday.ref' file and older than 'today.ref' file by modification time", "output": "find /dir -newer yesterday.ref -a \\! -newer today.ref -print"}
{"input": "Find recursively all Python files in the current directory tree and count the number of lines in them", "output": "find . -name '*.py' | xargs wc -l"}
{"input": "Search the directory $path recursively for regular files with the given $extension", "output": "find $path -type f -name \"*.$extension\""}
{"input": "Find all regular files under current directory tree and replace all '1.2.3.4' with '5.6.7.8' in these files modiying the files in-place", "output": "find . -type f -exec sed -i \"s/1\\.2\\.3\\.4/5.6.7.8/g\" {} \\"}
{"input": "Read line from file descriptor 4 and store received input in 'line' variable", "output": "read -u 4 line"}
{"input": "Write standard input to standard output and to \"foobar.txt\"", "output": "tee foobar.txt"}
{"input": "Find all files under images directory", "output": "find images -type f"}
{"input": "Unzip and merge all \"small-*.gz\" files into files of 2000000 lines", "output": "zcat small-*.gz | split -d -l2000000 -a 3 - large_"}
{"input": "Set the environment variable \"DISPLAY\" to the system host name followed by \":0 skype\"", "output": "env DISPLAY=`hostname`:0 skype"}
{"input": "Print all file/directory names with white space safety under the /proc directory", "output": "find /proc -print0 | xargs -0"}
{"input": "Find the files in the current directory that match pattern '*.ISOLATE.*.txt' and move them to folder ./ISOLATE", "output": "find . -name '*.ISOLATE.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./ISOLATE"}
{"input": "Find all files/directories under current directory", "output": "find | xargs"}
{"input": "Change user ownership to `foo' for files with UID=1005", "output": "find / -user 1005 -exec chown -h foo {} \\;"}
{"input": "Find all files under current directory whose file type description contains \"image\", display only path to each file.", "output": "find . -type f -exec file {} \\; | awk -F: '{ if ($2 ~/[Ii]mage|EPS/) print $1}'"}
{"input": "Archive key.pub to directory .ssh in user's home directory on host specified by first parameter to function or script, using ssh to connect on port specified by second parameter to function or script, compress data during transmission.", "output": "rsync -avz --rsh=\"ssh -p$2\" key.pub $1:~/.ssh/key.pub"}
{"input": "Find all the files/directories in the current directory tree which have been modified between 2014-08-25 and 2014-08-26", "output": "find ./ -newermt 2014-08-25 ! -newermt 2014-08-26 -print"}
{"input": "Read lookup requests from text file '1.txt' and uses them to fetch TXT records.", "output": "dig TXT -f 1.txt"}
{"input": "sleep for 1 second", "output": "sleep 1"}
{"input": "List largest 200 files over 1,000,000 bytes in the filesystem mounted at \"/usr/pcapps\"", "output": "find /usr/pcapps/ -mount -type f -size +1000000c | perl -lpe ' s{ }{\\\\ }g ' | xargs ls -l | sort +4nr | head -200"}
{"input": "Get domain name of $ip and save it to the variable 'reverse'", "output": "reverse=$(dig -x $ip +short)"}
{"input": "Search in current directory downwards all files whose owner is aa1 and grop is grp .", "output": "find .  \\( -user aa1 - group grp \\) -print"}
{"input": "Find all empty files starting from the current directory and delete them", "output": "find . -type f -empty -delete"}
{"input": "Find the total size of *.jpg files within the current directory tree", "output": "find . -type f -iname '*.jpg' -print0 | du -c --files0-from=-"}
{"input": "delete all the log files in the current folder", "output": "find -name '*.log' -delete"}
{"input": "Remove trailing spaces from the output of 'hg st -R \"$path\"' and save the result in variable \"var\"", "output": "var=`hg st -R \"$path\" | sed -e 's/  *$//'`"}
{"input": "as root, find from / all files called \"file.txt\"", "output": "sudo find / -name file.txt"}
{"input": "find C, C++ source and header files in current folder and create etags for them", "output": "find . -type f ( -iname '.cpp' -o -iname '.hpp' -o -iname '.c' -o -iname '.h' -o -iname '.cc' -o -iname '.hh' ) -print | xargs etags -a"}
{"input": "Prints Kb size of all top-level files and folders in a current folder in descending order.", "output": "du -ks * | sort -n -r"}
{"input": "Change the owner of \"destination_dir\" to \"user\"", "output": "chown user destination_dir"}
{"input": "Run \"ps -elfc\" followed by \"ls\" on host \"example.com\"", "output": "ssh example.com \"ps -elfc; ls\""}
{"input": "Display permissions, user, group, and full path for each file in the current directory tree", "output": "tree -p -u -g -f"}
{"input": "Print second section of space-separated data coming from stdin.", "output": "cut -d\\  -f 2"}
{"input": "Creates temporary file and saves path to it in 'fif2' variable.", "output": "fif2=$(mktemp -u)"}
{"input": "Make sure the file \".bash_profile\" exists in current directory, update its timestamp to current date/time.", "output": "touch .bash_profile"}
{"input": "display all the text files in the current folder", "output": "find -name \u201c*.txt\u201d"}
{"input": "Find all files/directories named 'foo.rb' under current directory tree", "output": "find . -name foo.rb"}
{"input": "Displays Homebrew\u2019s install path.", "output": "brew --prefix"}
{"input": "Determine DISPLAY variable for the session when logged in via SSH", "output": "who am i | awk '{print $5}' | sed 's/[()]//g' | cut -f1 -d \".\" | sed 's/-/./g'"}
{"input": "Serves minimal HTTP response with netcat", "output": "while true ; do nc -l -p 1500 -c 'echo -e \"HTTP/1.1 200 OK\\n\\n $(date)\"'; done"}
{"input": "Find directories in /home/vmail that match pathname \"*/*/Maildir/.LearnAsSpam/new\", and move them to folder .Junk/new", "output": "find /home/vmail/ -type d -path \"*/*/Maildir/.LearnAsSpam/new\" -exec sh -c '(cd {} && mv ./* ../../.Junk/new)' ';'"}
{"input": "Saves location of file $1 in 'dir_context' variable.", "output": "dir_context=$(dirname -- \"$1\")"}
{"input": "Decompress 'file.gz' to standard output and execute the output in bash", "output": "gzip -d --stdout file.gz | bash"}
{"input": "update the permissions of the directories in the folder folder_name to 775", "output": "find folder_name -type d -exec chmod 775 \u2018{}\u2019 \\;"}
{"input": "Find all *.foo files under current directory and print their contents", "output": "find . -name '*.foo' -exec cat {} +"}
{"input": "Find x* files/directories under current directory whose status was changed less than 1 day ago and move them to /tmp/other", "output": "find . -name \"x*\" -print0 | strace xargs -0 -I '{}' mv '{}' /tmp/other"}
{"input": "Print unique lines of \"second-file-sorted.txt\" compared to \"first-file-sorted.txt\"", "output": "comm -23 second-file-sorted.txt first-file-sorted.txt"}
{"input": "Find all *.[ch] files under current directory", "output": "find . -name '*.[ch]'"}
{"input": "Create symlinks to all  /home/folder1/*.txt files and 'folder2_' directory with the same name in a target directory named '+'", "output": "find /home/folder1/*.txt -type f -exec ln -s {} \"folder2_\" + \\;"}
{"input": "Sort file.txt ignoring the last 10 characters of each line.", "output": "sort file.txt | rev | uniq -f 10 | rev"}
{"input": "Delete all files named 'Waldo' under ~/Books directory tree where '~' expands to user's home directory", "output": "find ~/Books -type f -name Waldo -exec rm {} \\;"}
{"input": "Delete the line containing \"start\" plus the next 4 lines from standard input", "output": "sed '/start/,+4d'"}
{"input": "Print output of command \"stdbuf -o 0 ./a\" to standard output and \"output.txt\"", "output": "stdbuf -o 0 ./a | tee output.txt"}
{"input": "loop over the results of a find command", "output": "find . -type f -name '*.*' -print0 | while IFS= read -r -d '' file; do     printf '%s\\n' \"$file\" done"}
{"input": "Print \"operator: \" followed by the full name of \"${USER}\"", "output": "printf \"operator: `finger ${USER} | grep Name: | cut -f3 -d:` \\n\""}
{"input": "search for the directory \"mysql\" in the /etc folder", "output": "find /etc -name mysql -type d"}
{"input": "create directory /path/to/destination", "output": "mkdir /path/to/destination"}
{"input": "Print the last space separated word from \"Your string here\"", "output": "echo \"Your string here\"| tr ' ' '\\n' | tail -n1"}
{"input": "Find all empty files in the current directory and delete them", "output": "find . -empty -maxdepth 1 -exec rm {} \\;"}
{"input": "Find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$' in their names with locale set to default C locale", "output": "LC_ALL=C find . -regextype posix-egrep -regex '^.*/[a-z][^/]*$' -type f"}
{"input": "List all files in the current directory tree that were modified 60 minutes ago", "output": "find -mmin 60"}
{"input": "Remove all .txt files in and below the current directory", "output": "find . -name \"*.txt\" -exec rm {} +"}
{"input": "Write standard output of \"command\" to console and append to \"stdout.log\", and write standard error of \"command\" to console and append to \"stderr.log\"", "output": "command > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)"}
{"input": "Delete all 1US* (case insensitive) files under current directory", "output": "find . -iname \"1US*\" -exec rm {} \\;"}
{"input": "force delete all the files that have been modified in the last 3 days", "output": "find . -mtime -3 -exec rm -rf {} \\;"}
{"input": "Create a new window in an existing screen session and run a script", "output": "screen -S demo -p 1 -X screen '/home/aa/scripts/outputs.sh'"}
{"input": "Find and display contents of somefile.cf in a Weblogic domain directory", "output": "find $(/usr/ucb/ps auwwx | grep weblogic | tr ' ' '\\n' | grep security.policy | grep domain | awk -F'=' '{print $2}' | sed -e 's/weblogic.policy//' -e 's/security\\///' -e 's/dep\\///' | awk -F'/' '{print \"/\"$2\"/\"$3\"/\"$4\"/somefile.cf\"}' | sort | uniq) 2> /dev/null -exec ls {} \\; -exec cat {} \\;"}
{"input": "Copy \"some_file_name\" to \"destination_directory\" and change ownership to \"someuser:somegroup\"", "output": "echo 'some_file_name' | cpio -p --owner someuser:somegroup destination_directory"}
{"input": "Update the timestamp of '/tmp/$$' to the current month and day", "output": "touch -t `date +%m%d0000` /tmp/$$"}
{"input": "Search the *.cc files in the current directory tree for string \"xxx\"", "output": "find . -name \"*.cc\" -print -exec grep \"xxx\" {} \\;"}
{"input": "Find List of directory  with non-zero file count", "output": "find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find \"$dir\" -type f | wc -l); if [ $n -gt 0 ]; then printf \"%4d : %s\\n\" $n \"$dir\"; fi; done"}
{"input": "Concatenate files containing `test' in their names", "output": "find . -name '*test*' -exec cat {} \\;"}
{"input": "Search for \"largecalculation\" in all processes owned by the current user", "output": "ps -u `whoami` | grep largecalculation"}
{"input": "Archive file 'file' with bzip2 tool, store compressed data to a file 'logfile' and also print to screen", "output": "bzip2 -c file | tee -a logfile"}
{"input": "find all the files with the name september ( case insensitive )", "output": "find -iname september"}
{"input": "Make a directory in the current working directory with a random 32 alphanumeric character name", "output": "mkdir $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"}
{"input": "Look for *.jpg files on the system", "output": "find / -name \u201c*.jpg\u201d"}
{"input": "Split \"randn20M.csv\" into files of at most 5000000 lines each with prefix \"_tmp\"", "output": "split -l5000000 randn20M.csv '_tmp';"}
{"input": "Find all *FooBar* files/directories under current directory and copy them to ~/foo/bar", "output": "find . -name '*FoooBar*' | sed 's/.*/\"&\"/' | xargs cp ~/foo/bar"}
{"input": "Finds more than 5 days old files in two directories  and compresses them.", "output": "find /home/folder1 /home/folder2 -type f -mtime +5 -exec compress {} \\;"}
{"input": "find *.txt files in the current directory and sub-directories", "output": "find -name \"*.txt\" 2>>/dev/null"}
{"input": "set alias \"unix\" for command \"date +%s\"", "output": "alias unix=\"date +%s\""}
{"input": "Display the first 10 lines of the byte hex dump with no file offset data for \"/bin/ls\"", "output": "od -t x1 -An /bin/ls | head"}
{"input": "Delete all files under $DESTINATION directory tree that were modified more than 7 days ago", "output": "find $DESTINATION -mtime +7 -exec rm {} \\;"}
{"input": "Examines the path expanded by variable $FILENAME to see if it is a symlink and if so, sets SOURCE_DIR to the location of the link itself.", "output": "ls -l $FILENAME | grep -q ^l && SOURCE_DIR=$(ls -l $FILENAME | awk '{print $NF}');"}
{"input": "Hash hostnames in user's known hosts file.", "output": "ssh-keygen -Hf ~/.ssh/known_hosts"}
{"input": "Prints calendar for a current month, replacing current data with asterisk.", "output": "cal -h|sed -r \"s/\\b$(date|cut -d' ' -f3)\\b/*/\""}
{"input": "find non-hidden files (ones that do not start with the period \".\" chartacter) that were are modified in the last 15 minutes.", "output": "find . -mmin -15 \\( ! -regex \".*/\\..*\" \\)"}
{"input": "Remount \"/mnt/mountpoint\" as read only", "output": "mount /mnt/mountpoint -oremount,ro"}
{"input": "create a compressed archive excluding the directories containing \"exclude.tag\"", "output": "tar -czf backup.tar.gz --exclude-tag-all=exclude.tag /path/to/backup"}
{"input": "Move all files in the current directory tree that match \"some_pattern\" to \"target_location\"", "output": "find . -name some_pattern -print0 | xargs -0 -I % mv % target_location"}
{"input": "find regular file named foo.txt under root / directory.", "output": "find / -name foo.txt -type f -print"}
{"input": "Kill all processes matching the string \"myProcessName\"", "output": "ps -ef | grep myProcessName | grep -v grep | awk '{print $2}' | xargs kill -9"}
{"input": "Search for \"ifconfig\" in the output of \"history\" and print 5 lines that precede and follow", "output": "history | grep -C 5 ifconfig"}
{"input": "Search the *.c files residing in the current directory tree for string \"blash\"", "output": "find . -name *.c -exec grep -n -e blash {} \\;"}
{"input": "Counts all files in a current folder and subfolders.", "output": "find . -type f | wc -l"}
{"input": "List all *.java files/directories under /home/bluher with their full paths", "output": "find /home/bluher -name \\*.java"}
{"input": "Remove files in the current directory tree modified more than 31 days ago recursively", "output": "find . -type f -mtime +31 -print0 | xargs -0 -r rm -f"}
{"input": "Display differences between directories dir1 and dir2.", "output": "diff -r dir1 dir2"}
{"input": "Find all *.mp3 files in file system with more than 10MB and delete them using rm command", "output": "find / -type f -name *.mp3 -size +10M -exec rm {} \\;"}
{"input": "Open executable file for command \"rails\" in text editor \"mate\"", "output": "mate `which rails`"}
{"input": "Print the UID of the owner, GID of the group, the permission bits and the path into /tmp/dir1.txt for all files/directories under /path/to/dir1", "output": "find /path/to/dir1 -printf \"%U %G %m %p\\n\" > /tmp/dir1.txt"}
{"input": "archive all the normal/regular files in the current directory which have been modified in the last 24 hours.", "output": "find . -mtime -1 -type f -exec tar rvf \"$archive.tar\" '{}' \\;"}
{"input": "Search the current directory tree for files whose names begin with 'my'", "output": "find . -name 'my*'"}
{"input": "Remove all vmware-*.log files/directories under current directory", "output": "find . -name vmware-*.log | xargs -i rm -rf {}"}
{"input": "Prints folder path where $mystring file is located.", "output": "echo dirname: $(dirname $mystring)"}
{"input": "Print all filenames in /usr/src except for those that are of the form '*,v' or '.*,v'", "output": "find /usr/src -not \\( -name \"*,v\" -o -name \".*,v\" \\) '{}' \\; -print"}
{"input": "Change the file extension from '.txt' to '.bak' for all files/directories under current directory tree", "output": "find . -name \"*.txt\" | sed \"s/\\.txt$//\" | xargs -i echo mv {}.txt {}.bak | sh"}
{"input": "count the lines of java code for all the java files in the current directory", "output": "find . -name \"*.java\" -print0 | xargs -0 wc"}
{"input": "Find files in the current directory tree whose pathnames contain \"sub\"", "output": "find ./ | grep \"sub\""}
{"input": "Send SIGTERM signal to the first process whose command matches \"csp_build\"", "output": "ps aux | grep 'python csp_build.py' | head -1 | cut -d \" \" -f 2 | xargs kill"}
{"input": "Execute 'bash -c \"python -m unittest discover |& pyrg\"' every second and display with color support", "output": "watch -n 1 --color 'bash -c \"python -m unittest discover |& pyrg\"'"}
{"input": "Counts number of processors and saves in variable NUMCPU.", "output": "NUMCPU=$(grep $'^processor\\t*:' /proc/cpuinfo |wc -l)"}
{"input": "Extract the contents of \"Input.txt.gz\", list the unique first comma separated field prefixed by the number of occurrences", "output": "zcat Input.txt.gz | cut -d , -f 1 | sort | uniq -c"}
{"input": "List all files under and below the directory given as variable $ARCH1", "output": "find $ARCH1 -ls"}
{"input": "Search the current directory tree for regular files whose names end with \"keep.${SUFFIX}\", where $SUFFIX is a shell variable", "output": "find . -type f -name \"*keep.${SUFFIX}\""}
{"input": "Print \"a\\nb\\ncccccccccccc\\nd\" as two columns and neatly format into a table", "output": "echo -e \"a\\nb\\ncccccccccccc\\nd\" | paste - - | column -t"}
{"input": "change cgi files to mode 755 under htdocs or cgi-bin directories", "output": "find htdocs cgi-bin -name \"*.cgi\" -type f -exec chmod 755 {} \\;"}
{"input": "Finds total lines count of all *.php files in a current folder and subfolders.", "output": "( find ./ -name '*.php' -print0 | xargs -0 cat ) | wc -l"}
{"input": "Print the file content of command \"f\"", "output": "cat `which f`"}
{"input": "Print 'Empty dir' if $some_dir is empty, otherwise print 'Dir is NOT empty'", "output": "if find \"`echo \"$some_dir\"`\" -maxdepth 0 -empty | read v; then echo \"Empty dir\"; else \"Dir is NOT empty\" fi"}
{"input": "Force delete all files in the current folder", "output": "find . | xargs -i rm -f \"{}\""}
{"input": "find all the files in the file system which are bigger than 3 bytes", "output": "find / -size +3 -print"}
{"input": "find all js files under the build direcotry except build/external and build/log directory.", "output": "find build -not \\( -path build/external -prune \\) -not \\( -path build/blog -prune \\) -name \\*.js"}
{"input": "Print info about thread number of process with pid 1", "output": "cat /proc/1/sched  | head -n 1"}
{"input": "recursively change owner and group of the directory  /vol/html and all files into it to user ec2-user and group apache", "output": "sudo chown -R ec2-user:apache /vol/html"}
{"input": "Set timestamp of all PHP files in current directory to date specified.", "output": "touch -d '30 August 2013' *.php"}
{"input": "Find all files matching the pattern \"${pattern}\" in their name and execute ${my_command} for each of them with the file path as argument", "output": "find ${directory} -name \"${pattern}\" -print0 | xargs -0 ${my_command}"}
{"input": "Calculate the md5 sum of the output of \"du -csxb /path\" and compare it against the md5 sum saved in \"file\"", "output": "du -csxb /path | md5sum -c file"}
{"input": "Archive all files/directories under data/ into archive.tar", "output": "find data/ -print0 | tar -T - --null --create -f archive.tar"}
{"input": "Delete all empty files/directories under test directory", "output": "find test -depth -empty -delete"}
{"input": "change the permissions of all the files ending with \"fits\" in the folder \"/store/01\" and save the output file names to a log file", "output": "find /store/01 -name \"*.fits\" -exec chmod -x+r {} \\; -exec ls -l {} \\; | tee ALL_FILES.LOG"}
{"input": "keep only read access to all the files in a directory.", "output": "find /path/to/dir ! -perm 0644 -exec chmod 0644 {} \\;"}
{"input": "Show manual page for the find utility", "output": "man find"}
{"input": "Check the syntax of all PHP files under the current directory", "output": "find . -type f -name \"*.php\" -exec php -l {} \\;"}
{"input": "Print the full name of \"$USER\"", "output": "finger $USER |head -n1 |cut -d : -f3"}
{"input": "Remove all files named \"filename\" from the current directory tree, ignoring directory \"FOLDER1\"", "output": "find . -name FOLDER1 -prune -o -name filename -delete"}
{"input": "Print numbers from 1 to 30 with equalized 0 padding", "output": "seq -w 30"}
{"input": "search for all the files in the current folder and sort them in the order of their depth and display the file names", "output": "find -type d -printf '%d\\t%P\\n' | sort -r -nk1 | cut -f2-"}
{"input": "Find all files/directories under '/usr/share/doc' directory tree that contain 'readme' (case insensitive) at the beginning of their names", "output": "find /usr/share/doc -iname readme\\*"}
{"input": "find all files in current folder having the name pattern \"some_pattern\" and move them to target_location (BSD VERSION)", "output": "find . -name some_pattern -print0 | xargs -0 -J % mv % target_location"}
{"input": "Find all files that were modified later than ordinary_file in the current directory and its sub-directories.", "output": "find -newer ordinary_file"}
{"input": "find all regex  '\\./[a-f0-9\\-]\\{36\\}\\.jpg' files", "output": "find . -regex '\\./[a-f0-9\\-]\\{36\\}\\.jpg'"}
{"input": "display all the jpg files in the current folder which belong to the user nobody", "output": "find . -name *.jpg -user nobody"}
{"input": "Returns exit code 1 and terminates shell if 'set -e' was applied.", "output": "a=$(false)"}
{"input": "remove all the \".core\" files in the file system", "output": "find / -name \"*.core\" | xargs rm"}
{"input": "download contents from  \"http://url\" using a proxy server", "output": "curl -x http://proxy_server:proxy_port --proxy-user username:password -L http://url"}
{"input": "Look for all files whose names match pattern 'my*'", "output": "find / -name 'my*'"}
{"input": "Search the files from the current directory tree for \"chrome\"", "output": "find . -exec grep chrome {} +"}
{"input": "Archive all *.1 files/directories to each filename.tgz files and remove the original source", "output": "find *.1  -exec tar czf '{}.tgz' '{}' --remove-files \\;"}
{"input": "Print the lines of file \"strings\" not specified in file \"index\"", "output": "join -v 2 index <(nl strings)"}
{"input": "find all the files in the current directory and sub-directories whose status was changed after /etc/fstab was modified", "output": "find -cnewer /etc/fstab"}
{"input": "Find all *.mov (case insensitive) files under current directory and list their paths with their names", "output": "find . -iname \"*.mov\" -printf \"%p %f\\n\""}
{"input": "display all the files having the word \"searched phrasse\" in their name in the current folder excluding those from the paths \"/tmp/\" and \"./var/log\"", "output": "find . -type f -name \"*searched phrasse*\" ! -path \"./tmp/*\" ! -path \"./var/log/*\""}
{"input": "Read a line from standard input into variable \"REPLY\" with prompt \"Press [Enter] key to release lock...\"", "output": "read -p \"Press [Enter] key to release lock...\""}
{"input": "Change directory to the current user's home directory", "output": "cd /home/`whoami`"}
{"input": "Find files starting with the word \"file\" in the current directory tree, ignoring the case", "output": "find . -iname \"file*\""}
{"input": "Sorts content of the $tmp file and filters out all strings with ':0'.", "output": "sort $tmp | grep -v ':0'  #... handle as required"}
{"input": "Remove trailing white spaces from all *.py files under dir directory (ignoring .git path) and keep backups of the originals", "output": "find dir -not -path '.git' -iname '*.py' -print0 | xargs -0 sed --in-place=.bak 's/[[:space:]]*$//'."}
{"input": "Delete all regular files with inode number 314167125 under current directory tree", "output": "find . -type f -inum 314167125 -delete"}
{"input": "Find all *.txt files under the current directory whose names are not \"File.txt\"", "output": "find . -maxdepth 1 -type f -regex '.*\\.txt' -not -name File.txt"}
{"input": "Delete all regular files with '.txt' extension that were modified in more than 25 minutes ago in maximum 1 level down the directory '/home/u20806/public_html'", "output": "find /home/u20806/public_html -daystart -maxdepth 1 -mmin +25 -type f -name \"*.txt\" \\ -exec rm -f {} \\;"}
{"input": "find all the files ending with \"rb\" and display the first 10000 lines from these files.", "output": "find . -name \"*rb\" -print0 | xargs -0 head -10000"}
{"input": "Copies file 'fileName.txt' to each of directories listed in the 'allFolders.txt' list.", "output": "cat allFolders.txt | xargs -n 1 cp fileName.txt"}
{"input": "Prints strings with text \"texthere\" in all files recursively in a current folder.", "output": "grep -r \"texthere\" ."}
{"input": "set alias \"prettyjson\" for command 'python -m json.tool'", "output": "alias prettyjson='python -m json.tool'"}
{"input": "display all regular/normal files in temp folder and display the filename along with file size", "output": "find tmp -type f -printf \"f %s %p\\n\""}
{"input": "Mount partition with label \"WHITE\" on \"/mnt/WHITE\" with read and write permission and have it accessible by user and group \"test\"", "output": "mount -L WHITE /mnt/WHITE -o rw,uid=test,gid=test"}
{"input": "Constantly write \"y\" to backingfile as a background process", "output": "yes > backingfile &"}
{"input": "Print the sorted unique column of usernames of users who are currently logged in", "output": "finger | cut -d ' ' -f1 | sort -u"}
{"input": "Print 1000 astarisk ('*')", "output": "head -c 1000 /dev/zero | tr '\\0' '*'"}
{"input": "Find a directory named 'project.images' in the entire filesystem", "output": "find  / -type d -name \"project.images\""}
{"input": "List all regular files in the current directory tree", "output": "find . -type f | xargs ls -l"}
{"input": "Replace the text 'Windows' with 'Linux' in all text files in the current directory and below", "output": "find -type f -name '*.txt' -print0 | xargs --null perl -pi -e 's/Windows/Linux/'"}
{"input": "Print a list of regular files from directory tree sort_test/ sorted with LC_COLLATE=en_US.UTF-8", "output": "find sort_test -type f | env -i LC_COLLATE=en_US.UTF-8 sort"}
{"input": "Find all files with the SUID bit set", "output": "find / -perm -u+s"}
{"input": "Displays process tree of a process with id 'PID', showing parent process and processes id.", "output": "pstree -p -s PID"}
{"input": "Archive all files beginning with .env or .bash in current directory to user's home directory on host \"app1\", preserving timestamps and skipping files that are newer on \"app1\"", "output": "rsync -vaut ~/.env* ~/.bash* app1:"}
{"input": "Search for file \"file\" with minimum depth set to 4", "output": "find -mindepth 4 -name file"}
{"input": "Find all executable files under current directory and reverse sort them", "output": "find . -perm -111 -type f | sort -r"}
{"input": "List all .jpg files in the home directory tree in a fast way", "output": "find . -name \"*.jpg\" -exec ls {} +"}
{"input": "List absolute path of files in the current directory", "output": "ls -1 | xargs readlink -f"}
{"input": "Find all files/directories named 'openssl' under current directory tree without printing 'Permission denied' error messages", "output": "find . -name \"openssl\" | sed '/Permission denied/d;'"}
{"input": "Creates temporary file with name formatted like expression in variable ${PROG}, and saves path to it in 'mytemp' variable.", "output": "mytemp=\"$(mktemp -t \"${PROG}\")\""}
{"input": "Print every found file like '*.cfg' under '/path/to/files/' directory followed by its content, and wait 2 seconds after each printed file", "output": "find /path/to/files -type f -name \\*.cfg  -print -exec cat {} \\; -exec sleep 2 \\;"}
{"input": "Save the percentage of packets lost of the 5 packets sent to \"$host\" in variable \"packet_loss\"", "output": "packet_loss=$(ping -c 5 -q $host | grep -oP '\\d+(?=% packet loss)')"}
{"input": "Search the system for the regular file 'myfile' ignoring permission denied errors", "output": "find / -name myfile -type f -print 2> /dev/null"}
{"input": "Attempt to connect as root via ssh to host \"IP\" and copy /root/K to local machine, passing option \"StrictHostKeyChecking=no\" to the ssh backend - this will normally fail because ssh servers by default don't (and shouldn't) accept root logins.", "output": "scp -o StrictHostKeyChecking=no root@IP:/root/K"}
{"input": "Delete files containing whitespaces without recursion", "output": "find . -name '*[+{;\"\\\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \\;"}
{"input": "Find files with 002 permission under /tmp and print them with the string 'Found world write permissions:' printed as the first line of output or print 'No world writable found' if no such files were found", "output": "find /tmp -type f -perm -002 | awk -- '1{print \"Found world write permissions:\";print};END{if(NR==0)print \"No world writable found.\"}'"}
{"input": "find all the file that have been modified exactly 3 days ago ( considers day starting not 24 hours )", "output": "find ./ -daystart -mtime -3"}
{"input": "Find all 0644 permission files/directories under current directory tree and show only the first 10 of them", "output": "find . -perm 0644 | head"}
{"input": "Find all *.so files/directories under current directory and run myCommand with the file/directory paths as its argument, then search for ExpectedResult in the output", "output": "find . -name *.so -print0 | xargs -0 myCommand | grep ExpectedResult"}
{"input": "display a list of all the normal/regular files in the file system ,excluding the folder proc which have the suid or sgid bit set", "output": "find / -path /proc -prune -o -type f -perm +6000 -ls"}
{"input": "change the word \"GHBAG\" to \"stream-agg\" in all the file names in current folder which have the word \"-GHBAG-\" in their name", "output": "find . -name '*-GHBAG-*' -exec bash -c 'mv $0 ${0/GHBAG/stream-agg}' {} \\;"}
{"input": "search for the word \"redeem reward\" in all the regular/normal files in the current folder", "output": "find . -type f -exec grep -i \u201credeem reward\u201d {} \\; -print"}
{"input": "Find the sizes of only directories under current directory sorted by size and redirect the output to dir-sizes.txt", "output": "find . -type d -print0 | xargs -0 -n1 du -sk | sort -rn > dir-sizes.txt&"}
{"input": "Searches through the htdocs and cgi-bin directories for files that end with the extension .cgi. When these files are found, their permission is changed to mode 755 (rwxr-xr-x).", "output": "find htdocs cgi-bin -name \"*.cgi\" -type f -exec chmod 755 {} \\;"}
{"input": "find all the text files in the folder /home/calvin and do not search beyond 2 levels", "output": "find /home/calvin/ -maxdepth 2  -name \u201c*.txt\u201d"}
{"input": "Make directories to \"/my/other/path/here\" as needed", "output": "mkdir -p /my/other/path/here"}
{"input": "Change permissions of all files ending \".php\" under the current directory to 755 and print a count of modified files", "output": "find . -name \"*.php\" -exec chmod 755 {} + -printf '.' | wc -c"}
{"input": "display the count of all normal/regular files in current directory", "output": "find . -type f | wc -l"}
{"input": "List all aliencoders.[0-9]+ files/directories under /home/jassi/ directory", "output": "find /home/jassi/ -name \"aliencoders.[0-9]+\" 2>&1 | xargs ls -lrt | awk '{print $9}'"}
{"input": "Find the first file/directory under current directory and quit", "output": "find . ... -print -quit"}
{"input": "Print all filenames under /proc and below", "output": "find /proc -exec ls '{}' \\;"}
{"input": "Find all files under /home/username/public_html/modules  and set their permission to 640", "output": "find /home/username/public_html/modules -type f -exec chmod 640 {} +"}
{"input": "Creates temporary folder and saves path to it in 'td' variable.", "output": "td=$( mktemp -d )"}
{"input": "Move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory", "output": "find /path/to/folders/* -type d  -exec mv {} {}.mbox \\; -exec mkdir {}.mbox/Messages \\; -exec sh -c \"mv {}.mbox/*.emlx {}.mbox/Messages\" \\;"}
{"input": "Find all files/directories named 'Desktop' under current directory", "output": "find ./ -name Desktop"}
{"input": "Open gcc info manual and select \"option index\" menu entry.", "output": "info gcc \"option index\""}
{"input": "Search the current directory tree for regular files omitting directory `omit-directory'", "output": "find . \\( -name omit-directory -prune \\) -o \\( -type f -print \\)"}
{"input": "Login to a bash shell on localhost via ssh and print the bash version", "output": "echo 'echo \"Bash version: ${BASH_VERSION}\"' | ssh -q localhost bash"}
{"input": "Execute \"myfile\" on all .ogv files from the current directory tree", "output": "find ./ -name *.ogv -exec myfile {} \\;"}
{"input": "Find all files named 'new' under current directory tree and display their contents", "output": "find . -name new -print -exec cat {} +"}
{"input": "Save the absolute path of \"$path\" to variable \"full_path\"", "output": "full_path=`readlink -fn -- $path`"}
{"input": "Search for all files with either \"sitesearch\" or \"demo\" in their path names", "output": "find . -iregex '.*sitesearch.*' -iregex '.*demo.*'"}
{"input": "Find all files/directories with space in their names under  /tmp/ directory and rename them by replacing all spaces with _", "output": "find /tmp/ -depth -name \"* *\" -execdir rename \" \" \"_\" \"{}\" \";\""}
{"input": "display all the regular/normal files in the current directory which are atleast 2 levels deep", "output": "find . -mindepth 2 -type f"}
{"input": "Find files whose name starts with \"MyFile\", ignoring the case", "output": "find . -iname 'MyFile*'"}
{"input": "File 'save_pid.txt' contains a process ID, instantly kill this process with SIGKILL signal.", "output": "kill -9 `cat save_pid.txt`"}
{"input": "kill all jobs", "output": "kill $(jobs -p)"}
{"input": "Archive a file named '{}' (literal) residing in current directory  into  '{}.tar.gz' and save it inside /var/www/", "output": "find /var/www/* -type d -print | tar -zcpvf {}.tar.gz -C /var/www/ --files-from - {} \\;"}
{"input": "Print relative path of device of disk with UUID \"b928a862-6b3c-45a8-82fe-8f1db2863be3\"", "output": "readlink /dev/disk/by-uuid/b928a862-6b3c-45a8-82fe-8f1db2863be3"}
{"input": "Find files with inode number 199053", "output": "find / -inum 199053"}
{"input": "change owner of the file process to user root", "output": "sudo chown root process"}
{"input": "Display the 5 largest files in the current directory and its sub-directories.", "output": "find . -type f -exec ls -s {} \\; | sort -n -r | head -5"}
{"input": "Find files in the current directory tree whose names are of the form \"cxx_data.txt\" where xx is a number from 30 to 70", "output": "find . -regextype posix-egrep -regex '.\\*c([3-6][0-9]|70).\\*'"}
{"input": "Read a line from standard input into variable \"message\" with escaped prompt \"\\nPlease Enter\\na Message: '\"", "output": "read -p \"`echo -e '\\nPlease Enter\\na Message: '`\" message"}
{"input": "Make directories \"$@\" and replace \"mkdir: created directory \" with \"$USER created folder \" in the output", "output": "mkdir \"$@\" |sed -e\"s/mkdir: created directory /$USER created folder /\""}
{"input": "Merge content of decompressed files \"$part0\", \"$part1\", and so on", "output": "sort -m <(zcat $part0 | sort) <(zcat $part1 | sort) ..."}
{"input": "find all the \".flac\" files in the current folder and convert them to mp3 with 128k bit rate", "output": "find -name \"*.flac\" -exec ffmpeg -i {} -acodec libmp3lame -ab 128k {}.mp3 \\;"}
{"input": "Execute \"lynx -dump http://dslrouter/stats.html\" every 10 seconds", "output": "watch --interval=10 lynx -dump http://dslrouter/stats.html"}
{"input": "Disables shell option 'nullglob'.", "output": "shopt -u nullglob"}
{"input": "Read a line from standard input into variable \"a\" without backslash escapes", "output": "read -r a"}
{"input": "Find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play", "output": "find /tmp/ -ctime -1 -name \"x*\" | xargs -I '{}' mv '{}' ~/play/"}
{"input": "Find all files and directories starting from the current directory", "output": "find ."}
{"input": "Find files ending in \"*macs\"", "output": "find -name '*macs'"}
{"input": "Find all first occurrences of directories named '.texturedata' under '/path/to/look/in' directory tree", "output": "find /path/to/look/in/ -type d -name '.texturedata' -prune"}
{"input": "Display the last slash-separated part of each filename path in file.txt", "output": "rev file.txt | cut -d/ -f1 | rev"}
{"input": "Finds the folder where temporary files would be written to, and save path to it in a 'TMPDIR' variable.", "output": "TMPDIR=`dirname $(mktemp -u -t tmp.XXXXXXXXXX)`"}
{"input": "Find all *.m4a files/directories under /home/family/Music directory", "output": "find /home/family/Music -name *.m4a -print0"}
{"input": "Find all orm.* files/directories under current directory", "output": "find . -name \"orm.*\""}
{"input": "display long listing of all files in the current directory whose size is 24 or 25 bytes (doesnt display inode information) .", "output": "find . -size -26c -size +23c -exec ls -l '{}' \\;"}
{"input": "find regular files whose filename is \"your_pattern\" and display the total size of the files in human readable format.", "output": "find . -type f  -name \"your_pattern\" -exec du -ch {} + 2>/dev/null | grep total$."}
{"input": "search for a word in all the files in the current directory and display the file paths relative to the current directory", "output": "find . -exec grep -l foo {} +"}
{"input": "Find all files/directories under /path/to/dir/* paths and print the timestamp in YmdHMS format along with their paths and object of symlinks", "output": "find /path/to/dir/* -printf \"%TY%Tm%Td%TH%TM%TS|%p|%l\\n\""}
{"input": "Find all files/directories named orm.properties under  /eserver6 directory", "output": "find /eserver6 -name \"orm.properties\""}
{"input": "Find all files that were not accessed in the past 100 days", "output": "find /home -atime +100"}
{"input": "Concatenate all .txt files residing in the current directory tree", "output": "find . -name '*.txt' -not -name \"all.txt\" | xargs cat > all.txt"}
{"input": "display all files in the current folder ($@ contains the variables passed as argument to the function)", "output": "find . -iname \"*$@*\" -or -iname \".*$@*\""}
{"input": "Delete all directories under '.cache/chromium/Default/Cache' directory tree that are at least 1 level deep and are bigger than 100 MB in size", "output": "find .cache/chromium/Default/Cache/ -mindepth 1 -type d -size +100M -delete"}
{"input": "display all the jpg images in current folder", "output": "find . -type f -iregex '.*\\.jpe?g'"}
{"input": "find all the regular/normal files in the current folder and replace everything expect the extension of the file and display unique file extensions", "output": "find . -type f | sed -e 's#.*\\(\\.[a-zA-Z]*\\)$#\\1#' | sort | uniq"}
{"input": "Unzip every \".gz\" file in the current directory", "output": "gunzip *.gz"}
{"input": "Uncompress \"archive.tar.gz\" and extract the archive to \"/destination\"", "output": "gzip -dc archive.tar.gz | tar -xf - -C /destination"}
{"input": "Remove files whose names start with `Foo'", "output": "find . -type f -name \"Foo*\" -exec rm {} \\;"}
{"input": "Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.", "output": "file=$( basename \"$1\" )"}
{"input": "Filters only directories from long file listing of the current directory", "output": "ls -l --color=always \"$@\" | egrep --color=never '^d|^[[:digit:]]+ d'"}
{"input": "Truncate all non-empty regular files under the current directory", "output": "find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i sh -c \"cat /dev/null > \\\"{}\\\"\""}
{"input": "Perform a white space safe search for all files/directories under current directory", "output": "find . -print0 | xargs -0"}
{"input": "Execute \"awk -F, '$1 ~ /F$/'\" on contents of \"file.gz\"", "output": "zcat file.gz | awk -F, '$1 ~ /F$/'"}
{"input": "Delete the text matched by the regex '<script>if(window.*<\\/script>' in all index.html files under current directory", "output": "find index.html | xargs -rt sed -i 's/<script>if(window.*<\\/script>//g'"}
{"input": "find all files and directories that have been modified in the last seven days", "output": "find . -mtime -7"}
{"input": "List all nfs mounts", "output": "mount -l -t nfs4"}
{"input": "Compress every file in the current directory tree that matches \"*cache.html\" and keep the original file", "output": "find . -type f -name \"*cache.html\" -exec gzip -k {} \\;"}
{"input": "Find all files/directories under /path/to/files/* paths and print the timestamp in YmdHMS format along with their paths and object of symlinks, stat them and apply the sed replacement \"s/(.*\\|)([0-9]{4})\\-([0-9]{2})\\-([0-9]{2}) ([0-9]{2})\\:([0-9]{2})\\:([0-9]{2}\\.[0-9]{9}).*/\\1\\2\\3\\4\\5\\6\\7/g\" on the output", "output": "find /path/to/files/* -printf \"%TY%Tm%Td%TH%TM%TS|%p|%l\" -exec stat -Lc \"|%y\" {} \\; | sed -r \"s/(.*\\|)([0-9]{4})\\-([0-9]{2})\\-([0-9]{2}) ([0-9]{2})\\:([0-9]{2})\\:([0-9]{2}\\.[0-9]{9}).*/\\1\\2\\3\\4\\5\\6\\7/g\""}
{"input": "modify the permissions of all the folders in a directory", "output": "find /path/to/dir -type d -exec chmod 755 {} \\;"}
{"input": "Find all files whose names begin with 'Makefile' in the /usr/ports directory tree and count how many of them contain 'QTDIR'", "output": "find /usr/ports/ -name Makefile\\* -exec grep -l QTDIR '{}' '+' | wc -l"}
{"input": "Make directory \"testExpress\"", "output": "mkdir testExpress"}
{"input": "Check if process ID 1 exists (init or systemd) and current user has permission to send it signals.", "output": "kill -0 1"}
{"input": "Find all directories under current directory excluding  directories (along with their contents) that start with a . (dot) in their names", "output": "find -type d -a ! -name '.?*' -o ! -prune"}
{"input": "display all the empty files in the current folder( files of size 0 bytes)", "output": "find . -empty"}
{"input": "List files in directory \"one\" and \"two\" that do not exist in the other", "output": "sort <(ls one) <(ls two) | uniq -u"}
{"input": "Archive \"/media/Incoming/music/\" to \"/media/10001/music/\" on host \"server\" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission", "output": "rsync -avzru --delete-excluded /media/Incoming/music/ server:/media/10001/music/"}
{"input": "Find files/directories under current directory and print them as null terminated strings.", "output": "find -print0"}
{"input": "Remove trailing white spaces from all files under current directory ignoring .git and .svn directories", "output": "find . -not \\( -name .svn -prune -o -name .git -prune \\) -type f -print0 | xargs -0 sed -i '' -E \"s/[[:space:]]*$//\""}
{"input": "find all files in the current folder which are bigger than 10MB and less than 50 MB", "output": "find . -size +10M -size -50M -print"}
{"input": "Print amount of space available on the file system containg path to the current working directory.", "output": "df . | awk '$3 ~ /[0-9]+/ { print $4 }'"}
{"input": "Count the number of open files for PID \"$PYTHONPID\" every 2 seconds", "output": "watch \"ls /proc/$PYTHONPID/fd | wc -l\""}
{"input": "List each unique character in \"file\" prefixed by number of occurrences", "output": "grep -o . file | sort | uniq -c"}
{"input": "invoke make for all the xml files in the current folder by changing their extension from xml to log.", "output": "find /dump -type f -name '*.xml' | sed -e 's/\\.xml$/.out/' | xargs make -j8"}
{"input": "Find directories with permissions 777 and change them to 755 recursively", "output": "find /home -type d -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Print the full real path of \"/dev/disk/by-uuid/$1\" followed by \"is not mounted\"", "output": "echo $(readlink -f /dev/disk/by-uuid/$1) is not mounted"}
{"input": "Saves invoked command 'check_script_call=$(history |tail -1|grep myscript.sh )' in variable 'check_script_call', preceeding by its number in history.", "output": "check_script_call=$(history |tail -1|grep myscript.sh )"}
{"input": "Print mount point of the file system containing $path.", "output": "df \"$path\" | tail -1 | awk '{ print $6 }'"}
{"input": "Creates temporary file, replacing XXXXXXXXXXXXXXXXXXXXXXX with equal length suffix.", "output": "mktemp /tmp/banana.XXXXXXXXXXXXXXXXXXXXXXX.mp3"}
{"input": "Find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/images/* paths and run `mogrify -resize 100x100\">\" -quality 80 -compress JPEG -monitor -strip` with the file paths as arguments", "output": "find temp/images/* -maxdepth 2 -iname \"*.jpg\" -print0 | xargs -0 mogrify -resize 100x100\">\" -quality 80 -compress JPEG -monitor -strip"}
{"input": "find all the files in the entire filesystem which belong to the group root and display the ten files.", "output": "find / -group root | head"}
{"input": "Check if current system is running in 64-bit addressing.", "output": "uname -m | grep '64'"}
{"input": "Print the list of non-hidden directories in the current directory", "output": "find -type d -maxdepth 1 ! -name \".*\" -printf \"%f\\n\""}
{"input": "Find all files under current directory and set read-write permission for owner, read permission for group and no permission for other for those files", "output": "find . -type f -exec chmod u=rw,g=r,o= '{}' \\;"}
{"input": "search for the regular/normal file firefox or thunderbird or seamonkey in the entire file system excluding search in the directories share and those starting with 10_Recommended and discard all the errors", "output": "find / \\( -name 10_Recommended* -o -name share \\) -prune -o -type f \\( -name firefox -0 -name thunderbird -0 -name seamonkey \\) -print 2>/dev/null"}
{"input": "find all the normal/regular files in current folder and search for a pattern", "output": "find . -type f -print0 | xargs -0 grep pattern"}
{"input": "Display mimetype of myfile.txt.", "output": "file --mime myfile.txt"}
{"input": "Forcibly create symlink named as '/cygdrive/c/Users/Mic/mypics' to the directory '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/'", "output": "ln -sf '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/' '/cygdrive/c/Users/Mic/mypics'"}
{"input": "Remove all files except the ones listed in \"MANIFEST\"", "output": "find -type f -printf %P\\\\n | sort | comm -3 MANIFEST - | xargs rm"}
{"input": "Search the /usr/bin directory tree for regular files accessed more than 100 days ago", "output": "find /usr/bin -type f -atime +100"}
{"input": "Print details for all files in the ./work directory tree with extension .sh that were modified less than 20 days ago", "output": "find ./work/ -type f -name \"*.sh\" -mtime -20 | xargs -r ls -l"}
{"input": "Find all files in the /home/ directory tree that were last modified less than 7 days ago", "output": "find /home -mtime -7"}
{"input": "Delete all files in the current directory.", "output": "find . -exec /bin/rm {} \\;"}
{"input": "Kill all instances of \"dropbox\" owned by the current user", "output": "killall -u \"$(whoami)\" dropbox"}
{"input": "find all the files in the current directory that have the extension \"bar\" and donot search in the subdirecotries directories.", "output": "find . -name *.bar -maxdepth 2 -print"}
{"input": "Get from file 'File1.txt' strings starting with 'Q', extract only part of them following after '=' sign, and print which ones are not found in 'File2.txt'", "output": "grep ^Q File1.txt | cut -d= -f2- | sort | comm -23 - <(sort File2.txt)"}
{"input": "Print git branch currently checked out in a working directory.", "output": "git status --branch --porcelain | grep '##' | cut -c 4- | cut -d'.' -f1"}
{"input": "display all the directories in the current folder excluding those that are present in the .svn directory tree", "output": "find -type d -path '.svn' -prune -o -print"}
{"input": "Find all *.zip files under current directory and unzip them in the same directory as the files", "output": "find . -name '*.zip' -execdir unzip '{}' ';'"}
{"input": "Remove all files in the $backup_path directory recursively that were last modified more than 30 days ago", "output": "find $backup_path/* -mtime +30 -exec rm {} \\;"}
{"input": "Find every file/directory under the directory /home owned by the user joe", "output": "find /home -user joe"}
{"input": "Infinitely print \"1\" then \"0\"", "output": "yes 0 | sed '1~2s/0/1/'"}
{"input": "Find a single file called tecmint.txt and remove it", "output": "find . -type f -name \"tecmint.txt\" -exec rm -f {} \\;"}
{"input": "Convert the first 16 characters in \"/dev/random\" to a single hexadecimal value", "output": "head /dev/random -c16 | od -tx1 -w16 | head -n1 | cut -d' ' -f2- | tr -d ' '"}
{"input": "show all directories in the current folder excluding those that are present only in the paths ./media, ./images and ./backups", "output": "find . -path './media' -prune -o -path './images' -prune -o -path './backups' -prune -o -print"}
{"input": "Upgrades 'php-mbstring' package, enabling 'remi' repository.", "output": "yum --enablerepo=remi upgrade php-mbstring"}
{"input": "Lists all running tmux sessions.", "output": "tmux ls"}
{"input": "Find all *.txt files/directories under current directory discarding errors", "output": "find . -name \"*.txt\" -print 2>/dev/null"}
{"input": "Print sed commands that would replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree", "output": "find /myprojects -type f -name '*.cpp' -print0 |    xargs -0 echo sed -i 's/previousword/newword/g'"}
{"input": "display all the .sh scripts in the folder /usr", "output": "find /usr -name '*.sh'"}
{"input": "Find all files/directories named file1 in maximum 2 levels down the current directory", "output": "find -maxdepth 2 -name file1"}
{"input": "create alias subs for command  \"du -sch `find ./ -maxdepth 1 -type d`\"", "output": "alias subs=\"du -sch `find ./ -maxdepth 1 -type d`\""}
{"input": "Remove all regular files from the current directory tree whose names do not end with \"txt\"", "output": "find . -type f -not -name '*txt' -print0 | xargs -0 rm --"}
{"input": "display all the files in the current folder excluding the file states_to_csv.pl and those that are present in the directories whose name starts with \".git\"", "output": "find . \\! -path \"./.git*\" -a \\! -name states_to_csv.pl"}
{"input": "Search the /myfiles directory tree for files last accessed more than 30 days ago", "output": "find /myfiles -atime +30"}
{"input": "Find PHP files with abstract classes", "output": "find . -type f -name \"*.php\" -exec grep --with-filename -c \"^abstract class \" {} \\; | grep \":[^0]\""}
{"input": "Load keybindings from a file ~/.inputrc", "output": "bind -f ~/.inputrc"}
{"input": "Print unique lines of sorted file \"file1\" when compared with the list of first space separated fields of all sorted strings of file \"file2\"", "output": "cut -d' ' -f1 file2 | comm -13 - file1"}
{"input": "display all the normal/regular files in the current folder", "output": "find . -type f"}
{"input": "View manual page of find utility", "output": "man find"}
{"input": "run \"your_command\", letting the user page through the output and move around with the arrow keys - the Q key terminates and returns to the shell prompt.", "output": "\"your_command\" | less"}
{"input": "Delete the oldest file with '.tgz' or '.gz' extension under '/home/backups' directory tree", "output": "ls -tr $(find /home/backups -name '*.gz' -o -name '*.tgz')|head -1|xargs rm -f"}
{"input": "Rename all *.jpg files under current directory by appending parent directory name at the beginning of their names", "output": "find . -name '*.jpg' -exec bash -c 'd=\"${1%/*}\"; mv \"$1\" \"$d/$d-${1##*/}\"' - '{}' \\;"}
{"input": "Compresses file 'example.log' keeping original file in place.", "output": "bzip2 -k example.log"}
{"input": "Change file owner and group of \"/path/to/yourapp\" to root and print a diagnostic", "output": "chown -v root:root /path/to/yourapp"}
{"input": "Removes trailing and starting newlines from file", "output": "tac file | sed -e '/./,$!d' | tac | sed -e '/./,$!d'"}
{"input": "Calculate the md5 sum of all files in the current directory and formatting the output by removing parenthesis", "output": "find -maxdepth 1 -type f -exec md5sum {} \\; | sed 's/[^(]*(\\([^)]*\\)) =/\\1/'"}
{"input": "Get domain name with 'google' from address $IP", "output": "dig -x $IP | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5"}
{"input": "Finds if environment variable like 'DUALCASE' exists in environment.", "output": "env | grep DUALCASE"}
{"input": "display the number of lines in all the files in the current folder", "output": "find . -exec wc -l {} \\;"}
{"input": "Extract any line in \"file1\" or \"file2\" which does not appear in the other", "output": "comm -3 <(sort file1) <(sort file2)"}
{"input": "Find 10 largest files in the current directory and its subdirectories", "output": "du -hsx * | sort -rh | head -10"}
{"input": "find all files in the folder \"myfiles\" which have not been accessed in the last 30*24 hours", "output": "find /myfiles -atime +30"}
{"input": "display all the .sh scripts in the folder /usr", "output": "find /usr -name \\*.sh"}
{"input": "Finds number of available updates.", "output": "brew outdated | wc -l"}
{"input": "find files in current folder using name patterns and sort the display the file names in the sorted order", "output": "find . -name \"S1A*1S*SAFE\" | awk -F/ '{print $NF\"/\"$0}' | sort -t_ -k 5,5 | cut -d/ -f 2-"}
{"input": "Copy all *.txt files from the current directory tree to /destination", "output": "find . -name '*.txt' | while IFS= read -r FILE; do echo \"Copying $FILE..\"; cp \"$FILE\" /destination; done"}
{"input": "Find all files/directories under $dir directory tree which have been modified in the last 3 days", "output": "find $dir -mtime -3"}
{"input": "Format contents of \"file\" as a table", "output": "paste -d\" \" - - < file | column -t"}
{"input": "find all the pdf files in the current directory and display only the directory name in which the pdf file is present", "output": "find . -type f -name '*.pdf' |sed 's#\\(.*\\)/.*#\\1#' |sort -u"}
{"input": "search in the current folder for all the regular/normal file with the name \"test\"", "output": "find . -type f -name test"}
{"input": "Query SRV records for domain '_kerberos._udp.foo.com'", "output": "dig -t SRV _kerberos._udp.foo.com"}
{"input": "Create a tar file containing all the files in ~/Library folder that contain spaces in their names", "output": "find ~/Library -name '* *' -print0 | xargs -0 tar rf blah.tar"}
{"input": "Create compressed archive of all the files in the current directory tree that have been modified in the last 7 days", "output": "find . -type f -mtime -7 -print -exec cat {} \\; | tar cf - | gzip -9"}
{"input": "Print the contents of \"~/.ssh/config\"", "output": "cat ~/.ssh/config"}
{"input": "find all the files that have been changed today", "output": "find . -ctime 0 -type f"}
{"input": "Find all $1 files/directories under current directory and enter into the parent directory of the first one found", "output": "cd $(find . -name $1 | xargs dirname)"}
{"input": "Find all *.htm files under current directory and change their names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format", "output": "eval \"`find -type f -name \"*.htm\" |awk -F/ '{print \"cp \" $0 \" \" $2 \"-\" $3 \"-\" $4 \"-\" substr($5,5) \";\" }'`\""}
{"input": "Print symlink resolved script file name", "output": "echo $(basename $(readlink -nf $0))"}
{"input": "find all the files in the current directory which have the size 40 bytes in the current disk partition.", "output": "find . -size -40 -xdev -print"}
{"input": "Add prefix \"prefix_\" to all \".jpg\" files in the current directory", "output": "for filename in *.jpg; do mv \"$filename\" \"prefix_$filename\"; done;"}
{"input": "returns a list of  files modification newer than poop", "output": "find . -mnewer poop"}
{"input": "Find all files/directores under '/usr/local' directory tree that contain the word 'blast' in their names", "output": "find /usr/local -name \"*blast*\""}
{"input": "Find all the files that were modified exactly one day ago", "output": "find . -mtime 1"}
{"input": "List the current directory recursively ignoring the \"dir1\" subdirectory", "output": "find . -path ./dir1\\*  -o -print"}
{"input": "search for all the regular/normal files ending with sdw or sdc or sdd in the current folder and save the output to list_1 file", "output": "find . -type f | egrep '(sdw|sdc|sdd)$' > list_1"}
{"input": "Read a line from standard input into variable \"ENTERED_PASSWORD\" without echoing the input", "output": "read -s ENTERED_PASSWORD"}
{"input": "Execute \"elinks -dump file.html\" every 2 seconds", "output": "watch elinks -dump file.html"}
{"input": "Find all the files whose permissions are 777 under current directory", "output": "find . -type f -perm 0777 -print"}
{"input": "display all the files in the folders mydir1, mydir2 which are bigger than 2KB and have not been accessed in the last 30*24 hours", "output": "find /mydir1 /mydir2 -size +2000 -atime +30 -print"}
{"input": "List all files in a current folder, separating names with semicolon", "output": "ls -1b | tr '\\n' ';'"}
{"input": "Remove all vmware-*.log files under current directory", "output": "find . -name vmware-*.log -delete"}
{"input": "Search for 'DOGS' in all files with '.txt' extension under ~/documents and also print the file names", "output": "find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \\; -print"}
{"input": "Decompresses each of \"*bz2\" files under the current folder, redirecting output to the standard out, and prints only fourth of comma-separated fields.", "output": "find . -name \"*.bz2\" -print0 | xargs -I{} -0 bzip2 -dc {} | cut -f, -d4"}
{"input": "Find all files named `file1' starting from /", "output": "find / -name file1"}
{"input": "Search the current directory recursively for files containing \"string\"", "output": "find . -type f -exec grep -l 'string' {} \\;"}
{"input": "search all the files in the current folder excluding those that are present in the folder test and using regex", "output": "find . -name test -prune -regex \".*/my.*p.$\""}
{"input": "Find files/directories modified within the last hour under current directory", "output": "find . -mtime -1"}
{"input": "Find all directories in the current directory tree excluding hidden directories and create them in \"../demo_bkp\"", "output": "find . -not -path \\*/.\\* -type d -exec mkdir -p -- ../demo_bkp/{} \\;"}
{"input": "Print a count of each unique line in \"ip_addresses\"", "output": "sort ip_addresses | uniq -c"}
{"input": "Delete all files in the /TBD directory that were modified more than 1 day ago", "output": "find /TBD/* -mtime +1 -exec rm -rf {} \\;"}
{"input": "Append the current date to variable 'LBUFFER'", "output": "LBUFFER+=\"$(date)\""}
{"input": "Print the names of all regular files in the current directory tree", "output": "find . -type f -exec echo {} \\;"}
{"input": "Find all regular files in the the user's home/mail directory and search for the word \"Linux\".", "output": "find ~/mail -type f | xargs grep \"Linux\""}
{"input": "Gets IP addresses of all network interfaces.", "output": "ifconfig | grep -E \"([0-9]{1,3}\\.){3}[0-9]{1,3}\" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:"}
{"input": "Identify CMS version/releases accross all your PHPBB installations", "output": "find /home/*/public_html/ -type f -wholename *includes/constants.php -exec grep -H \"PHPBB_VERSION\" {} \\;"}
{"input": "Print \"found\" if \"blah\" contains the hex byte string \"\\xCA\\xFE\\xBA\\xBE\"", "output": "cat blah | perl -en '/\\xCA\\xFE\\xBA\\xBE/ && print \"found\"'"}
{"input": "Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script1' variable.", "output": "script1=`mktemp /tmp/.script.XXXXXX`;"}
{"input": "Find all PHP files under current directory that contain only one line", "output": "find -name '*.php' -exec bash -c '[[ \"$(wc -l < \"$0\")\" -eq 1 ]] && echo \"$0\"' '{}' ';'"}
{"input": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3", "output": "find / -iname \"*.mp3\" -type f -exec /bin/mv {} /mnt/mp3 \\;"}
{"input": "Find regular files that have SUID or SGID set", "output": "find / -perm +6000 -type f"}
{"input": "Save the canonical path of \"/usr/bin/java\" with \"/bin/java\" removed to variable \"JAVA_HOME\"", "output": "JAVA_HOME=$(readlink -f /usr/bin/java | sed \"s:/bin/java::\")"}
{"input": "Search my_folder recursively for text files containing \"needle text\"", "output": "find my_folder -type f -exec grep -l \"needle text\" {} \\; -exec file {} \\; | grep text"}
{"input": "Find all files on the system whose names are 'composer.json' and search them for \"drush\"", "output": "find / -name composer.json -exec grep -n drush {} /dev/null \\;"}
{"input": "Extract rpm \"libstdc++-4.9.2-1.fc21.x86_64.rpm\"", "output": "rpm2cpio libstdc++-4.9.2-1.fc21.x86_64.rpm |cpio -idmv"}
{"input": "search in the entire file system for the files firefox, thunderbird, seamonkey and display all the files expect those having the words \"10_Recommended\" or \"repo\" (discard all the errors during search)", "output": "sudo find / ( -name firefox -o -name thunderbird -o -name seamonkey \\) -type f 2>/dev/null|grep -v '(10_Recommended|repo)'"}
{"input": "Print the list of all files under the current directory and below", "output": "find ."}
{"input": "Move all Emacs backup files from the current directory tree to ~/backups/", "output": "find . -name '*~' -print 0 | xargs -0 -I % cp % ~/backups"}
{"input": "Find all *.axvw files/directories under current directory", "output": "find . -name '*.axvw'"}
{"input": "Prints processes with 'MDSImporte' in name, cutting off  lines longer than screen width, exiting from less after end of output and saving printed lines on terminal after exit.", "output": "pstree | grep MDSImporte | less -SEX"}
{"input": "find all the log files in the file system which are present in the current partition", "output": "find / -xdev -name \"*.log\""}
{"input": "Search for .zip files that are larger than 100M found anywhere in the file system and delete those files.", "output": "find / -type f -name *.zip -size +100M -exec rm -i {} \\;"}
{"input": "Find all the .c files in the current directory tree that contain the string \u2018stdlib.h\u2019", "output": "find . -name \u2018*.c\u2019 | xargs egrep stdlib.h"}
{"input": "Print absolute path of java executable", "output": "readlink -f $(which java)"}
{"input": "Recursively change the owner and group of \"subdir2\" to \"user2\"", "output": "chown user2:user2 -R subdir2"}
{"input": "Read a line from standard input with a timeout of 10 seconds", "output": "read -t 10"}
{"input": "Change permissions of \"mksdcard\" to 755", "output": "sudo chmod 755 mksdcard"}
{"input": "Highlights current day in a month calendar with color.", "output": "cal -h | sed \"s/\\<$(date +%d)\\>/\"$'\\033\\[94m&\\033\\[0m/g'"}
{"input": "Print 4th white space separated field in file \"file\"", "output": "tr -s ' ' < file | cut -d' ' -f4"}
{"input": "Search the /etc directory tree for symbolic links", "output": "find /etc -type l -print"}
{"input": "Find all files/directories under current directory", "output": "find -print0 | xargs -0"}
{"input": "Search the .java files from the current directory tree for TODO lines", "output": "find . -name \"*.java\" -exec grep -Hin TODO {} \\;"}
{"input": "Find all *.txt files under current directory that match the regex c|d|z in their names", "output": "find . -name '*.txt' | perl -lne 'print if /c|d|z/'"}
{"input": "List files in the current directory tree which have permissions rwx for user and rw for group and others", "output": "find . -perm 766 -exec ls -l {} \\;"}
{"input": "Display bash function definition of \"foobar\"", "output": "set | grep -A999 '^foobar ()' | grep -m1 -B999 '^}'"}
{"input": "Recursively find the latest modified \"zip\" file in the current directory", "output": "find . -name \"*zip\" -type f | xargs ls -ltr | tail -1"}
{"input": "sleep for 10 seconds", "output": "sleep `10`"}
{"input": "Compress regular files in the current directory tree that were last modified more than 7 days ago", "output": "find . -type f  -mtime +7 | tee compressedP.list | xargs compress"}
{"input": "Delete all .pyc files in the current directory tree", "output": "find . -name \"*.pyc\" | xargs rm -rf"}
{"input": "Display infinite scroll of random ASCII art", "output": "yes 'printf \\\\u$[2571+RANDOM%2]'|bash"}
{"input": "Finds IP addresses of all network interfaces.", "output": "ifconfig | grep -v '127.0.0.1' | sed -n 's/.*inet addr:\\([0-9.]\\+\\)\\s.*/\\1/p'"}
{"input": "List regular files in current directory with read, write and execute permission for all users and also show the permissions", "output": "find . -type f  -perm 777 -exec ls -l {} \\;"}
{"input": "Set the executable bit for all users on all .sh scripts from directory trees lib, etc, debian", "output": "find lib etc debian -name \"*.sh\" -type f | xargs chmod +x"}
{"input": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.", "output": "echo \"$f\" | grep -Eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f1"}
{"input": "Finds strings matching pattern '^fields=\\\\\\|^var=' in a 'set' output.", "output": "set | grep ^fields=\\\\\\|^var="}
{"input": "Write out the entire directory hierarchy from the current directory", "output": "find ."}
{"input": "display all files in the directory \"dir\" which have been changed in the last 60 minutes", "output": "find /dir -cmin -60"}
{"input": "wait for a change in \"target-directory\" before returning", "output": "inotifywait -e attrib target-directory"}
{"input": "Find all .txt files in the current directory tree and save their path names to /tmp/logfile", "output": "find /full/path/to/dir -name '*.txt' -print0 | xargs -0 >/tmp/logfile"}
{"input": "Find all *.java files under current directory containing the string 'String'", "output": "find . -name \"*.java\" -exec grep \"String\" {} \\+"}
{"input": "display all the files in the entire file system", "output": "find / -name \"*\" \u2014 print"}
{"input": "find all the files in current directory of size greater than 2GB.", "output": "find . -size +2G"}
{"input": "Find every vim undo file under current directory", "output": "find -type f -iname '*.un~'"}
{"input": "Search all directories starting from the root directory for \"filename\"", "output": "find / -iname \"filename\""}
{"input": "Creates temporary file name and saves path to it in 'TMP_FILE' variable.", "output": "TMP_FILE=\"$(mktemp -t)\""}
{"input": "Find SUID files", "output": "find / -perm +4000"}
{"input": "display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems", "output": "find / -nouser \\( -fstype jfs -o -fstype jfs2 \\) -ls"}
{"input": "list regular files ending in .mbox", "output": "find . -type f -wholename \\*.mbox"}
{"input": "Search the /Applications directory tree for *.app directories", "output": "find /Applications -type d -name \"*.app\""}
{"input": "Move all regular files under current directory to ./newdir", "output": "find ./ -type f -print | xargs    -i mv -f {} ./newdir"}
{"input": "Search the current directory tree for files containing \"bash\" in their names", "output": "find . -name \"*bash*\" | xargs"}
{"input": "Remove all empty regular files under the current directory and below", "output": "find ./ -type f -empty -print0 | xargs -0 rm"}
{"input": "Gives longest '*.php' files with line count first, and excludes directories with \"libs\", \"tmp\", \"tests\" and  \"vendor\" in their paths.", "output": "find . -name '*.php' | xargs wc -l | sort -nr | egrep -v \"libs|tmp|tests|vendor\" | less"}
{"input": "Search for the case insensitive regex 'STRING_TO_SEARCH_FOR' in all files under current directory", "output": "find . -type f -exec grep -n -i STRING_TO_SEARCH_FOR /dev/null {} \\;"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file1.tar) of the last block of files sent to xargs", "output": "find var/log/ -iname anaconda.* | xargs tar -cvf file1.tar"}
{"input": "list all java file that StringBuff in context.", "output": "find . -type f -name \"*.java\" -exec grep -l StringBuffer {} \\;"}
{"input": "Make directory \"new_dir\"", "output": "mkdir new_dir"}
{"input": "Find all *.c files under /home", "output": "find /home -name \"*.c\""}
{"input": "Search the files under and below /directory/containing/files for \"pattern_to_search\"", "output": "find /directory/containing/files -type f -exec grep -H 'pattern_to_search' {} +"}
{"input": "list txt files older than 5 days or html files of any age, null separated", "output": "find . \\( -name '*.txt'  -mtime +5 -o -name '*.html' \\) -print0"}
{"input": "Print list of all user names who are logged in", "output": "who | sed -e 's/[ \\t].*//g'"}
{"input": "set alias \"lvim\" for command \"vim -c \\\"normal '0\\\"\"", "output": "alias lvim=\"vim -c \\\"normal '0\\\"\""}
{"input": "Calculate the number of bytes of all the files listed in \"files.txt\"", "output": "<files.txt  xargs stat -c %s | paste -sd+ - | bc"}
{"input": "Start \"xeyes\" in the background on the remote server and exit the SSH session", "output": "ssh user@server 'DISPLAY=:0 nohup xeyes < /dev/null > std.out 2> std.err &'"}
{"input": "find all the files in the folder \"/mp3-collection\" which are bigger than 10MB excluding those that start with the word Metallica", "output": "find /mp3-collection -size +10000k ! -name \"Metallica*\""}
{"input": "Merge already sorted files in the current directory starting with \"_tmp\" and write the output to \"data.tsv.sorted\"", "output": "sort -m _tmp* -o data.tsv.sorted"}
{"input": "Print the IP addresses for the current host name", "output": "host `hostname` | awk '{print $4}'"}
{"input": "Lists all files in a current folder, separating names with comma.", "output": "ls -m"}
{"input": "search for all the \".pyc\" files inthe current folder and remove them", "output": "find . -name \"*.pyc\" | xargs -i rm '{}"}
{"input": "return every file that does not have bar somewhere in its full pathname", "output": "find . ! -path '*bar*' -print"}
{"input": "display all symbolic links in the folder \"myfiles\"", "output": "find /myfiles -type l"}
{"input": "Print every three lines of \"file\" as a comma separated line", "output": "paste -sd',,\\n' file"}
{"input": "Find all files under current directory with their timestamp and paths and print a sorted list", "output": "sort < <(find -printf \"%T@ %p\\n\")"}
{"input": "Find *.js UTF-8 files with BOM and correct them", "output": "find . -iname *.js -type f -exec sed 's/^\\xEF\\xBB\\xBF//' -i.bak {} \\; -exec rm {}.bak \\;"}
{"input": "copy a files from one folder to all the folder in the /raid which have an extension local_sd_customize.", "output": "find /raid -type d -name \".local_sd_customize\" -ok cp /raid/04d/MCAD-apps/I_Custom/SD_custom/site_sd_customize/user_filer_project_dirs {} \\;"}
{"input": "Copy all files unconditionally and directories in directory tree \"myfiles\" to \"target-dir\" preserving directory hierarchy and modification time", "output": "find myfiles | cpio -pmud target-dir"}
{"input": "Copies all files like '*.txt' under the current directory to the './tmp/' directory.", "output": "find . -type f -name '*.txt' | sed 's/'\"'\"'/\\'\"'\"'/g' | sed 's/.*/\"&\"/'  | xargs -I{} cp -v {} ./tmp/"}
{"input": "find all files in the current folder which are of size 0 bytes.", "output": "find . -type f -size 0b"}
{"input": "Delete all regular files named 'FindCommandExamples.txt' under current directory tree", "output": "find . -type f -name \"FindCommandExamples.txt\" -exec rm -f {} \\;"}
{"input": "Count total number of lines in all *txt files  in current directory", "output": "wc -l `find . -type f -name '*.txt' `"}
{"input": "Print list of disk and mountpoint of disks matching \"/dev/sd*\"", "output": "paste <(mount | awk 'tolower($0) ~ /\\/dev\\/sd*/ {print NR \"\\t\" $1 \"\\t\" $3}') <(/usr/sbin/smartctl -a /dev/sdb | awk '/Device:/ {print $2}')"}
{"input": "Copies all files under the current directory like any-cased '*foobar*' to the '~/foo/bar' directory.", "output": "find . -iname \"*foobar*\" -exec cp \"{}\" ~/foo/bar \\;"}
{"input": "Print the last line of the alphabetically sorted lines in file \"set\"", "output": "tail -1 <(sort set)"}
{"input": "Find all directories under 'project' directory without going into subdirectories that do not match the POSIX egrep regex $PATTERN in their paths and are not empty", "output": "find project -maxdepth 1 -mindepth 1 -regextype posix-egrep ! -iregex  $PATTERN  ! -empty -type d"}
{"input": "display all the files in the file system which belong to no group", "output": "find / -nogroup staff -print"}
{"input": "Print mount point of the file system containing $path.", "output": "df -P \"$path\"  | tail -1 | awk '{ print $NF}'"}
{"input": "Copy file linked to by \"file\" to \"file\"", "output": "cp --remove-destination `readlink file` file"}
{"input": "move all the html files from current folder to another folder and if a symbolic link is found copy the original referenced file and not the link", "output": "find . -follow -iname '*.htm' -print0 | xargs -i -0 mv '{}' ~/webhome"}
{"input": "Replace \"_\" with newlines in \"Testing\\r_Tested\" and display the named characters", "output": "echo -e \"Testing\\r_Tested\" | awk -v RS=\"_\" '{ print $0; }' | od -a"}
{"input": "Find files/directories greater than 10MB in your home directory", "output": "find ~ -size +10M"}
{"input": "Find all empty directories recursively starting from the current one and delete them", "output": "find . -type d -empty -delete"}
{"input": "Print shared lines in \"number.txt.gz\" and \"xxx.txt.gz\"", "output": "zcat number.txt.gz | { zcat xxx.txt.gz | comm -12 /dev/fd/3 - ; } 3<&0"}
{"input": "Displays line count in 'filename' every 2 seconds.", "output": "watch wc -l <filename>"}
{"input": "Finds strings with text \"searched-string\" recursively in all files of current folder.", "output": "grep -r \"searched-string\" ."}
{"input": "Print the base name of the current working directory", "output": "basename \"`pwd`\""}
{"input": "Search the file system for regular files whose names are shorter than 25 characters", "output": "find / -type f|egrep \"/[^/]{0,24}$\""}
{"input": "Save the full path of command \"oracle\" to variable \"path\"", "output": "path=`which oracle`"}
{"input": "Find files in the current directory tree whose names match regular expression \"^.*~$\\|^.*#$\"", "output": "find -regex \"^.*~$\\|^.*#$\""}
{"input": "Find all subdirectories of the current directory except hidden ones", "output": "find -maxdepth 1 -type d ! -name \".*\""}
{"input": "split file /etc/gconf/schemas/gnome-terminal.schemas into pieces per 1000000 lines", "output": "split -n 1000000 /etc/gconf/schemas/gnome-terminal.schemas"}
{"input": "Print the names of all files and directories in the current directory tree", "output": "find . -print"}
{"input": "Find all files/directories owned by the user 'bob' under '/home' directory tree", "output": "find /home -user bob"}
{"input": "Find apparent size of a target directory", "output": "du -hs /path/to/directory"}
{"input": "Save the list of files modified within a fortnight ago to `deploy.txt'", "output": "find . -type f -mtime -14 > deploy.txt"}
{"input": "Search for 'ireg' in all PHP files under 'project' directory tree and show only the files that match", "output": "find project -name '*.php' -type f -print0 | xargs -0 grep -l ireg"}
{"input": "Numerically sort standard input by the second word of each line", "output": "sort -n -k 2"}
{"input": "Find all files under current directory that were modified more than 1 day ago", "output": "find -mtime +1"}
{"input": "Counts the number of lines in only text files in a git repository.", "output": "git ls-files | xargs file | grep \"ASCII\" | cut -d : -f 1 | xargs wc -l"}
{"input": "Shifts all positional arguments but last one, keeping it in $1 variable.", "output": "shift $(($#-1))"}
{"input": "Display all lines in 'file' containing 'something', pausing for user input after each page.", "output": "grep something file | more"}
{"input": "display all the configuration files in the etc folder", "output": "find /etc -name '*.conf'"}
{"input": "display all files in the current folder which do not match the regular expression", "output": "find . -not -regex \".*test.*\""}
{"input": "search for all regular/normal files in the current folder and display the number of lines in the file", "output": "find . -type f -print0 | xargs -0L1 wc -l"}
{"input": "Count the number of lines in \"myfile.txt\"", "output": "cat myfile.txt | wc -l"}
{"input": "Lists content of compressed text file.", "output": "zless MyFile"}
{"input": "Delete all files/directories under current directory", "output": "find -delete"}
{"input": "Remove all \"core\" regular files in the /tmp/ directory tree", "output": "find /tmp -name core -type f -print | xargs /bin/rm -f"}
{"input": "use regex with find command", "output": "find . -regextype posix-egrep -regex '\\./[a-f0-9\\-]{36}\\.jpg'"}
{"input": "Remove Mac OS X Desktop Services Store files", "output": "find . -name \".DS_Store\" -exec rm {} \\;"}
{"input": "Search the system for the file \u201ctestfile.txt\u201d ignoring the case", "output": "find / -iname \"testfile.txt\""}
{"input": "Find all the files in the current directory recursively whose permissions are 777", "output": "find . -type f -perm 0777 -print"}
{"input": "Print each line in parallel in files \"tmp/sample-XXX.tim\" and \"tmp/sample-XXX.log\"", "output": "paste tmp/sample-XXXX.{tim,log}"}
{"input": "find all the files in the current folder which have been modified in the last 60 minutes, which are atleast 1 level deep and display a long listing of these files", "output": "find . -mindepth 1 -mmin -60 | xargs -r ls -ld"}
{"input": "Report file systems disk space usage pretty formatted.", "output": "df -Ph | perl -ne 'chomp; printf \"\\n%-40s %8s %8s %8s %8s %-20s\", split / +/, $_, 6 ; '"}
{"input": "Find all HTML files starting with letter 'a' in the current directory and below", "output": "find . -name a\\*.html"}
{"input": "force delete all the regular files with the name \"test.txt\"", "output": "find /home -type f -name test.txt -exec rm -f {} \\"}
{"input": "Filters only directories including hidden ones from long file listing of a current directory, and prints their names.", "output": "ls -Al | grep \"^d\" | awk -F\" \" '{print $9}'"}
{"input": "Find all .py files in the current directory except \"setup.py\" and those beginning with \"test_\"", "output": "find . -maxdepth 1 -mindepth 1 \\( -name '*.py' -not -name 'test_*' -not -name 'setup.py' \\)"}
{"input": "Represent time string $MOD_DATE as seconds since epoch and save to variable 'MOD_DATE1'", "output": "MOD_DATE1=$(date -d \"$MOD_DATE\" +%s)"}
{"input": "Check if \"$file\" contains DOS line endings", "output": "od -t x2 -N 1000 $file | cut -c8- | egrep -m1 -q ' 0d| 0d|0d$'"}
{"input": "Write \"error\" to standard error and do not append to \"log\"", "output": "echo \"error\" 1>&2 | tee -a log"}
{"input": "find all the normal/regular files in the folder main-directory", "output": "find main-directory -type f"}
{"input": "Print the current working directory and the base name of \"$1\"", "output": "echo \"$(pwd)/$(basename \"$1\")\""}
{"input": "Display the last space-separated field of each line in file.txt", "output": "rev file.txt | cut -d ' ' -f1 | rev"}
{"input": "Check if \"/path/to/file\" exists on \"remote_host\"", "output": "ssh remote_host test -f \"/path/to/file\" && echo found || echo not found"}
{"input": "Recursively finds last 5 modified files in a directory", "output": "find . -type f -ls 2>/dev/null | sort -M -k8,10 | head -n5"}
{"input": "Checks compressed file integrity.", "output": "bzip2 -t file.bz2"}
{"input": "display all the files in the file system which belong to the user \"user1\"", "output": "find / -user user1"}
{"input": "list jobs including its PIDs", "output": "jobs -l"}
{"input": "Replace the occurrences of \"HOGE\" with \"MOGA\" once per each line of the files from the current directory tree, keeping a backup copy of every touched file", "output": "find . -type f -print0 | xargs -0 sed -i.bak -e \"s/HOGE/MOGA/\""}
{"input": "find all regular files in a folder using regular expressions which do not have a specific name pattern and send these files as input to the script.bash script file", "output": "find \"$DIRECTORY_TO_PROCESS\" -type f -iregex \".*\\.$FILES_TO_PROCES\"  ! -name \"$find_excludes\" -print0 | xargs -0 -I {} bash script.bash {}"}
{"input": "Invoke a trusted X11 forwarding SSH connection with the server $ssh_server as user $ssh_user", "output": "ssh -Y $ssh_user@$ssh_server"}
{"input": "Cuts off last two parts from the path $dir, and deletes resulted folder if empty.", "output": "rmdir \"$(dirname $(dirname $dir))\""}
{"input": "Find all directories under $x directory and set read-write-execute permission for owner and group and no permission for other for those directories", "output": "find ${x} -type d -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "List regular files in current directory with read, write and execute permission for all users and also show the permissions", "output": "find . -type f  -perm a=rwx -exec ls -l {} \\;"}
{"input": "Copy and always overwrite all files in \"/zzz/zzz\" to \"/xxx/xxx\"", "output": "yes | cp -rf /zzz/zzz/* /xxx/xxx"}
{"input": "change the permissions of all regular/normal files in the current directory", "output": "find . -type f -exec chmod 664 {} \\;"}
{"input": "search for a file using name patterns from the list of all the regular files in the folder project and save the output to the file Include.", "output": "find project -type f -print | egrep '(\\.[ch]|[Mm]akefile)$' > Include"}
{"input": "Replace the first occurrence of \"foo\" with \"bar\" on every line in .txt files from the current directory tree", "output": "find . -type f -name '*.txt' | xargs --replace=FILE sed --in-place 's/foo/baz/' FILE"}
{"input": "Print $1 if $1 is an empty directory", "output": "find \"$1\" -name \"?*\" | dd bs=$((${#1}+3)) count=1 2>/dev/null"}
{"input": "Find a used disk space of a target directory and files inside of it", "output": "du -h your_directory"}
{"input": "Print the last file extension from standard input", "output": "sed 's/^/./' | rev | cut -d. -f1  | rev"}
{"input": "Find all .php files in the current directory tree", "output": "find . -type f -name \"*.php\""}
{"input": "Change to folder where the oracle binary is.", "output": "cd $(dirname `which oracle`)"}
{"input": "list all javascipts file which whole name does not contain \"directory\"", "output": "find . -name '*.js' -and -not -path directory"}
{"input": "Count the number of unique lines in sorted file \"a.txt\" compared to sorted file \"b.txt\"", "output": "comm -23 a.txt b.txt | wc -l"}
{"input": "Search for 'String' case insensitively in all files under current directory tree and show the matched lines with their filenames", "output": "find . -name * -print0  | xargs -0 grep -iH \"String\""}
{"input": "Report total file systems disk usage.", "output": "df --total | tail -n 1"}
{"input": "Search the current directory tree for files whose names do not end in \".exe\" and \".dll\"", "output": "find . -not -name \"*.exe\" -not -name \"*.dll\" -not -type d"}
{"input": "Decompress 'file.gz'", "output": "gzip -d file.gz"}
{"input": "display all the php files in the entire file system", "output": "find / -name \"*.php\""}
{"input": "Find all the files without permission 777 in the file system", "output": "find / -type f ! -perm 777"}
{"input": "Count the number of all directories under directory '/mount/point' non-recursively", "output": "find /mount/point -maxdepth 1 -type d | wc -l"}
{"input": "Write \"ee\" to standard output and \"/dev/stderr\" as input to \"foo\"", "output": "echo 'ee' | tee /dev/stderr | foo"}
{"input": "Split \"foo.txt\" into files with 1 line each and use a suffix length of 5", "output": "split --suffix-length=5 --lines=1 foo.txt"}
{"input": "Find all files in your home directory and below that are larger than 100M.", "output": "find ~ -size +100M"}
{"input": "Show the list of files modified more than 31 days ago", "output": "find / -mtime +31 -print"}
{"input": "Find all files beneath the current directory that end with the extension .java and contain the characters StringBuffer.  Print the name of the file where a match is found.", "output": "find . -type f -name \"*.java\" -exec grep -l StringBuffer {} \\;"}
{"input": "Print every file's type, name, and inode", "output": "find -printf \"%y %i %prn\""}
{"input": "Find and delete all hard links in the /home directory to file1", "output": "find /home -xdev -samefile file1 -exec rm {} +"}
{"input": "Find all files beneath the current directory that end with the extension .java and contain the characters String ignoring case.  Print the name of the file where a match is found.", "output": "find . -type f -name \"*.java\" -exec grep -il string {} \\;"}
{"input": "Find all *.ogg (case insensitive) files/directories under your home directory that are not greater than 20MB in size", "output": "find $HOME -iname '*.ogg' ! -size +20M"}
{"input": "Split \"$FILENAME\" into files with at most 20 lines each with a prefix \"xyz\"", "output": "split -l 20 $FILENAME xyz"}
{"input": "Prints groups list that current user belongs to.", "output": "groups                                        //take a look at the groups and see"}
{"input": "Recursively search for \"string here\" and write the output to the console followed by the number of matched lines", "output": "grep -r \"string here\" * | tee >(wc -l)"}
{"input": "display all the \".c\" files in the current folder excluding those that are present in all the sub directories", "output": "find . \\( ! -name . -prune \\) -name \"*.c\" -print"}
{"input": "split the file data.csv into pieces per 100 mb named as data.tsv.NNN with digital prefixes", "output": "split -C 100m -d data.tsv data.tsv."}
{"input": "create directory destdir", "output": "mkdir destdir"}
{"input": "search for the file \"file\" in the current folder excluding those in the sub directory \".git\"", "output": "find . -path ./.git  -prune -o -name file  -print"}
{"input": "Find all *.csv files under /foot/bar/ and move them to some_dir", "output": "find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir"}
{"input": "display all the empty files in the entire file system", "output": "find / -size 0 -print"}
{"input": "Find all files under $root_dir", "output": "find $root_dir -type f"}
{"input": "Change login shell to the full path of \"zsh\"", "output": "chsh -s $(which zsh)"}
{"input": "Change the owner to \"owner\" and group to \"nobody\" of \"public_html\"", "output": "chown owner:nobody public_html"}
{"input": "find all the files in the folder /home which are bigger than 10MB and smaller than 50 MB", "output": "find /home -size +10M -size -50M"}
{"input": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree", "output": "find ~ -iname \"screen*\""}
{"input": "Move all files that contain \"Subject: \\[SPAM\\]\" to \"DIR\"", "output": "grep -L -Z -r 'Subject: \\[SPAM\\]' . | xargs -0 -I{} mv {} DIR"}
{"input": "delete all the \".bak\" or swap files in kat folder", "output": "find kat -type f \\( -name \"*~\" -p -name \"*.bak\" \\) -delete"}
{"input": "Show all lines as they are executed and stop at the first command returning nonzero", "output": "set -ex"}
{"input": "List the files matching 'my key phrase' either in their names or contents", "output": "find | xargs -I {} bash -c '(([[ -f \"{}\" ]] && grep -l \"my key phrase\" \"{}\") || ([[ \"{}\" =~ \"my key phrase\" ]] && echo {}))'"}
{"input": "search for the file \".user.log\" in a folder", "output": "find /nfs/office -name .user.log -print"}
{"input": "find all regular files which have been modified in the last 48 hours in home folder", "output": "find ~ -type f -mtime -2"}
{"input": "Recursively finds strings with\"text string to search\u201d in any file within the 'directory-path', following symlinks, and prints found strings with file names.", "output": "grep -r -H \"text string to search\u201d directory-path"}
{"input": "Make \"bar\" executable", "output": "chmod +x bar"}
{"input": "List recursively all files and directories in /var/www", "output": "find /var/www"}
{"input": "run command \"dnf install glibc.i686\" as user root", "output": "su -c dnf install glibc.i686"}
{"input": "Archive \"/home/abc/*\" to \"/mnt/windowsabc\" with human readable output", "output": "rsync -avh /home/abc/* /mnt/windowsabc"}
{"input": "Finds the folder where temporary files would be written to.", "output": "dirname $(mktemp -u -t tmp.XXXXXXXXXX)"}
{"input": "display all the files ending with \".user\" or beginning with \"admin\" or ending with \".user.gz\" in /var/adm/logs/morelogs/ and excluding  all regular files", "output": "find /var/adm/logs/morelogs/* -type f -prune \\( -name \"admin.*\" -o -name \"*.user\" -o -name \"*.user.gz\" \\) -print"}
{"input": "Find all files on the system whose names are 'autoload.php'", "output": "find / -name autoload.php"}
{"input": "Split \"/usr/bin/firefox\" into 1000 files of about equal size", "output": "split -n 1000 /usr/bin/firefox"}
{"input": "Always answer \"no\" to any prompt from \"<command>\"", "output": "yes no | <command>"}
{"input": "find all sqlite files in the current directory.", "output": "find ./ -name \"*.sqlite\""}
{"input": "Find files/directories named 'aaa.txt' under current directory tree", "output": "find . -name aaa.txt"}
{"input": "Format each line as 3 columns based on extraneous columns", "output": "awk '{for(i=3;i<=NF;i++){print $1,$2,$i}}' file | column -t"}
{"input": "Print the current directory", "output": "find -mindepth 0 -maxdepth 0"}
{"input": "Find all *.log files under path/ that do not contain \"string that should not occur\"", "output": "find path/ -name '*.log' -print0 | xargs -r0 -I {} bash -c 'grep -q \"string that should not occur\" \"{}\" || echo \"{}\"'"}
{"input": "Find files with group write permission and remove the permission", "output": "find . -perm -20 -print | xargs chmod g-w"}
{"input": "display all the directories in the folder master-", "output": "find master -type d | sort"}
{"input": "display all the text files in the current folder  and do not search in the bin directory", "output": "find . -name bin -prune -o -name \"*.txt\" -print"}
{"input": "Move \"tobecopied/tobeexcluded\" to the current directory", "output": "mv tobecopied/tobeexcluded ."}
{"input": "Find all or single file called tecmint.txt under the / directory of owner root", "output": "find / -user root -name tecmint.txt"}
{"input": "Find all regular files residing in the current directory tree and search them for string \"/bin/ksh\"", "output": "find . -type f -print | xargs grep -i 'bin/ksh'"}
{"input": "find all the normal/regular files in the current folder which have been modified in the last 24 hours and display a long listing of them", "output": "find . -type f -mtime -1 -exec ls -l {} \\;"}
{"input": "Output line number and lines 200000000 through 200000005 from the infinite input of \"y\"", "output": "yes | sed -n '200000000,${=;p};200000005q'"}
{"input": "Pushes current folder to the directory stack.", "output": "pushd $PWD"}
{"input": "Archive \"/path/to/sfolder\" to \"name@remote.server:/path/to/remote/dfolder\" compressing the data during transmission", "output": "rsync -avlzp /path/to/sfolder name@remote.server:/path/to/remote/dfolder"}
{"input": "Search directory foo for files containing \"foo/bar\" in their full names", "output": "find foo -path foo/bar -print"}
{"input": "download content from \"http://127.0.0.1:8000\" and output to \"index.html\"", "output": "curl http://127.0.0.1:8000 -o index.html"}
{"input": "Set permissions for all direcotries under /var/www to 755", "output": "find /var/www -type d -print0 | xargs -0 chmod 755"}
{"input": "Find all files/directories that start with 'a1a2' and end with 'txt' in their names and move their parent directories to '/home/spenx/dst/' directory", "output": "find /home/spenx/src -name \"a1a2*txt\" | xargs -n 1 dirname | xargs -I list mv list /home/spenx/dst/"}
{"input": "Modify and rewrite 'file' replacing all instances of \"foo\" with \"bar\"", "output": "sed -i 's/foo/bar/g' file"}
{"input": "Display the 5 smallest files in the current directory and its sub-directories ignoring any empty files.", "output": "find . -not -empty -type f -exec ls -s {} \\; | sort -n  | head -5"}
{"input": "Counts the number of lines in each file in a git repository.", "output": "wc -l --files0-from=<(git ls-files -z)"}
{"input": "Recursively copy \"dir_b\" to \"dir_a\" and delete any new files in \"dir_a\"", "output": "rsync -u -r --delete dir_b dir_a"}
{"input": "Read a line from standard input into variable \"message\" with prompt \"Please Enter a Message: \" followed by a newline", "output": "read -p \"Please Enter a Message: `echo $'\\n> '`\" message"}
