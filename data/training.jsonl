{"input": "search for the word foo in all the js files in the current folder", "output": "find . -name \"*.js\" -exec grep -iH foo {} \\;"}
{"input": "Find all files that aren't owned by user www-data", "output": "find -not -user www-data"}
{"input": "search for all the files ending with \".bak\" in current folder which have not been accessed in the last 30 days and delete the file it it exists", "output": "find . -name '*.bak' -type f -atime +30 -exec csh -c 'test -s $1:r && rm $1' '{}' ;"}
{"input": "Find files on the system that are bigger than 20 megabytes", "output": "find / -type f -size +20M -exec ls -lh {} \\; | awk '{ print $NF \": \" $5 }'"}
{"input": "Search the current directory tree for .log files containing the string \"The SAS System\" on the first line", "output": "find . -name '*.log'  -type f  -readable  ! -size 0 -exec sed -n '1{/The SAS System/q0};q1' {} \\; -print"}
{"input": "Rename \"blah1\" to \"blah1-new\"", "output": "mv blah1 blah1-new"}
{"input": "Find regular files in the current directory that are writable by their owner", "output": "find -maxdepth 1 -type f -perm /200"}
{"input": "Read a line from standard input into variable \"REPLY\" with prompt \"$*\"", "output": "read -p \"$*\""}
{"input": "Saves command execution output to a file 'outfile' together with time report.", "output": "(time ls) > outfile 2>&1"}
{"input": "Recursively set all permissions under \"../tools\" to 777", "output": "chmod -R 777 ../tools"}
{"input": "search for the directory with the name aa in the current folder", "output": "find . -type d -name aa"}
{"input": "Pipe an empty line to ssh-keygen.", "output": "printf \"\" | ssh-keygen -b 1024 -f ball -t dsa"}
{"input": "Symlinks all of formula\u2019s installed files into the Homebrew prefix.", "output": "brew link bash-completion"}
{"input": "Find all files/directories with inode number 16187430 and move them to 'new-test-file-name'", "output": "find -inum 16187430 -exec mv {} new-test-file-name \\"}
{"input": "search for all \"tif\" images in current folder", "output": "find . -name '*.tif ' -print"}
{"input": "Enables 'dotglob' shell option.", "output": "shopt -s dotglob"}
{"input": "Rename all directories under current directory by replacing all occurrences of 'Foo' (case insensitive) with 'Bar' in their names", "output": "find . -type d -iname '*foo*' -depth -exec rename 's@Foo@Bar@gi' {} +"}
{"input": "Search the specified user for the given \"filename\"", "output": "find / -user pat -iname \"filename\""}
{"input": "Force tty allocation and execute \"./script.py\" on host \"foo\"", "output": "ssh -tt foo ./script.py"}
{"input": "Find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir", "output": "find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +"}
{"input": "Display bash function definition of \"foobar\"", "output": "set | sed -n '/^foobar ()/,/^}/p'"}
{"input": "Puts working directory into clipboard, stripping newlines", "output": "echo -n $(pwd) | pbcopy"}
{"input": "Save standard input to variable \"myVar\"", "output": "myVar=$(tee)"}
{"input": "Find all .rpm files and change their permissions to 755", "output": "find / -name *.rpm -exec chmod 755 '{}' \\;"}
{"input": "Calculate and show md5 sums for every files under current directory tree", "output": "find . | xargs md5sum"}
{"input": "Find regular files that are larger than 2GB", "output": "find . -type f -size +2G"}
{"input": "Mount \"/path/to/device\" on \"/path/to/mount/location\" as a loop back device", "output": "mount /path/to/device /path/to/mount/location -o loop"}
{"input": "Find links that point to nothing To find links that point to nothing, use the perl interpreter with find, like this:", "output": "find / -type l -print | perl -nle '-e || print';"}
{"input": "Find executable regular files in the current directory tree", "output": "find . -type f -exec test -x {} \\; -print"}
{"input": "find all directories named build under the current directory", "output": "find . -type d -name build"}
{"input": "Print the boot time in standard date format", "output": "who -b | awk '{$1=\"\"; $2=\"\"; print $0}' | date -f -"}
{"input": "Find files/directories named 'foo' in the current partition of the root filesystem", "output": "find -x / -name foo"}
{"input": "Places current job to background.", "output": "bg %  so it wont die when you logoff"}
{"input": "Calculate md5 checksum of $KEY, take the 1st to 10th character, append them with the string '/tmp/command_cache.' and save the rsultant string to variable FILE", "output": "FILE=\"/tmp/command_cache.`echo -n \"$KEY\" | md5sum | cut -c -10`\""}
{"input": "search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them", "output": "find . -mtime +180 -exec du -ks {} \\; | cut -f1 | awk '{total=total+$1}END{print total/1024}'"}
{"input": "Save absolute path of the script filename in variable \"MY_PATH\"", "output": "MY_PATH=$(readlink -f \"$0\")"}
{"input": "Prints list of top-level subfolders in a current folder, sorted by number of contained files.", "output": "find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo -e $(find {} | wc -l) {}' | sort -n"}
{"input": "Removes all files but $1 newest ones from current folder.", "output": "ls -tp | grep -v '/' | tail -n +\"$1\" | xargs -I {} rm -- {}"}
{"input": "search in the current folder for the file \"myletter.doc\"", "output": "find . -name myletter.doc -print"}
{"input": "display all the ip addresses in all the files that are present in /etc folder", "output": "find /etc -type f -exec cat '{}' \\; | tr -c '.[:digit:]' '\\n' | grep '^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$'"}
{"input": "Continuously output \"y\" at a rate of 10 bytes per second", "output": "yes | pv --quiet --rate-limit 10"}
{"input": "Print 3 newline separated \"y\"s", "output": "yes | head -3"}
{"input": "Create a ssh tunnel on local port 2222 through \"bridge.example.com\" to \"remote.example.com\" port 22 without executing any commands and run in the background", "output": "ssh -N -L 2222:remote.example.com:22 bridge.example.com&"}
{"input": "Delete and count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -type f -mtime +$DAYS_TO_SAVE -print0 | awk -v RS='\\0' -v ORS='\\0' '{ print } END { print NR }' | xargs -0 rm"}
{"input": "Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and execute permission for other for those directories", "output": "find . -type d -exec chmod u=rwx,g=rx,o=x {} \\;"}
{"input": "Get the number of regular files in the directory given as the bash script argument $1", "output": "find $1 -type f | wc -l"}
{"input": "display the long listing detials of all the files in the folder junk which is in home folder.", "output": "find ~/junk   -name \"*\" -exec ls -l {} \\;"}
{"input": "Make a copy of file.txt in all directories in current directory - names may not contain spaces.", "output": "ls -d */ | xargs -iA cp file.txt A"}
{"input": "find all files that have been modified yesterday", "output": "find /some/dir -mmin -$((currtime + (24 * 60))) -a -mmin +$((${currtime} + 1))"}
{"input": "Creates temporary folder in TMPDIR (if defined) or in '/tmp/', and stores path to created folder in 'tmpdir' variable.", "output": "tmpdir=$(mktemp -d)"}
{"input": "find \".flac\" files in current folder using regular expressions", "output": "find ./ -regex \"./cmn-.\\.flac\""}
{"input": "Find all files/directories with name pattern $nombre that are at most 2 levels down the $DIR_TEMPORAL and $DIR_DESCARGA directories and show only the file names (without parent path) appended with '.torrent'", "output": "find \"$DIR_TEMPORAL\" \"$DIR_DESCARGA\" -maxdepth 2 -name \"$nombre\" -printf '%f.torrent\\n'"}
{"input": "Find all files in maximum 1 level down the current directory that were modified less than 1 day ago from today", "output": "find -maxdepth 1 -type f -daystart -mtime -1"}
{"input": "Delete empty directories", "output": "find . -type d -empty -delete"}
{"input": "Find all files/directories under .. directory and copy them to ~/foo/bar", "output": "find .. -exec cp -t ~/foo/bar -- {} +"}
{"input": "Get the total sizes of all files under current directory", "output": "find . -type f -printf '%p %s\\n' | perl -ane '$sum+=$F[1];END{print \"$sum\\n\"}'"}
{"input": "Save number of lines with any-cased 'merge' from $COMMIT_EDITMSG file in 'MERGE' variable", "output": "MERGE=$(cat $COMMIT_EDITMSG|grep -i 'merge'|wc -l)"}
{"input": "find all readable files", "output": "find / -readable"}
{"input": "Find all regular files in the current directory tree and count them", "output": "find -type f | wc -l"}
{"input": "Make 3 directories named \"~/Labs/lab4a/folder\" followed by the number 1, 2, or 3", "output": "mkdir ~/Labs/lab4a/folder{1..3}"}
{"input": "Compress all files in directory \"$PATH_TO_LOGS\" that were last modified more than \"$SOME_NUMBER_OF_DAYS\" days ago", "output": "find $PATH_TO_LOGS -maxdepth 1 -mtime +$SOME_NUMBER_OF_DAYS -exec gzip -N {} \\;"}
{"input": "Show the list of files modified less than a minute ago", "output": "find / -mmin -1 -print"}
{"input": "Find all files and directories and count them", "output": "find ./ | wc -l"}
{"input": "Find all files in the current directory and its sub-directories that have not been assessed in more than 30 days.", "output": "find . -atime +30 -print"}
{"input": "Look for all files managed by git in the current repository whose name or file type description contains the word \"ASCII\", display the number of lines contained in each match.", "output": "git ls-files | xargs file | grep \"ASCII\" | cut -d : -f 1 | xargs wc -l"}
{"input": "Removes symlinks for formula bash-completion from the Homebrew prefix.", "output": "brew unlink bash-completion"}
{"input": "Calculate the md5 checksum of the current directory structure and save it in variable SUM", "output": "SUM=$(tree | md5sum)"}
{"input": "find all the perl files in the current folder, print0 is used to handle files with new lines in their names or only spaces", "output": "find . -type f -name \"*.pl\" -print0"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -print0 | xargs -0 stat -f \"%m %N\" | sort -n | tail -1 | cut -f2- -d\" \""}
{"input": "Search the current directory tree for files whose name is \".note\", case insensitive", "output": "find . -iname '.note' | sort"}
{"input": "find all the files in current folder which end with \".bak\" or \".backup\" which have not been accessed in the last 30 days and delete the files if they exist", "output": "find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec csh -c 'if ( -f $1:r ) rm $1' '{}' ;"}
{"input": "Saves in 'result' variable list of groups which user $line belongs to, and not matching pattern \"_unknown|sciences|everyone|netaccounts\"", "output": "result=$(groups \"$line\" | sed 's/ /\\n/g' | egrep -v \"_unknown|sciences|everyone|netaccounts\")"}
{"input": "Count files in the current path by modification month", "output": "find . -maxdepth 1 -type f -printf '%TY-%Tm\\n' | sort | uniq -c"}
{"input": "Find files owned by no user", "output": "find / -nouser"}
{"input": "search all jpg images in current folder and rename them", "output": "find . -type f -name \"*.jpg\" -print0 | xargs -0 rename \"s/Image_200x200_(\\d{3})/img/\""}
{"input": "Delete all empty directories in minimum 2 levels down the root directory", "output": "find root -mindepth 2 -type d -empty -delete"}
{"input": "The  command runs all the directories (-type d) found in the $LOGDIR directory wherein a file's data has been modified within the last 24 hours (-mtime +0) and compresses them (compress -r {}) to save disk space.", "output": "find $LOGDIR -type d -mtime +0 -exec compress -r {} \\;"}
{"input": "display a long listing of all the directories in current directory", "output": "find . -type d -ls"}
{"input": "Search for file 'secret.keys' redirecting error messages to /dev/null", "output": "find / -name 'secret.keys' -print 2>/dev/null"}
{"input": "find all the configuration files in /etc folder along with the last access & modification time", "output": "find /etc -name \"*.conf\" -printf \"%f %a, %t\\n\""}
{"input": "Gets IP address of only primary network interface.", "output": "ifconfig $(netstat -rn | grep -E \"^default|^0.0.0.0\" | head -1 | awk '{print $NF}') | grep 'inet ' | awk '{print $2}' | grep -Eo '([0-9]*\\.){3}[0-9]*'"}
{"input": "Calculate the md5sum of each \".py\" file under \"/path/to/dir/\", sort the output, and calculate the md5sum of that", "output": "find /path/to/dir/ -type f -name \"*.py\" -exec md5sum {} + | awk '{print $1}' | sort | md5sum"}
{"input": "Run `command' passing the files from the current directory tree as arguments", "output": "find . -print0|xargs -0 command"}
{"input": "Search for Subscription.java under current directory, and go to directory containing it.", "output": "cd \"$(find . -name Subscription.java -printf '%h\\n')\""}
{"input": "Search for 'sometext' in all the files with '.txt' extension under current directory tree and also print the filenames", "output": "find . -name '*.txt' -exec grep 'sometext' '{}' \\; -print"}
{"input": "find .gif files in /var/www and below that were last changed between 90 and 180 days ago", "output": "find /var/www -name *.gif -ctime +90 -ctime -180"}
{"input": "Display in an optimized way file status for all regular files in the current directory tree suppressing error messages", "output": "time find . -type f -exec stat {} + > /dev/null"}
{"input": "find all files in current folder and display the total lines in them", "output": "find . | xargs wc -l"}
{"input": "display all the files ending with \".user\" in /var/adm/logs/morelogs/ and excluding all regular files", "output": "find /var/adm/logs/morelogs/* -type f -prune -name \"*.user\" -print"}
{"input": "Print number of bytes in $file.", "output": "cat $file | wc -c"}
{"input": "finds all files modified within a certain time frame recursively", "output": "find . -type f -newermt \"2013-06-01\" \\! -newermt \"2013-06-20\""}
{"input": "Resolve any symlinks in working directory, and go to resulting pathname.", "output": "cd \"`pwd -P`\""}
{"input": "Replace all instances of \"STRING_TO_REPLACE\" with \"REPLACE_WITH\" in file \"index.html\" and make a backup with suffix \"bak\"", "output": "sed -ibak -e s/STRING_TO_REPLACE/REPLACE_WITH/g index.html"}
{"input": "Search the regular files of the current directory tree for string \"whatever\"", "output": "find . -type f -exec grep -H whatever {} \\;"}
{"input": "find all instances of a file in current folder and save the errors to a file", "output": "find . -name \"my.txt\" 2> find_error.txt"}
{"input": "search for files in current folder using regular expressions", "output": "find ./ -regex '.*\\..*'"}
{"input": "Find the string 'joomla' case insensitively in all the php and html files under current directory tree and display the matched lines along with the file names and line numbers", "output": "find . \\( -name \"*.php\" -o -name \"*.html\" \\) -print0 | xargs -0 grep -Hin \"joomla\""}
{"input": "display all the configuration files in the current folder which are in the current tree structure", "output": "find .  -path '*/*config'"}
{"input": "Check if \"~/mnt/sdc1\" is mounted", "output": "mount | grep -q ~/mnt/sdc1"}
{"input": "Page through both standard output and standard error of 'make'.", "output": "make 2>&1 | less"}
{"input": "display all directories which have not been accessed in the last 24*3 hours", "output": "find -type d -and -atime +3"}
{"input": "Print numbered list of all third-level files under the current directory", "output": "ls -d -1 $PWD/**/*/* | cat -n"}
{"input": "Search the current directory tree for files matching regular expression '.*myfile[0-9][0-9]?'", "output": "find . -regex '.*myfile[0-9][0-9]?'"}
{"input": "search for the word \"foo\" in all the regular/normal files with the name \"file-pattern\" in the directory \"/path/to/dir\"", "output": "find /path/to/dir/ -type f -name \"file-pattern\" -print0 | xargs -I {} -0 grep -l \"foo\" \"{}\""}
{"input": "Print a space separated list of numbers from 1 to 10", "output": "seq 10 | xargs"}
{"input": "search for the word LOG in all the files in the folder ~/jsmith", "output": "find ~jsmith -exec grep LOG '{}' /dev/null \\; -print"}
{"input": "List all .svn files/directories under current directory", "output": "find . -name .svn -exec ls {} \\;"}
{"input": "Send SIGTERM signal to all processes using TCP port 8080, requesting them to terminate.", "output": "kill $(lsof -t -i:8080)"}
{"input": "Find all files and directories in the current directory tree except those whose name is \"dirname\", case insensitive", "output": "find ./ -iname ! -iname dirname"}
{"input": "Find regular files under / that contain \"stringtofind\" and clear out their contents", "output": "find / -maxdepth 1 -xdev -type f -exec grep -Zli \"stringtofind\" {} + | parallel -0 sed \"'/./d'\" '{}'"}
{"input": "Print the paths of the directories from the paths expanded by the glob pattern /path/to/directory/*", "output": "find /path/to/directory/* -maxdepth 0 -type d"}
{"input": "rename all the spaces in mp3 files to underscore", "output": "find . -type f -iname \u201c*.mp3\u2033 -exec rename \u201cs/ /_/g\u201d {} \\;"}
{"input": "find all gzip files in a folder", "output": "find /home/foo -name \"*.gz\""}
{"input": "List all environment variables whose name contains 'ipo', showing only the names of the variables and not their values.", "output": "env | grep ipo | awk 'BEGIN {FS=\"=\"} ; { print $1 } '"}
{"input": "Find all files that have additional permissions", "output": "find / -perm -644"}
{"input": "Find all regular files in the /path/to/base/dir tree", "output": "find /path/to/base/dir -type f"}
{"input": "Gets MAC address of en0 network interface.", "output": "ifconfig en0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'"}
{"input": "Sort \"some_data\" by the first and second \";\" delimited entries and stabilizing the sort", "output": "sort -k1,1 -k2,2 -t';' --stable some_data"}
{"input": "find not case sensitive all directories that names are 'apt'", "output": "find  / -type d -iname \"apt\""}
{"input": "Find all strings matching pattern \"^${KEY}${DELIMITER}\" in $FILE file and print rest of string after $DELIMITER", "output": "cat \"$FILE\" | grep \"^${KEY}${DELIMITER}\" | cut -f2- -d\"$DELIMITER\""}
{"input": "Save the canonical path of \"$dir/$file\" in variable \"path\"", "output": "path=`readlink --canonicalize \"$dir/$file\"`"}
{"input": "display all files  expect directories in the current folder", "output": "find . ! \u2014 type d -print"}
{"input": "Find all files/directories in level $i down the current directory with all positional parameters appended with the find command", "output": "find -mindepth $i -maxdepth $i \"$@\""}
{"input": "search for a word in all the regular files in the current folder.", "output": "find -type f -print0 | xargs -r0 grep -F 'example'"}
{"input": "find all the perl files in /var/www ( case insensitive search )", "output": "find /var/www/ -type f -iname \"*.pl\" -print"}
{"input": "Print all unique directory paths under \"dir1\" compared to \"dir2\"", "output": "comm -23 <(find dir1 -type d | sed 's/dir1/\\//'| sort) <(find dir2 -type d | sed 's/dir2/\\//'| sort) | sed 's/^\\//dir1/'"}
{"input": "Counts all non-blank lines in the $i file.", "output": "sed '/^\\s*$/d' $i | wc -l ## skip blank lines"}
{"input": "display a long list and delete all the regular/normal files in the current folder starting with the word k which have been modified in the last 4 hours(360 minutes)", "output": "find . -type f -name \u201ck*.*\u201d -mmin -360 -exec ls -l \u2018{}\u2019 ; | xargs -0 /bin/rm -f"}
{"input": "Find all file paths under current directory, perform a reverse numerical sort and show first 10 file paths with their status change time", "output": "find . -type f -printf \"%C@ %p\\n\" | sort -rn | head -n 10"}
{"input": "Find all files under /path/to/dir that were modified less than 7 days ago and show only first several lines of output", "output": "find /path/to/dir -type f -mtime -7 -print0 | xargs -0 ls -lt | head"}
{"input": "Print time required to get line number 50000000 from text file \"myfile.ascii\".", "output": "time cut -f50000000 -d$'\\n' myfile.ascii"}
{"input": "Print the contents of \"xx.sh\"", "output": "cat xx.sh"}
{"input": "returns a list of  files create time is 1 minute ago under the root directory.", "output": "find / -newerct '1 minute ago' -print"}
{"input": "Perform a default cPanel configuration", "output": "find /home/*/public_html/ -type f -iwholename \u201c*/wp-includes/version.php\u201d -exec grep -H \u201c\\$wp_version =\u201d {} \\;"}
{"input": "Save the list of all .py files under and below the current directory that contain \"something\" in their pathnames to output.txt", "output": "find . -name '*.py' | tee output.txt | xargs grep 'something'"}
{"input": "display all symbolic links in current folder", "output": "find . -lname \"*\""}
{"input": "search for all pdf files in the folder \"/home/pdf\" which have been accessed in the last 60*24 hours", "output": "find /home/you -iname \"*.pdf\" -atime -60 -type -f"}
{"input": "Find all *.txt files/directories under current directory and execute process_one for each of them", "output": "find . -name \"*.txt -exec process_one {} \";\""}
{"input": "Copy \"local_file\" to \"user@host:remote_file\" via ssh protocol, saving partially transferred files, and showing progress", "output": "rsync -P -e ssh local_file user@host:remote_file"}
{"input": "search for all the directories in a folder and limit the search to current folder and give them as input to the python script", "output": "find /stuff -type d -printf '%P\\0' | xargs -0 script.py"}
{"input": "find all the png files in current folder which are present in the pattern list file \"search.txt\"", "output": "find . -name '*.png' | grep -f <(sed 's?.*?/[0-9]_[0-9]_[0-9]_&_?' search.txt)"}
{"input": "find all the files in the home folder which have been modified in the last 24 hours", "output": "find $HOME -mtime -1"}
{"input": "Find all files/directories named orm.properties under current directory", "output": "find . -name \"orm.properties\""}
{"input": "Find all files/directores under /etc and run the file command on each of them", "output": "find /etc -print0 | xargs -0 file"}
{"input": "search for a specific word in all files beginning with a specific word in the current directory", "output": "find -name 'file_*' -follow -type f -exec zcat {} \\; | agrep -dEOE 'grep'"}
{"input": "Print appended data in \"/var/log/some.log\" that match \"foo\" and \"bar\"", "output": "tail -f /var/log/some.log | grep --line-buffered foo | grep bar"}
{"input": "Set permission of all files in \"img\", \"js\", and \"html\" to 644", "output": "chmod 644 img/* js/* html/*"}
{"input": "find all the files in the file system which hae set uid enabled and save them to /root/suid.txt and those which have size greater than 100MB save them to /root/big.txt", "output": "find /    \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , ( -size +100M -fprintf /root/big.txt '%-10s %p\\n' \\)"}
{"input": "Delete all regular files named 'FILE-TO-FIND' under current directory tree", "output": "find . -type f -name \"FILE-TO-FIND\" -exec rm -f {} \\;"}
{"input": "Print a NULL-separated list of all directories of the current directory tree", "output": "find . -type d -print0"}
{"input": "Print command line of process with pid 17709", "output": "cat /proc/17709/cmdline | xargs -0 echo"}
{"input": "find all the wav files in the current folder and do not search in the sub directories", "output": "find . -name '*.wav' -maxdepth 1"}
{"input": "Recursively copy all files and folders in the current directory excluding \"exclude_pattern\" to \"/to/where/\"", "output": "rsync -r --verbose --exclude 'exclude_pattern' ./* /to/where/"}
{"input": "Change owner to \"$1\" and group to \"httpd\" of \".htaccess\"", "output": "chown $1:httpd .htaccess"}
{"input": "Find all .java files  under current directory", "output": "find . -print | grep '\\.java'"}
{"input": "get the root access", "output": "sudo su -"}
{"input": "change the extension of all the \".abc\" files in the folder \"/the/path\" to \".edefg\" and do not change in the sub directories", "output": "find /the/path -depth -type f -name \"*.abc\" -exec sh -c 'mv \"$1\" \"$(dirname \"$1\")/$(basename \"$1\" .abc).edefg\"' _ {} \\;"}
{"input": "Find all files/directories under '/directory_path' directory tree that have been modified within the last day", "output": "find /directory_path -mtime -1 -print"}
{"input": "Print the first two bytes of \"my_driver\" in octal", "output": "od --read-bytes=2 my_driver"}
{"input": "Find all *bar files/directories under current directory", "output": "find -name *bar"}
{"input": "Create a symbolic link named \"$SYMLINK\" to \"$ACTUAL_DIR\"", "output": "ln -s \"$ACTUAL_DIR\" \"$SYMLINK\""}
{"input": "Find all directories starting from the current directory", "output": "find . -type d"}
{"input": "display all files in current folder which have been modified in the last 60 minutes", "output": "find -mmin 60"}
{"input": "Check if directory $some_dir is empty", "output": "find \"`echo \"$some_dir\"`\" -maxdepth 0 -empty"}
{"input": "Remove all *bak files under current directory with confirmation prompt", "output": "find . -name '*bak' -exec rm -i {} \\;"}
{"input": "Lists all files in a current folder, separating names with comma.", "output": "ls -1 | paste -sd \",\" -"}
{"input": "Page interactively through the output of running 'command' - the arrow keys move the view around, the < and > keys go to the beginning/end of the output, the / key initiates a search, the Q key quits, etc.", "output": "command | less"}
{"input": "FInd all .txt files from current directory , Redirecting errors to /dev/null", "output": "find . -name \"*.txt\" 2>>/dev/null"}
{"input": "Search for files only that end with .php and look for the string $test inside those files", "output": "find . -name \\*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test'"}
{"input": "Calculate the md5 sum of \"submission.cpp\" with less sensitivity to superficial changes like comments or whitespace", "output": "cat submission.cpp | astyle -bj | cpp - | md5sum"}
{"input": "search for al cpp files in current folder and replace all expect the parent directory name of these files and display it them sorted order", "output": "find . -name '*.cpp' | sed -e 's/\\/[^/]*$//' | sort | uniq"}
{"input": "Find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/", "output": "ssh someone@somehost \"cd /export/home/someone && find . -name '*' -print | parallel -j1 'sleep 10;curl -u someone:password ftp://somehost/tmp/ -vT'"}
{"input": "display all the files in the current folder which have are bigger than 1KB", "output": "find . -size +1024 -print"}
{"input": "Move all *foo* (case insensitive) directories under current directory to new paths obtained by replacing all occurrences of 'foo' (case insensitive) with 'BAr' in their paths", "output": "find . -type d -iname '*foo*' -depth -exec bash -c '     echo mv \"$1\" \"${1//[Ff][Oo][Oo]/BAr}\" ' -- {} \\;"}
{"input": "Find all files/directories named 'document' in maximum 4 levels down the '/usr' directory", "output": "find /usr -maxdepth 4 -name document -print"}
{"input": "Sets shell option 'dotglob'.", "output": "shopt -s dotglob"}
{"input": "Save IP addresses of the host name in variable \"ip\"", "output": "ip=$(hostname -I)"}
{"input": "find all the files ending with \"~\" in current folder and move them to temp folder", "output": "find -name '*~' -print0 | xargs -0 -I _ mv _ /tmp/"}
{"input": "Updates all packages with 'rpmfusion' in name.", "output": "yum update $(find-repos-of-install | grep rpmfusion)"}
{"input": "Print the names of all files in or below the current directory, with all of the file permission bits S_ISUID, S_ISGID, and S_IWOTH set", "output": "find . -perm -o+w,+s"}
{"input": "Reports count of characters in the value of ${FOO_NO_EXTERNAL_SPACE} variable as follows:  \"length(FOO_NO_EXTERNAL_SPACE)==<counted number of characters>\"", "output": "echo -e \"length(FOO_NO_EXTERNAL_SPACE)==$(echo -ne \"${FOO_NO_EXTERNAL_SPACE}\" | wc -m)\""}
{"input": "find all files in the file system which belong to the user pat and having the word \"filename\" in their name.", "output": "find / -user pat -iname \"filename\""}
{"input": "Recursively change the ownership of all directories in the current directory excluding \"foo\" to \"Camsoft\"", "output": "ls -d * | grep -v foo | xargs -d \"\\n\" chown -R Camsoft"}
{"input": "Scan every file in /etc for IPV4 addresses while trying to elminate false positives.", "output": "find /etc -type f -exec cat '{}' \\; | tr -c '.[:digit:]' '\\n' | grep '^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$'"}
{"input": "Sets shell options 'globstar', 'dotglob' and 'nullglob'.", "output": "shopt -s globstar nullglob dotglob"}
{"input": "Find the file in the current directory tree with inode number $inum and delete it", "output": "find . -inum $inum -exec rm {} \\;"}
{"input": "display list of all the hidden files in the folder $HOME/projects/ and save the output to the file foo.txt", "output": "find $HOME/projects/ -name \".*\" -ls > foo.txt"}
{"input": "Search the current directory tree for regular files omitting directory `omit-directory'", "output": "find . -name omit-directory -prune -o -type f  -print"}
{"input": "Find all sample*_1.txt files/directories under current directory", "output": "find . -name \"sample*_1.txt\""}
{"input": "Find all directories in the current directory tree that are not accessible by all", "output": "find -type d ! -perm -111"}
{"input": "Find all *shp* directories under current directory and move '*' (literal) file/directory inside those directories to shp_all", "output": "find . -name '*shp*'   -execdir mv '{}/*' shp_all ';'"}
{"input": "Puts the job 1 in the background.", "output": "bg %1 [puts the job in the background]"}
{"input": "Recursively finds all files with any cased text \"Text\" in a current folder, and precedes found string with its number in file.", "output": "grep -inr \"Text\" folder/to/be/searched/"}
{"input": "Open executable file of command \"yum\" in vi", "output": "vi `which yum`"}
{"input": "Search /usr/src for filenames not ending in \"*,v\"", "output": "find /usr/src ! \\( -name '*,v' -o -name '.*,v' \\) '{}' \\; -print"}
{"input": "Truncate all regular files under the current directory", "output": "find . -type f -maxdepth 1 -print0 | xargs -0i sh -c \"cat /dev/null > \\\"{}\\\"\""}
{"input": "find all the jpg images in the folder /path/to/files and convert them into pdf.", "output": "find /path/to/files -iname '*.jpg' -exec mogrify -format pdf {} +"}
{"input": "find all the links in the current folder and following it to the pointed path", "output": "find -L /target -type l"}
{"input": "find all files ending with \"js.compiled\" in current folder and rename them.", "output": "find . -name \"*.js.compiled\" -exec rename -v 's/\\.compiled$//' {} +"}
{"input": "create a symbolic link in current directory named \"environments\" to file \"../config/environments\"", "output": "ln -s \"../config/environments\""}
{"input": "Write 10 lines of \"y\" to file \"10lines.txt\"", "output": "yes | head -n10 > 10lines.txt"}
{"input": "Fix permissions for a group of files with given extension", "output": "find /usr/local -name \"*.html\" -type f -exec chmod 644 {} \\;"}
{"input": "Move all files excluding hidden files in \"/path/subfolder/\" to \"/path/\"", "output": "mv /path/subfolder/* /path/"}
{"input": "Find all files/directories under current directory tree whose names start with '(test)' followed by two digits and end with '.txt' extension", "output": "find . -regex \".*/(test)[0-9][0-9]\\.txt\""}
{"input": "Find all files called \"file1.txt\" that reside under and below /home/wsuNID/", "output": "find /home/wsuNID/ -name file1.txt"}
{"input": "Creates 5-letter random file name and saves it in 'rand_str' variable.", "output": "rand_str=\"$(mktemp --dry-run XXXXX)\""}
{"input": "change group of the file /tmp/php_session to group daemon", "output": "chown -R :daemon /tmp/php_session"}
{"input": "find all files in etc which have been changed in the last 25 hours", "output": "find /etc -ctime -1"}
{"input": "Find symbolic links in lpi104-6 and research/lpi104-6 to files whose pathnames end in \"file1\"", "output": "find lpi104-6 research/lpi104-6 -lname \"*file1\""}
{"input": "Force create a symbolc link named \"/usr/local/bin/fpt\" to \"/usr/local/bin/findpdftext\"", "output": "sudo ln -s -f \"/usr/local/bin/findpdftext\" \"/usr/local/bin/fpt\""}
{"input": "Remove trailing whitespaces from all regular non-hidden files in the current directory tree", "output": "find . -type f -name '*' -exec sed --in-place 's/[[:space:]]\\+$//' {} \\+"}
{"input": "Search core files in current direcory and delete .", "output": "find . -name core -exec rm {} \\;"}
{"input": "find all the files in the home folder which have not been modified in the last 1 year.", "output": "find $HOME -mtime +365"}
{"input": "Find all files in the current directory tree whose size is greater than 1MB", "output": "find . -size +1M"}
{"input": "Prints sizes of all top-level folders in a current folder with human-readable format and descending order.", "output": "du -h --max-depth=1 . | sort -n -r"}
{"input": "Search the current directory recursively for regular files last changed more than 2 days ago", "output": "find . type -f -ctime +2"}
{"input": "Find all regular files under and below /home/admin/public_html/, and change their permissions to 644", "output": "find . /home/admin/public_html/ -type f -exec chmod 644 {} \\;"}
{"input": "Calculate the md5 sum of all files in \"/your/dir\" including content and filenames and following symbolic links", "output": "grep -aR -e . /your/dir | md5sum | cut -c-32"}
{"input": "Read a line from standard input into variable \"message\" with the prompt \"Please Enter a Message: $cr\"", "output": "read -p \"Please Enter a Message: $cr\" message"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*", "output": "find . -mtime 0 | grep -v '^\\./en' | grep -v '^\\./es' | grep -v .swp"}
{"input": "Get only the latest version of file from the 'custlist*' files under current directory", "output": "find . -name custlist\\* | perl -ne '$path = $_; s?.*/??; $name = $_; $map{$name} = $path; ++$c; END { print $map{(sort(keys(%map)))[$c-1]} }'"}
{"input": "Find all directories that have been accessed $FTIME days ago under current directory tree", "output": "find . -type d -atime $FTIME"}
{"input": "recursively change owner and group of the directory  /opt/antoniod/ to user and group antoniod", "output": "chown -R antoniod:antoniod /opt/antoniod/"}
{"input": "Recursively copy \"source\", \"dir\", and \"target\" to \"dir\" as a dry run", "output": "rsync -rvc --delete --size-only --dry-run source dir target dir"}
{"input": "Get domain name from dig reverse lookup.", "output": "$dig -x 8.8.8.8 | grep  PTR | grep -o google.*"}
{"input": "List all files and directories in long list format with a time style of \"long-iso\" and sort from oldest modifed to newest modified", "output": "ls -l --time-style=long-iso | sort -k6"}
{"input": "Find the top level directories that contain a 'bin' directory in it or in one of it's sub-directories and print a sorted list to file b", "output": "find . -type d -name bin | cut -d/ -f1,2 | sort > b"}
{"input": "find all the directories with the name \"uploads\" in current folder", "output": "find . -type d -name 'uploads'"}
{"input": "set MyVariable to the value of VARIABLE_NAME", "output": "myVariable=$(env  | grep VARIABLE_NAME | grep -oe '[^=]*$');"}
{"input": "Archive \"somedir/./foo/bar/baz.c\" to \"remote:/tmp/\" preserving the relative path of \"foo/bar/baz.c\"", "output": "rsync -avR somedir/./foo/bar/baz.c remote:/tmp/"}
{"input": "Print number of lines that equal in files '/home/xyz/a.csv1' and '/home/abc/tempfile'", "output": "comm -12 <(sort -u /home/xyz/a.csv1) <(sort -u /home/abc/tempfile) | wc -l"}
{"input": "find files in the users home directory and for each one, ask the user to confirm to delete the file.", "output": "find $HOME/. -name *.txt -ok rm {} \\;"}
{"input": "run somecommand with as many arguments as fit on the command line at once for files recursively in /path that match 'pattern'", "output": "find /path -name 'pattern' -exec somecommand {} +"}
{"input": "Find all Lemon*.mp3 files under current directory and run mplayer with these files", "output": "find . -name 'Lemon*.mp3' -exec mplayer {} ';'"}
{"input": "Print newline, word and byte count for all .h, .c, .cpp, .php and .cc files under current directory tree and also show the total counts", "output": "wc `find . -name '*.[h|c|cpp|php|cc]'`"}
{"input": "Changes the group of defined file.", "output": "chgrp"}
{"input": "Find all regular files named postgis-2.0.0 under current directory", "output": "find . -type f -name \"postgis-2.0.0\""}
{"input": "Rename all .txt files to .bak in the current directory tree", "output": "find . -name \"*.txt\" | sed \"s/\\.txt$//\" | xargs -i echo mv {}.txt {}.bak | sh"}
{"input": "Find files/directories named blah (case insensitive) under current directory", "output": "find ./ -iname blah"}
{"input": "Print a time stamp for each successful ping to \"host\"", "output": "ping host | awk '{if($0 ~ /bytes from/){print strftime()\"|\"$0}else print}'"}
{"input": "Prints year-month-date format for given time", "output": "date -d \"yesterday 13:00\" '+%Y-%m-%d'"}
{"input": "Locate python interpreter and show its human-readable file type description, resolving any symlinks.", "output": "file -L $(python -c 'import sys; print(sys.executable)')"}
{"input": "Find all the SGID bit files whose permissions set to 644", "output": "find / -perm 2644"}
{"input": "Find every directory under \"0001\" and make new directories replacing \"0001\" with \"0002\" at the beginning of their names.", "output": "find 0001 -type d | sed 's/^0001/0002/g' | xargs mkdir"}
{"input": "Enables 'nullglob' shell option.", "output": "shopt -s nullglob"}
{"input": "find regular files whose filename is \"your_pattern\", suppressing all error messages.", "output": "find / -type f -name \"your_pattern\" 2>/dev/null"}
{"input": "Find all *shp* directories under current directory and move all regular files inside those directories to ../shp_all/", "output": "mv $(find $(find . -name \"*shp*\" -printf \"%h\\n\" | uniq) -type f) ../shp_all/"}
{"input": "Print the list of .txt files under and below the current directory", "output": "find . -name '*.txt' -print0|xargs -0 -n 1 echo"}
{"input": "find all the files in the file system which have the permission 777 and with the name \"dateiname\"", "output": "find / -perm 777 -iname \"Dateiname\""}
{"input": "List files larger than 10MB in the /var directory recursively", "output": "find /var/ -size +10M -exec ls -lh {} \\;"}
{"input": "Display IP address and login time of the current user's session", "output": "last -i | grep $(whoami) | grep 'still logged in'"}
{"input": "Find all files/directories under current directory bypassing file hierarchies in lexicographical order", "output": "find -s"}
{"input": "Count total number of lines in all *.txt file in cuuent directory .", "output": "find .  -type f  -name '*.txt' -exec wc -l {} \\; | awk '{total += $1} END{print total}'"}
{"input": "Saves exit statuses of piped commands in a system variable PIPESTATUS='([0]=\"1\" [1]=\"2\")", "output": "false | true"}
{"input": "Find all *fink* files/directories in entire file system", "output": "find / \\( -type f -or -type d \\) -name \\*fink\\* -print"}
{"input": "Find the \"param1\" string in regular files under and below /var", "output": "find /var  -type f -exec grep \"param1\" {} \\; -print"}
{"input": "Report file system '/dev/disk0s2' disk usage", "output": "df | grep /dev/disk0s2"}
{"input": "create symbolic links in current directory to all files located in directory \"/original\" and have filename extension \".processname\"", "output": "ln -s $(echo /original/*.processme) ."}
{"input": "Find files/directories named 'foo.bar' under './dir1' and './dir2' directory tree", "output": "find ./dir1 ./dir2 -name foo.bar -print"}
{"input": "Get the command line args passed to a running process", "output": "ps -fp <pid>"}
{"input": "Generate UUIDs for the files from the current directory tree", "output": "find -printf \"%P\\0\" -exec uuid -v 4 \\; | sort | awk -F'\\0' '{ print $2 \" \" $1}'"}
{"input": "Set shell option 'histverify'.", "output": "shopt -s histverify"}
{"input": "Find all files/directories named '.todo' under $STORAGEFOLDER directory tree and print the parent directory names", "output": "find \"$STORAGEFOLDER\" -name .todo  -exec dirname {} \\;"}
{"input": "Forcibly create symbolic links in target directory \"~/staging\" for all files located in directory \"~/mirror\"", "output": "ln --force --target-directory=~/staging ~/mirror/*"}
{"input": "Delete all regular files named 'IMAG1806.jpg' under current directory tree", "output": "find . -type f -name \"IMAG1806.jpg\" -exec rm -f {} \\;"}
{"input": "displays all files in the current directory", "output": "find ."}
{"input": "Print 7 spaces in a row", "output": "yes ' ' | head -7 | tr -d '\\n'"}
{"input": "Move files older than 1 day to directory TMP", "output": "find . -atime +1 -type f -exec mv {} TMP \\;"}
{"input": "Find all files/directories named 'file_name' under current directory tree", "output": "find . -name file_name"}
{"input": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"", "output": "find . -name '*bills*' -exec grep -H \"put\" {} \\;"}
{"input": "Remove trailing whitespaces in .txt files from the current directory tree", "output": "find . -type f -name '*.txt' -exec sed --in-place 's/[[:space:]]\\+$//' {} \\+"}
{"input": "create directory temp into home directory", "output": "mkdir ~/temp"}
{"input": "Find files/directories in entire file system with at least 644 permission", "output": "find / -perm -644"}
{"input": "Find *2011* files and grep for the string 'From: Ralph' in those files", "output": "find . -name '*2011*' -print | xargs -n2 grep 'From: Ralph'"}
{"input": "find all the files from root folder which have nogroup or noname and dispaly their details.", "output": "find / \\( -nogroup -o -noname \\) -ls"}
{"input": "Move all files and directories in the current directory to \"/foo\"", "output": "mv * /foo"}
{"input": "SSH with parameters specified in \"$@\" using key file \"~/.ssh/gitkey_rsa\"", "output": "ssh -i ~/.ssh/gitkey_rsa \"$@\""}
{"input": "Removes all files from current folder but 5 newest ones.", "output": "find . -maxdepth 1 -type f -printf '%T@ %p\\0' | sort -r -z -n | awk 'BEGIN { RS=\"\\0\"; ORS=\"\\0\"; FS=\"\" } NR > 5 { sub(\"^[0-9]*(.[0-9]*)? \", \"\"); print }' | xargs -0 rm -f"}
{"input": "removes the 4th-from to 6th-from last lines in file", "output": "tac filename | sed 4,6d | tac"}
{"input": "Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.", "output": "file=`basename \"$1\"`"}
{"input": "display all the files in the current folder excluding those that are present in the path \"./etc\"", "output": "find . ! -wholename \"./etc*\""}
{"input": "delete all the files in the current folder which have been modified in the last 14*24 hours", "output": "find . -mtime -14 -print|xargs -i rm \\;"}
{"input": "Print files created/modified in the last day", "output": "find /directory -newermt $(date +%Y-%m-%d -d '1 day ago') -type f -print"}
{"input": "Replace all instances of \"STRING_TO_REPLACE\" with \"STRING_TO_REPLACE_IT\" in file \"index.html\" and make a backup with suffix \".bak\"", "output": "sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html"}
{"input": "Find all MP3s in the /home directory tree", "output": "find /home -type f -name '*.mp3'"}
{"input": "Search the current directory tree for regular files whose names end in \".shtml\" or \".css\"", "output": "find -type f -regex \".*/.*\\.\\(shtml\\|css\\)\""}
{"input": "find all files in the current directory and sub-directories that were modified after the /etc/passwd file was modified", "output": "find -newer /etc/passwd"}
{"input": "Go to top level of git tree using relative path", "output": "cd $(git rev-parse --show-cdup)"}
{"input": "Find all *.jpg files in Cam2/2013* paths and send the contents to a ffmpeg command to create a video file", "output": "find Cam2/2013* -name \"*.jpg\" -print0 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 \"Cam2-2013-30fps-19crf.mp4\""}
{"input": "find files in the current directory and sub-directories, whose content was updated within the last hour", "output": "find . -mmin -60"}
{"input": "Prints real path of the folder containing $0 file.", "output": "$(readlink -f $(dirname \"$0\"))"}
{"input": "find a.out, *.o and core files under the current directory and sub-directories and delete them.", "output": "find . \\( -name a.out -o -name '*.o' -o -name 'core' \\) -exec rm {} \\;"}
{"input": "Finds IP address of default network interface.", "output": "netstat -rn | gawk '/UG/ {print $NF}' | xargs ifconfig | gawk 'match($0,/inet addr:(.*) B/,a) {print a[1]}'"}
{"input": "Find all directories under /path/to/dir (no sub-directories) and archive them (with relative paths excluding the preceding './') into files with .tar.gz extension", "output": "find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sh -c 'd=${1##*/}; sudo tar -zcpvf \"$d\".tar.gz \"$d\"' - {} \\;"}
{"input": "display all directories in current folder", "output": "find . -type d -print0"}
{"input": "Print only first line of 'file' content, formatted as 29-symbol wide column, regarding space symbol as a word separator", "output": "cat file | fold -s -w29 | head -1"}
{"input": "Search directory /home/ABCD recursively, starting from one level below, for regular files", "output": "find /home/ABCD/ -mindepth 1 -type f -print"}
{"input": "Save the date 222 days before today to the variable 'date_222days_before_TodayDay'", "output": "date_222days_before_TodayDay=$(date --date=\"222 days ago\" +\"%d\")"}
{"input": "Find all files with space in their names under current directory", "output": "find . -type f -name '* *'"}
{"input": "Find \"file.xml\" under the current directory and change directory to its parent", "output": "cd `find . -name file.xml -printf %h`"}
{"input": "Force create a symbolic link as a file named \"/usr/lib/jvm/default-java\" to \"$default_java_dir\" with verbose output", "output": "sudo ln -sTfv \"$default_java_dir\" \"/usr/lib/jvm/default-java\""}
{"input": "Find files with size more than 200557600B and which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them", "output": "find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -exec rm {} \\;"}
{"input": "Set permissions to 660 for all regular files in the current directory tree", "output": "find . -type f -exec chmod 0660 {} +"}
{"input": "Remove all .txt files with spaces in names in and below the current directory", "output": "find -name \"*\\ *.txt\" | xargs rm"}
{"input": "find all file name in curent directory ,  -exec will file all file output  awk used here for print only file name .", "output": "find .  -type f  -exec ls -lrt {} \\; |awk -F' ' '{print $9}'"}
{"input": "Decompresses file.", "output": "bzip2 -d /tmp/itunes20140618.tbz"}
{"input": "Print the names and sizes of regular files residing in the \"dir\" directory tree", "output": "find dir -type f -printf \"f %s %p\\n\""}
{"input": "Display kernel name, release, and version.", "output": "uname -s -r -v"}
{"input": "Find the most recently changed files in a subtree", "output": "find . -type f -printf '%TY-%Tm-%Td %TT   %p\\n' | sort"}
{"input": "Silently read a single character from standard input into variable \"REPLY\" without backslash escapes, with a timeout of 5 seconds, and using the prompt $'Press any key or wait 5 seconds to continue...\\n'", "output": "read -rsp $'Press any key or wait 5 seconds to continue...\\n' -n 1 -t 5"}
{"input": "Removes first and last parts of path $path and saves the result in 'finalName' variable.", "output": "finalName=$(dirname ${path#*/})"}
{"input": "Print amount of space available on the file system containing path to the current working directory.", "output": "df $PWD | awk '/[0-9]%/{print $(NF-2)}'"}
{"input": "create and list filenames in the archive", "output": "tar cf - $PWD|tar tvf -|awk '{print $6}'|grep -v \"/$\""}
{"input": "Search the home directory tree for files matching pattern '*.txt'", "output": "find ~ -name *.txt"}
{"input": "Finds recursively all files in '/path/' excluding folders dir1, dir2 and all like *.dst, that contain 'pattern', and prints matched strings with string number and file name.", "output": "grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e \"pattern\""}
{"input": "Change permissions of all files ending in \".php\" under the current directory to 755 and print a '+' for each file", "output": "find . -name '*.php' -exec chmod 755 {} \\; -exec echo '+' \\;"}
{"input": "Display differences between output of two programs, 'a' and 'b', residing in the current working directory.", "output": "diff <(./a) <(./b)"}
{"input": "Find files/directories under /tmp smaller than 100 bytes", "output": "find /tmp -size -100c"}
{"input": "Save the canonical filename of the script in variable \"me\"", "output": "me=$(readlink --canonicalize --no-newline $0)"}
{"input": "Change the owner of all files in \"/empty_dir/\" to \"root\" using at most 10 files at a time", "output": "ls /empty_dir/ | xargs -L10 chown root"}
{"input": "Put the output of tty into a variable, then searches the output of \"who\" for TTY with \"/dev/\" removed and saves it to \"WHOLINE\"", "output": "TTY=$(tty) WHOLINE=$(who | grep \"${TTY#/dev/}\")"}
{"input": "Find all executable files under {} and take their names only and reverse sort them", "output": "find {} -type f -depth 1 -print0 -perm +0111 | xargs -n1 -0 basename | sort -r && echo"}
{"input": "Find all files/directories in level 1 down the $queue directory with all positional parameters appended with the find command", "output": "echo \"$queue\" | xargs -I'{}' find {} -mindepth 1 -maxdepth 1 $*"}
{"input": "Print 'infile' content with line numbers", "output": "cat -n infile"}
{"input": "List an empty environment (prints nothing)", "output": "env -i"}
{"input": "set variable r to currently running kernel release, ie. 4.4.0-81-generic", "output": "r=\"$(uname -r)\""}
{"input": "List detailed information about all Jar files in the current directory tree", "output": "find . -iname \"*.jar\" | xargs -n1 zipinfo"}
{"input": "Extract path and query part from URL", "output": "echo \"$url\" | cut -d'/' -f4-"}
{"input": "Recursively find files in the current directory with a modification time more than 7 days ago, save the filenames to \"compressedP.list\", and compress no more than 10 at a time", "output": "find . -type f  -mtime +7 | tee compressedP.list | xargs -I{} -P10 compress {} &"}
{"input": "change the extension of all the files in the current folder to html excluding those html files and those which are present in another disk partition", "output": "find . -xtype f \\! -iname *.html   -exec mv -iv \"{}\"  \"{}.html\"  \\;"}
{"input": "Find all files in and below all subdirectories of the current directory", "output": "find . -mindepth 2"}
{"input": "display all files in current folder excluding those that have the word \"git\" in their name and display files that have git in their path names", "output": "find . ! -name '*git*' | grep git"}
{"input": "search for the file foo.txt in the entire file system", "output": "find / -name foo.txt"}
{"input": "List file information of the full path of command \"c++\"", "output": "ls -ald `which c++`"}
{"input": "find all the php files in current folder using regular expressions", "output": "find . -regex '.+\\.php'"}
{"input": "Forward port 8000 bound on localhost to port 22 in 'clusternode' via 'user@bridge'", "output": "ssh -L localhost:8000:clusternode:22 user@bridge"}
{"input": "Split \"data.csv\" into files with at most 100 lines each and using a prefix \"data_\" and numeric suffixes starting with 1 and ending with \".csv\"", "output": "split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_"}
{"input": "List all directories and subdirectories", "output": "find . -type d"}
{"input": "Find *.jpg screenshots that are bigger than 500k", "output": "find ~/Images/Screenshots -size +500k -iname '*.jpg'"}
{"input": "Counts lines in each *.php file sorted by file path.", "output": "find . -name '*.php' -type f | sort | xargs wc -l"}
{"input": "Installs 'firefox' package without using 'sublime2' repository.", "output": "yum --disablerepo=sublime2 install firefox"}
{"input": "Print file information of command \"passwd\"", "output": "ls -l `which passwd`"}
{"input": "find any files or directories called \".svn\" under the current directory and run a recursive delete (without prompting) command on each one.", "output": "find . -iname .svn -exec bash -c 'rm -rf {}' \\;"}
{"input": "Format the output of \"printf ...\" to fit in 80 characters per line", "output": "printf ... | fold -w 80"}
{"input": "locate large files (> 100 MB) in /home/ for 'cleaning'", "output": "find /home -type f -size +100M -print0 |xargs -0 rm"}
{"input": "Search all files in the current directory tree, except GIT files, for \"string-to-search\"", "output": "find . -name .git -prune -o -print | xargs grep \"string-to-search\""}
{"input": "search for a word in all the shell scripts in the current folder and display the matched files.(case insensitive search in grep commad)", "output": "find . -type f -name \"*.sh\" -exec grep -il landoflinux {} \\;"}
{"input": "Find all files whose names begin with 'Makefile' in the /usr/ports directory tree and count how many of them contain 'QMAKESPEC'", "output": "find /usr/ports/ -name Makefile\\* -exec grep -l QMAKESPEC '{}' '+' | wc -l"}
{"input": "Send SIGKILL (signal 9) signal to all processes whose command matches \"csp_build\"", "output": "kill -9 `pgrep -f cps_build`"}
{"input": "Saves calendar of $month, $year in the 'cal' variable.", "output": "cal=$(echo $(cal \"$month\" \"$year\"))"}
{"input": "Display a character dump of \"oldfile\"", "output": "od -c oldfile"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -print0 | xargs -0 stat -f \"%m %N\" | sort -rn | head -1 | cut -f2- -d\" \""}
{"input": "Print the list of files in the home directory tree whose names begin with \"Foto\"", "output": "find ~ -name 'Foto*'"}
{"input": "Calculate the md5 sum of the md5 sum of all the files sorted under \"$path\"", "output": "find \"$path\" -type f -print0 | sort -z | xargs -r0 md5sum | md5sum"}
{"input": "Create a tar archive of files from directory tree \"data\"", "output": "find data/ -print0 | tar -T - --null --create -f archive.tar"}
{"input": "Find all the files without permission 777", "output": "find / -type f ! -perm 777"}
{"input": "Find the sorted and unique parent directory paths appended with : of all the files that are executable by owner under ~/code directory without descending into hidden directories and redirect the output to the file ~/.codepath", "output": "find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\\n' |sort |uniq |tr -d '\\n' > ~/.codepath"}
{"input": "display all files in current folder using regular expression", "output": "find -regex \"$rx\""}
{"input": "Find all 1.txt, 2.txt and 3.txt files under current directory and change the permission to 444", "output": "find . \\( -name 1.txt -o -name 2.txt -o -name 3.txt \\) -print|xargs chmod 444"}
{"input": "search in the current folder for all the text files and display their names", "output": "find . -type f -name \"*.txt\" -exec printf \"File: %s\\n\" {} \\;"}
{"input": "Search the current directory recursively for files writable for `others'", "output": "find . -perm -o+w"}
{"input": "Archive directory \"tata\" to directory \"tata2\", compressing data during copy.", "output": "rsync -avz tata/ tata2/"}
{"input": "Delete all directories in the /myDir directory tree", "output": "find /myDir -type d -delete"}
{"input": "Create a symbolic link relative to link location named \"$dest_dir/$orig_name\" to \"$orig_dest\"", "output": "ln -r -s \"$orig_dest\" \"$dest_dir/$orig_name\""}
{"input": "find files in /dir/path/look/up directory that names are dir-name-here", "output": "find /dir/path/look/up -name \"dir-name-here\""}
{"input": "Gets IP address of 'en0' network interface.", "output": "ifconfig en0 | awk '$1 == \"inet\" {print $2}'"}
{"input": "Checks your Homebrew system for potential problems.", "output": "brew doctor"}
{"input": "Print a top 20 histogram of characters used from standard input showing backslash escapes for non-displayables", "output": "od -cvAnone -w1 | sort -b | uniq -c | sort -rn | head -n 20"}
{"input": "Get the total sizes of all files under current directory", "output": "find path -type f -printf '%s\\n' | awk '{sum += $1} END {print sum}'"}
{"input": "Remove all files on the system that have been changed within the last minute", "output": "find / -newerct '1 minute ago' -print | xargs rm"}
{"input": "Set variable 'path' to name of current directory (without the containing directories) converted to lowercase.", "output": "path=$(basename $(pwd) | awk '{print tolower($0)}')"}
{"input": "Write \"deb blah ... blah\" to standard output and append to \"/etc/apt/sources.list\" as root", "output": "echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list"}
{"input": "List all defined bash functions", "output": "set | egrep '^[^[:space:]]+ [(][)][[:space:]]*$' | sed -r -e 's/ [(][)][[:space:]]*$//'"}
{"input": "This command find displays the files which are modified in the last 15 minutes. And it lists only the unhidden files. i.e hidden files that starts with a . (period) are not displayed in the find output.", "output": "find . -mmin -15 \\( ! -regex \".*/\\..*\" \\)"}
{"input": "search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday", "output": "find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname \"*.pl\""}
{"input": "Display all environment variables, functions, and aliases, pausing for user interaction after each page of output.", "output": "set | more"}
{"input": "split a file \"list.txt\" into pieces per 600 lines", "output": "split -l 600 list.txt"}
{"input": "Recursively removes all empty folders under current path, printing info message on each operation, and suppressing error messages if folder is not empty.", "output": "find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +"}
{"input": "Find all files accessed on the 29th of September, 2008, starting from the current directory", "output": "find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30"}
{"input": "Remove files erroneously named `-F'", "output": "find . -name \"-F\" -exec rm {} \\;"}
{"input": "List all \".txt\" files with a unique md5 hash", "output": "md5sum *.txt | sort | perl -ne '($y,$f)=split; print \"$f\\n\" unless $y eq $x; $x=$y'"}
{"input": "Search the /dir directory tree for files whose names match regular expression '.*2015.*\\(album.*\\|picture.*\\)'", "output": "find /dir -regex '.*2015.*\\(album.*\\|picture.*\\)'"}
{"input": "Print unique lines of sorted \"File 1\" compared with sorted \"File 2\"", "output": "comm -23 \"File 1\" \"File 2\""}
{"input": "display a long listing of all the files in the current folder which have been modified in the last 24 hours", "output": "find . -mtime -1 -ls"}
{"input": "Delete files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -print | xargs /bin/rm"}
{"input": "Change permissions to 644 for all regular files under the /path/to/dir/ tree unless these permissions are already set", "output": "find /path/to/dir ! -perm 0644 -exec chmod 0644 {} \\;"}
{"input": "find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir", "output": "find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir"}
{"input": "Run 'otherscript.sh' script with all environment variables specified in the file 'xxxx'", "output": "env `cat xxxx` otherscript.sh"}
{"input": "Search the current directory tree for *bash* files", "output": "find . -name \"*bash*\""}
{"input": "Save the day of the year from the time string \"20131220\" to variable 'DATECOMING'", "output": "DATECOMING=$(echo `date -d \"20131220\" +%j`)"}
{"input": "split content of the files *.txt beginning with 1001st line into pieces per 1000 lines", "output": "cat *.txt | tail -n +1001 | split --lines=1000"}
{"input": "Convert *.au files to *.wav files using `sox'", "output": "find -type f -name '*.au' | awk '{printf \"%s %s\\n\",$0,$0\".wav\" }' | xargs sox"}
{"input": "Save Maven project version to variable \"version\"", "output": "version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | egrep -v '^\\[|Downloading:' | tr -d ' \\n')"}
{"input": "Find files/directories in entire file system that have been modified in the last minute", "output": "find / -mmin -1"}
{"input": "Change permissions to u=rwx,g=rx,o= for all directories in the current directory tree", "output": "find . -type d -exec chmod u=rwx,g=rx,o= '{}' \\;"}
{"input": "search for all regular files in the current directory which have the extension \"c\" or \"asm\"", "output": "find . -type f \\( -iname \"*.c\" -or -iname \"*.asm\" \\)"}
{"input": "Search directories /res/values-en-rUS and /res/xml for XML files", "output": "find /res/values-en-rUS /res/xml -iname '*.xml'"}
{"input": "create a symbolic link in current directory named \"my_db\" to file \"/media/public/xampp/mysql/data/my_db\"", "output": "ln /media/public/xampp/mysql/data/my_db -s"}
{"input": "Replace all newlines with spaces in the contents of \"file\"", "output": "sed -e '{:q;N;s/\\n/ /g;t q}' file"}
{"input": "Print pathnames of all files in the current directory and below skipping files under SCCS directories", "output": "find . -print -name SCCS -prune"}
{"input": "Identify files that do not have a listing in the /etc/passwd or /etc/group file", "output": "find / -nouser -o  -nogroup"}
{"input": "Finds out what groups a current user has.", "output": "groups"}
{"input": "prints a number stored among text in $filename", "output": "echo $filename | egrep -o '[[:digit:]]{5}' | head -n1"}
{"input": "search for the word \"search-pattern\" in all the regular/normal files in the current folder and display the matched file name", "output": "find . -type f | xargs grep -l \"search-pattern\""}
{"input": "Search the current directory tree for regular files that were changed $FTIME days ago", "output": "find . -type f -ctime $FTIME"}
{"input": "Find all .zip files in the current directory tree and unzip them deleting the archives on success", "output": "find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \\; -exec rm {} \\;"}
{"input": "display all the files ending with \".foo\" excluding those that are in the directory \".snapshot\"", "output": "find . -name .snapshot -prune -o -name '*.foo' -print"}
{"input": "Find out all *.sh owned by user vivek", "output": "find / -user vivek -name \"*.sh\""}
{"input": "Recursively change the owner of all files in \"testproject/\" to \"ftpuser\"", "output": "chown ftpuser testproject/ -R"}
{"input": "Request authority info with comments for 'djzah.com' from name server 'ns1.hosangit.com', and pass it to 'script.awk' awk script.", "output": "dig @ns1.hosangit.com djzah.com +noall +authority +comments | awk -f script.awk"}
{"input": "Go back to last directory.", "output": "cd -"}
{"input": "View the man page of find", "output": "man find"}
{"input": "find all the files in the entire file system that have been modified exactly 7 days before which end with \"conf\"", "output": "find / -name \"*conf\" -mtime 7"}
{"input": "delete all files that have the extension \"bam\" in current directory", "output": "find . -name \"*.bam\" | xargs rm"}
{"input": "Find all files/directories under current directory and print only 2nd field from output delimited by '/'", "output": "find . | awk -F\"/\" '{ print $2 }'"}
{"input": "Recursively finds all '*.pdf' files in a current folder and removes them.", "output": "find . -name \"*.pdf\" -print0 | xargs -0 rm"}
{"input": "Locate world-writable files and directories on the system", "output": "find / -path /proc -prune -o -perm -2 ! -type l -ls"}
{"input": "Print the list of the subdirectories of /path/to/dir", "output": "find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d"}
{"input": "Search for the case insensitive pattern 'PATTERN' in all files under current directory tree and display the matched files", "output": "find . -print | xargs grep -l -i \"PATTERN\""}
{"input": "search for the word text in all the python files in the current folder", "output": "find . -iname '*py' -exec grep \"text\" {} \\;"}
{"input": "Search the system for files and directories owned by group `managers'", "output": "find / -group managers -print"}
{"input": "Search for the regex \"\\$wp_version =\" in all the regular files that end with '/wp-includes/version.php' (case insensitive) in their paths in directories/files taken from the glob pattern '/var/www/vhosts/*/httpdocs' and show the matched lines along with the file names", "output": "find /var/www/vhosts/*/httpdocs -type f -iwholename \"*/wp-includes/version.php\" -exec grep -H \"\\$wp_version =\" {} \\;"}
{"input": "Find all xml files under current directory and archive them to .bz2 archives", "output": "for i in `find . | grep \".xml$\"`; do bzip2 $i; done"}
{"input": "Append history lines from this session to the history list", "output": "history -a"}
{"input": "Find all /path/to/check/* regular files without descending into any directory", "output": "find /path/to/check/* -maxdepth 0 -type f"}
{"input": "Create hard links of all files and directories matching \"test/icecream/cupcake/*\" or \"test/mtndew/livewire/*\" in \"test-keep\" preserving directory hierarchy", "output": "find test -path 'test/icecream/cupcake/*' -o -path 'test/mtndew/livewire/*' | cpio -padluv test-keep"}
{"input": "Find all files/directories named 'photo.jpg' (case insensitive) under current directory tree", "output": "find . -iname \"photo.jpg\""}
{"input": "Find all \"G*.html\" files modified more than 7 days ago in the current directory tree and pass them as arguments to script /path/to/script_7zipi", "output": "find . -mtime +7 -name \"G*.html\" -execdir  /path/to/script_7zipi {} +"}
{"input": "Go to directory specified by variable \"somedir\", but replacing leading ~ character by actual home directory.", "output": "cd $(echo $somedir | sed \"s#^~#$HOME#\")"}
{"input": "display the contents of all the regular/normal files in the entire file system with the name dummy and discard all the errors", "output": "find / -type f -name dummy 2>/dev/null -exec cat {} \\;"}
{"input": "Find the files that have \"644\" permissions and modify them to have \"664\" permissions", "output": "find . -type f -perm 644 -exec chmod 664 {} \\;"}
{"input": "Make 3 directories named \"~/Labs/lab4a/folder\" followed by a 3 width zero padded number from 0 to 3", "output": "mkdir $(printf \"$HOME/Labs/lab4a/folder%03g \" {0..3})"}
{"input": "Saves 'ls' output to 'ls_results' file and time report to 'time_results' file.", "output": "(time ls) > ls_results 2> time_results"}
{"input": "create a zip file of all the files in some directory", "output": "find $directory -type -f -execdir zip -j $ZipFileName {}\\;"}
{"input": "Find all empty files in the current directory and delete them", "output": "find . -maxdepth 1 -type f -empty -delete"}
{"input": "display the three smallest files by size in a folder.", "output": "find /etc/ -type f -exec ls -s {} + | sort -n | head -3"}
{"input": "display all the files in the current folder.", "output": "find ."}
{"input": "Archive \"/path/to/application.ini\" on host \"source_host\" to current directory.", "output": "rsync -avv source_host:path/to/application.ini ./application.ini"}
{"input": "Find all \"YourProgramName\" regular files in the current directory tree and print the full paths to the directories containing them", "output": "find . -type f -name YourProgramName -execdir pwd \\;"}
{"input": "display all directories in the folder \"$ORIG_DIR\"", "output": "find \"$ORIG_DIR\" -name \"*\" -type d"}
{"input": "display the file name and creation month of top 11 files in the entire file system", "output": "find / -type f -printf \"\\n%Ab %p\" | head -n 11"}
{"input": "find the file \"dateiname\" in the current folder ( case insensitive search)", "output": "find -iname \"Dateiname\""}
{"input": "find all the \"error_log\" files in the folder \"/home\" which are bigger than 5MB and force delete them", "output": "find /home -size +5000000b -name \"error_log\" -exec rm -rf {} \\;"}
{"input": "Receive input and print it to terminal", "output": "cat"}
{"input": "Removes 55, adds a 10-digit line number, and rearranges the date for each line in \"input\" on OSX", "output": "nl -nrz -w10 -s\\; input | sed -E 's/55//; s/([0-9]{2})-([0-9]{2})-([0-9]{4})/\\3\\2\\1/'"}
{"input": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories", "output": "find ./ -name \"foo.mp4\" -printf \"%h\\n\""}
{"input": "Move all *$lower1* files/directories under current directory to paths formed by replacing the match of $lower1 with $lower2 in their paths", "output": "find . -name \"*$lower1*\" -exec bash -c 'mv \"$1\" \"${1/$2/$3}\"' -- {} $lower1 $lower2 \\;"}
{"input": "split content of the file file.txt started from second line into pieces per 4 lines named as split_NNN", "output": "tail -n +2 file.txt | split -l 4 - split_"}
{"input": "delete all the trace files (\".trc\") from the folder $DBA/$ORACLE_SID/bdump/ which have not been accessed in the last 7*24 hours", "output": "find $DBA/$ORACLE_SID/bdump/*.trc -mtime +7 -exec rm {} \\;"}
{"input": "Find command will display top 5 small files from curent directory . most probably you will get ZERO  bytes files .", "output": "find . -type f -exec ls -s {} \\; sort -n |head -5"}
{"input": "Find files/directories named 'sar' under directory trees whose path starts with '/u' or '/b' or '/s' or '/o'", "output": "find `ls -d /[ubso]*` -name sar"}
{"input": "Unzip \"bigfile.txt.gz\" to standard output, search for patterns in \"patterns.txt\", and list the unique matches", "output": "gunzip -c bigfile.txt.gz | grep -f patterns.txt | sort | uniq -c"}
{"input": "Find all files that are set user ID to root", "output": "find . -user root -perm -4000 -print"}
{"input": "Show long listing of current directory by deleting all digits from the output", "output": "ls -lt | tr -d 0-9"}
{"input": "Search the current directory tree for regular files lacking read permissions for user, group, or others", "output": "find . -type f ! -perm -444"}
{"input": "Find all empty directories under a certain path", "output": "find /tmp -type d -empty"}
{"input": "Find users whose names begin with \"ab\" and ends with \"1\"", "output": "who | cut -d ' ' -f 1 | grep -e '^ab' -e '1$'"}
{"input": "get all the files that are exactly 30 days old", "output": "find . -mtime 30 -print"}
{"input": "Search for \"vid=123\" in all compressed files found under \"/my_home\" matching \"*log.20140226*\"", "output": "zcat `find /my_home -name '*log.20140226*'`|grep 'vid=123'"}
{"input": "Split \"$SOURCE_FILE\" into files of at most 100 lines each", "output": "split -l 100 \"$SOURCE_FILE\""}
{"input": "find all the \".c\" files in the folder /home/david which have been modified in the last 48 hours", "output": "find /home/david -mtime -2 -name '*.c'"}
{"input": "Display a long listing of all 0777 permission directories under current directory tree", "output": "find . -perm 0777 -type d -exec ls -l {} \\;"}
{"input": "Unzip \"file.gz\" to stdout", "output": "zcat file.gz"}
{"input": "Print flow of random data, showing all non-printing characters", "output": "cat -v /dev/urandom"}
{"input": "find all files in the current folder which end with macs", "output": "find -name '*macs'"}
{"input": "Find a directory named 'project.images' case insensitively in the entire filesystem and show it in long listing format", "output": "find  / -type d -iname \"project.images\" -ls"}
{"input": "extract an archive stripping the first component", "output": "tar --strip-components 1 -xvf my_directory.tar.gz"}
{"input": "Save the absolute path of the current script to variable \"SELF\"", "output": "script=\"`readlink -f \"${BASH_SOURCE[0]}\"`\""}
{"input": "Creae a tarball 'files.tar.gz' containing all regular files under current directory tree that are newer than 2013-12-04 and older than 2013-12-05", "output": "find . -type f -name \"*\" -newermt 2013-12-04 ! -newermt 2013-12-05 | xargs -I {} tar -czvf files.tar.gz {}"}
{"input": "Split \"ADDRESSS_FILE\" into files containing at most 20 lines and prefix \"temp_file_\"", "output": "split -l20 ADDRESSS_FILE temp_file_"}
{"input": "Find files named \"xxx\" and pass their names as arguments to the \"command\"", "output": "find . -name xxx -exec command {} +"}
{"input": "Creates temporary file in $appdir variable with name formatted like expression in variable ${template}, and saves path to it in 'launcherfile' variable.", "output": "launcherfile=$(mktemp -p \"$appdir\" \"$template\")"}
{"input": "Recursively change the owner of all files in \"upload_directory\" to \"nobody\"", "output": "chown -R nobody upload_directory"}
{"input": "Copy directory structure from directory 'olddir' to 'newdir'", "output": "find olddir -type d -printf \"newdir/%P\\0\" | xargs -0 mkdir -p"}
{"input": "Find all files/directories under mnt/naspath without descending into .snapshot directory, calculate the total size and redirect the result to /tmp/size.log file", "output": "find /mnt/naspath -mtime 0  -name .snapshot -prune -o \\( \\! -name *~ -print0 \\) | du --files0-from=- -hc | tail -n1 >> /tmp/size.log"}
{"input": "Combine every two lines of standard input", "output": "paste -d \"\" - -"}
{"input": "List all leaf directories of the current directory tree", "output": "find . -type d | sort | awk '$0 !~ last \"/\" {print last} {last=$0} END {print last}'"}
{"input": "Extract protocol and host name from URL.", "output": "echo \"$url\" | cut -d'/' -f1-3"}
{"input": "Find file size in bytes", "output": "du -b FILE"}
{"input": "find all files in current folder which are bigger than 270MB and less than 300MB", "output": "find . -size +270M -size -300M"}
{"input": "Give a long listing of all the  *.pl files (Perl files) beneath the current directory.", "output": "find . -name \"*.pl\" -exec ls -ld {} \\;"}
{"input": "Show all variables whose name or value contains \"PATH\", sorted in reverse alphabetical order.", "output": "env | uniq | sort -r | grep PATH"}
{"input": "display all normal/regular files in current folder which have readable permission", "output": "find . -type f -readable"}
{"input": "find all the normal/regular files in the current directory which have been modified in the last 24 hours", "output": "find . -mtime -1 -type f -print"}
{"input": "Add a line number to every line in \"long-file\"", "output": "nl -ba long-file \\"}
{"input": "Find all files in the current directory tree that match pattern 'a(b*'", "output": "find . -name 'a(b*' -print"}
{"input": "Unsets shell option 'extglob'.", "output": "shopt -u extglob"}
{"input": "Run the PHP script 'yourscript.php', making it immune to SIGHUP signals.", "output": "nohup php -f 'yourscript'.php"}
{"input": "Remove all .mpg files in the /home/luser directory tree", "output": "find /home/luser -type f -name '*.mpg' | xargs rm -f"}
{"input": "Dump \"FILENAME\" as 2 byte wide hexadecimal numbers", "output": "od -tx2 FILENAME"}
{"input": "List the .py files which reside in the current directory tree and whose parent directory contains a Makefile", "output": "find . -name '*.py' -exec bash -c 'test -f $(dirname \"$1\")/Makefile' -- {} \\; -print"}
{"input": "Move all files matching patterns \"*.old\", \".old\", \".*.old\" from the current directory to directory \"../old/\"", "output": "find . ! -name . -prune -name '*.old' -exec sh -c 'mv \"$@\" ../old/' sh {} +"}
{"input": "Move all 10*jpg files under /path to 2010*jpg files under the same directory", "output": "find /path -type f -name \"10*jpg\" | sed 's/.*/mv &/' | sed 's/mv \\(.*\\/\\)\\(.[^/]*\\)/& \\120\\2/' | sh"}
{"input": "Find all directories in maximum 1 level down the $front_element directory, sort them according to modification time and list them excluding the $front_element path from the list", "output": "find \"$front_element\" -maxdepth 1 -type d -not -path \"$front_element\" -printf '%T@ %p\\n' | sort | awk '{print $2}'"}
{"input": "List recursively all files and directories in /var/www and pass the result to the `more' pager", "output": "find /var/www | more"}
{"input": "Save the FQDN host name of the system in variable \"fhost\"", "output": "fhost=`hostname -f`"}
{"input": "Find files/directories that have not been modified in the last one day in directories or files taken from the glob pattern '/tmp/test/*'", "output": "find /tmp/test/* -daystart -mtime +1"}
{"input": "Silently read a line from standard input into variable \"REPLY\" without backslash escapes and using the prompt $'Press enter to continue...\\n'", "output": "read -rsp $'Press enter to continue...\\n'"}
{"input": "Create an empty index.html, or update its timestamp if it already exists.", "output": "touch index.html"}
{"input": "Count all directories in maximum 1 level down the current directory", "output": "find . -maxdepth 1 -type d -exec ls -dlrt {} \\; | wc --lines"}
{"input": "Find *.pdf files in the PDFs directory tree that contain text \"perry sound\" and copy them to folder Found/", "output": "find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep -l -Z -i --with-filename --label=\"{}\" --color \"perry sound\" | xargs -0 -I{} cp -v {} Found/' \\;"}
{"input": "Find any files in the current directory and its sub-directories that were last accessed more than 7 days and are larger than 20480 blocks in size.", "output": "find . -atime +7 -size +20480 -print"}
{"input": "Find regular files matching pattern \"*oraenv*\" and excecute the \"file\" utility for each of them", "output": "find . -name \"*oraenv*\" -type f -exec file {} \\;"}
{"input": "Print list of all user names who are logged in", "output": "who | awk '{ print $1 }'"}
{"input": "Find files named core in or below the directory /tmp and delete them. Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.", "output": "find /tmp -name core -type f -print | xargs /bin/rm -f"}
{"input": "find all the regular/normal files in the current directory which do not have the extension comment and and redirect the output to /tmp/list", "output": "find . -type f \\! -name \"*.Z\" \\! -name \".comment\" -print | tee -a /tmp/list"}
{"input": "Find all image.pdf files/directories under ./polkadots", "output": "find ./polkadots -name 'image.pdf'"}
{"input": "find all the files ending with \".foo\" in the folder /usr", "output": "find /usr -name '*.foo' -print"}
{"input": "Search for the string 'device' in all regular files in the entire filesystem", "output": "find / -type f -print | xargs grep \"device\""}
{"input": "Login to remote system \"app1\" through an ssh gateway system called \"gw\"", "output": "ssh -At gw ssh -A app1"}
{"input": "Copy all files in current directory that do not match */not-from-here/* in their names to /dest", "output": "find . -type f -not -iname '*/not-from-here/*' -exec cp '{}' '/dest/{}' ';'"}
{"input": "Find all filenames ending with .c in the /usr directory tree", "output": "find /usr -name \"*.c\""}
{"input": "Find all *.py files under current directory", "output": "find . -type f -name \"*.py\""}
{"input": "Make a POST request to \"http://dweet.io/dweet/for/cycy42\" with data \"PiIP\" set to the IP address of the system", "output": "wget --post-data=\"PiIP=$(hostname -I)\" http://dweet.io/dweet/for/cycy42"}
{"input": "Print file type of the executable file of command \"python\"", "output": "file `which python`"}
{"input": "Find all directories under /path/to/base/dir and change their permission to 755", "output": "find /path/to/base/dir -type d -exec chmod 755 {} +"}
{"input": "Find all *.py (case insensitive) files/directories under dir directory ignoring .git path", "output": "find dir -not -path '.git' -iname '*.py'"}
{"input": "Search  in current directory downwards all files whose owner is aa1 or whose name is myfile .", "output": "find . \\( -user aa1 -o -name myfile \\) -print"}
{"input": "find all jpg files in the folder which are in the path \"/201111/\" and sort them based on name", "output": "find */201111/* -name \"*.jpg\" | sort -t '_' -nk2"}
{"input": "Find all files/directories under current directory with null character as the delimiter", "output": "find -print0"}
{"input": "create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine)", "output": "find . -name '*.log' -mtime +3 -print0 | xargs -0 -P 4 bzip2"}
{"input": "Search for 'Text To Find' in all regular files under current directory tree and show the matched files and matched lines with line numbers", "output": "find ./ -type f -exec grep -Hn \"Text To Find\" {} \\;"}
{"input": "List files in the current directory and below", "output": "find -ls"}
{"input": "delete all the regular files in the temp folder which have not been modified in the last 24 hours", "output": "find /tmp/ -type f -mtime +1 -print0 | xargs -0 -n1 rm"}
{"input": "Print the longest line in \"filename\"", "output": "perl -ne 'print ($l = $_) if (length > length($l));' filename | tail -1"}
{"input": "Remount \"rfs\" filesystem \"/dev/stl12\" on \"/system\" with read and write permission", "output": "mount -o rw,remount -t rfs /dev/stl12 /system"}
{"input": "List all unique parent directories of .class files found under the current directory", "output": "find -name '*.class' -printf '%h\\n' | sort -u"}
{"input": "Recursively removes all files and folders named '.svn' in a current folder.", "output": "find . -name .svn |xargs rm -rf"}
{"input": "Find files/directories under current directory that matches './projects/insanewebproject' in their paths", "output": "find -ipath './projects/insanewebproject'"}
{"input": "Find recursively all files matching pattern 'file??' in the xargstest/ directory and print a sorted list of them", "output": "find xargstest/ -name 'file??' | sort"}
{"input": "Print the file sizes along with their paths for all *.txt (case insensitive) files/directories under current directory tree", "output": "find . -iname \"*.txt\" -exec du -b {} +"}
{"input": "find all the backup files in the current folder and delete them", "output": "find . -type f -name \u201cFILE-TO-FIND\u201d -delete;"}
{"input": "find all the core files in the temp folder and force delete them", "output": "find /tmp -name core -type f -print | xargs /bin/rm -f"}
{"input": "Output all lines from file1 except those present in file2, assuming both files are sorted.", "output": "diff --new-line-format=\"\" --unchanged-line-format=\"\"  file1 file2"}
{"input": "Find files that were modified in less than 1 minute ago", "output": "find / -mmin -1"}
{"input": "Print content of 'filename' file, showing all non-printing characters and displaying $ at the end of each line.", "output": "cat -v -e filename"}
{"input": "Archive the directory structure under backup directory into directory-structure.tar", "output": "find backup/ -type d | tar cf directory-structure.tar -T - --no-recursion"}
{"input": "List the abc.def files under the directories /ghi and /jkl which have commented entries and display those entries", "output": "find /ghi /jkl -type f -name abc.def 2> /dev/null -exec grep -H ^# {} \\;"}
{"input": "Find all files/directories named 'document' in the entire filesystem", "output": "find / -name document -print"}
{"input": "Read yesterday's date with format \"%a %d/%m/%Y\" into variable \"dt\" in a subshell", "output": "date --date yesterday \"+%a %d/%m/%Y\" | read dt"}
{"input": "Set the permissions of all directories inside the current directory tree to ug=rwx,o=", "output": "find . -type d -name files -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "Remove all *.bak and *.backup files that were accessed last time more than 30 days ago", "output": "find . \\( -name '*.bak' -o -name *.backup \\) -type f -atime +30 -exec rm '{}' ';'"}
{"input": "change permissions of files older than 30 days", "output": "find /path/to/directory -type f -mtime +30 -exec chmod 644 {} +"}
{"input": "list all files under the current directory, writing the output to the file files_and_folders, do not try to descend into directories that cannot be read.", "output": "find . -type d ! -perm -g+r,u+r,o+r -prune -o -print > files_and_folders"}
{"input": "Make \"file.sh\" executable", "output": "chmod +x file.sh"}
{"input": "Find every file under the directory /usr ending in \".stat\".", "output": "find /usr -name *stat"}
{"input": "list *.pdf, *.bmp and *.txt files under the /home/user/Desktop directory.", "output": "find /home/user/Desktop -name '*.pdf' -o -name '*.txt' -o -name '*.bmp'"}
{"input": "create an archive using pbzip2 as a compress program", "output": "tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 paths_to_archive"}
{"input": "Print lines that only unique ones in 'set1' and 'set2' files", "output": "cat <(grep -vxF -f set1 set2) <(grep -vxF -f set2 set1)"}
{"input": "execute a command in 10 seconds", "output": "true | sleep 10"}
{"input": "List all *.gif files found in the current directory tree", "output": "find . -name *.gif -exec ls {} \\;"}
{"input": "Find .java files in the current directory tree that contain 'TODO', and print their pathnames", "output": "find . -name \"*.java\" -exec grep -Hin TODO {} + | cut -d \":\" -f 1"}
{"input": "Remove the last file extension from standard input", "output": "sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-"}
{"input": "Set timestamp of B to the timestamp in stat format specified by variable \"old_time\"", "output": "touch -d\"$(date --date=\"@$old_time\")\" B"}
{"input": "List all files in /var/www and below that have changed in the last 10 minutes", "output": "find /var/www -cmin -10 -printf \"%c %pn\""}
{"input": "Stores system load average number in the 'proc_load_average' variable.", "output": "proc_load_average=`w | head -1 | cut -d\" \" -f13 | cut -d\",\" -f1-2 | tr ',' '.'`"}
{"input": "Archive showing progress all files in \"/media/2TB\\ Data/data/music/\" to \"/media/wd/network_sync/music/\" excluding files matching \"*.VOB\", \"*.avi\", \"*.mkv\", \"*.ts\", \"*.mpg\", \"*.iso\", \"*ar\", \"*.vob\", \"*.BUP\", \"*.cdi\", \"*.ISO\", \"*.shn\", \"*.MPG\", \"*.AVI\", \"*.DAT\", \"*.img\", \"*.nrg\", \"*.cdr\", \"*.bin\", \"*.MOV\", \"*.goutputs*\", \"*.flv\", \"*.mov\", \"*.m2ts\", \"*.cdg\", \"*.IFO\", \"*.asf\", and \"*.ite\"", "output": "rsync -av --progress --exclude=*.VOB --exclude=*.avi --exclude=*.mkv --exclude=*.ts --exclude=*.mpg --exclude=*.iso --exclude=*ar --exclude=*.vob --exclude=*.BUP --exclude=*.cdi --exclude=*.ISO --exclude=*.shn --exclude=*.MPG --exclude=*.AVI --exclude=*.DAT --exclude=*.img --exclude=*.nrg --exclude=*.cdr --exclude=*.bin --exclude=*.MOV --exclude=*.goutputs* --exclude=*.flv --exclude=*.mov --exclude=*.m2ts --exclude=*.cdg --exclude=*.IFO --exclude=*.asf --exclude=*.ite /media/2TB\\ Data/data/music/* /media/wd/network_sync/music/"}
{"input": "Find all the files which were accessed 50 days ago", "output": "find / -atime 50"}
{"input": "delete all the trace files (\".trc\") which have not been been accessed in the last 30*24 hours", "output": "find /dirpath \\( -name \\*.trc -a -mtime +30 \\) -exec rm {} \\;"}
{"input": "Print common files of directory \"one\" and \"two\"", "output": "comm -12  <(ls one) <(ls two)"}
{"input": "Archive \"<SOURCE_DIR>\" to \"rsyncuser@192.168.1.110:/srv/www/prj112/myfolder\"", "output": "rsync -av <SOURCE_DIR> rsyncuser@192.168.1.110:/srv/www/prj112/myfolder"}
{"input": "file1 and file2 contain lines of comma-separated information, for each line whose first field matches, and where 3rd field of file1 matches 2nd field of file2, 6th field of file1 matches 3rd field of file2, and 7th field of file1 matches 4th field of file2, output: fields 1, 2, 3, 4, 6, and 7 of file1.", "output": "join -t, file1 file2 | awk -F, 'BEGIN{OFS=\",\"} {if ($3==$8 && $6==$9 && $7==$10) print $1,$2,$3,$4,$6,$7}'"}
{"input": "Find *.html files in the current directory tree that were modified 7 days ago", "output": "find . -mtime 7 -name \"*.html\" -print"}
{"input": "Convert Unix `cal` output to latex table code.", "output": "cal | sed '1d;2{h;s/./ /g;x};/^\\s*$/b;G;s/\\n/ /;s/^...\\(.\\{15\\}\\).*/\\1/;s/.../ &\\t\\&/g;s/\\&$/\\\\\\\\/'"}
{"input": "display all the files in current folder which have write permission to all the users", "output": "find . -perm /222"}
{"input": "display all the files with the names \"name1\" and \"name2\" in the current folder and do not search in the sub directories", "output": "find . -maxdepth 1 -name \"name1\" -o -name \"name2\""}
{"input": "List all *.txt files/directories under /etc", "output": "find /etc -name \"*.txt\" -ls"}
{"input": "Recursively change the owner and group of all files in \"/your/directory/to/fuel/\" to \"nginx\"", "output": "chown nginx:nginx /your/directory/to/fuel/ -R"}
{"input": "Find all *.py files under current directory and search for regular expressions taken from the search_terms.txt file", "output": "find . -name '*.py' -exec grep -n -f search_terms.txt '{}' \\;"}
{"input": "Change to the directory pointed by variable TAG", "output": "cd \"$TAG\""}
{"input": "Archive the entire file system into tarfile.tar.bz2", "output": "find / -print0 | tar -T- --null --no-recursive -cjf tarfile.tar.bz2"}
{"input": "Automatically spell check file \"text.txt\" using \"ispell\" command and log the output to \"out.txt\"", "output": "yes 0 | script -c 'ispell text.txt' out.txt"}
{"input": "Remove all files whose names begin with \"heapdump\" and write their names to \"delete.txt\"", "output": "find . -name heapdump* -exec rm '{}' \\; -print >delete.txt"}
{"input": "Add group write permission to all files matching \"*\" or \"...*\"", "output": "chmod g+w * ...*"}
{"input": "Replace 'company' with 'newcompany' in all files under current directory and keep backups with .bakup extension", "output": "find -type f -print0 | xargs -0 sed -i .bakup 's/company/newcompany/g'"}
{"input": "Search the regular files of the current directory tree for string \"stuff\"", "output": "find . -type f -exec grep -n \"stuff\" {} \\; -print"}
{"input": "Compare files 'file1' and 'file2' and print in three columns strings unique for first file, second file, and common ones", "output": "comm abc def"}
{"input": "Move \"file.txt\" to docker container \"$COUNTAINER_ID\" in path \"/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt\"", "output": "mv -f file.txt /var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt"}
{"input": "Search the current directory tree for regular .mkv files", "output": "find . -type f -name \"*.mkv\""}
{"input": "display all the directories in the current folder", "output": "find . -type d -print"}
{"input": "Finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within.", "output": "find -type d -name a -exec rmdir {} \\;"}
{"input": "find all 'js' suffix files  exclue the path *exclude/this/dir*' under current dirctory", "output": "find . -name '*.js' -not -path '*exclude/this/dir*'"}
{"input": "Search the files from directory tree \"dirname\" for string \"foo\"", "output": "find dirname -exec grep foo {} +"}
{"input": "Change permissions to 0755 for all directories in the /path directory tree", "output": "find /path -type d -exec chmod 0755 \"{}\" \\;"}
{"input": "Removes all files from current folder but 5 newest ones, ignoring folders in a files list.", "output": "find . -maxdepth 1 -type f | xargs -x ls -t | awk 'NR>5' | xargs -L1 rm"}
{"input": "Search for files/directories named 'fileName.txt' under '/path/to/folder' directory tree without traversing into directories that contain the string 'ignored_directory' in their paths", "output": "find /path/to/folder -path \"*/ignored_directory\" -prune -o -name fileName.txt -print"}
{"input": "Copies all files like \"*FooBar*\" under the current directory to the '~/foobar' directory.", "output": "find . -name '*FooBar*' -exec cp -t ~/foobar -- {} +"}
{"input": "find all the files in current directory of size smaller than 10KB.", "output": "find . -size -10k"}
{"input": "replace \"exp_to_find_for_replacement\" with \"exp_to_replace\" for all the files in the current folder", "output": "find -name \u2018*exp_to_find_in_folders*\u2019 -exec rename \u201cs/exp_to_find_for_replacement/exp_to_replace/\u201d {} \\;"}
{"input": "login as user postgres", "output": "sudo su -l oracle"}
{"input": "Print content of 'domains.txt' with removed first one of dot-delimited fields", "output": "rev domains.txt | cut -d '.' -f 2- | rev"}
{"input": "Attaches to 'test1' tmux session.", "output": "tmux attach -t test1"}
{"input": "Print absolute path of \"YOUR_PATH\"", "output": "readlink -f YOUR_PATH"}
{"input": "Print the number of regular files found in the current directory tree", "output": "find . -type f | wc -l"}
{"input": "List every directory under current directory with their child executable files", "output": "find . -type d -print -exec bash -c 'find {} -type f -depth 1 -perm +0111 | sort -r' \\;"}
{"input": "Find all files under the current directory and copy their permissions to the same file in \"../version1\"", "output": "find . -type f | xargs -I {} chmod --reference {} ../version1/{}"}
{"input": "Find all regular non-hidden files in the current directory and its subdirectories", "output": "find . -not -path '*/\\.*' -type f \\( ! -iname \".*\" \\)"}
{"input": "Print whether the sorted contents of \"set1\" and \"set2\" differ", "output": "diff -q <(sort set1) <(sort set2)"}
{"input": "Removes first and last parts of path $path and saves the result in 'finalName' variable.", "output": "finalName=$(basename -- \"$(dirname -- \"$path\")\")"}
{"input": "Remove the files from the home directory tree that were last accessed more than 100 days ago, with confirmation", "output": "find ~/ -atime +100 -exec rm -i {} ;"}
{"input": "Search the current directory recursively for regular files last changed 2 days ago", "output": "find . type -f -ctime 2"}
{"input": "Find all files/directories under current directory and append a null character at the end of each path", "output": "find -print0"}
{"input": "display all the files in the folder /home which do not belong to the group test", "output": "find /home ! -group test"}
{"input": "List files larger than 10MB in the /var directory recursively", "output": "find /var/ -size +10M -ls"}
{"input": "Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.name' file", "output": "cat ${TMP}/${SCRIPT_NAME}.name|sort -r;"}
{"input": "View history using \"more\"", "output": "history | more"}
{"input": "list regular files under the current directory", "output": "find . -type f"}
{"input": "Removes all files from current folder but 5 newest ones.", "output": "ls -tr | head -n -5 | xargs rm"}
{"input": "Find all *.so files under $S directory and run doexe command with minimal invocation for those files", "output": "find \"${S}\" -name '*.so*' -exec doexe '{}' +"}
{"input": "find all the swap files (files ending with ~) in the current folder and delete them", "output": "find . -name \"*~\" -exec rm {} \\;"}
{"input": "Find all .js files in the $d directory tree whose pathnames do not contain whitespaces", "output": "find $d -name '*.js' | grep -v \" \""}
{"input": "Sets shell option 'globstar'.", "output": "shopt -s globstar"}
{"input": "find all files in the folder /path/to/dir which have been modified between two dates", "output": "find /path/to/dir -newermt yyyy-mm-dd ! -newermt yyyy-mm-dd -ls"}
{"input": "Find all directories named 'octave' under current directory tree", "output": "find . -name \"octave\" -type d"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree", "output": "find . -type f | perl -ne 'print $1 if m/\\.([^.\\/]+)$/' | sort -u"}
{"input": "set alias \"pwd\" for command \"echo -n $(/bin/pwd) | pbcopy'\"", "output": "alias pwd='echo -n $(/bin/pwd) | pbcopy'"}
{"input": "display all regular/normal files in the current folder which are not accessed in the last 7*24 hours", "output": "find . -type f -atime +7"}
{"input": "Delete all *txt files under current directory", "output": "find . -name \"*txt\" -type f -print | xargs rm"}
{"input": "search for all the regular files in the current folder and display the contents", "output": "find . -type f -exec cat {} \\;"}
{"input": "Find all files under current directory that match the regex ^.*666$ in their names", "output": "find . -type f -print0 | xargs -0 perl -nle 'print if /^.*666$/'"}
{"input": "Remove all files with a txt extension under current directory", "output": "find . -type f -name \"*.txt\" -print|xargs rm"}
{"input": "Find all files/directories under test directory", "output": "find test"}
{"input": "Create a symbolic link named \"$tmpdir/bam\" to the full path of command \"bam2\" found in \"$PATH\"", "output": "ln -s \"$(which bam2)\" \"$tmpdir\"/bam"}
{"input": "display all the directories in the current folder excluding those that are present in the aa directory tree", "output": "find . -type d -name aa -prune"}
{"input": "Count number of users logged in", "output": "who | awk -F' ' '{print $1}' | sort -u | wc -l"}
{"input": "Executes 'sleep 10' in a subshell created by a pipeline of built-in function 'true'.", "output": "true | sleep 10"}
{"input": "Calculate the md5 sum of \"password\"", "output": "echo \"password\" | md5sum"}
{"input": "Extracts 258 lines beginning from line 16482 of in.sql and saves them to out.sql", "output": "head -16482 in.sql | tail -258 > out.sql"}
{"input": "Find files in entire file system that are writable by group or other", "output": "find / -perm /g+w,o+w"}
{"input": "check if the file pointed by the symbolic exists or not and display those which are broken", "output": "find . -type l -! -exec test -e {} \\; -print"}
{"input": "find all the files in the folder ~/Music which begin with \"Automatically Add\"", "output": "find ~/Music/ -name \"Automatically Add*\""}
{"input": "Find and print the full pathname of all PDF files in the current directory and its sub-directories.", "output": "find . -name \"*.pdf\" -print"}
{"input": "Print the list of regular files in the current directory and all subdirectories", "output": "find . -type f"}
{"input": "Find the core files and  remove them", "output": "find . -name \u201ccore\u201d -exec rm -f {} \\;"}
{"input": "find the ten biggest files", "output": "find /home -type f -exec du -s {} \\; | sort -r -k1,1n | head"}
{"input": "Delete all files in the /myDir directory tree that were last modified 7 days ago", "output": "find /myDir -mtime 7 -exec rm -rf {} \\;"}
{"input": "Display the content of file \"f\" in home directory if it exists and is executable", "output": "cat `which ~/f`"}
{"input": "Recursively copies 'include/gtest' to '/usr/include', preserving all attributes, and copying symlinks as symlinks, without following in source files.", "output": "sudo cp -a include/gtest /usr/include"}
{"input": "Recursively copies all files in the current directory but ones that names match pattern \"dirToExclude|targetDir\" to the 'targetDir' directory, printing info message on each operation.", "output": "cp -rv `ls -A | grep -vE \"dirToExclude|targetDir\"` targetDir"}
{"input": "Make directories for each unique file path in \"file1\"", "output": "cat file1 |xargs -I {} dirname \"{}\"| sort -u | xargs -I{} mkdir -p \"{}\""}
{"input": "Remove files from the file system that are owned by nobody", "output": "find / -nouser -exec rm {} \\;"}
{"input": "Find all files under /path/to/dir and change their permission to 644", "output": "find /path/to/dir -type f -exec chmod 644 {} +"}
{"input": "Search for 'string_to_find' in all files under current directory", "output": "find -type f | sed 's/./\\\\&/g' | xargs grep string_to_find"}
{"input": "Search the entire file system for any file that is writable by other.", "output": "find / \u2013 perm -0002"}
{"input": "display all the files in the current folder which have the word \"bills\" in their name", "output": "find . -name '*bills*' -print"}
{"input": "search for all text files in the directory \"/path/to/inputfiles\" and pass them as input to the shell script in exec command and save the output to the file out.txt", "output": "find /path/to/inputfiles -name \"*.txt\" -exec /path/to/myprogram.sh {} \\; > Out.txt"}
{"input": "Find all regular files with '.jpg' (case insensitive) extension, sort them by name, print the output  and also save the list to file 'file_list.txt'", "output": "find . -type f|grep -i \"\\.jpg$\" |sort| tee file_list.txt"}
{"input": "Find all executable files", "output": "find / -perm /a=x"}
{"input": "Make a directory structure same as the current directory tree under /tmp/tar_root directory", "output": "for i in `find . -type d`; do mkdir -p /tmp/tar_root/`echo $i|sed 's/\\.\\///'`; done"}
{"input": "Find all btree*.c files under current directory", "output": "find . -type f -name 'btree*.c'"}
{"input": "SSH into \"myhost.com\" as user \"myname\" with a check every 60 seconds that the server is still alive", "output": "ssh -o ServerAliveInterval=60 myname@myhost.com"}
{"input": "List the z* links in the /usr/bin directory with inode information and the file to which it points to", "output": "find /usr/bin -type  l  -name \"z*\" -ls"}
{"input": "List all regular file owned by root with permissions 4000", "output": "find / -type f -user root -perm -4000 -exec ls -l {} \\;"}
{"input": "Find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them to /media/caca/extract/full$date.cpio", "output": "find . -depth \\( -wholename \\./\\.\\* \\) -prune -o -print| cpio -aov > /media/caca/extract/full$date.cpio"}
{"input": "Find all files that have either a .php or a .js extension", "output": "find -regextype posix-egrep -regex '.*(php|js)$'"}
{"input": "Save hexadecimal byte 9 in binary file \"file.moi\" to variable \"month\"", "output": "month=$(od -t x1 --skip-bytes=8 --read-bytes=1 file.moi | head -1 | awk '{print $2}')"}
{"input": "List all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "saveIFS=$IFS; IFS=$'\\n'; for dir in $(find -depth -type d ); do [[ ! $prev =~ $dir ]] && echo \"${dir}\" ; prev=\"$dir\"; done; IFS=$saveIFS"}
{"input": "List every directory under current directory with their child executable files", "output": "find . -type d | sort | xargs -n1 -I{} bash -c \"find {} -type f -maxdepth 1 -executable | sort -r\""}
{"input": "Print list of disk and mountpoint of disks matching \"/dev/sd*\"", "output": "mount | awk '/\\/dev\\/sd/ {print NR, $1, $3}'"}
{"input": "Find all thumb.png files in the temps/ directory tree", "output": "find temps/ -name \"thumb.png\""}
{"input": "Count the number of directories under directory '/directory/' non-recursively", "output": "find /directory/ -maxdepth 1 -type d -print| wc -l"}
{"input": "Remove files from the file system that are owned by nobody", "output": "find / -nouser -exec rm {} +"}
{"input": "Find things changed today", "output": "find /path/to/search -daystart -ctime -1"}
{"input": "Copy the owner and group of \"oldfile\" to \"newfile\"", "output": "chown --reference=oldfile newfile"}
{"input": "Find files/directories under /users/tom that matches both the pattern \"*.pl\" and  \"*.pm\"", "output": "find /users/tom -name \"*.pl\" -name \"*.pm\""}
{"input": "Symlinks all of package`s installed files into the Homebrew prefix with overwrite.", "output": "brew link --overwrite python"}
{"input": "Print the current user's real name", "output": "getent passwd `whoami` | cut -d : -f 5"}
{"input": "Search the /tmp/ directory recursively for files matching regular expression \".*file[0-9]+$\"", "output": "find /tmp -regex \".*file[0-9]+$\""}
{"input": "Read a line from standard input and save received words sequentially in variables XPID XUSERID XPRIORITY XVIRTUAL XRESIDENT XSHARED XSTATE XCPU XMEM XTIME XCOMMAND", "output": "read XPID XUSERID XPRIORITY XVIRTUAL XRESIDENT XSHARED XSTATE XCPU XMEM XTIME XCOMMAND"}
{"input": "Prints elapsed time of command execution.", "output": "\\time -f%e sleep 1"}
{"input": "Append all regular files modified in the last 24 hours to the \"$archive.tar\" tar archive", "output": "find . -mtime -1 -type f -exec tar rvf \"$archive.tar\" '{}' \\;"}
{"input": "Display the sizes and filepaths of all files/directories sorted in ascending order of size", "output": "du -a --max-depth=1 | sort -n"}
{"input": "Run 10 bash processes at most 4 at a time of \"echo start N; sleep 3; echo done N\" for N ranging from 1 to 10", "output": "seq 10 | xargs -i --max-procs=4 bash -c \"echo start {}; sleep 3; echo done {}\""}
{"input": "find all regular files in current folder which are atleast 1 level deep and search in the alphabetical order of the directory names", "output": "find -s . -mindepth 1 -type f -print0; printf '\\0';"}
{"input": "display a long listing of all the files in the current folder in sorted order, which are bigger than 10KB", "output": "find . -size +10k -exec ls -ls {} \\+ | sort -nr"}
{"input": "Find all empty directories under current directory", "output": "find . -type d -empty"}
{"input": "Find regular files named \"expression -and expression\" under and below /dir/to/search/", "output": "find /dir/to/search/ -type f -name 'expression -and expression' -print"}
{"input": "displays all the files in the current folder", "output": "find ."}
{"input": "Rewrite 'temp.txt' omitting any repeating lines", "output": "uniq temp.txt | perl -e 'undef $/; $_ = <>; open(OUT,\">temp.txt\"); print OUT;'"}
{"input": "Delete all hidden files in the directory tree given as variable $FOLDER", "output": "find $FOLDER -name \".*\" -delete"}
{"input": "Search the regular files from directory tree 'directory_name' for \"word\" and print the names of the matched files", "output": "find directory_name -type f -print0 | xargs -0 grep -li word"}
{"input": "List only file names matching \"*2012*\" from \"serveripaddress::pt/dir/files/\" listening on port 111 and write to \"output.txt\"", "output": "sync --list-only --include \"*2012*.xml\" -exclude \"*.xml\" serveripaddress::pt/dir/files/ --port=111 | awk '{ $1=$2=$3=$4=\"\"; print substr($0,5); }' >output.txt"}
{"input": "Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%D'", "output": "find /usr/ports/ -name pkg-plist\\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l"}
{"input": "List all aliencoders.[0-9]+ files/directories under /home/jassi/ directory", "output": "find /home/jassi/ -name \"aliencoders.[0-9]+\" -exec ls -lrt {} + | awk '{print $9}'"}
{"input": "Displays process tree of 'pppd' process.", "output": "pstree -p `pgrep pppd`"}
{"input": "Saves index number of file 'script.sh' in the 'inode' variable.", "output": "inode=`ls -i ./script.sh | cut -d\" \" -f1`"}
{"input": "Find all xml files under current directory and archive them to .bz2 archives", "output": "for i in `find . | grep \".xml$\"`; do bzip2 $i&; done"}
{"input": "Page through the output of running the specified PHP file.", "output": "less -f <(php whatevz.php)"}
{"input": "Find all socket files in the current directory and its sub-directories.", "output": "find . -type s"}
{"input": "Look for \"filename\" in the current directory and below", "output": "find -name filename"}
{"input": "Returns exit status 0 and prints exit status of previous command.", "output": "false | echo \"${PIPESTATUS[0]}\""}
{"input": "Print the average round trip time of 5 pings to \"google.com\" from OSX", "output": "ping -c 5 google.com | grep \"round-trip\" | cut -f 5 -d \"/\""}
{"input": "Archive \"/path/to/files/source\" to \"user@remoteip:/path/to/files/destination\" via ssh on port 2121", "output": "rsync -azP -e \"ssh -p 2121\" /path/to/files/source user@remoteip:/path/to/files/destination"}
{"input": "Find all files modified less than 5 minutes ago, and page interactively through the output.", "output": "find -cmin -5 | less -R"}
{"input": "find all files  that names are 'apt' and display detailed list", "output": "find  / -name \"apt\" -ls"}
{"input": "Force create a symbolic link without dereferencing named \"alpha\" to \"alpha_2\"", "output": "ln -nsf alpha_2 alpha"}
{"input": "Print a sorted list of the subdirectories of ~/Music", "output": "find ~/Music/ -maxdepth 2 -mindepth 2 -type d | sort"}
{"input": "Delete all files throughout the entire filesystem that are no longer owned by a valid user.", "output": "find / -nouser | xargs -0 rm"}
{"input": "Find files/directories under current directory that matches the regex '/path/to/something'  in their paths", "output": "find . -exec sh -c 'echo {} | grep -qi /path/to/something' \\; -print"}
{"input": "Print all lines of \"seq 10\" except the last 3", "output": "seq 10 | tac | sed '1,3d' | tac"}
{"input": "create a gzip of all the files in the current folder excluding the already gzipped files.", "output": "find . \\! -name \"*.gz\" -exec gzip {} \\;"}
{"input": "Print \"on\" to standard output and to files matching \"/sys/bus/usb/devices/usb*/power/level\"", "output": "echo \"on\" | tee /sys/bus/usb/devices/usb*/power/level"}
{"input": "Find recursively all files changed within the last 5 minutes starting from directory b", "output": "find b -cmin -5"}
{"input": "Display a long listing of all the regular files owned by the user 'bluher' in the entire filesystem", "output": "find / -type f -user bluher -exec ls -ls {}  \\;"}
{"input": "display all the java script files in a folder", "output": "find src/js -name '*.js'"}
{"input": "Go to directory named \"~\" (not home directory)", "output": "cd \"~\""}
{"input": "Find all files under current directory that match the case insensitive regex .\\|./.git and replace (all occurrences) the text matching the regex expanded by $lower1 with $lower2 in these files", "output": "find . -type f \\! -iregex '.\\|./.git' -exec perl -i'' -pe \"s/$lower1/$lower2/g\" {} +"}
{"input": "Print all files on the system owned by group `name_of_group'", "output": "find / -group name_of_group"}
{"input": "split processed content of the file temp into pieces per 1 line named \"tempNNN\" with numeric suffix", "output": "sed 's/3d3d/\\n&/2g' temp | split -dl1 - temp"}
{"input": "Interpret conf-file in the current shell, making all environment variables in this file available to future sub-processes.", "output": "set -o allexport; source conf-file; set +o allexport"}
{"input": "Remove files that are less than 1MB in size under <directory>", "output": "find <directory> -type f -size -1M -delete"}
{"input": "Unsets random one from first four array members.", "output": "unset array[$RANDOM%4]"}
{"input": "display all the symbolic links in the current folder", "output": "find ./ -type l"}
{"input": "Find all .js files in the current directory tree that do not contain a whitespace", "output": "find . -type f -name '*.js' \\( -exec grep -q '[[:space:]]' {} \\; -o -print \\)"}
{"input": "Format tab delimited file \"list-of-entries.txt\" as a table", "output": "column -t -s $'\\t' list-of-entries.txt"}
{"input": "display a long listing of all the \"Trash\" files in the folder /home", "output": "find /home -name Trash -exec ls -al {} \\;"}
{"input": "Search the /usr/ directory tree for files newer than file /tmp/stamp", "output": "find /usr -newer /tmp/stamp"}
{"input": "search for the word bananas in the all the regular/normal files in the entire file system", "output": "find / -type f -exec grep bananas {} \\; -print"}
{"input": "run ls command on *.pl files", "output": "find . -name \"*.pl\" -exec ls -ld {} \\;"}
{"input": "Save the list of files in the home directory tree whose names begin with \"Foto\" to `results.txt'", "output": "find ~ -name 'Foto*' > results.txt"}
{"input": "Make directories \"mnt\" and \"point\"", "output": "mkdir mnt point"}
{"input": "display long listing of all the text files in the current folder (plus at the end executes quickly by sending bulk data as input to the command in exec)", "output": "find . -name \"*.txt\" -exec ls -la {} +"}
{"input": "List the drive of each \"/dev/\" disk mount point", "output": "mount | grep '^/dev/' | sed -E 's/([^ ]*) on ([^ ]*) .*/\"\\2\" is located on \"\\1\"/'"}
{"input": "Print the type of the current shell", "output": "echo $(cat /proc/$$/cmdline)"}
{"input": "List all files in the current directory tree that were modified 60 minutes ago", "output": "find . -mmin 60 -print0 | xargs -0r ls -l"}
{"input": "Find all executables under /path directory", "output": "find /path -perm /ugo+x"}
{"input": "find all directories in the current directory", "output": "find . -type d -name \"*\""}
{"input": "search for a file in the current folder and prepend the first line", "output": "find ./ -name somename.txt -exec sed -e '1i My new text here` {} \\;"}
{"input": "Print line, word and byte counts for each .php files in current directory tree and also show the total counts", "output": "wc `find | grep .php$`"}
{"input": "Find all files/directories under /path/to/dir/* paths and print the timestamp along with their paths and stat them", "output": "find /path/to/dir/* -printf \"%T@|%p|%l\" -exec stat -Lc \"|%Y.0000000000\" {} \\;"}
{"input": "Find all the Sticky Bit files whose permission are 551", "output": "find / -perm 0551"}
{"input": "Print the characters in $b that match with any character in $a without printing any newline", "output": "echo \"$b\" | grep -o \"[$a]\" | tr -d '\\n'"}
{"input": "long list al the files in the current directory which have read permission to the group", "output": "find . -perm -g=r -type f -exec ls -l {} \\;"}
{"input": "set alias \"unix\" for command 'echo $(date +%s)'", "output": "alias unix='echo $(date +%s)'"}
{"input": "list files in /usr modified after February 1 of the current year", "output": "find /usr -newermt \"Feb 1\""}
{"input": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "output": "find data/ -name 'filepattern-*2009*' -exec tar uf 2009.tar '{}' +"}
{"input": "display all the files in the file system which are present in nfs system", "output": "find / -fstype nfs -print"}
{"input": "Returns exit code 1.", "output": "a=$(false)"}
{"input": "kills a running program 'python csp_build.py'", "output": "ps aux | grep 'python csp_build.py' | head -1 | cut -d \" \" -f 2 | xargs kill"}
{"input": "Execute script 'truncate.sh' on all files in the /path/to/files directory tree", "output": "find /path/to/files -exec truncate.sh {} \\;"}
{"input": "Search for 'some string' in all *.axvw files under current directory and show the matched lines with line numbers", "output": "find . -name '*.axvw' -exec grep -n 'some string' {} +"}
{"input": "Recursively removes all files and folders named '.svn' in a current folder.", "output": "find . -name .svn -exec rm -rf {} +"}
{"input": "find files in the current directory and sub-directories, that changed within last hour", "output": "find . -cmin -60"}
{"input": "display all the files in the current folder which have not been modified in the last 7 days and which are not in the list \"file.lst\" and save the output to a file", "output": "find -mtime +7 -print | grep -vf file.lst > found.lst"}
{"input": "Remove all files in the current directory tree that have the name \"abc.xxx\"", "output": "find . -name abc.xxx -exec rm {} \\;"}
{"input": "run bash in screen and source a file before printing the prompt", "output": "screen bash --rcfile yourfile.rc"}
{"input": "sleep for 5 seconds", "output": "sleep 5"}
{"input": "Rename all files matching \"access.log.<number>.gz\" incrementing <number>.", "output": "find -name 'access.log.*.gz' | sort -Vr | rename 's/(\\d+)/$1+1/ge'"}
{"input": "Find all files/directories under current directory that are 10MB in size", "output": "find . -size 10M"}
{"input": "Execute \"ls\" every 2 seconds", "output": "watch ls"}
{"input": "change owner and group of the file \"file\" to user \"user\" and group \"group\"", "output": "chown user:group file ..."}
{"input": "Report file system containing path to /dir/inner_dir/ disk usage human-readable.", "output": "df -h /dir/inner_dir/"}
{"input": "Print all logins formatted as \"The user USER is on TTY\" where USER is the user name and TTY is the login terminal", "output": "who | awk '{print \"The user \" $1 \" is on \" $2}'"}
{"input": "Create symbolic links in the current directory for all files excluding \"CONFIGFILE\" located under \"/your/project\" directory tree", "output": "find /your/project -type f ! -name 'CONFIGFILE' -exec ln -s \\{\\} ./ \\;"}
{"input": "Copy file 'src' to 'dest', except if 'dest' already exists.", "output": "cp -n src dest"}
{"input": "Remove all *.log files from the current directory tree", "output": "find ./ -name '*.log' | xargs rm"}
{"input": "Find all files under current directory with 755 permission and change their permission to 644", "output": "find . -type f -perm 755 -exec chmod 644 {} \\;"}
{"input": "display all files in the current folder which do not belong to the user john", "output": "find . ! -user john"}
{"input": "Recursively copy newer files in \"sourcedir/\" to \"user@dest.com:/dest/dir/\" via ssh", "output": "rsync -auv -e ssh --progress sourcedir/ user@dest.com:/dest/dir/"}
{"input": "change the permission of all the php files in the folder /var/www/ to 700", "output": "find /var/www/ -type f -iname \"*.php\" -exec chmod 700 {} \\;"}
{"input": "Source executable \"virtualenvwrapper.sh\" found in $PATH", "output": "source `which virtualenvwrapper.sh`"}
{"input": "Print \"This is a sentence.\" by replacing all consecutive space characters with a single newline character", "output": "echo \"This is   a sentence.\" | tr -s \" \" \"\\012\""}
{"input": "find all files in etc which have been changed in the last 1 day", "output": "find /etc -daystart -ctime -1"}
{"input": "Recursively copies /mnt/usr/lib to the '/usr/' directory, creating symbolic links on each file instead of real copying them.", "output": "cp -rs /mnt/usr/lib /usr/"}
{"input": "Execute \"ps -C java -o pcpu,state,cputime,etimes\" every second", "output": "watch -n 1 ps -C java -o pcpu,state,cputime,etimes"}
{"input": "Change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree", "output": "find /path/to/look/in/ -type d -name '.texturedata' -prune -print0 | xargs -0 chmod 000"}
{"input": "Find all *.xml.bz2 files under current directory", "output": "find . | grep \".xml.bz2$\""}
{"input": "Search the .py files residing in the current directory tree for \"something\"", "output": "find . -name \"*.py\" -type f -exec grep \"something\" {} \\;"}
{"input": "Search for $GROUP at the beginning of each line in /etc/group and print the last colon (':') separated entry with comma replaced with newlines", "output": "grep ^$GROUP /etc/group | grep -o '[^:]*$' | tr ',' '\\n'"}
{"input": "Remove all tmp/*.mp3 files", "output": "find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs rm"}
{"input": "Find all *.mov (case insensitive) files under current directory and run an echo command with the path and the name for each file", "output": "find . -iname \"*.mov\" -printf \"%p %f\\n\" | while read -a HR ; do echo ffmpeg -i ${HR[0]} -f flv ${HR[1]} ;done"}
{"input": "Parse XML file \"example.xml\" and extract and number all \"key\" tags from the \"config\" section", "output": "xmllint example.xml --xpath \"/config/*/@*\" | sed \"s| key|\\nkey|g\" | nl"}
{"input": "Run /bin/true with 1 to 100000 as arguments", "output": "/bin/sh -c \"/bin/true $(seq 1 100000)\""}
{"input": "Find and remove zero bytes files from user's directories .", "output": "find /usr/* -size 0c -exec rm {} \\;"}
{"input": "Find all *.mov (case insensitive) files under current directory and execute /path/to/myffmpeg.sh with each file path as its argument", "output": "find . -iname \"*.mov\" -exec /path/to/myffmpeg.sh {} \\;"}
{"input": "Print lines in the sorted contents of \"file2\" that are not in the sorted contents of \"file1\"", "output": "comm -13 <(sort file1) <(sort file2)"}
{"input": "change owner and group of the file it to user and group root", "output": "chown root:root it"}
{"input": "display all files in current folder and follow the symbolic links and display the pointed file", "output": "find -L ."}
{"input": "Print lines 2960 to 2966 from the output of \"history\"", "output": "history | sed -n '2960,2966p'"}
{"input": "Split \"file.tar.gz\" into files of size 1024 MB", "output": "split -b 1024m file.tar.gz"}
{"input": "Print the files in the current directory as a list of comma separated values", "output": "ls | sed '$!s/$/,/' | tr -d '\\n'"}
{"input": "Change directory to the output of command '~/marker.sh go \"$@\"'", "output": "cd $( ~/marker.sh go \"$@\" )"}
{"input": "display all the files in the current folder which have been modified in the last 24 hours", "output": "find . -mtime -1 -print"}
{"input": "Sort numerically and compare files \"ruby.test\" and \"sort.test\"", "output": "diff <(sort -n ruby.test) <(sort -n sort.test)"}
{"input": "Search the regular files of the current directory tree for string \"foo\"", "output": "find ./ -type f | xargs grep \"foo\""}
{"input": "display the html, javascript and text files in the current folder", "output": "find . -type f \\( -name \"*.htm*\" -o -name \"*.js*\" -o -name \"*.txt\" \\) -exec sh -c 'echo \"$0\"' {} \\;"}
{"input": "Find all *.md files in entire file system and convert them to HTML (*.md.html) files", "output": "find / -name \"*.md\" -type f -exec markdown -o {}.html {} \\;"}
{"input": "Change directory to \"/lib/modules/\" of the current kernel release", "output": "cd /lib/modules/$(uname -r)/"}
{"input": "Remove all .sh files in the current directory tree whose names begin with \"new\"", "output": "find . -name \"new*.sh\" -exec rm -f '{}' \\;"}
{"input": "Recursively finds all files and prints only names of files that contain \"word\" and suppressing error messages .", "output": "find . | xargs grep 'word' -sl"}
{"input": "copy all the regular files in the current directory to the temporary diectory.", "output": "find . -type f -exec cp {} /tmp +"}
{"input": "find all files read less than 1 minute ago", "output": "find . -amin -1"}
{"input": "search for \"message.txt\" in the folder .cache/bower and display its contents", "output": "find .cache/bower/ -name \"message.txt\" | xargs cat"}
{"input": "Display differences between /destination/dir/1 and /destination/dir/2 excluding files with names ending with extensions '.foo', '.bar' and '.baz'", "output": "diff -x '*.foo' -x '*.bar' -x '*.baz' /destination/dir/1 /destination/dir/2"}
{"input": "search for the file centos in /usr folder ( case insenstive search )", "output": "find /usr -iname centos"}
{"input": "Remove all *.txt files under the given directory modified more than 5 minutes ago", "output": "find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name \"*.txt\" -delete"}
{"input": "Find all files named \"file.ext\" in the current directory tree and print the path names of the directories they are in", "output": "find $PWD -name \"file.ext\" -exec sh -c 'echo $(dirname {})' ';'"}
{"input": "Serach for all the files containing grep in man pages", "output": "find /usr/share/man/ -regex .*grep*"}
{"input": "Remove files that are less than 1MB in size under <directory>", "output": "find <directory> -type f -size -1M -print0  | xargs -0 rm"}
{"input": "display all the files in the folder \"$ORIG_DIR\"", "output": "find \"$ORIG_DIR\""}
{"input": "Find all files/directories which have been modified within the last day in the drectories/files taken from the glob pattern '/tmp/test/*'", "output": "find /tmp/test/* -mtime -1"}
{"input": "find all directories in the current folder and do not search in sub directories", "output": "find . -type d -maxdepth 1"}
{"input": "List all *.txt files/directories under /etc", "output": "find /etc -name \"*.txt\" | xargs -I {} ls -l {}"}
{"input": "Print lines in the sorted contents of \"second.txt\" that are not in the sorted contents of \"first.txt\"", "output": "comm -13 <(sort first.txt) <(sort second.txt)"}
{"input": "List all *.bak files in the current directory tree", "output": "find  . -name '*.bak' -ls"}
{"input": "search the file \"myfile.txt\" in home folder", "output": "find \"$HOME/\" -name myfile.txt -print"}
{"input": "Find all .gz archives in the current directory tree and check if they are valid", "output": "find . -name '*.gz' | xargs gunzip -vt"}
{"input": "Execute \"ls -l\" every 2 seconds", "output": "watch ls -l"}
{"input": "Move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory", "output": "find /path/to/folders/* -type d -exec mv {} {}.mbox \\; -exec mkdir {}.mbox/Messages \\;"}
{"input": "Use the last 100 lines of \"file1\" as input to \"wc -l\" and monitor the pipeline with the \"bar\" command", "output": "tail -n 100 file1 | bar | wc -l"}
{"input": "find all the files in the current directory and change the permissions to 775.", "output": "find . -exec chmod 775 {} \\;"}
{"input": "Redirects content of extracted file to a pipe", "output": "bunzip2 -c compressedfile.bz2 | yourfilterprogram"}
{"input": "Search the current directory tree for files containing \"album\" and \"vacations\" in their names and not containing \"2015\"", "output": "find . -name \"*album*\" -a -name \"*vacations*\" -a -not -name \"*2015*\""}
{"input": "Create script filesPermissions.sh that restores the original permissions of the regular files in the current directory tree", "output": "find . -type f |xargs ls -la| awk '{print \"chmod \"$1\" \"$NF}'>./filesPermissions.sh"}
{"input": "search for text files in the folders /home/hobbes/ /home/calvin/", "output": "find /home/hobbes/ /home/calvin/ -name \u201c*.txt\u201d"}
{"input": "Recursively change the owner to \"user\" and group to \"www-data\" of \"yourprojectfoldername\"", "output": "chown -R user:www-data yourprojectfoldername"}
{"input": "Show a long listing of files not modified in over 20 days or not accessed in over 40 days", "output": "find /mydir \\(-mtime +20 -o -atime +40\\) -exec ls -l {} \\;"}
{"input": "Backup a directory with a zenity progress bar", "output": "screen -L bash -c '(while :; do tail ~/screenlog.0 | grep -o \"[0-9]*%\" | tail -1; done | zenity --progress --auto-close &); 7z a \"output.zip\" \"/path/to/input\"'"}
{"input": "Recursively print all files and directories in the directory tree \"$absolute/path/of/your/dir\"", "output": "tree $absolute/path/of/your/dir"}
{"input": "Show find's version", "output": "find --version"}
{"input": "find all the text files in the file system and search only in the disk partition of the root.", "output": "find / -xdev -name \"*.txt\""}
{"input": "Find all regular files in the \"$dir\" directory", "output": "find $dir -maxdepth 1 -type f"}
{"input": "create backup of all the text files  present in the current folder", "output": "find -name \"*.txt\" cp {} {}.bkup \\;"}
{"input": "display all the regular files in current folder", "output": "find . -type f"}
{"input": "As root, edit the cron job list of user \"apache\" using the editor specified by EDITOR environment variable, or default /usr/bin/editor if this variable is not set.", "output": "sudo crontab -e -u apache"}
{"input": "create a symbolic link named \"test\" to file \".bashrc\"", "output": "ln -s .bashrc test"}
{"input": "Search for '/usr/bin/perl' in all regular files under current dirctory tree and also show a long listing of them", "output": "find . -type f -exec grep \"/usr/bin/perl\" {} \\; -ls"}
{"input": "Print the kernel configuration options found in \"/proc/config.gz\"", "output": "cat /proc/config.gz | gunzip"}
{"input": "Find all *.mp4 files under directory named 'working' and show the first one found", "output": "find working -type f -name \"*.mp4\" | head -1"}
{"input": "find all png images in the current folder and convert the to jpg images. print0 is used to handle the files which have new lines in their names", "output": "find . -name \"*.png\" -print0 | xargs -0 mogrify -format jpg -quality 50"}
{"input": "Execute 'tput setaf 1; echo foo' with color support every 2 seconds", "output": "watch --color 'tput setaf 1; echo foo'"}
{"input": "Find all regular files named 'Chapter1' under current directory tree", "output": "find . -name Chapter1 -type f -print"}
{"input": "Search the /myfiles directory tree for files whose names contain \"blue\"", "output": "find /myfiles -name '*blue*'"}
{"input": "remove all the core files in the temp file after user confirmation", "output": "find /tmp -name core -type f -print0 | xargs -0 /bin/rm -i"}
{"input": "Merge 10 already sorted files and display the result, pausing at each page of output.", "output": "sort -m a b c d e f g h i j | more"}
{"input": "Dump the character output of \"echo 'hi'\"", "output": "echo 'hi' | od -c"}
{"input": "Find all *.zip files under current directory and unzip them in the same directory as the files", "output": "find . -name '*.zip' -exec sh -c 'unzip -d \"`dirname \\\"{}\\\"`\" \"{}\"' ';'"}
{"input": "Send SIGWINCH process to current shell, causing it to update the LINES and COLUMNS variables which describe the size of the screen/window in characters.", "output": "kill -s WINCH $$"}
{"input": "Remove filetype suffix (last dot and following characters if any) from filename", "output": "echo $filename | rev | cut -f 2- -d '.' | rev"}
{"input": "Recursively change owner and group to \"$JBOSS_AS_USER\" of \"$JBOSS_AS_DIR/\"", "output": "chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR/"}
{"input": "Sort all directory names matching folder_* and go to the last one.", "output": "cd $(find . -maxdepth 1 -type d -name \"folder_*\" | sort -t_ -k2 -n -r | head -1)"}
{"input": "Change owner to \"$user\" and group to \"$group\" of \"$file\"", "output": "chown -- \"$user:$group\" \"$file\""}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them", "output": "find MyApp.app -name Headers -type d -exec rm -rf \"{}\" \\; || true"}
{"input": "Append all regular files modified in the last 24 hours to the \"$archive.tar\" tar archive", "output": "find . -mtime -1 -type f -print0 | xargs -0 tar rvf \"$archive.tar\""}
{"input": "Find files that are 0 bytes in size in the current directory tree and remove them", "output": "find . -size 0 -exec rm {} \\;"}
{"input": "Display file status for each regular file in the current directory tree", "output": "find . -type f -exec stat {} \\; > /dev/null"}
{"input": "Saves real path of the folder containing the current script", "output": "DIR=$(dirname \"$(readlink -f \\\"$0\\\")\")"}
{"input": "Create a symolic link in \"/usr/local/\" to \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl\"", "output": "ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/"}
{"input": "Converts all windows line endings to unix line endings", "output": "find $(pwd) -type f | xargs -I xxx sed -i 's/\\r//g' xxx"}
{"input": "display all the text files and pdf files in the current folder", "output": "find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\)"}
{"input": "Calculate the sum of all the numbers from 1 to 100000", "output": "seq 100000 | paste -sd+ | bc -l"}
{"input": "bind word \"pwd\\n\" to key code \"\\e[24~\"", "output": "bind '\"\\e[24~\":\"pwd\\n\"'"}
{"input": "For each .def file under the current directory, create an empty .def.out file with current timestamp.", "output": "find . -name '*.def' | sed 's/\\(.*\\)/\\1.out/' | xargs touch"}
{"input": "Move all files matching patterns \"*.old\", \".old\", \".*.old\" from the current directory to directory \"../old/\"", "output": "find . ! -name . -prune -name '*.old' -exec mv {} ../old/ \\;"}
{"input": "Recursively removes all files like '*.pyc' in a current folder.", "output": "rm `find . -name \\*.pyc`"}
{"input": "display a long listing of all the normal/regular files in the current folder and do not search in the sub folders", "output": "find . -maxdepth 1 -type f -exec ls -l {} \\; | less"}
{"input": "search for all the files in the current folder which have the word \"-GHBAG-\" and display the move command for replacing the word \"GHBAG\" in the file names to \"stream-agg\"", "output": "find . -name '*-GHBAG-*' -exec bash -c 'echo mv $0 ${0/GHBAG/stream-agg}' {} \\;"}
{"input": "Write \"2-1.1.1\" to standard output and to file \"/sys/bus/usb/drivers/usb/unbind\"", "output": "echo '2-1.1.1'|sudo tee /sys/bus/usb/drivers/usb/unbind"}
{"input": "View history using \"vim\" in read only mode", "output": "history | vim -R -"}
{"input": "long list al the files in the current directory which have only read permission to the group", "output": "find . -perm 040 -type f -exec ls -l {} \\;"}
{"input": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character, ignoring path names containing \"test\"", "output": "find . -regex \".*/my.*p.$\" -a -not -regex \".*test.*\""}
{"input": "List current directory, waiting for user input at each page.", "output": "ls | more"}
{"input": "Search in the current directory and all sub-directories except ./D and any further sub-directories also named D for the file named hi.dat", "output": "$ find . \\( -name D -prune \\) -o -name hi.dat"}
{"input": "Search all files in the current directory tree whose names end in \"1\" for string \"1\"", "output": "find . -name \"*1\" -print0 |xargs -0 grep \"1\""}
{"input": "copy the entire contents of the current directory to another directory, while preserving the permissions, times, and ownership of every file and sub-directory", "output": "find . | cpio -pdumv /path/to/destination/dir"}
{"input": "Change to the directory of the executable \"<file>\"", "output": "cd `which <file> | xargs dirname`"}
{"input": "Print type of the file system containing path $dir.", "output": "df -T $dir | tail -1 | awk '{print $2;}'"}
{"input": "Change directory to the parent of the real path of the current script", "output": "cd $(dirname $(readlink -f $0))"}
{"input": "Find all regular files under $DIR/tmp/daily/, sort them in reverse numerical order and copy the first two files to $DIR/tmp/weekly/", "output": "find $DIR/tmp/daily/ -type f -printf \"%p\\n\" | sort -rn | head -n 2 | xargs -I{} cp {} $DIR/tmp/weekly/"}
{"input": "Find all directories whose status were changed $FTIME days ago", "output": "find . -type d -ctime $FTIME"}
{"input": "Find the first file/directory under current directory and quit", "output": "find . ... -exec sh -c 'printf \"%s\\n\" \"$1\"; kill \"$PPID\"' sh {} \\;"}
{"input": "Find files/directories under current directory that matches the regex /path/to/something[^/]*$  in their paths", "output": "find . | grep -qi /path/to/something[^/]*$"}
{"input": "Find text in whole directory tree", "output": "find . -type f | xargs grep \"text\""}
{"input": "Find all files/directories with space in their names under current directory", "output": "find . -name '* *'"}
{"input": "display all directories in current folder excluding those that are present in .git folder", "output": "find . -iregex '.*/.git/.*' -prune -o -type d -name 'CVS'"}
{"input": "find all the png files in the current folder which begin with the word image and do not search in the sub directories", "output": "find . -maxdepth 1 -type f -name 'image*png' `"}
{"input": "Find files bigger than 20 megabytes in the home directory tree", "output": "find ~ -size +20M"}
{"input": "Print last day of April, 2009", "output": "cal 4 2009 | tr ' ' '\\n' | grep -v ^$ | tail -n 1"}
{"input": "Find all files under current directory and upload them to https://PATH_TO_NEXUS/", "output": "find . -type f -exec curl --user user:pass --ftp-create-dirs -T {} https://PATH_TO_NEXUS/{} \\;"}
{"input": "Search for files greater than 20MB in the entire file system, sort them according to size in descending order and display the path and file size", "output": "find / -type f -size +20000k -exec ls -lh {} \\; 2> /dev/null | awk '{ print $NF \": \" $5 }' | sort -nrk 2,2"}
{"input": "Search the .VER files from the current directory tree for Perl regular expression \"Model-Manufacturer:.\\n.\"", "output": "find . -name \"*.VER\" -exec grep -P 'Model-Manufacturer:.\\n.' '{}' ';' -print"}
{"input": "recursively change owner of the directory /usr/local to the current user", "output": "sudo chown -R `whoami` /usr/local"}
{"input": "search for regular/normal file with the name \"myfile\" in the entire file system", "output": "find / -name myfile -type f -print"}
{"input": "Save the contents of \"numbers.txt\" to variable \"f\"", "output": "f=$(cat numbers.txt)"}
{"input": "search for all the text files in the folder /home/calvin/ and save the output to  /tmp/search.log", "output": "find /home/calvin/ -name \u201c*.txt\u201d > /tmp/search.log"}
{"input": "Find all files recursively starting from / that have been modified in the past 30 minutes and list them", "output": "find / -mmin -30 -ls"}
{"input": "Perform case-insensitive search for file `TeSt123.txt' on the system", "output": "find / -iname TeSt123.txt"}
{"input": "Find all files under 'dir' directory and print their md5 sums into file.txt", "output": "find dir -type f | xargs md5sum >> file.txt"}
{"input": "Find all regular files or symlinks in the entire file system", "output": "find / -mount -depth \\( -type f -o -type l \\) -print"}
{"input": "find all the files in the current directory which have been modified in the last 24 hours", "output": "find . -mtime 0"}
{"input": "Print a welcome message with the current user's user name", "output": "echo \"Welcome $(whoami)!\""}
{"input": "search for all the files in the current directory which have been modified in the last 24 hours.", "output": "find . -mtime -1"}
{"input": "Find all files under $source_dir that match the regex expanded by $input_file_type in their paths", "output": "find \"$source_dir\" -type f|egrep \"$input_file_type\""}
{"input": "Find all files/directories in current directory and execute myscript for each of them", "output": "find . -exec myscript {} \\;"}
{"input": "Print the directory name of the physical current working directory", "output": "dirname `pwd -P`"}
{"input": "Execute \"generate_commands\" and run the resulting commands in the current shell.", "output": "source <(./generate_commands)"}
{"input": "Search directory trees /tmp and /var/tmp for \"testfile.txt\"", "output": "find /tmp /var/tmp -iname \"testfile.txt\""}
{"input": "Measure the disk space taken up by all *.txt files in the current directory tree", "output": "find . -name \"*.txt\" -print0 |xargs -0 du -ch | tail -n1"}
{"input": "find all regular/normal files in the current folder", "output": "find -type f"}
{"input": "Immediately terminate all processes whose command or arguments contain 'amarok'.", "output": "ps aux | grep -ie amarok | awk '{print $2}' | xargs kill -9"}
{"input": "Search the /dir directory tree for files whose names match regular expression '2015.*(album|picture)'", "output": "find /dir|egrep '2015.*(album|picture)'"}
{"input": "Check if $path_in_question is mount point of filesystem", "output": "df $path_in_question | grep \" $path_in_question$\""}
{"input": "find all the zip files in the current folder", "output": "find . -type f -name '*.zip'"}
{"input": "Print the number of 'processors' (both physical and virtual/hypethereading cores) less 1.", "output": "cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1"}
{"input": "Save the list of files modified within a fortnight ago to `deploy.txt' removing the leading ./ from the file names", "output": "find . -type f -mtime -14 | sed 's|./||' >deploy.txt"}
{"input": "Make directory \"~/public_html\"", "output": "mkdir ~/public_html"}
{"input": "Search for 'It took' in all $srch1* (case insensitive) files under current directory and run the sed script 'N;s/(.*)\\n(.*)/\\2 \\1/' on the output", "output": "find . -iname \"$srch1*\" -exec grep \"It took\" {} \\; -print |sed -r 'N;s/(.*)\\n(.*)/\\2 \\1/'"}
{"input": "Delete all hidden files under $some_directory", "output": "find \"$some_directory\" -type f -name '.*' -delete"}
{"input": "Find all directories in entire file system which are larger than 50KB", "output": "find / -type d -size +50k"}
{"input": "Set variable value to current kernel release name.", "output": "value=$(uname -r)"}
{"input": "Mount the \"linprocfs\" filesystem on \"/proc\"", "output": "mount -t linprocfs none /proc"}
{"input": "Recursively lists all files in a current folder and prints full path along with modification time.", "output": "stat --printf=\"%y %n\\n\" $(ls -tr $(find * -type f))"}
{"input": "Creates temporary file and saves path to it in a 'tmpfile' variable.", "output": "tmpfile=`mktemp`"}
{"input": "Disables overwriting existing files", "output": "set -o noclobber"}
{"input": "Send SIGTERM signal to first process sent to background by the current shell.", "output": "kill %1"}
{"input": "find all files beneath the current directory that begin with the letters 'Foo' and delete them.", "output": "find . -type f -name \"Foo*\" -exec rm {} \\;"}
{"input": "Search for 'foo' in all regular files under 'sources' directory tree and show the matched lines with filenames", "output": "find sources -type f -exec grep -H foo {} +"}
{"input": "Find all files named \"file.ext\" in the current directory tree and print the path names of the directories they are in", "output": "find `pwd` -name \"file.ext\" -exec echo $(dirname {}) \\;"}
{"input": "Split \"$ORIGINAL_FILE\" into files of at most \"$MAX_LINES_PER_CHUNK\" lines each with a prefix \"$CHUNK_FILE_PREFIX\"", "output": "split -l $MAX_LINES_PER_CHUNK $ORIGINAL_FILE $CHUNK_FILE_PREFIX"}
{"input": "Print the 6th field (delimited by '/') from the paths specified by ~/bin/FilesDvorak/.* files/directories", "output": "find ~/bin/FilesDvorak/.* -maxdepth 0 | awk -F\"/\" '{ print $6 }'"}
{"input": "Change ownership of \"/vol\" to the current user", "output": "sudo chown `whoami` /vol"}
{"input": "find all the header files in /usr/include which have been modified in the last 399 days and display the number of lines, number of files, number of characters of all these files", "output": "find usr/include -name '*.h' -mtime -399 | wc"}
{"input": "display all the files in the home folder which belong to the suer \"bruno\" and end with \".sxw\" and have been accessed in the last 3*24 hours", "output": "find /home -type f -name *.sxw -atime -3 -user bruno"}
{"input": "search for files in the current folder using name patterns", "output": "find . -name '[mM][yY][fF][iI][lL][eE]*'"}
{"input": "Print the full path of command \"cc\"", "output": "which cc"}
{"input": "print top 10 largest files and directories", "output": "du -a . | sort -nr | head"}
{"input": "display all the files in the file system which have been modified in the last 10 minutes", "output": "find / -mmin -10"}
{"input": "Find all *fink* files/directories in entire file system", "output": "find / -name \"*fink*\" -print"}
{"input": "Report total file systems disk usage in 1T blocks.", "output": "df --total -BT | tail -n 1"}
{"input": "find all files in the file system which have not been accessed in the last 2 days", "output": "find / -atime +2"}
{"input": "recursively change owner and group of the directory and group of the directory and all files into it to user and group dev_user", "output": "chown \"dev_user\".\"dev_user\" -R ~/.ssh/"}
{"input": "Print 'empty' if aaa/ is an empty directory", "output": "[ -z \"$(find aaa/ -maxdepth 1 -type f)\" ] && echo \"empty\""}
{"input": "Remove all *.doc files from the current directory tree", "output": "find . -name '*.doc' -exec rm \"{}\" \\;"}
{"input": "display a long listing of all the files in the current folder which are bigger than 10KB", "output": "find . -size +10k -exec ls -lh {} \\+"}
{"input": "Prepend time stamps to entries in \"/path/to/log\" as they appear and write to \"/path/to/log-with-timestamps\"", "output": "tail -f /path/to/log | perl -pne 'print scalar(localtime()), \" \";' > /path/to/log-with-timestamps"}
{"input": "find regular files which modification time is  7 days ago", "output": "find . -mtime -7 -type f"}
{"input": "Run the command 'true' with an empty environment variable doFirst", "output": "doFirst= true"}
{"input": "Find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output", "output": "{ find . -name '*my key phrase*'; grep -rl 'my key phrase' *; } | sed \"s/^\\.\\///\" | sort -u"}
{"input": "Print the current user's mail file in \"/var/spool/mail\"", "output": "cat /var/spool/mail/`whoami`"}
{"input": "search in all the regular/normal files of the current folder for the word \"word\" and display the matched file name", "output": "find . -type f -exec grep -l \"word\" {} +"}
{"input": "Remove all empty regular files under the current directory and below", "output": "find ./ -type f -size 0c -print | xargs rm"}
{"input": "Replace all occurrences of \"StringA\" with \"StringB\" in the *.php and *.html files residing in the current directory tree", "output": "find . \\( -name \"*.php\" -or -name \"*.html\" \\) | xargs grep -l StringA | xargs sed -i -e 's/StringA/StringB/g'"}
{"input": "Prints only unique strings of those stored in variables $COMMANDS and $ALIASES.", "output": "echo \"$COMMANDS\"$'\\n'\"$ALIASES\" | sort -u"}
{"input": "Find all files/directories named 'FindCommandExamples.txt' that belong to the user 'root' in the entire filesystem", "output": "find / -user root -name FindCommandExamples.txt"}
{"input": "Copy all files below the current directory whose names contain \"foobar\" (case-insensitive) to directory foo/bar/ in user's home directory.", "output": "find . -iname \"*foobar*\" -exec cp \"{}\" ~/foo/bar \\;"}
{"input": "Archive \"/path/to/copy\" on host \"remote.host\" as user \"user\" to \"/path/to/local/storage\" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission", "output": "rsync -chavzP --stats user@remote.host:/path/to/copy /path/to/local/storage"}
{"input": "Gets domain name from dig reverse lookup and save in variable 'go'.", "output": "go=$(dig -x 8.8.8.8| awk '/PTR[[:space:]]/{print $NF}')"}
{"input": "Display all lines contained in 'dax-weekly.csv' in reverse order.", "output": "cat dax-weekly.csv | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'"}
{"input": "Search for files with \"demo\" in their names and \"sitesearch\" in their path names", "output": "find . -iname '*demo*' | grep -i sitesearch"}
{"input": "Find all files in directory tree \"dirname\"", "output": "find dirname -exec echo found {} \\;"}
{"input": "Copy the directory structure in \"src/\" to \"dest/\" with empty files", "output": "find src/ -type d -exec mkdir -p dest/{} \\; -o -type f -exec touch dest/{} \\;"}
{"input": "Print a line of \"$variable\" '-' characters", "output": "printf '%0.s-' $(seq 1 $variable)"}
{"input": "Print the full path of a file under the current working directory with inode number specified on standard input", "output": "xargs -n 1 -I '{}' find \"$(pwd)\" -type f -inum '{}' -print"}
{"input": "Recursively removes all files with name like \"myFile.*\" in 'file path' folder.", "output": "find <file path> -name \"myFile.*\" -exec rm -f {} ;"}
{"input": "find all text files in the current directory and compress them to a cpio file", "output": "find . -name '*.txt' | cpio -pdm /path/to/destdir"}
{"input": "Case-insensitive search for \"error\" in file report.txt, display one page at a time, waiting for user interaction between each.", "output": "cat report.txt | grep -i error | more"}
{"input": "Save a nginx link to \"/path/to/file\" with the current user and system FQDN host name in variable \"path\"", "output": "path=\"http://$(whoami).$(hostname -f)/path/to/file\""}
{"input": "reverse input with comma deliminators", "output": "echo \"a,b,c\" | tr '\\n' ',' | tac -s \",\" | sed 's/,$/\\n/'"}
{"input": "List all files and folders in the current working directory", "output": "ls `pwd`/*"}
{"input": "Delete everything except the control characters in \"foobar\\n\\337\" and dump the remaining characters", "output": "printf 'foobar\\n\\377' | tr -d '\\0-\\176' | od -t c"}
{"input": "Find all php files in the current directory", "output": "find . -type f -name \"*.php\""}
{"input": "Split a file ADDRESSS_FILE into pieces per 20 lines named with prefix \"temp_file_ and numeric suffixes", "output": "split -l20 ADDRESSS_FILE temp_file_"}
{"input": "Find all hard links to file1 under /home directory", "output": "find /home -xdev -samefile file1"}
{"input": "Search for 'Processed Files' in all dl-aster-full-20131102* (case insensitive) files under current directory and print only the 2nd field from the output with : (colon) as the delimiter", "output": "( find . -iname \"dl-aster-full-20131102*\" -exec grep \"Processed Files\" {} \\;) | cut -d\":\" -f2"}
{"input": "Save the list of *.html files in the current directory tree to html_files.txt", "output": "find . -type f -name \"*.html\" > html_files.txt"}
{"input": "display the base name(name without extension) of all the \".NEF\" files in the current folder", "output": "find . -name \"*.NEF\" -exec basename \\{\\} .NEF \\;"}
{"input": "Find all *.cls files/directories under current directory and print '{if(length($0) > L) { LINE=$0; L = length($0)}} END {print LINE\"L\"L}' for each of them where $0 is expanded to the file/directory path", "output": "find . -iname \"*.cls\" -exec echo '{if(length($0) > L) { LINE=$0; L = length($0)}} END {print LINE\"L\"L}' {} \\;"}
{"input": "Find all the *.pl files (Perl files) beneath the current directory.", "output": "find . -name \"*.pl\""}
{"input": "Find all regular files in the current directory tree and print a command to move them to the current directory", "output": "find . -type f -exec echo mv -t . {} +"}
{"input": "SSH into user@server and run command ${SSH_COMMAND}", "output": "ssh user@server \"${SSH_COMMAND}\""}
{"input": "delete all the tmp files ( files with the extension tmp ) in the /tmp folder", "output": "find /tmp -name \"*.tmp\" | xargs rm"}
{"input": "Find all regular files under current directory tree that match the regex 'tgt/etc/*' in their paths", "output": "find . -type f -name \\* | grep \"tgt/etc/*\""}
{"input": "Calculate the sum of the 7th column of \"ipcs -mb\"", "output": "ipcs -mb | awk 'NR > 3 { print $7 }' | paste -sd+ | bc"}
{"input": "Save a line of 100 random characters either \".\" or \" \" in variable \"foo\"", "output": "foo=$(cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1)"}
{"input": "Find all files under var/ directory and change their permission to 600", "output": "find var/ -type f -exec chmod 600 {} \\;"}
{"input": "Make directory \"/tmp/foo\"", "output": "mkdir /tmp/foo"}
{"input": "Create a named screen session", "output": "screen -X title mynewtitle"}
{"input": "Kill screen session 23536", "output": "screen -S 23536 -X quit"}
{"input": "Make directory \"saxon_docs\"", "output": "mkdir saxon_docs"}
{"input": "display all the normal/regular files in a directory", "output": "find $dir -type f -name $name -print"}
{"input": "find all the files in current folder ending with \"ini\" and search for a word in all these files", "output": "find . -name *.ini -exec grep -w PROJECT_A {} \\; -print | grep ini"}
{"input": "Find all files with name \"file.ext\" under the current working directory tree and print each full path directory name", "output": "find `pwd` -name file.ext |xargs -l1 dirname"}
{"input": "change the permissions of all the directories  to 775 in the current folder", "output": "find . -type d -exec chmod 775 {} \\;"}
{"input": "Search directory $dirname for regular files and save the result to $tempfile", "output": "find $dirname -type f  > $tempfile"}
{"input": "Join columns in \"file1\" and \"file2\" if their first field matches and format the output as a table", "output": "join file1 file2 | column -t"}
{"input": "delete all the mp4 files in the folder /home which are bigger than 10MB", "output": "find /home -type f -name *.mp4 -size +10M -exec rm {} \\;"}
{"input": "Find all the files in file system which are modified more than 50 days back and less than 100 days", "output": "find / -mtime +50 \u2013mtime -100"}
{"input": "Recursively copy directory \"/path/to/data/myappdata\" to \"user@host:/remote/path/to/data/myappdata\"", "output": "rsync -rvv /path/to/data/myappdata user@host:/remote/path/to/data/myappdata"}
{"input": "Recursively change the user and group of all files in \"/var/lib/jenkins\" to \"root\"", "output": "chown -R root:root /var/lib/jenkins"}
{"input": "find all .bak files in or below the current directory and move them to ~/.old.files directory:", "output": "find . -name \"*.sh\" -print0 | xargs -0 -I {} mv {} ~/back.scripts"}
{"input": "Uncompress file \"dbdump.sql.gz\" through standard input and pass to \"mysql\"", "output": "cat dbdump.sql.gz | gzip -cd | mysql"}
{"input": "split file \"your_file\" into pieces per 9 lines", "output": "split -l9 your_file"}
{"input": "Search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file while sending anything printed to stderr to /dev/null.", "output": "find / -fstype ext3 -name zsh -ls 2> /dev/null"}
{"input": "Print the total disk usage in bytes of all files listed in \"files.txt\"", "output": "cat files.txt | xargs du -c | tail -1 | awk '{print $1}'"}
{"input": "Test if \"file.tar.gz\" is corrupt", "output": "gunzip -t file.tar.gz"}
{"input": "find all the files ending with \".mkv\" in a folder and send them as an argument to a shell script", "output": "find /volume1/uploads -name \"*.mkv\" -exec /tmp/rename.sh \\{\\} \\;"}
{"input": "Find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 20480 blocks in size.", "output": "find . -atime +7 -o -size +20480 -print"}
{"input": "Clean the current directory from all subversion directories recursively", "output": "find . -type d -name \".svn\" -print | parallel rm -rf"}
{"input": "Copy '/path/to/source' from remote \"username@computer\" to local \"/path/to/dest\"", "output": "rsync -r username@computer:/path/to/source /path/to/dest"}
{"input": "create a tar ball of all pdf files in current folder", "output": "find . -name *.pdf | xargs tar czvf /root/Desktop/evidence/pdf.tar"}
{"input": "Unset the DISPLAY variable", "output": "unset DISPLAY"}
{"input": "List all directories under current directory", "output": "find . -type d -exec ls -dlrt {} \\;"}
{"input": "Generate UUIDs for the files from the current directory tree", "output": "find . -exec printf '%s\\t' {} \\; -exec uuidgen \\; | awk -F '\\t' '{ sub(/.+\\//,\"\", $1); print $2, $1 }' | sort -k2"}
{"input": "find all the directories in the current directory which dont have the execute permission.", "output": "find -type d ! -perm -111"}
{"input": "Find files that are writable by the user, the group, or both", "output": "find plsql -type f  -perm /220 -exec ls -l {} \\; 2>/dev/null"}
{"input": "Find all directories under minimum 1 level down the current directory excluding  directories (along with their contents) that start with a . (dot) in their names", "output": "find . -mindepth 1 -name '.*' -prune -o \\( -type d -print \\)"}
{"input": "Search the current directory and all subdirectories for files that have 777 permissions and the permissions to 755", "output": "find . -type f -perm 777 -exec chmod 755 {} \\;"}
{"input": "find all the files in the current folder that have been modified exactly 24*3 hours ago", "output": "find ./ -mtime 3"}
{"input": "Wrap each line in \"longline\" to a maximum of 30 characters breaking at spaces", "output": "fold -w30 -s longline"}
{"input": "Find all files/directories with '.in' extension in the directory $directory and its subdirectories", "output": "du -a $directory | awk '{print $2}' | grep '\\.in$'"}
{"input": "Find all files in /tmp whose names begin with the current user's name followed by \".\"", "output": "find /tmp -maxdepth 1 -name \"$USER.*\""}
{"input": "Create a symbolic link in directory \"/path/to/dir\" for each file and directory under the current directory starting with \".\"", "output": "find $PWD -name '.[^.]*' -exec ln -s '{}' /path/to/dir \\;"}
{"input": "Execute all arguments to a shell script and write the output to console and \"$FILE\"", "output": "$@ | tee $FILE"}
{"input": "Calculate the md5 sum of all files in the current directory with the filename printed first", "output": "find -maxdepth 1 -type f -exec md5sum {} \\; | awk '{s=$2; $2=$1; $1=s;}1'"}
{"input": "Remove regular files in the current directory tree", "output": "find . -type f -print0 | xargs -0 -n1 echo rm | sh -x"}
{"input": "find all the files in the file system which have sticky bit enabled to the user", "output": "find / -perm -u+s"}
{"input": "Find all empty directories in the current one and delete them", "output": "find . -type d -maxdepth 1 -empty -print0 | xargs -0 /bin/rmdir"}
{"input": "Write \"foo\" to the real path of the current command's standard output", "output": "echo foo | readlink /proc/self/fd/0"}
{"input": "Request A record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'", "output": "dig @$ns $d A | grep $d | grep -v \"DiG\""}
{"input": "Show all processes that have a tty in format \"%p %r %y %x %c \"", "output": "ps x -o  \"%p %r %y %x %c \""}
{"input": "search for a directory in a folder taking name as argument and assign the first instance of it to a variable", "output": "DIR='find $HOME -type d -name $1 | head 1'"}
{"input": "Find all files/directories under current directory", "output": "find ./"}
{"input": "search for the file filename in the entire file system", "output": "find / -name filename"}
{"input": "Processes file as binary file, and searches for symbol by its octal value '\\015'.", "output": "grep -U -l $'\\015' $(fd)"}
{"input": "List all regular files in entire file system", "output": "find / -type f -exec echo {} \\;"}
{"input": "Recursively finds files like '*.php' or '*.phtml' in folder /project/directory ignoring case differences, filters out files with any cased pattern '/some/directory' in path, and processes found files with xgettext tool.", "output": "find /project/directory -iname '*.php' -or -iname '*.phtml' | grep -iv '/some/directory' | xargs xgettext"}
{"input": "Save $line line in history", "output": "history -s \"$line\""}
{"input": "Count the number of regular files in the current directory that contain a vowel in their names", "output": "find . -maxdepth 1 -type f -iname '*[aeiouy]*' -printf \".\\n\" | wc -l"}
{"input": "Split \"/tmp/files\" into files of at most 1000 lines each", "output": "split /tmp/files"}
{"input": "List characters from standard input showing backslash escapes for non-displayables", "output": "od -cvAnone -w1"}
{"input": "Unset RBENV_VERSION variable in tmux session 'sessname' environment.", "output": "tmux set-environment -t sessname -u RBENV_VERSION"}
{"input": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.", "output": "echo 'ls -hal /root/ > /root/test.out' | sudo bash"}
{"input": "Search for files/directories which have read and write permission for their owner, and group and only read permission for others", "output": "find . -perm -664"}
{"input": "list directories owned by group ID 100 in the file system", "output": "find / -type d -gid  100"}
{"input": "Find \"*.dat\" files recursively in the current directory, print the lines starting on line 5 to the console and save to \"concat.txt\"", "output": "find . -type f \\( -name \"*.dat\" \\) -exec tail -n+5 -q \"$file\" {} + |tee concat.txt"}
{"input": "Remount \"yaffs2\" filesystem \"/dev/block/mtdblk4\" to \"/system\" as read and write only", "output": "mount -o rw,remount -t yaffs2 /dev/block/mtdblk4 /system"}
{"input": "Delete all files/directories with '.old' extension under current directory tree", "output": "find . -name \u201c*.old\u201d -delete"}
{"input": "change the permissions of all the regular/normal files in the current folder", "output": "sudo find . -type f -exec chmod 644 {} +"}
{"input": "Search case insensitively for 'facebook', 'xing', 'linkedin', ''googleplus' in file 'access-log.txt', extract the matched part, sort them and print them by sorting them in asending order of the number of repeated lines", "output": "grep -ioh \"facebook\\|xing\\|linkedin\\|googleplus\" access-log.txt | sort | uniq -c | sort -n"}
{"input": "List all files in entire file system that belong to the user wnj or modified later than the ttt file", "output": "find / \\( -newer ttt -or -user wnj \\) -print"}
{"input": "find all files under the current folder except dir1 dir2 dir3  folder", "output": "find . -type d \\( -path dir1 -o -path dir2 -o -path dir3 \\) -prune -o -print"}
{"input": "find all the files in the current directory which are bigger than 1000MB", "output": "find . -size +1000M"}
{"input": "find all the files that have been modified in exactly 7*24 hours ago", "output": "find . -mtime 7"}
{"input": "Change to directory listed in file '$HOME/.lastdir'", "output": "cd `cat $HOME/.lastdir`"}
{"input": "download contents from \"http://www.example.com\" using a proxy server", "output": "curl http://www.example.com --proxy http://125.119.175.48:8909"}
{"input": "Get the disk space used by all *.txt (case insensitive) files/directories under /path directory", "output": "find /path -iname '*.txt' | perl -lane '$sum += -s $_; END {print $sum}'"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn |xargs rm -rf"}
{"input": "Convert relative symbolic link \"$link\" to absolute symbolic link", "output": "ln -sf \"$(readlink -f \"$link\")\" \"$link\""}
{"input": "Make directories \"$@\" verbosely and replace \"mkdir: created directory \" with \"jar-jar: yea, weesa gotta \" in the output", "output": "mkdir -v \"$@\" | sed 's/mkdir: created directory /jar-jar: yea, weesa gotta /'"}
{"input": "List all files that are between 10000 and 32000 bytes in size", "output": "find . -size +10000c -size -32000c -print"}
{"input": "Find all directories under current directory with 755 permission and change their permission to 644", "output": "find . -perm 755 -exec chmod 644 {} \\;"}
{"input": "Execute \"myfile\" on all .ogv files from the current directory tree", "output": "find ./ -name *.ogv -exec bash -c 'myfile {}' \\;"}
{"input": "search for directories in the folder \"test\" which end with 5 digits using regular expressions", "output": "find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$'"}
{"input": "search all the lines that start with the word malloc in the files ending with .c or .h or .ch", "output": "grep ^malloc `find src/ -name '*.[ch]'`"}
{"input": "List each file or directory in the current directory prefixed with its filesize in bytes and sorted from smallest to largest", "output": "du -s * | sort -n"}
{"input": "Locate files whose status was changed less than 1 day ago", "output": "find . -ctime -1 -print"}
{"input": "Find all files/directories with '.js' extension under current directory tree without descending into './directory'", "output": "find . -path ./directory -prune -o -name '*.js' -print"}
{"input": "display only the file names of all the files which end with \".deb\"", "output": "find . -name '*.deb' -printf \"%f\\n\""}
{"input": "Compress $file file using gzip", "output": "gzip \"$file\""}
{"input": "create directory foo", "output": "mkdir foo"}
{"input": "find for a filename with multiple patterns in the current folder", "output": "find . -name \"photo*.jpg\""}
{"input": "Store info about all mounted file systems, printing all sizes in powers of 1000", "output": "a=$( df -H )"}
{"input": "find all the png files in the current folder which are present in the pattern list search .txt", "output": "find . -name '*.png' | grep -f search.txt"}
{"input": "Finds binaries names in a list of running processes and prints containing folder of each binary.", "output": "ps aux | awk '{print $11}' | grep -x -e \"/.*\" | xargs dirname"}
{"input": "Locate all files in the current directory and below that have \"testfile\" in their names", "output": "find -name \"*testfile*\""}
{"input": "Find files matching the regex 'myregex' in their contents and append the list of these files to outfile.txt", "output": "find . -exec grep -l -e 'myregex' {} \\; >> outfile.txt"}
{"input": "Write differences between files \"a.txt\" and \"b.txt\" side-by-side and not outputting common lines to file \"c.txt\".", "output": "diff -a --suppress-common-lines -y a.txt b.txt > c.txt"}
{"input": "Prints process tree of a current process with id numbers and parent processes.", "output": "pstree -sp $$"}
{"input": "display all files in the current folder that have been modified in the last 24 hours whose name has only 1 letter", "output": "find . -name \\? -mtime -1"}
{"input": "find all files in the current folder that end with \",txt\"", "output": "find . -name \"*,txt\""}
{"input": "find all the files in the entire file system starting with the word top", "output": "find / -name 'top?????*'"}
{"input": "find -name '*.js' -not -path './node_modules/*' -not -path './vendor/*'", "output": "find -name '*.js' -not \\( -path './node_modules/*' -o -path './vendor/*' \\)"}
{"input": "Send 5 ping requests to address 12.34.56.78 and print only the last 2 lines of the summary output.", "output": "ping -c 5 -q 12.34.56.78 | tail -n 2"}
{"input": "change the permissions of mp3 files in the folder /var/ftp/mp3 to 644", "output": "find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \\;"}
{"input": "Prints user and group information for each logged in system user.", "output": "w | awk '{print $1}' | xargs -I '{}' id '{}'"}
{"input": "Creates temporary folder in TMPDIR (if defined) or in '/tmp/', and stores path to created folder in 'dir' variable.", "output": "dir=$(mktemp -d)"}
{"input": "Numerically sort file \"files\" by the second \"-\" separated value of each line ordered from least value to highest value", "output": "tac files | sort -t- -k2,2 -n"}
{"input": "Find all the files which are greater than 50MB but less than 100MB in size", "output": "find / -size +50M -size -100M"}
{"input": "Execute script \"your_command_here\" passing all regular files from directory tree /target/path as arguments to it", "output": "find /target/path -type f -print0 | xargs -0 your_command_here"}
{"input": "find all the html files in the current folder which have been modified excatly 7 days before", "output": "find . -mtime 7 -name \"*.html\" -print"}
{"input": "Print an alert message containing the IP address and information of the user connecting via SSH", "output": "echo -e \"ALERT - Shell Access on:' `date` `who` '\\n\\n' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)`\""}
{"input": "search for files having python in filename", "output": "find / -iname '*python*'"}
{"input": "display all the files ending with \".foo\" including those that are in the directory \".snapshot\", this is the wrong way of using prune.", "output": "find . \\( -name .snapshot -prune -o -name '*.foo' \\) -print"}
{"input": "list files under the current directory that match the filename '...', suppressing all error messages", "output": "find . -name '...' 2>/dev/null"}
{"input": "Find all symbolic links containing 'vim' in their names uder '/usr/bin' directory tree", "output": "find /usr/bin -name '*vim*' -type l"}
{"input": "replaces the last occurrence of 'a' with 'c' in file", "output": "tac file | awk '/a/ && !seen {sub(/a/, \"c\"); seen=1} 1' | tac"}
{"input": "Create 998 directories one inside another with sequential names folder1, folder2, ... folder998 and create an additional folder named 'folder9991000' inside the last 'folder998' directory", "output": "mkdir -p folder$( seq -s \"/folder\" 999 )1000"}
{"input": "Find .rmv files in the current directory recursively", "output": "find . -name *.rmv"}
{"input": "Recursively copies all files in the current directory but ones with 'c' in name to the home directory.", "output": "cp -r `ls -A | grep -v \"c\"` $HOME/"}
{"input": "find all the files that are modified in the last 1 day", "output": "find -mtime +0 -mtime -1"}
{"input": "remove all the pdf files in the current folder and do not delete those in the sub folders", "output": "find . -name \"*.pdf\" -maxdepth 1 -print0 | xargs -0 rm"}
{"input": "Start MATLAB without the desktop", "output": "matlab -nodisplay"}
{"input": "Search for all files not newer than file /tmp/t", "output": "find / -not -newer /tmp/t"}
{"input": "Cut all remote paths from HTTP URLs received from standard input (one per line) keeping only the protocol identifier and host name, of the form http://example.com", "output": "sed -n 's;\\(http://[^/]*\\)/.*;\\1;p'"}
{"input": "display the html, javascript and text files in the current folder (print0 is used to preserve the filenames of all the files which have newlines in their names)", "output": "find . -type f \\( -name \"*.htm*\" -o -name \"*.js*\" -o -name \"*.txt\" \\) -print0 | xargs -0 -n1 echo"}
{"input": "Calculate and show md5 sums for every files under current directory tree", "output": "find . -type f -exec md5sum \\{\\} \\;"}
{"input": "Merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2.", "output": "join -t, -o 1.1,1.2,2.3 in1 in2"}
{"input": "search for the word hello in all the text files in the temp folder and delete them", "output": "find /tmp -type f -name \u2018*.txt*\u2019 | sed -e \u2018s/.*/\\\u201d&\\\u201d/\u2019 |xargs -n 1 grep -l hello|sed -e \u2018s/.*/\\\u201d&\\\u201d/\u2019|xargs -n 1 rm -f"}
{"input": "display all the home folder which end with the extension \"sxw\" and which have been accessed in the last 3*24 hours and which belong to the user bruno", "output": "find /home -type f -name \"*.sxw\" -atime -3 -user bruno"}
{"input": "Make directories \"~/foo/bar/baz\", \"~/foo/bar/bif\", and \"~/foo/boo/bang\" as needed", "output": "mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang"}
{"input": "Finds all files in $LOCATION, prints file names, overwrite files with random content $TIMES times, and finally remove them.", "output": "find $LOCATION -print -exec shred $TIMES -u '{}' \\;"}
{"input": "create directory subdirectory", "output": "mkdir subdirectory"}
{"input": "find all instances of a specific file in the current directory and discard all the errors.", "output": "find . -name \"openssl\" 2>/dev/null"}
{"input": "Prefix all files and directories in the current directory with \"Unix_\"", "output": "ls | xargs -I {} mv {} Unix_{}"}
{"input": "find all the files in the current folder which have been modified after a specific timestamp and save the output to a file", "output": "find -newer timestamp-file -type f > list-of-files"}
{"input": "Print the host name", "output": "hostname"}
{"input": "change owner and group of the current directory and all files into it to user and group andrew", "output": "chown -R andrewr:andrewr *"}
{"input": "Find all files/directories under minimum 2 level down the current directory and set their permission to 700", "output": "find . -mindepth 2 | xargs chmod 700"}
{"input": "find all the files that have been modified in the last 2 day", "output": "find -daystart -mitime -1"}
{"input": "Remove \"-\" from the contents of \"/proc/sys/kernel/random/uuid\" and save output to variable \"comment\"", "output": "comment=$(cat /proc/sys/kernel/random/uuid | sed 's/\\-//g')"}
{"input": "Output all lines in 'file' which contain a tab character.", "output": "awk -F\"\\t\" 'NF>1' file"}
{"input": "Merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from standard input, replace missing fields with \"no-match\", and output the second field from standard input and the second and third field from file1.txt", "output": "join -t, -o 1.2,2.2,2.3 -a 1 -e 'no-match' - <(sort file1.txt)"}
{"input": "Saves number of lines of current directory listing in 'n_max' variable.", "output": "n_max=`ls . | wc -l`"}
{"input": "Assign the alias rm1g to a find command that removes any .tar file larger than a gigabyte.", "output": "alias rm1g=\"find / -type f -name *.tar -size +1G -exec rm -i {} \\;\""}
{"input": "Find all files under /path and below writable by `group' and `other'", "output": "find /path -perm -022"}
{"input": "Find all regular files under and below /somepath that have extensions PDF, TIF, TIFF, PNG, JPG, JPEG, BMP, PCX, or DCX, ignoring the case and excluding \"*_ocr.pdf\" files", "output": "find /somepath -type f -iregex \".*\\.(pdf\\|tif\\|tiff\\|png\\|jpg\\|jpeg\\|bmp\\|pcx\\|dcx)\" ! -name \"*_ocr.pdf\" -print0"}
{"input": "Find all directories under media/ directory and change their permission to 700", "output": "find media/ -type d -exec chmod 700 {} \\;"}
{"input": "Print 'echo 'hello, world'", "output": "echo 'hello, world' | cat"}
{"input": "Search the current directory tree for file \"a.txt\"", "output": "find . -name \"a.txt\" -print"}
{"input": "set alias \"te\" for command 'tail -f /var/log/apache2/error_log | perl -ne '\\''...'\\'''", "output": "alias te='tail -f /var/log/apache2/error_log | perl -ne '\\''...'\\'''"}
{"input": "List all files/directories under $dir_name with size $sizeFile and print them according to the format string  '%M %n %u %g %s %Tb %Td %Tk:%TM %p\\n'", "output": "find $dir_name -size $sizeFile -printf '%M %n %u %g %s %Tb %Td %Tk:%TM %p\\n'"}
{"input": "Print every two lines in \"file\" on a single line separated by a space", "output": "cat file | paste -d' ' - -"}
{"input": "Print the home folder of \"$USER_NAME\"", "output": "finger $USER_NAME | grep Directory | expand | cut -d ' ' -f 2"}
{"input": "Send one ping request to local machine.", "output": "ping -c 1 127.0.0.1 #ping your adress once"}
{"input": "Recursively change the user and group of all files in \"/var/cache/jenkins\" to \"root\"", "output": "chown -R root:root /var/cache/jenkins"}
{"input": "Find all directories under $ROOT_DIR and show the sub-directories of the directories before the directories themselves", "output": "find $ROOT_DIR -type d -depth -print"}
{"input": "Print content of all files found regarding seach options '[whatever]'", "output": "find [whatever] | xargs cat"}
{"input": "Search for \" 840\" in history", "output": "history | grep \" 840\""}
{"input": "Get a sorted list of the longest line with line number for each file under current directory", "output": "find . -iname '*.page' -exec awk '{if(length($0) > L) { LINE=NR;L = length($0)}} END {print L\"|\"FILENAME\":\"LINE}' {} \\; | sort"}
{"input": "add read,write permissions to all the files in the current folder which have the permission 600", "output": "find . -perm 600 -print | xargs chmod 666"}
{"input": "Ping all hosts in file \"ips\" twice", "output": "cat ips | xargs -i% ping -c 2 %"}
{"input": "find all the empty regular/normal files in the current folder and delete them", "output": "find . -type f -empty -delete"}
{"input": "Print numbers 1 through 10 separated by \":\"", "output": "yes | head -n10 | grep -n . | cut -d: -f1 | paste -sd:"}
{"input": "Filters out strings beginning with '#' from all files in current folder, and prints file name before each line.", "output": "cd /var/cron/tabs && grep -vH ^# *"}
{"input": "Move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path", "output": "find /foo/bar -name '*.mp4' -print0 | xargs -0 mv -t /some/path {}"}
{"input": "Create a hard link named \"my-hard-link\" to \"myfile.txt\"", "output": "ln myfile.txt my-hard-link"}
{"input": "Find all directories under current directory and run a command changing into every directory/sub-directory", "output": "find . -type d -depth 1 -print0 | xargs -0 sh -c 'for dir; do pushd \"$dir\" && latexmk -c && popd; done' fnord"}
{"input": "Find all files/directories under /myfiles following symlinks if needed", "output": "find -L /myfiles"}
{"input": "Create a report of the contents of a USB drive mounted at find /path/to/drive", "output": "find /path/to/drive -type f -exec file -b '{}' \\; -printf '%s\\n' | awk -F , 'NR%2 {i=$1} NR%2==0 {a[i]+=$1} END {for (i in a) printf(\"%12u %s\\n\",a[i],i)}' | sort -nr"}
{"input": "Find all *weservice* (case insensitive) files under current directory and restart the services provided by them", "output": "find -iname '*weservice*'|xargs -I {} service {} restart"}
{"input": "Write \"deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen\" to standard output and append to \"/etc/apt/sources.list.d/10gen.list\" as root", "output": "sudo echo \"deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen\" | sudo tee -a /etc/apt/sources.list.d/10gen.list"}
{"input": "Removes all top-level *.pdf files in a current folder.", "output": "rm -f *.pdf"}
{"input": "list the details of all the directories in the current folder", "output": "find . -type d -exec ls -ld {} \\;"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found", "output": "find var/log/ -iname \"anaconda.*\" -exec tar -rvf file.tar {} \\;"}
{"input": "Finds recursively all files having extension .c, .h in '/path/' that contain 'pattern', and prints matched strings with string number and file name.", "output": "grep --include=\\*.{c,h} -rnw '/path/to/somewhere/' -e \"pattern\""}
{"input": "save the list of all the trace files from the folder $DBA/$ORACLE_SID/bdump/ which have been modified in the last 24 hours", "output": "find $DBA/$ORACLE_SID/bdump/*.trc -mtime -1 -print >> /tmp/trace_list.lst"}
{"input": "List all files in the current directory tree invoking xargs only once", "output": "find . -type f -print | xargs ls -l"}
{"input": "Automatically spell check file \"text.txt\" using \"aspell\" command", "output": "yes 1 | script -c 'aspell check text.txt' /dev/null"}
{"input": "Print file type of command \"gcc\"", "output": "file -L `which gcc`"}
{"input": "Remove all directories found in directory tree $LOGDIR that were modified more than 5 days ago", "output": "find $LOGDIR -type d -mtime +5 -exec rm -f {} \\;"}
{"input": "delete all the regular files in the temp folder which have not been modified in the last 24 hours", "output": "find /tmp/ -type f -mtime +1 -exec rm {} \\;"}
{"input": "Find all *.txt files under current directory, change their permission to 666 and copy them to /dst/ directory", "output": "find . -name \\*.txt -exec chmod 666 {} \\; -exec cp {} /dst/ \\;"}
{"input": "Change every reference to the colour red to green in all CSS files", "output": "find . -name \"*.css\" -exec sed -i -r 's/#(FF0000|F00)\\b/#0F0/' {} \\;"}
{"input": "Find broken symlinks in the current directory tree", "output": "find -type l | while read f; do if [ ! -e \"$f\" ]; then ls -l \"$f\"; fi; done"}
{"input": "display list of all the C files ( fuiles with \".c\" extension ) in current folder", "output": "find . -name '*.c' -ls"}
{"input": "Save the current working directory with resolved symbolic links to variable \"real1\"", "output": "real1=$(pwd -P)"}
{"input": "Find all Perl source code files", "output": "find . -name \"*.pl\""}
{"input": "Execute \"tail file | grep pattern\" every 2 seconds", "output": "watch \"tail file | grep pattern\""}
{"input": "Ping the broadcast address \"10.10.0.255\"", "output": "ping -b 10.10.0.255"}
{"input": "display all the files in the kat folder", "output": "find kat -printf \"%f\\n\""}
{"input": "List all *.txt files/directories under current directory", "output": "find . -name *.txt -exec ls {} \\;"}
{"input": "find in the file system for the directories with the name \"httpdocs\"", "output": "find / -type d -name 'httpdocs'"}
{"input": "Prints day of first Tuesday in a month.", "output": "cal | awk 'NR>2{Sfields=7-NF; if (Sfields == 0 ) {printf \"%02d\\n\",$3;exit}}'"}
{"input": "Removes all files but 5 newest ones from current folder.", "output": "ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {}"}
{"input": "Find all files whose owner is `user1'", "output": "find / -user user1"}
{"input": "Exits from process with exit code 255.", "output": "exit -1"}
{"input": "Returns the single most recent file in a directory", "output": "ls -ltq  <path>  | head -n 1"}
{"input": "find all the png files in current folder which are present in the pattern list file \"search.txt\" and copy them to another directory", "output": "find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt) | xargs -i{} cp {} /path/to/dir"}
{"input": "Print short TXT record of domain o-o.myaddr.l.google.com from nameserver ns1.google.com", "output": "dig TXT +short o-o.myaddr.l.google.com @ns1.google.com"}
{"input": "Print the list of files changed within the last minute", "output": "find / -newerct '1 minute ago' -print"}
{"input": "Archive current directory to \"/some/path\" on localhost, using ssh to authentify as user \"me\", only update files that are newer in the source directory.", "output": "rsync -auve \"ssh -p 2222\" . me@localhost:/some/path"}
{"input": "display all text files in current folder", "output": "find . -name \".txt\""}
{"input": "Remove all files whose names end with \"~\" in the /home/peter directory tree", "output": "find /home/peter -name *~ |xargs rm"}
{"input": "Find all *.c files under and below the current directory that contain \"hogehoge\"", "output": "find . -name \\*.c | xargs grep hogehoge"}
{"input": "Find all files under current directory with their size and paths, reverse sort them numerically, then print first 4 entries", "output": "find -type f -printf \"%s %p\\n\" | sort -nr | head -n 4"}
{"input": "Write standard output and error to the console and append to file \"log\"", "output": "./aaa.sh 2>&1 | tee -a log"}
{"input": "Count the number of lines in \"testfile\" wrapped to fit in a width of \"$COLUMNS\" characters", "output": "fold -w \"$COLUMNS\" testfile | wc -l"}
{"input": "find all js files which path does not contain ./node_modules/* nor './vendor/*\"", "output": "find -name '*.js' -not -path './node_modules/*' -not -path './vendor/*'"}
{"input": "Search for the Perl regex \"[\\x80-\\xFF]\" in *.xml files under current directory tree", "output": "find . -name *.xml | xargs grep -P \"[\\x80-\\xFF]\""}
{"input": "Find all the files which were modified more than 50 days but less than 100 days ago", "output": "find / -mtime +50 -mtime -100"}
{"input": "Find all regular files on the system whose names are 'myfile'", "output": "find / -name myfile -type f -print"}
{"input": "Find all files/directories under current directory that match the case insensitive glob pattern {EA,FS}_*", "output": "find . -iname \"{EA,FS}_*\""}
{"input": "Output the base name of first argument to script or function, that is the part following the last slash.", "output": "echo $(basename \"$1\")"}
{"input": "Removes shell alias with name 'python'.", "output": "unalias python"}
{"input": "Move all the .c files from the current directory tree to temp/", "output": "find . -name \"*.c\" -print0 | xargs -0 -n1  -I '{}' mv '{}' temp"}
{"input": "Remove trailing white spaces from all files under dir directory and keep backups of the originals", "output": "find dir -type f -print0 | xargs -0 sed -i .bak -E \"s/[[:space:]]*$//\""}
{"input": "Assigns MAC address 00:80:48:BA:d1:30 to interface eth0.", "output": "ifconfig eth0 hw ether 00:80:48:BA:d1:30"}
{"input": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/\"", "output": "chown amzadm.root -R /usr/lib/python2.6/site-packages/"}
{"input": "Find all files/directories under ${CURR_DIR} directory", "output": "cd ${CURR_DIR} && find ."}
{"input": "display all the regular files in the current folder that are modified after the file \"file.log\"", "output": "find . -type f -newer file.log"}
{"input": "Write \"hey hey, we're the monkees\" to standard output and as input to to \"gzip --stdout\" saved to \"my_log.gz\"", "output": "echo \"hey hey, we're the monkees\" | tee /dev/tty | gzip --stdout > my_log.gz"}
{"input": "Find an inode and remove", "output": "find . -inum 968746 -exec rm -i {} \\;"}
{"input": "Prints last modified file in a current folder.", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \""}
{"input": "Prints a random number between 2000 and 65000", "output": "seq 2000 65000 | sort -R | head -n 1"}
{"input": "Find empty files/directories under test directory", "output": "find test -empty"}
{"input": "Make all the bugzilla subdirectories permission 775", "output": "find bugzilla -type d -exec chmod 775 {} \\;"}
{"input": "Search for all files named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.", "output": "find . -iname foo -type f"}
{"input": "display all empty files(files with sisze 0 bytes) in home folder", "output": "find ~ -empty"}
{"input": "Find all files/directories under current directory with 'FooBar' in their paths and copy them to ~/foo/bar", "output": "find . | grep \"FooBar\" | (mapfile -t; cp \"${MAPFILE[@]}\" ~/foobar)"}
{"input": "Remove all *.tmp files from the /tmp directory tree", "output": "find /tmp -name \"*.tmp\" | xargs rm"}
{"input": "find all instances of a file in current folder and discard the errors", "output": "find . -name \"my.txt\" 2>/dev/null"}
{"input": "List directories in the current working directory and remove the trailing \"/\"", "output": "ls -d */|sed 's|[/]||g'"}
{"input": "find regular files under the current directory, whose name ends in .mbox and using awk run multiple system commands to rename each matched file, to the same name without .mbox at the end", "output": "find . -wholename \\*.mbox | awk '{new=$0; gsub(\"\\.mbox$\", \"\", new) ; system(\"mv \\\"\" $0 \"\\\" \\\"\" new \"\\\"\") }'"}
{"input": "Search for all files and directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.", "output": "find . -iname foo"}
{"input": "find all files in the current folder which have been accessed in the last 30 minutes", "output": "find . -amin -30"}
{"input": "Split \"biglogfile.gz\" into chunks of 500000 line gzipped compressed files", "output": "zcat biglogfile.gz | split -l500000 --filter='gzip > $FILE.gz'"}
{"input": "Find files in the current directory whose names begin with \"file\" and remove them", "output": "find . -name file* -maxdepth 1 -exec rm {} \\;"}
{"input": "Find all files/directories named 'query' under current directory tree", "output": "find -name \"query\""}
{"input": "Search for $SEARCH in all regular files under $DIR directory tree and display the number of bytes of the matched output", "output": "find $DIR -type f -exec grep $SEARCH /dev/null {} \\; | wc --bytes"}
{"input": "Print the files in the current directory as a list of semicolon separated values", "output": "ls -m | tr -d ' ' | tr ',' ';'"}
{"input": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treat absent files as empty and all files as text, and print 3 lines of unified context", "output": "diff -Naur dir1/ dir2"}
{"input": "Display differences between directories repos1 and repos2, ignoring changes due to tab expansion, white spaces and treating absent files as empty.", "output": "diff -ENwbur repos1/ repos2/"}
{"input": "display all the file in the folder /home/david/ which start with the word \"index\" ( case insensitive search)", "output": "find /home/david -iname 'index*'"}
{"input": "Rename file ~/junk/cart1 to ~/junk/A", "output": "find ~/junk  -name 'cart1' -exec mv {} ~/junk/A \\;"}
{"input": "Print the ping time number only of a single request to \"8.8.8.8\"", "output": "ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }' | cut -d'=' -f2"}
{"input": "Count the number of files/directories with '.php' extension under current directory tree and change the permissions to 755", "output": "find . -name \"*.php\" -exec chmod 755 {} \\; -exec /bin/echo {} \\; | wc -l"}
{"input": "find files ending with .jpg", "output": "find . -name '*.jpg' -print ./bar/foo.jpg"}
{"input": "Find all directories named CVS, and deletes them and their contents.", "output": "find . -type d -name CVS -exec rm -r {} \\;"}
{"input": "Truncates file $file, removing last line from it and prints this file on stdout.", "output": "tail -n 1 \"$file\" | tee >(wc -c | xargs -I {} truncate \"$file\" -s -{})"}
{"input": "Finds matched text in defined path recursively, but not follows symlinks.", "output": "grep -r \"string to be searched\"  /path/to/dir"}
{"input": "Run a program in a named screen session", "output": "screen -dmS title executable"}
{"input": "Find all files whose names end with \"~\" in the /home/peter directory tree, following symlinks, and delete them", "output": "find -L /home/peter -name *~ |xargs rm"}
{"input": "Split \"domains.xml\" into files of at most 50000 lines each with a numeric suffix of length 4 and prefix of \"domains_\"", "output": "split -a 4 -d -l 50000 domains.xml domains_"}
{"input": "Gets list of folders containing files with changes.", "output": "git diff --name-only | xargs dirname | uniq"}
{"input": "Find all *.txt files under current directory that contains the regex 'pattern' and list them with their filenames and matches", "output": "find . -type f -name '*.txt' -exec egrep pattern {} /dev/null \\;"}
{"input": "find the type of all the regular/normal files in the current folder", "output": "find . -type f -exec file {} \\;"}
{"input": "Check if directory $some_dir is empty", "output": "find \"$some_dir\" -prune -empty -type d | read && echo empty || echo \"not empty\""}
{"input": "Run 'chmod 0644' on all files in the current directory tree", "output": "find . -type f -exec chmod 0644 {} \\;"}
{"input": "Display the entire contents of 'file', replacing only the very first instance of \"old\" with \"new\".", "output": "grep -E -m 1 -n 'old' file | sed 's/:.*$//' - | sed 's/$/s\\/old\\/new\\//' - | sed -f - file"}
{"input": "Remove all libGLE* files from the current directory tree", "output": "find . -name libGLE* | xargs rm -f"}
{"input": "Recursively change the owner to \"$USER\" and group to \"$GROUP\" of \"/var/log/cassandra\"", "output": "sudo chown -R  $USER:$GROUP /var/log/cassandra"}
{"input": "Find the directories whose pathnames contain \"New Parts\" at level 3 of the current directory tree and create symlinks to them in /cygdrive/c/Views", "output": "find -mindepth 3 -maxdepth 3 -type d | grep \"New Parts\" | tr '\\012' '\\000' | xargs -0 ln -s -t /cygdrive/c/Views"}
{"input": "Find all regular files starting from level 3 of directory tree ~/container and move them one level up", "output": "find ~/container -mindepth 3 -type f -execdir mv \"{}\" ./.. \\;"}
{"input": "Create a variable CDATE in the current shell that contains the date in '%Y-%m-%d %H:%M:%S' format , and a variable EPOCH that contains the seconds since epoch", "output": "source  <(date +\"CDATE='%Y-%m-%d %H:%M:%S' EPOCH='%s'\")"}
{"input": "Generates name for temporary file with 6-letter suffix, and saves path to that new file in 'fn' variable.", "output": "fn=$(mktemp -u -t 'XXXXXX')"}
{"input": "Replace all colons (':') with newlines in $list and search for the first match to the regex \"^$removepat\\$\" where $removepat is a variable and save the result to variable 'removestr'", "output": "removestr=$(echo \"$list\" | tr \":\" \"\\n\" | grep -m 1 \"^$removepat\\$\")"}
{"input": "Remove all files whose names end with \"~\" in the /home/peter directory tree", "output": "find /home/peter -name *~ -print0 |xargs -0 rm"}
{"input": "Go to first directory specified in PATH which contains the command 'oracle'", "output": "cd $(dirname $(which ls))"}
{"input": "List and remove all regular files named \"core\" that are larger than 500KB", "output": "find /prog -type f -size +1000 -print -name core -exec rm {} \\;"}
{"input": "find all the regular files in the current folder which have specific word in their name and force delete all these files and save the log to the file log_del.txt", "output": "find ./ -type f -name '*.r*' -print0 | xargs -0 rm -rf &> log_del.txt"}
{"input": "show all the files in the entire file system which are bigger than 100MB", "output": "find / -size +100M"}
{"input": "find files in /tmp directory that named are core and deletes them, single or double quotes, spaces or newlines are correctly handled", "output": "find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f"}
{"input": "Search .c and .h files in the current directory tree for \"expr\"", "output": "find . -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "Rename uppercase file or folder name $1 to lower case name", "output": "mv $1 `echo $1 | tr '[:upper:]' '[:lower:]'`"}
{"input": "Find all readme.txt files/directories under your home directory", "output": "find ~ -name readme.txt"}
{"input": "Find all files in the home directory tree that are owned by another user and change their ownership to the current user", "output": "find ~ ! -user $USER -exec sudo chown ${USER}:\"{}\" \\;"}
{"input": "Create a symbolic link in the current directory to \"$file\"", "output": "ln -s \"$file\""}
{"input": "Prints the file path composed from the path where symlink target file is located, and name of the symbolic link itself.", "output": "echo \"$(dirname $(readlink -e $F))/$(basename $F)\""}
{"input": "find all directories with the name root in the entire file system.", "output": "find / -type d -name root"}
{"input": "Find all the files which are changed in last 1 hour in entire file system and show a few lines of output from the beginning", "output": "find / -cmin -60 | head"}
{"input": "Remove all empty sub-directories under current directory", "output": "find . -depth  -type d  -empty -exec rmdir {} \\;"}
{"input": "Globally sets the maximum number of lines to held in window history as 10000.", "output": "tmux set -g history-limit 10000"}
{"input": "change the extension of all the \".lst\" files in the current folder to \"a.lst\"", "output": "find -name \u2018*.lst\u2019 -exec rename .lst a.lst {} \\;"}
{"input": "remove all the DS_Store files in the current directory", "output": "find . -name .DS_Store -exec rm {} \\;"}
{"input": "Generates a randomly sorted list of numbers from 1 to 10.", "output": "seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') \\ <(tac)"}
{"input": "Add a date time stamp to every line of output in \"ping host\"", "output": "ping host | perl -nle 'print scalar(localtime), \" \", $_'"}
{"input": "Mount the \"vboxsf\" filesystem \"D:\\share_folder_vm\" on \"\\share_folder\"", "output": "sudo mount -t vboxsf D:\\share_folder_vm \\share_folder"}
{"input": "Search the system for the file 'myfile' ignoring permission denied errors", "output": "find . -name myfile |& grep -v 'Permission denied'"}
{"input": "Recursively finds strings with\"text string to search\u201d in files under 'directory-path', regarding provided options '[option]'.", "output": "grep [option] \"text string to search\u201d directory-path"}
{"input": "Calculate the sin values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and \"y.txt\"", "output": "octave -q --eval 'printf (\"%f\\n\", sin([0:0.1:pi/2]))'|nl|tee y.txt"}
{"input": "Run ./yourProgram without address space randomization, reporting actual machine type.", "output": "setarch `uname -m` -R ./yourProgram"}
{"input": "For each line in 'file', print \"result = \" followed by the line backwards.", "output": "awk '{print \"result =\",$0}' <(rev file)"}
{"input": "display all hidden files in the current folder", "output": "find . -type f -name \".*\""}
{"input": "Find how many files are in a path", "output": "find . -type f -exec basename {} \\; | wc -l"}
{"input": "Finds all files with names like \"*.rm\" in a current folder, launches ffmpeg conversion for each one, and deletes source file after.", "output": "find . -type f -name \"*.rm\" -exec ffmpeg -i {} -sameq {}.mp3 \\; -exec rm {} \\;"}
{"input": "Recursively finds and compresses all files in a current folder with 4 parallel processes.", "output": "find . -type f -print0 | xargs -0 -n1 -P4 bzip2"}
{"input": "Prints groups list that user 'el' belongs to.", "output": "groups el                                     //see that el is part of www-data"}
{"input": "Find all SUID files in entire file system", "output": "find / -perm +4000"}
{"input": "Find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding $EXCLUDE/* paths", "output": "find /home/jul/here -type f -iname \"*.php\" ! -path \"$EXCLUDE/*\" -o -iname \"*.js\" ! -path \"$EXCLUDE/*\""}
{"input": "Find & replace broken symbolic links", "output": "find -L . -type l -delete -exec ln -s new_target {} \\;"}
{"input": "Finds recursively all files in '/path/' that contain 'pattern', and prints matched strings with string number and file name.", "output": "grep -rnw '/path/' -e 'pattern'"}
{"input": "Return the list of files named \"filename\" that are 50 megabytes or larger", "output": "find / -size +50M -iname \"filename\""}
{"input": "Change permissions of \".git/hooks/prepare-commit-msg\" to 777", "output": "sudo chmod 777 .git/hooks/prepare-commit-msg"}
{"input": "search for all the files in the current folder which start with gen and end with bt2 and assign the output list to the variable var.", "output": "var=\"$(find . -name 'gen*.bt2')\""}
{"input": "Finds all files in a '/path' folder and prints long listing for them.", "output": "find /path -type f -exec ls -l \\{\\} \\;"}
{"input": "Search the current directory tree for files whose names end in \"rb\" or \"js\"", "output": "find . -regextype posix-egrep -regex \".*(rb|js)$\""}
{"input": "Remove all .mpg files in the /home/luser directory tree", "output": "find /home/luser -type f -name '*.mpg' -print0 | xargs -0 rm -f"}
{"input": "find all the files in the folder /usr/bin which have been modified in the last 10 days", "output": "find /usr/bin -type f -mtime -10"}
{"input": "Find all files/directories which have been modified from the start of the day in directories/files taken from the glob pattern '/tmp/test/*'", "output": "find /tmp/test/* -daystart -mtime -0"}
{"input": "Delete all regular files under current directory", "output": "find . -type f -print0 | xargs -0 /bin/rm"}
{"input": "Find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/", "output": "ssh someone@somehost \"cd /export/home/someone && find . -name '*' -print| xargs -n1 curl -u someone:password ftp://somehost/tmp/ -vT\""}
{"input": "search for the regular/normal file \"myfile\" in the current folder excluding search in the paths of \"work\" and \"home\" sub directories", "output": "find .  \\( -name work -o -name home \\)  -prune -o -name myfile -type f -print"}
{"input": "Split \"date.csv\" into files with at most 100 lines each", "output": "split -l 100 date.csv"}
{"input": "Search the directories given as arguments to the Bash script for files whose name is not \"ss\"", "output": "find $@ -not -name ss"}
{"input": "search for all the regular/normal files with the name \"access.log\" in the folder /var/www which are bigger than 100MB", "output": "find /var/www -type f -name \u00abaccess.log*\u00bb -size +100M"}
{"input": "Print \"deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main\" and append to file \"/etc/apt/sources.list\"", "output": "echo \"deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main\" | tee -a /etc/apt/sources.list"}
{"input": "find all the html files in the current folder which have been modified in the last 7 days", "output": "find . -mtime -7 -name \"*.html\" -print"}
{"input": "Find regular files under / that contain \"stringtofind\" and clear out their contents", "output": "find / -maxdepth 1 -xdev -type f -exec grep -i \"stringtofind\" -l {} \\; -exec sed -i '/./d' {} \\;"}
{"input": "find all the files in the current folder (handles files which contain newlines or only spaces in their names)", "output": "find . -print0 | xargs -0 -l -i echo \"{}\";"}
{"input": "Search for the string 'git' in all the files under current directory tree excluding paths and names that contain the string 'git'", "output": "find . -not -path \"*git*\" -not -name '*git*' |grep git"}
{"input": "create directory certs", "output": "mkdir certs/"}
{"input": "delete all instances of the file \"bad\" if its size is 0 bytes", "output": "find . -name bad -empty -delete"}
{"input": "Find all Makefile's in the current directory tree and look for line 235 in each of them", "output": "find -type f -name \"Makefile\" -exec awk 'FNR==235 {print FILENAME; print}' {} +"}
{"input": "Get current host's IPv6 address.", "output": "host $(uname -n) | grep \"IPv6 address\" | head -n 1 | awk '{print $5}'"}
{"input": "Count the number of files in the directory trees whose pathnames match pattern '/dev/sd*[a-z]'", "output": "find /dev/sd*[a-z] | wc -l"}
{"input": "find all the files that have been modified exactly 24 hours ago", "output": "find . -type f -mtime 1"}
{"input": "Save absolute path of \"$path\" that may not exist to variable \"abspath\"", "output": "abspath=$(readlink -m $path)"}
{"input": "Archive \"/top/a/b/c/d\" to host \"remote\" using relative path names", "output": "rsync -a --relative /top/a/b/c/d remote:/"}
{"input": "find all the empty directories in the current folder", "output": "find . -type d -empty"}
{"input": "Search the current directory tree for symlinks whose contents match pattern \"*sysdep.c\"", "output": "find . -lname '*sysdep.c'"}
{"input": "Search for the regex '^aaa$' in all *.txt files under current directory and count the number of matches", "output": "( find . -name '*.txt' -exec cat {} ';' ) | sed 's/ /\\n/g' | grep '^aaa$' | wc -l"}
{"input": "Find all files/directories 1 level down the current directory that are enlisted in file 1", "output": "comm -12 <(find . -maxdepth 1 | sed -e 's/^.\\///' ) <(cat 1)"}
{"input": "Find all regular files in the current directory and its subdirectories.", "output": "find . -type f"}
{"input": "Returns 0 exit status despite of 'somecommand' execution result.", "output": "somecommand | true"}
{"input": "Execute \"utility\" for each file in the current directory tree passing the pathname as a command line argument", "output": "find . -exec utility \\;"}
{"input": "split content all files file1..40000 into pieces per 1445 lines named as outputprefixNNN as digital prefix", "output": "cat file1 file2 ... file40000 | split -n r/1445 -d - outputprefix"}
{"input": "Locate all *.mov files in the current directory tree", "output": "find . -name '*.mov'"}
{"input": "Opens gcc info manual and goes to a node pointed by index entry \"funroll-loops\".", "output": "info gcc --index-search=funroll-loops"}
{"input": "Run 'join' on file1 and file2, using a literal tab character as field separator.", "output": "join -t $'\\t' file1 file2"}
{"input": "Archive files in \"/mnt/source-tmp\" to \"/media/destination\"", "output": "rsync -a /mnt/source-tmp /media/destination/"}
{"input": "find all the \"jpg\" file in a folder.", "output": "find /win/C -iname *JPG"}
{"input": "List all regular files under current directory (not white space sage)", "output": "find . -type f -print | xargs -n 1"}
{"input": "Print common characters in variable \"$a\" and \"$b\"", "output": "comm -12 <(echo $a|awk -F\"\\0\" '{for (i=1; i<=NF; i++) print $i}') <(echo $b|awk -F\"\\0\" '{for (i=1; i<=NF; i++) print $i}')|tr -d '\\n'"}
{"input": "Search for files greater than 20MB in the entire file system, sort them according to size in ascending order and display the path and file size", "output": "find / -type f -size +20M -exec ls -lh {} \\; 2> /dev/null | awk '{ print $NF \": \" $5 }' | sort -nk 2,2"}
{"input": "Prints day of first Tuesday in a month.", "output": "cal | awk 'NR==2 {for (i=1;i<=NF;i++) {sub(/ /,\"\",$i);a[$i]=i}} NR>2 {if ($a[\"Tu\"]~/[0-9]/) {printf \"%02d\\n\",$a[\"Tu\"];exit}}' FIELDWIDTHS=\"3 3 3 3 3 3 3 3\""}
{"input": "Make directories to \"/tmp/boostinst\" as needed and print a message for each created directory", "output": "mkdir -pv /tmp/boostinst"}
{"input": "Find all aliencoders.[0-9]+ files under /home/jassi/ directory", "output": "find /home/jassi/ -type f -name \"aliencoders.[0-9]+\""}
{"input": "Print the names and sizes of regular files residing in the \"tmp\" directory tree", "output": "find tmp -type f -printf \"f %s %p\\n\" | awk '{sub(/^[^ ]+ +[^ ]/,sprintf(\"%s %10d\",$1,$2))}1'"}
{"input": "Find all the regular files under directory 'dir1' that are at least N levels deep", "output": "find dir1 -mindepth N -type f"}
{"input": "Find all 777 permission directories and use chmod command to set permissions to 755", "output": "find . -type d -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Find all symbolic links starting from the current directory and list them", "output": "find . -type l -ls"}
{"input": "Print the difference between line 2 and 3 in file \"$f\"", "output": "diff <(fold -w1 <(sed '2q;d' $f)) <(fold -w1 <(sed '3q;d' $f)) | awk '/[<>]/{printf $2}'"}
{"input": "Save the logical current working directory to variable \"basedir\"", "output": "basedir=$(pwd -L)"}
{"input": "Delete all files (files, directories, links, pipes...) named 'core' under current directory", "output": "find . -name \"core\" -exec rm -f {} \\;"}
{"input": "Save the filename and hash of the md5 sum of \"file\" to bash array \"md5\"", "output": "md5=($(md5sum file))"}
{"input": "Prints long listing of top ten most memory using processes in a system.", "output": "ps -e -orss=,args= | sort -nr | head"}
{"input": "Search the /etc/apache-perl directory tree for files newer than /etc/apache-perl/httpd.conf", "output": "find /etc/apache-perl -newer /etc/apache-perl/httpd.conf"}
{"input": "search for the file, filename.txt in the current folder", "output": "find . -name filename.txt"}
{"input": "Search the current directory tree for all image files", "output": "find . -type f -regex \".*\\.\\(jpg\\|jpeg\\|gif\\|png\\|JPG\\|JPEG\\|GIF\\|PNG\\)\""}
{"input": "download content from \"http://page.that.serves.json.com/json/\" and format it as json", "output": "curl -s http://page.that.serves.json.com/json/ | json_xs"}
{"input": "Find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/", "output": "ssh someone@somehost 'cd /export/home/someone && find . -name \"*\" -print| (while read file; do curl -u someone:password ftp://somehost/tmp/ -vT \"$file\"; sleep 10; done)'"}
{"input": "find all the configuration files in the files system and donot display any errors.", "output": "find / -name \"*.conf\" 2>>/dev/null"}
{"input": "Wrap each line in \"file.txt\" to fit in 76 characters breaking only at spaces and indent the output", "output": "fold -w 76 -s file.txt | pr -T --indent=4"}
{"input": "Find all files/directories under current directory tree whose paths match the regex 'filename-regex.\\*\\.html'", "output": "find . -regex filename-regex.\\*\\.html"}
{"input": "find all the regular files in the current folder which have specific word in their name and force delete all these files and save the log to the file log_del.txt", "output": "find ./ -type f -name '*.c*' -print0 | xargs -0 rm -rf &>> log_del.txt"}
{"input": "Print all lines from file 'report.txt' containing any-cased 'error' pattern", "output": "cat report.txt | grep -i error"}
{"input": "change the permissions of all the files ending with \"fits\" in the folder \"/store/01\"", "output": "find /store/01 -name \"*.fits\" -exec chmod -x+r {} \\; \\"}
{"input": "Set file permission to 664 and directory permission to 775 for all files and directories under htdocs", "output": "find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +"}
{"input": "Find all files under ./lib/app and redirect their sorted list to myFile", "output": "find ./lib/app -type f | sort | tee myFile"}
{"input": "Create a symbolic link in the current directory for each hidden file or directory in \"git-stuff/home/\" excluding \".\" and \"..\"", "output": "ln -s git-stuff/home/.[!.]* ."}
{"input": "Remount \"/\" with read and write permission", "output": "mount / -o remount,rw"}
{"input": "find all files in the file system having the name \"filename\"", "output": "find / -iname \"filename\""}
{"input": "Prints calendars of July, 2009 and July, 2010 side-by-side.", "output": "paste <(cal 6 2009) <(cal 6 2010)"}
{"input": "run command \"cd /home/$USERNAME/$PROJECT; svn update\" with a shell as user username2", "output": "sudo -u username2 -H sh -c \"cd /home/$USERNAME/$PROJECT; svn update\""}
{"input": "Find files/directories named 'articles.jpg' under current directory tree and change their permission to 644", "output": "find . -name \"articles.jpg\" -exec chmod 644 {} \\;"}
{"input": "find all files in current folder which are less than 300MB", "output": "find . -size -300M"}
{"input": "Find all the files under /etc directory which are larger than 100k", "output": "find /etc -size +100k"}
{"input": "Prints all child processes of a process with id 20238, separated with comma.", "output": "pstree -p 20238 | sed 's/(/\\n(/g' | grep '(' | sed 's/(\\(.*\\)).*/\\1/' | tr \"\\n\" ,"}
{"input": "Search the current directory tree for directories that can be opened by noone", "output": "find -type d ! -perm -111"}
{"input": "Set a screen session title when invoked", "output": "screen -X title \"new title\""}
{"input": "find all the normal/regular files in current folder and delete all the files which are not present in /some/dir", "output": "find . -type f -print0 | grep -Fxvz -f <(cd \"/some/dir\" && find . -type f) | xargs -0 echo rm"}
{"input": "Find all files/directories case insensitively containing 'xt' in their names under '/etc' directory tree", "output": "find /etc -iregex '.*xt.*'"}
{"input": "Find deb packages in the current directory recursively and list them with `dpkg'", "output": "find . -type f -and -iname \"*.deb\" | xargs -n 1 dpkg -I"}
{"input": "Prints \"$NEWFILE\" to the terminal and file '/etc/timezone' as a root user.", "output": "echo \"$NEWFILE\" | sudo tee /etc/apt/sources.list"}
{"input": "Recursively delete all files/folders named '.svn' in a current folder.", "output": "find . -name .svn -delete"}
{"input": "Find and compress all .pl files in the current directory tree", "output": "find . -name \"*.pl\" | xargs tar -zcf pl.tar.gz"}
{"input": "Find all 15MB files", "output": "find / -size 15M"}
{"input": "Print sub domains of \"mydomain.com\"", "output": "hostname -a -l mydomain.com | sed -n '/;; ANSWER/{n;N;p;q}'"}
{"input": "Find recursively the files named \"file\" in the current directory ignoring the .git subdirectory", "output": "find . -path ./.git  -prune -o -name file  -print"}
{"input": "Go into the first directory whose name contains 1670", "output": "cd $(ls -d */ | grep 1670)"}
{"input": "Find files/directories named blah under current directory", "output": "find ./ -name blah"}
{"input": "Delete all empty files and directories in the \"test\" directory tree", "output": "find test -depth -empty -delete"}
{"input": "Send SIGTERM (signal 15) signal to all process whose username is \"username\" and whose command is \"your_command\".", "output": "ps -o uid,pid,cmd|awk '{if($1==\"username\" && $3==\"your_command\") print $2}'|xargs kill -15"}
{"input": "Recursively finds all *.dbf files from the root folder and prints list of folders with such files.", "output": "find / -name \\*.dbf -print0 | xargs -0 -n1 dirname | sort | uniq"}
{"input": "List all regular files under the current directory and below it", "output": "find . -type f | xargs ls -l"}
{"input": "Make directory and parents as needed for the directory name of file \"$f\"", "output": "mkdir -p -- \"$(dirname -- \"$f\")\""}
{"input": "List all the .c files under the current directory and below in a 3 column format", "output": "find . -name \"*.c\" | xargs -n3"}
{"input": "search for all the files in the folder /home/user1 which end with \".bin\"", "output": "find /home/user1 -name \"*.bin\""}
{"input": "set a crontab to create or update the timestamp of \"washere1\" in the current directory every minute.", "output": "echo \"* * * * * touch $(pwd)/washere1\" | crontab"}
{"input": "Find all links pointing to /path/to/foo.txt", "output": "find . -lname /path/to/foo.txt"}
{"input": "Print the first line of every file matching pattern 'file?B' in the xargstest/ directory tree", "output": "find xargstest/ -name 'file?B' | sort | xargs head -n1"}
{"input": "Display kernel release name.", "output": "uname -r"}
{"input": "display list of all the hidden files in the home folder", "output": "find $HOME -name \".*\" -ls"}
{"input": "search for the directory starting with \"ora10\" in the entire file system", "output": "find / -type d -name \"ora10*\""}
{"input": "Prints long listing of the current directory, sorted from oldest to newest, with appended indicators.", "output": "$ ls -Fltr"}
{"input": "Continuously send \"y\" to all prompts of command \"rm\"", "output": "yes | rm"}
{"input": "create a tar ball of current directory", "output": "tar cvf - `find . -print` > backup.tar"}
{"input": "Find files which are more than 2 days old under  ${userdir}/${i}/incoming directory", "output": "find ${userdir}/${i}/incoming -mtime +2 -type f -ls"}
{"input": "Search the directories matching pattern \"/path/to/some/dir/*[0-9]\" for level 1 subdirectories", "output": "find /path/to/some/dir/*[0-9] -type d -maxdepth 1"}
{"input": "find all files in /usr/bin and run the \"file\" command on them.", "output": "find /usr/bin | xargs file"}
{"input": "display a long listing of the files in current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60 -type f -exec ls -l {} +"}
{"input": "Make directories \"a/b/c\" as needed without causing an error if it exists", "output": "mkdir -p a/b/c"}
{"input": "search for all the directories in the current folder, do not search in sub folders and run the 'pwd' command in all these directories", "output": "find . -maxdepth 1 -type d \\( ! -name . \\) -exec bash -c \"cd '{}' && pwd\" \\;"}
{"input": "Find all files/directories under current directory tree that contain 'pattern' in their names", "output": "find -name \"*pattern*\""}
{"input": "To descend at most one levels of directories below the command line arguments pass the -maxdepth 1 option. This will avoid deleting nested directories:", "output": "find .  -maxdepth 1 -type d -iname \".[^.]*\" -print0 | xargs -I {} -0 rm -rvf \"{}\""}
{"input": "Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.", "output": "find /       \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , \\( -size +100M -fprintf /root/big.txt  '%-10s %p\\n' \\)"}
{"input": "Recursively change ownership of \"/usr/lib/node_modules/\" to the current user", "output": "sudo chown -R $(whoami) /usr/lib/node_modules/"}
{"input": "List all IP addresses assigned to current hostname, pausing for user interaction after each page.", "output": "more /etc/hosts | grep `hostname` | awk '{print $1}'"}
{"input": "Filnd all directory in root directory with 777 permission and change permision755  with chmod commad .", "output": "find / -type d  -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Search the root directory and its subdirectories for files risiding on NTFS or VFAT filesystems", "output": "find / -maxdepth 2 \\( -fstype vfat -or -fstype ntfs \\) 2> /dev/null"}
{"input": "Change all files in the current directory tree to owner \"xx\"", "output": "find . \\( \\! -user xx -exec chown -- xx '{}' + -false \\)"}
{"input": "Search the current directory recursively for directories with the execute permission set for everybody", "output": "find -type d ! -perm -111"}
{"input": "Sources a script ./etc/grc.bashrc that is located in a Homebrew folder.", "output": "source \"`brew --prefix`/etc/grc.bashrc\""}
{"input": "Recursively copy \"original_dir\" to \"copy_dir\" preserving file/dir timestamps, displaying progress, and skipping files which match in size, keeps partially transferred files.", "output": "rsync -Prt --size-only original_dir copy_dir"}
{"input": "set alias \"my_command\" for command \"$oldalias --fail-if-command-contains=$bad_string\"", "output": "alias my_command=\"$oldalias --fail-if-command-contains=$bad_string\""}
{"input": "Print IP addresses of the host name", "output": "hostname --all-ip-address|cut -d ' ' -f1"}
{"input": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.", "output": "find -type f -name \"STATUS.txt\" -exec grep -q \"OPEN\" {} \\; -exec dirname {} \\;"}
{"input": "remove all the files in the current working directory which have a specifc inode number", "output": "find . -inum $inum -exec rm {} \\;"}
{"input": "Write the common third space separated fields in \"file1.sorted\" and \"file2.sorted\" to \"common_values.field\"", "output": "comm -12 <(cut -d \" \" -f 3 file1.sorted | uniq) <(cut -d \" \" -f 3 file2.sorted | uniq) > common_values.field"}
{"input": "Execute \"date\" every second", "output": "watch -n 1 date"}
{"input": "Find all files under current directory and print their md5 sums", "output": "find . -type f -printf '%f ' -exec openssl dgst -md5 {} \\;"}
{"input": "Run `fastqc' on all the fastqc files in the current directory tree", "output": "find . -name \"*.fq\" -print0 | xargs -0 -n 1 fastqc"}
{"input": "take all files in the directory \" /path/to/files\" and provide them as input to the script file truncate.sh", "output": "find /path/to/files -exec truncate.sh {} \\;"}
{"input": "find all the files in the entire file system that have been accessed in the last 60 days ago", "output": "find / -amin -60"}
{"input": "Recursively change ownership of \"~/.npm\" to the current user", "output": "sudo chown -R `whoami` ~/.npm"}
{"input": "Write output of \"ls -hal /root/\" to standard output and to \"/root/test.out\"", "output": "ls -hal /root/ | sudo tee /root/test.out"}
{"input": "Print a listing of the /usr/local/etc/rc.d directory tree", "output": "find /usr/local/etc/rc.d -type f | awk -F/ '{print $NF}'"}
{"input": "From a script, output the name of the script itself, without containing directories - from a shell, output the name of the shell.", "output": "basename -- $0"}
{"input": "List the directory paths of all file.ext files under present working directory", "output": "find . -name \"file.ext\" -execdir pwd ';'"}
{"input": "Print the user name of the current user", "output": "echo `whoami`"}
{"input": "Delete all the files found in the current directory tree whose names begin with \"heapdump\"", "output": "find . -name heapdump*|xargs rm"}
{"input": "Print all lines of \"seq 1 10\" except the last 3", "output": "seq 1 10 | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )'"}
{"input": "Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/", "output": "find /var/spool/postfix/{deferred,active,maildrop,incoming}/ -type f"}
{"input": "Create a symbolic link in the current directory for each file .dbf under the directories matching \"/home/michael/foxpro/mount/A[1FV]/[12][0-9][0-9][0-9]\"", "output": "find /home/michael/foxpro/mount/A[1FV]/[12][0-9][0-9][0-9] -name '*.dbf' -type f -exec ln -s {} \\;"}
{"input": "Replace all newlines from standard input except the last with spaces", "output": "sed 'x;G;1!h;s/\\n/ /g;$!d'"}
{"input": "remove all the regular/normal files in the temp folder and do not delete in the sub folders", "output": "find /tmp -maxdepth 1 -type f -delete"}
{"input": "Make directory \"certs\"", "output": "mkdir certs/"}
{"input": "search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours", "output": "find /etc/ -type f -mtime -1"}
{"input": "Find all files/directories in entire file system that are exactly 50 bytes", "output": "find / -size 50c"}
{"input": "search for files that are readable for everybody, have at least on write bit set but are not executable for anybody", "output": "find . -perm -444 -perm /222 ! -perm /111"}
{"input": "Find all *.wav files under current directory that match 'export' in their names and pipe the output to ./calc_space", "output": "find -type f -name \"*.wav\" | grep export | ./calc_space"}
{"input": "Give the location of every hard link to file1 in the /home directory tree", "output": "find /home -xdev -samefile file1 | xargs ls -l"}
{"input": "Takes path list from '.exportfiles.text' file, cuts off first two path segments and last one.", "output": "cut -d / -f 4- .exportfiles.text | xargs -n 1 dirname"}
{"input": "Find a single file called FindCommandExamples.txt under current directory and remove it", "output": "find . -type f -name \"FindCommandExamples.txt\" -exec rm -f {} \\;"}
{"input": "Find all files/directories under $1 which have at least read permission for their owner and set read permission for group for these files/directories", "output": "find \"$1\" -perm -u+r -print0 | xargs chmod g+r"}
{"input": "display the number of lines in all the \".c\" files in the current folder", "output": "find . -name \"*.c\" -exec wc -l {} \\;"}
{"input": "Unzip \"file.gz\", list the unique first comma separated field prefixed by the number of occurrences, sort from least frequent to most frequent", "output": "zcat file.gz | cut -f1 -d, | sort | uniq -c | sort -n"}
{"input": "Run \"myprogram\", pausing for user input at each page.", "output": "myprogram|more"}
{"input": "find files in current folder ending with \".c\" or \".h\" or \".ch\" and search for a word in these files and enable color highlighting of the matched text", "output": "find . -name \"*.[ch]\" -exec grep --color -aHn \"e\" {} \\;"}
{"input": "Delete all empty directories in the \"test\" directory tree", "output": "find test -depth -type d -empty -delete"}
{"input": "find all the regular/normal files in the current folder which belong to the users with the user id's between 500 and 1000", "output": "find . -uid +500 -uid -1000 -type f"}
{"input": "prints the last occurrence of text between two tags", "output": "tac file | sed -n '0,/<tag>\\(.*\\)<\\/tag>/s//\\1/p'"}
{"input": "Do not immediately exit the shell if a command fails", "output": "set +e"}
{"input": "Find all the files in entire file system  which are modified more than 50 days back and less than 100 days and show a few lines of output from the beginning", "output": "find / -mtime +50 -mtime -100 | head"}
{"input": "find the oldest normal file in the current directory", "output": "find -type f -printf '%T+ %p\\n' | sort | head -n 1"}
{"input": "Compress and display the gzip compression ratio of every file on the system that is greater than 100000 bytes and ends in \".log\"", "output": "sudo find / -xdev -type f -size +100000 -name \"*.log\" -exec gzip -v {} \\;"}
{"input": "Find all files named \"foo_bar\" in the current directory recursively", "output": "find -name foo_bar"}
{"input": "Print permissions of every directory in the current directory tree", "output": "tree -p -d"}
{"input": "search for all the files in current folder which start with \"file2015-0\" and move them to frst 400 fiiles  to another folder", "output": "find . -name \"file2015-0*\" | head -400 | xargs -I filename mv  filename"}
{"input": "Change permissions for all PHP files under the current directory tree to 755 and print the number of files changed", "output": "find . -name \"*.php\" -exec chmod 755 {} + -printf '.' | wc -c"}
{"input": "search for pattern matched files in the current folder and subfolders exclude \"excluded path\"", "output": "find ./ -type f -name \"pattern\" ! -path \"excluded path\" ! -path \"excluded path\""}
{"input": "This will remove all files (type f) modified longer than 14 days ago under /root/Maildir/ recursively from there and deeper (mindepth 1", "output": "find /root/Maildir/ -mindepth 1 -type f -mtime +14 | xargs rm"}
{"input": "Find all *.mp3 files under current directory and run mplayer with these files", "output": "find . -name \"*.mp3\" -print0 | xargs -0 mplayer"}
{"input": "Find all symlinks under /path/to/dir and replace them with the actual files they are pointing at", "output": "find /path/to/dir -type l -exec sh -c 'cp --remove-destination \"$(readlink \"{}\")\" \"{}\"' \\;"}
{"input": "Search the current directory and all of its sub-directories for the file 'file1'.", "output": "find . -name file1 -print"}
{"input": "Unset IFS and read a single character of standard input with no echo and save the response in variable \"SELECT\"", "output": "IFS= read -s -n 1 SELECT"}
{"input": "check if myfile has 0644 permissions", "output": "find myfile -perm 0644 -print"}
{"input": "Display file.txt with lines numbered, and page interactively through the result.", "output": "cat -n file.txt | less"}
{"input": "show all files in the current directory and all subdirectories", "output": "find ."}
{"input": "searches through the root filesystem (\"/\") for the file named Chapter1.", "output": "find / -name Chapter1 -type f -print"}
{"input": "Print current shell using process ID", "output": "ps -p $$"}
{"input": "prints top 10 processes sorted by memory usage", "output": "ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10"}
{"input": "Find all the files under /tmp directory and show a few lines of output from the beginning", "output": "find /tmp  | head"}
{"input": "Search the /home/test directory tree for directories and files called '.ssh'", "output": "find /home/test -name '.ssh'"}
{"input": "Find *.NEF files under current directory and take only the filename without extension and run other commands on this    file name.", "output": "find . -name \"*.NEF\" -exec basename \\{\\} .NEF \\; | xargs> -i sh -c 'dcraw -w -c $0.NEF | convert - -resize 25% $0.jpg'"}
{"input": "find all the text files in the temp folder and search for the word hello in all these files and display the matched files", "output": "find /tmp -type f -name \u2018*.txt*\u2019 | sed -e \u2018s/.*/\\\u201d&\\\u201d/\u2019 |xargs -n 1 grep -l hello|sed -e \u2018s/.*/\\\u201d&\\\u201d/\u2019"}
{"input": "Prints only first ten characters of each string of file $file.", "output": "cat $file | cut -c 1-10"}
{"input": "Find all *.rb (regular) files under current directory and count their line numbers", "output": "find . -name \"*.rb\" -type f -exec wc -l \\{\\} \\;"}
{"input": "Recursively removes all files and folders like 'FILE-TO-FIND' from current folder.", "output": "find . -name \"FILE-TO-FIND\" -exec rm -rf {} \\;"}
{"input": "Search directory /Users/david/Desktop/ recursively for regular files with extensions .txt, .mpg, .jpg", "output": "find /Users/david/Desktop -type f \\( -name '*.txt' -o -name '*.mpg' -o -name '*.jpg' \\)"}
{"input": "Show the explanation of find's debugging options", "output": "find -D help"}
{"input": "Print every 20 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-20", "output": "fold -b -w 20 | cut --output-delimiter $'\\t' -b 1-3,4-10,11-20"}
{"input": "Find all the files which are modified more than 50 days back and less than 100 days", "output": "find / -mtime +50 \u2013mtime -100"}
{"input": "Report file systems disk usage for file systems of type <type>.", "output": "df -kt<type>"}
{"input": "Find all files/directories under current directory tree whose paths match the pattern '*ACK*1'  (case insensitive)", "output": "find . -iwholename \"*ACK*1\""}
{"input": "Locate all files in the current directory and below that have \"testfile\" in their names regardless of the case", "output": "find -iname \"*TESTFILE*\""}
{"input": "Find all files/directories in level 2 down the current directory", "output": "find -mindepth 2 -maxdepth 2"}
{"input": "Unzip all files matching \"file_*\" and pipe into \"agrep -dEOE 'grep'\"", "output": "find -name 'file_*' -follow -type f -exec zcat {} \\; | agrep -dEOE 'grep'"}
{"input": "Find all directories under minimum 1 level down the  $GIVEN_DIR directory", "output": "find \"$GIVEN_DIR\" -type d -mindepth 1"}
{"input": "Show the date in default format for tomorrow + 2 days + 10 minutes", "output": "date -d tomorrow+2days-10minutes"}
{"input": "find files in /tmp directory that named are core and deletes them", "output": "find /tmp -name core -type f -print | xargs /bin/rm -f"}
{"input": "Overwirte file '/path/to/your/file' with random content, then overwrite with zeroes, and remove, showing progress while execution.", "output": "shred -v -n 1 -z -u /path/to/your/file"}
{"input": "Search directory tree /srv/${x} for regular files accessed at least 10080 minutes ago, and remove those files", "output": "find /srv/${x} -mindepth 1 -type f -not -amin -10080 -exec rm {} \\;"}
{"input": "List environment variables whose name matches \".*X.*\"", "output": "set | awk -F \"=\" '{print $1}' | grep \".*X.*\""}
{"input": "Store N symbols of input into variable 'buffer'", "output": "read -N $BUFSIZE buffer"}
{"input": "Unzip all *.zip files below the current directory", "output": "find -name '*.zip' | xargs -n 1 unzip"}
{"input": "Find all directories under current directory and change their permission to 500", "output": "find . -type d -exec chmod 500 {} \\;"}
{"input": "search for perl files in the folder /users/tom", "output": "find /users/tom -name \"*.pl\""}
{"input": "Search for 'Attached: Yes' in all regular files under '/proc/scsi' directory tree matching the path '/proc/scsi/usb-storage' and show only the matched filenames", "output": "find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f | xargs grep -l 'Attached: Yes'"}
{"input": "move all files in the current folder another folder and do not move the files in the sub folder", "output": "find . -name \"*\" -maxdepth 1 -exec mv -t /home/foo2/bulk2 {} +"}
{"input": "Set permissions for directories in `foldername' and its subdirectories to 755", "output": "find foldername -type d -exec chmod 755 {} \";\""}
{"input": "List all regular files in and below the home directory that were modified more than 5 years ago", "output": "find ~ -type f -mtime +1825 |xargs -r ls -l"}
{"input": "Prints calendar for a current month.", "output": "cal"}
{"input": "Creates temporary folder in a $temp_dir folder with name pattern defined by $template, and stores path to created folder in 'my_temp' variable.", "output": "$ my_temp_dir=$(mktemp -d --tmpdir=$temp_dir -t $template)"}
{"input": "Search for *pattern* in and below current directory", "output": "find -name \"*pattern*\""}
{"input": "Calculate the md5 sum of all files in \"/your/dir\" including content and filenames", "output": "grep -ar -e . /your/dir | md5sum | cut -c-32"}
{"input": "Output lines 16224 to 16482 of 'file', and stop reading 'file' after line 16482.", "output": "awk 'NR==16224, NR==16482-1; NR==16482 {print; exit}' file"}
{"input": "Find all files under current directory", "output": "find . -type f -print"}
{"input": "Find all directories under current directory", "output": "find . -type d -print"}
{"input": "Find all the files that end with the extension \u201c.java\u201d in the current directoy tree", "output": "find . -name \"*.java\""}
{"input": "Counts the number of lines in each *.cs file in a git repository.", "output": "wc -l $(git ls-files | grep '.*\\.cs')"}
{"input": "display all files in the current directory excluding those that are present in the directories whose name starts with \"efence\" and do not search in the sub directories", "output": "find * -maxdepth 0 -name \"efence*\" -prune -o -print"}
{"input": "Print the time to ping \"8.8.8.8\" followed by a time stamp if the ping is greater than 58", "output": "ping 8.8.8.8 | awk '{split($7,a,\"[=.]\");if (a[2]>58) print a[2], strftime()}'"}
{"input": "change the word \"GHBAG\" to \"stream-agg\" in all the file names in current folder which have the word \"-GHBAG-\" in their name", "output": "find . -name '*-GHBAG-*' -exec rename 's/GHBAG/stream-agg/' {} +"}
{"input": "split uncompressed content of the file biglogfile.gz into pieces per 500000 lines", "output": "zcat biglogfile.gz | split -l500000 --filter='gzip > $FILE.gz'"}
{"input": "Set permissions to 700 for directories under media/", "output": "find media/ -type d -exec chmod 700 {} \\;"}
{"input": "List all paths to files or directories under \"/data/\" that start with \"command-\" and end with \"-setup\", sort the result by the version number specified between \"command-\" and \"-setup\" (least to greatest)", "output": "find /data/ -name 'command-*-setup' | sort -t - -V -k 2,2"}
{"input": "Run commands \"df -k;uname -a\" on server \"192.168.79.134\"", "output": "echo \"df -k;uname -a\" | ssh 192.168.79.134"}
{"input": "Locates bzip2 command in a system.", "output": "which bzip2"}
{"input": "Print a count of case insensitive duplicate filenames in the current directory", "output": "ls -1 | tr '[A-Z]' '[a-z]' | sort | uniq -c | grep -v \" 1 \""}
{"input": "find all the files in the current folder which have been modified in the last one minute", "output": "find . -type f -mmin 0"}
{"input": "Archive the directory structure under current directory into directory-structure.tar", "output": "find . -type d -print0 | tar cf directory-structure.tar --null --files-from - --no-recursion"}
{"input": "Make directories a, b, c, ..., z under path2 as needed.", "output": "mkdir -p path2/{a..z}"}
{"input": "display all the files in the current folder which start with either \"fileA_\" or \"fileB_\"", "output": "find . -name 'fileA_*' -o -name 'fileB_*'"}
{"input": "Search the directory tree given as variable $dir for regular files", "output": "find $dir -type f"}
{"input": "Find all .txt  files list & List the first lines of text files", "output": "find $HOME/. -name *.txt -exec head -n 1 -v {} \\; > report.txt"}
{"input": "Print NS record for domain 'domain.' from 'some.other.ip.address' nameserver", "output": "dig @some.other.ip.address domain. ns"}
{"input": "Remove all but 5 last comma-separated fields from each line in 'data.csv'", "output": "cat data.csv | rev | cut -d, -f-5 | rev"}
{"input": "display all normal/regular files in a folder", "output": "find teste1 -type f"}
{"input": "find all teh script files in a directory", "output": "find /home/john -name \"*.sh\" -type f -print"}
{"input": "Replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree and modify them in-place", "output": "find /myprojects -type f -name '*.cpp' -print0 | xargs -0 -n 1 sed -i 's/previousword/newword/g'"}
{"input": "display all files in current folder excluding text files", "output": "find . ! -name \"*.txt\""}
{"input": "Search the \"test1\" directory recursively for regular files named \"textfile.txt\"", "output": "find test1 -type f -name 'textfile.txt' -print"}
{"input": "Print the physical current working directory", "output": "echo \"`pwd -P`\""}
{"input": "Find all files in /home/user/ that were created or changed 10 minutes ago", "output": "find /home/user/ -cmin 10 -print"}
{"input": "Removes empty folder 'edi' and 'edw'.", "output": "rmdir edi edw"}
{"input": "Report total size of the root filesystem disk usage in powers of 1000.", "output": "df -H --total /"}
{"input": "Remove the passphrase from user's ssh key without prompting.", "output": "echo | ssh-keygen -P ''"}
{"input": "find all the files in the current directory which end with orig", "output": "find . -name '*.orig'  -exec echo {} \\ ;"}
{"input": "create directory es if it is not exist and create direcoty LC_MESSAGES", "output": "mkdir -p es/LC_MESSAGES"}
{"input": "Create six empty files in directory ~/junk", "output": "find ~/junk -exec touch ~/junk/cart{1,2,3,4,5,6} {} \\; 2> /dev/null"}
{"input": "Send at most 3 ping requests to \"8.8.8.8\" with a timeout of 3 seconds on interface \"eth9\"", "output": "ping 8.8.8.8 -I eth9 -c 3 -w 3"}
{"input": "find all the files that were modified yesterday in the current directory.", "output": "find . -daystart -ctime 0 -type f"}
{"input": "Find all files under current directory and set their permission to 775", "output": "find -type f | xargs chmod 775"}
{"input": "Search the entire file hierarchy for files ending with '~' and print all matches except for those with '/media' in their pathnames.", "output": "find / -name \"*~\" | grep -v \"/media\""}
{"input": "Find all directories under maximum 1 level down the current directory and set their permission to 700", "output": "find . -mindepth 1 -type d | xargs chmod 700"}
{"input": "Do a dry run of renaming file extension '.andnav' to '.tile' for all files/directories under current directory tree", "output": "find . -name \"*.andnav\" | rename -vn \"s/\\.andnav$/.tile/\""}
{"input": "Sort \"some_data\" by the first and second \";\" delimited entries, outputing unique lines and stabilizing the sort", "output": "sort -k1,1 -k2,2 -t';' --stable --unique some_data"}
{"input": "find all the files in the entire file system which have been modified in the last 120 hours", "output": "find / -mtime -5 -print"}
{"input": "Fint all *.txt files/directories in entire file system without descending to other file system and without error reporting", "output": "find / -name  \"*.txt\" -xdev 2> /dev/null"}
{"input": "Remove all \"core\" files that were last changed more than 4 days ago from the current directory tree", "output": "find . -name core -ctime +4 -exec /bin/rm -f {} \\;"}
{"input": "Search for 'mystring' in all *.txt files under current directory", "output": "find . -name '*.txt' | xargs egrep mystring"}
{"input": "Remove all .mpg files in the /home/luser directory tree", "output": "find /home/luser -type f -name \u2018*.mpg\u2019 | parallel rm -f"}
{"input": "List any line in \"f1\" or \"f2\" which does not appear in the other and delete all tab characters in the output", "output": "comm -3 <(sort -un f1) <(sort -un f2) | tr -d '\\t'"}
{"input": "Search the .log files in the current directory tree for string \"The SAS System\"", "output": "find `pwd` -name \"*.log\" -exec grep \"The SAS System\" {} \\;"}
{"input": "Find all files under /somefolder matching the pattern expanded by $FILE_PATTERN in thier names", "output": "find /somefolder -type f -name $FILE_PATTERN"}
{"input": "Recursively list all files and directories in \"coreutils-8.9\" with \"DIR: \" prepending directory names", "output": "tree -F coreutils-8.9 | sed -r 's|\u2500\u2500 (.*)/$|\u2500\u2500 DIR: \\1|'"}
{"input": "Find all text files in the home directory", "output": "find ~/ -name '*.txt'"}
{"input": "Change directory to the basename of \"$1\" with \".tar.gz\" removed", "output": "cd $(basename $1 .tar.gz)"}
{"input": "Search the current directory and its sub-directories for any file that has \"bsd\" somewhere in its name.", "output": "find . -name \"*bsd*\" -print"}
{"input": "find all data files in current folder which have not been changed in the last 60 minutes and display their name without extension", "output": "find . -name \"*.dat\" -type f -cmin +60 | grep \"^./[^/]\\+dat\" | sed \"s/^.\\///\""}
{"input": "Print \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main\" and append to file \"/etc/apt/sources.list\"", "output": "echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main\" | tee -a /etc/apt/sources.list"}
{"input": "Find all regular files that were modified more than 60 days ago under '/path-to-directory' directory tree, sort them according to timestamp and print the filenames preceded with the timestamps", "output": "find /path-to-directory -type f -mtime +60 -printf \"%T@ %p\\n\" | sort"}
{"input": "Remount \"/\" without writing in \"/etc/mtab\"", "output": "mount -n -o remount /"}
{"input": "find all the text files that have modified in the last 2 days and not modified today", "output": "find . -name \"*.txt\" -type f -daystart -mtime +0 -mtime -2"}
{"input": "Provide a list of all the files edited today to pr, and pipe pr's output to the printer", "output": "pr -n 'find . -type f -mtime -1 -print'|lpr"}
{"input": "Show mv commands to move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT_LOCATION} to ${OUTPUT_LOCATION}", "output": "find ${INPUT_LOCATION} -name '*.pdf.marker' -exec sh -c 'echo mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${OUTPUT_LOCATION} \\;"}
{"input": "Find all files/directories in directories/files taken from the glob pattern '/folder/path/*' recursively that have not been modified in the last 2 hours and delete them", "output": "find /folder/path/* -mmin +120 -delete"}
{"input": "Find all *.css files under /starting/directory and print filenames and the lines matching the regex '\\.ExampleClass' from those files", "output": "find /starting/directory -type f -name '*.css' | xargs -ti grep '\\.ExampleClass' {}"}
{"input": "Find all files in the current directory tree whose names are \"file_name\", except for those with pathnames matching pattern \"./dirt to be Excluded/*\"", "output": "find ./ -iname file_name ! -path \"./dirt to be Excluded/*\""}
{"input": "Pass a single argument containing a string of numbers from 1 to 100000 to \"/bin/true\"", "output": "/bin/true \"$(seq 1 100000)\""}
{"input": "move files accessed more than one day ago to directory TMP", "output": "find . -atime +1 -type f -exec mv {} TMP \\; # mv files older then 1 day to dir TMP"}
{"input": "Find and print the names of all files found in the current directory and all of its sub-directories.", "output": "find ."}
{"input": "Print info about all mounted file systems, and grand total statistic about available and used space", "output": "df --total"}
{"input": "Find files on the system that are bigger than 20 megabytes and show the sorted list of their filenames", "output": "find / -type f -size +20000k -exec ls -lh {} \\; 2> /dev/null | awk '{ print $NF \": \" $5 }' | sort -nrk 2,2"}
{"input": "Create directory `junk' in the home directory", "output": "find ~ -type d -exec mkdir junk {} \\; 2> /dev/null"}
{"input": "display all files in the current folder which end with extension \"myfile\" followed by two digits", "output": "find . -regex '.*myfile[0-9][0-9]?'"}
{"input": "recursively change owner and group of the directory and all files into it to user \"user\" and group \"www-data\"", "output": "chown -R user:www-data yourprojectfoldername"}
{"input": "Rename all *.jpg files under current directory by appending parent directory name at the beginning of their names", "output": "find . -iname '*.jpg' | while read fn; do name=$(basename \"$fn\") ; dir=$(dirname \"$fn\") ; mv \"$fn\" \"$dir/$(basename \"$dir\")-$name\" ;done ./lib/bukovina/version.jpg ./lib/bukovina/bukovina-version.jpg"}
{"input": "Find all regular files under $dir directory tree that are bigger than $size MB in size and print them along with their sizes in decreasing order of size", "output": "find $dir -type f -size +\"$size\"M -printf '%s %p\\n' | sort -rn"}
{"input": "display all the text files in the current folder which have been modified in the last half minute ( 30 seconds )", "output": "find . -mmin 0.5"}
{"input": "Read one character from standard input into variable \"REPLY\"", "output": "read -n1"}
{"input": "Remove all files under /home/user/Maildir/.SPAM/cur", "output": "find /home/user/Maildir/.SPAM/cur -type f | xargs rm"}
{"input": "Delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions", "output": "find / -maxdepth 1 -xdev -type f -exec grep -li \"stringtofind\" {} + | parallel sed \"'/./d'\" '{}'"}
{"input": "Find all files/directories under current directory tree that are owned by 'root'", "output": "find . -uid 0 -print"}
{"input": "Wrap each line in \"file.txt\" to fit in 80 characters", "output": "fold -w 80 file.txt"}
{"input": "Search the \"your/dir\" directory for empty subdirectories", "output": "find your/dir -mindepth 1 -prune -empty"}
{"input": "Prints long listing of directory $var sorted from oldest to newest, with appended indicators.", "output": "$ ls -Fltr $var"}
{"input": "Search for all files in the current directory recursively whose names contain \"linkin\", ignoring the case", "output": "find . -iname *linkin*"}
{"input": "Archive files (not directories) in \"sorce_dir\" to \"target_dir\"", "output": "rsync -a --filter=\"-! */\" sorce_dir/ target_dir/"}
{"input": "Search the .java files from the /Applications/ directory tree for TODO lines", "output": "find /Applications/ -name \"*.java\" -exec grep -i TODO {} \\;"}
{"input": "Find the password file between sub-directory level 2 and 4.", "output": "find -mindepth 3 -maxdepth 5 -name passw"}
{"input": "replace the word foo to bar in the current folder in all the regular/normal files containing the word \"baz\" in their name (does not update the file)", "output": "find . -type f -name \"*baz*\" -exec sed -i 's/foo/bar/g' {} +"}
{"input": "Find all files under ${searchpath} that match the regex '\"${string1}\".*\"${string2}\".*\"${string3}\"' (${string1} ... won't be expanded) in their contents", "output": "find `echo \"${searchpath}\"` -type f -print0 | xargs -0 grep -l -E '\"${string1}\".*\"${string2}\".*\"${string3}\"'"}
{"input": "Search for \"YOURSTRING\" in all files under current directory", "output": "grep YOURSTRING `find .`"}
{"input": "Search the /root directory recursively for the regular file named \"myfile\" ignoring \"work\" directories", "output": "find /root/ -name 'work' -prune -o -name myfile -type f -print"}
{"input": "Prints full path to files in a current folder.", "output": "ls -1 | awk  -vpath=$PWD/ '{print path$1}'"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found ensuring white space safety", "output": "find var/log -print0 -iname 'anaconda.*' | tar -cvf somefile.tar -T -"}
{"input": "Search the .VER files from the current directory tree for string \"Test_Version='", "output": "find . -name \"*.VER\" -exec grep 'Test_Version=' '{}' ';' -print;"}
{"input": "Counts number of occurences of all ip addresses in 'ip_addresses' file, and prints all addresses with number of occurences in a descending order.", "output": "cat ip_addresses | sort | uniq -c | sort -nr | awk '{print $2 \" \" $1}'"}
{"input": "Prints all NS servers of domain google.com.", "output": "dig google.com ns | awk 'p{print $5}/^;; ANSWER SECTION:$/{p=1}/^$/{p=0}'"}
{"input": "Recursively changes group ownership of every folder in a current directory to the name of that folder.", "output": "find . -type d | sed -e 's/^\\.\\///g' | awk '{print $1, $1}' | xargs chgrp"}
{"input": "Find all file which have more the 2 hard link", "output": "find .  -type f -links +2 -exec ls -lrt {} \\;"}
{"input": "Add \"execute\" to the permissions of all directories in the home directory tree", "output": "find ~ -type d -exec chmod +x {} \\;"}
{"input": "find all the pdf files in current folder and create a tar ball of all these files", "output": "find . -iname \"*.pdf\" -exec tar --append --file=somefile.tar {} \\;"}
{"input": "Search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'", "output": "find /usr/local/man /opt/local/man -name 'my*'"}
{"input": "Lists all subdirectories in a current folder, removing trailing slash.", "output": "ls -d */ | cut -f1 -d'/'"}
{"input": "find all files with the first letter \u201ce\u201d or \u201cf\u201d and last one x in /usr/bin directory:", "output": "find /usr/bin -name [ef]*x"}
{"input": "Recursively bind \"/dev\" to \"/var/snmp3/dev\"", "output": "mount --rbind /dev /var/snmp3/dev"}
{"input": "For each line whose first field is the same in file1 and file2, output the common first field followed by all other fields in file1 and file2.", "output": "join -j1 file2 file1"}
{"input": "Find files in the current directory tree whose content was changed within the last 60 minutes", "output": "find . -mmin -60"}
{"input": "Remove all regular files under '/var/log/remote' directory tree that have not been modified in the last 14 days where day count starts from today", "output": "find /var/log/remote/ -daystart -mtime +14 -type f -exec rm {} \\;"}
{"input": "search for all the symbolic links in a folder and delete them", "output": "find /target/dir -type l ! -exec test -e {} \\; -exec rm {} \\;"}
{"input": "Search the home directory tree for files owned by sam", "output": "find /home -user sam"}
{"input": "Locate all files in the current directory and below that do not have \"testfileasdf\" in their names", "output": "find -not -name \"*testfileasdf*\""}
{"input": "Find all *.plist files/directories under current directory", "output": "find -name \\*.plist"}
{"input": "Remove all regular files under and below directory \"$DIR\" that were last accessed more than 5 days ago", "output": "find \"$DIR\" -type f -atime +5 -exec rm {} \\;"}
{"input": "Counts total number of all '*.py' files beginning from root folder, and shows 'tqdm' progress bar.", "output": "find / -name '*.py' -exec cat \\{} \\; | tqdm --unit loc --unit_scale True | wc -l"}
{"input": "Run an awk program on every TXT file found in the current directory tree", "output": "find . -name \"*.txt\" -print -exec awk '$9 != \"\" && n < 10 {print; n++}' {} \\;"}
{"input": "Search for 'example' in all regular files under current directory tree", "output": "find . -type f -print | xargs grep \"example\""}
{"input": "Find all 400 permission files under /data directory", "output": "find /data -type f -perm 400"}
{"input": "find all the mp3 files in the file system", "output": "find / -iname \"*.mp3\" -print"}
{"input": "Find files whose names match the pattern given by the 2nd argument $2 of the Bash script and replace string $3 with $4 in them", "output": "find ./ -type f -name \"$2\" -exec sed -i \"s/$3/$4/g\" {} \\;"}
{"input": "display the filenames which do not have begin with dot (.)", "output": "find . -maxdepth 1 -name '[!.]*' -printf 'Name: %16f Size: %6s\\n'"}
{"input": "Set variable \"finalName\" to the second-to-last slash-separated path component of variable \"path\"", "output": "finalName=$(basename -- \"$(dirname -- \"$path\")\")"}
{"input": "Write output and error of \"bash myscript.sh\" to standard output and to \"output.log\"", "output": "bash myscript.sh 2>&1 | tee output.log"}
{"input": "Recursively finds all files and prints all strings with 'text-to-find-here' from that files.", "output": "find / -type f | xargs grep 'text-to-find-here'"}
{"input": "find all files that names are filename and open in nano text editor", "output": "find / -name filename -exec  nano '{}' \\;"}
{"input": "Find all the regular files in $DIR directory tree which have not been modified in the last 450 days and delete them", "output": "find $DIR -type f -mtime +450 -exec rm {} \\;"}
{"input": "Run the node expression \"JSON.parse(process.argv[1]).foo\" on the contents of \"foobar.json\"", "output": "node -pe 'JSON.parse(process.argv[1]).foo' \"$(cat foobar.json)\""}
{"input": "List all files in the /hometest directory tree whose names are \"Trash\", and their sizes", "output": "find /hometest -name Trash -exec ls -s {} \\;"}
{"input": "Gets MAC address of 'eth0' network interface.", "output": "ifconfig eth0 | head -n1 | tr -s ' ' | cut -d' ' -f5"}
{"input": "dispaly a long listig of all the files in the current folder which are bigger than 100KB", "output": "find . -size +100000 -ls"}
{"input": "Counts lines in each of *.php files in a current folder and subfolders ignoring 'tests*' folders and prints total count as well.", "output": "find . -name \"*.php\" -not -path \"./tests*\" | xargs wc -l"}
{"input": "Move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT} to ${OUTPUT}", "output": "find ${INPUT}/ -name \"*.pdf\" -exec test -e '{}'.marker \\; -exec mv '{}' '{}'.marker ${OUTPUT} \\;"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names", "output": "find /home -type f -name \"*.ext\" -print0 | while read -r -d \"$(printf \"\\000\")\" -r path; do awk '{ sub(\"\\r$\", \"\"); print }' $path > $path\"_new\"; done"}
{"input": "Go to previous working directory.", "output": "cd -"}
{"input": "Creates temporary file in a TMPDIR folder with name like tmp.XXXXXXXXXX.", "output": "mktemp"}
{"input": "search for the files in the current folder which begin with the word \"kt\" followed by a digit", "output": "find . -name 'kt[0-9] '"}
{"input": "Make directory \"foo\"", "output": "mkdir foo"}
{"input": "Connect to host \"hostname\" as user \"username\", automatically add the host key to the list of known hosts, and execute \"pwd; ls\" non-interactively", "output": "ssh -o StrictHostKeyChecking=no -l username hostname \"pwd; ls\""}
{"input": "change owner of the files into directory \"/mydir\" with \".txt\" extension to user root", "output": "find /mydir -type f -name \"*.txt\" -execdir chown root {} ';'"}
{"input": "Save full path of command \"rm\" to variable \"RM\"", "output": "RM=`which rm`"}
{"input": "find all the files in the current folder and create a backup of it in floppy", "output": "find . -depth -print | cpio -ov > /dev/fd0"}
{"input": "display all files in current folder, with each file name displayed twice on same line", "output": "find . | xargs -I{} printf \"%s%s\\n\" {} {}"}
{"input": "List all empty files in the current directory tree", "output": "find . -empty -exec ls {} \\;"}
{"input": "search for multiple files in the current folder", "output": "find . -name photoA.jpg photoB.jpg photoC.jpg"}
{"input": "Use up to a gigabyte of RAM at a rate of 1MB per second showing the current and total rate", "output": "yes | tr \\\\n x | head -c $((1024*1024*1024)) | pv -L $((1024*1024)) | grep n"}
{"input": "Lists all files in a current folder, separating names with comma.", "output": "ls -1 | tr '\\n' ',' | sed 's/,$/\\n/'"}
{"input": "Print lines in \"file1\" that exist in \"file2\"", "output": "join -t \" \" -j 1 <(sort file1) <(sort file2)"}
{"input": "change the group of all regular/normal files in the current directory", "output": "find . -type f -exec chgrp usergroup {} \\;"}
{"input": "Delete 'string_to_find' from all files under current directory", "output": "find . -type f | xargs grep 'string_to_find' -sl | xargs perl -pi -w -e 's/string_to_find//g;'"}
{"input": "Search  in current directory downwards all files whic  have permission 777 .", "output": "find . -perm 777 -print"}
{"input": "Rename file extension '.andnav' (case insensitive) to '.tile' for all files/directories under current directory tree", "output": "find . -name \"*.andnav\" -exec rename -v 's/\\.andnav$/\\.tile/i' {} \\;"}
{"input": "Search the current directory tree for the files with extension \"trc\" and remove them if they are more than three days old", "output": "find . -name \"*.trc\" -ctime +3 -exec rm -f {} \\;"}
{"input": "Saves hostname that matches ${ip_address} in 'host' variable, without trailing dot.", "output": "host=$(dig +short -x \"${ip_address}\" | sed 's/\\.$//g')"}
{"input": "Replace all newlines except the last with a comma in \"test.txt\"", "output": "sed -i ':a;N;$!ba;s/\\n/,/g' test.txt"}
{"input": "Display list of files ending with '.txt' in the current folder to the terminal twice and output it to the text file \"txtlist.txt\"", "output": "ls *.txt | tee /dev/tty txtlist.txt"}
{"input": "sort based on size and display top ten small normal/regular files in the current folder", "output": "find . -type f -exec ls -s {} \\; | sort -n | head -10"}
{"input": "find all the files in the current directory ending with \".i\"", "output": "find . -name \".*\\.i\""}
{"input": "Save \"something\" into variable \"param\" in ksh", "output": "echo something | read param"}
{"input": "change the owner of all the files in folder /u/netinst to netinst", "output": "find /u/netinst -print | xargs chown netinst"}
{"input": "Find all files under $source_dir that match the regex .*\\.\\(avi\\|wmv\\|flv\\|mp4\\) in their paths and print them with null character as the delimiter", "output": "find \"$source_dir\" -type f -regex \".*\\.\\(avi\\|wmv\\|flv\\|mp4\\)\" -print0"}
{"input": "Find all directories under '/nas' directory tree", "output": "find /nas -type d"}
{"input": "Remove trailing whitespaces in .txt files from the current directory tree", "output": "find . -type f -name \"*.txt\" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' \"$i\">/tmp/.$$ && cat /tmp/.$$ > \"$i\";done' arg0 {} +"}
{"input": "find all the files which are of size 0 bytes.", "output": "find . -type f -empty"}
{"input": "Find all files name passwd in the root directory and all its sub-directories.", "output": "find / -name passwd"}
{"input": "Write the standard output and error of \"program.sh\" to console and append to \"log\"", "output": "progam.sh 2>&1 | tee -a log"}
{"input": "Find all files in the /home/ directory tree that are owned by bob", "output": "find /home -user bob"}
{"input": "List .conf files residing in the /etc/nginx/ directory tree", "output": "find /etc/nginx -name '*.conf' -exec echo {} ;"}
{"input": "Use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands", "output": "set -o pipefail"}
{"input": "find all the java script files in a folder and display them in a sorted order based on their type and save the output to a file", "output": "cat `find src/js -type f -name \"*.js\" -print0 | xargs -0 stat -f \"%z  %N\" | sort -n | sed -e \"s|[0-9]*\\ \\ ||\"` > public/js/myCleverScript.js"}
{"input": "Login to \"$HOST\" and create file \"$FILE_PATH\" if it does not exist", "output": "ssh -q $HOST \"[[ ! -f $FILE_PATH ]] && touch $FILE_PATH\""}
{"input": "delete all the files ending with \"~\" in current folder", "output": "find -name '*~' -print0 | xargs -0 rm"}
{"input": "Set variable 'rav' to the contents of 'var' spelled backwards.", "output": "rav=$(echo $var | rev)"}
{"input": "Print the time to ping \"8.8.8.8\" followed by a time stamp if the ping is greater than 50", "output": "ping 8.8.8.8 | awk -F\"[= ]\" '{if($10>50) {cmd=\"date\"; cmd | getline dt; close(cmd) ; print $10, dt}}'"}
{"input": "set alias \"cats\" for command 'konqueror http:'//icanhazcheezburger.com''", "output": "alias cats='konqueror http:'//icanhazcheezburger.com''"}
{"input": "Create a symbolic link named \".profile\" to \"git-stuff/home/profile\" without dereferencing \".profile\"", "output": "ln -sn git-stuff/home/profile .profile"}
{"input": "Print yesterday's date as yyy:mm:dd", "output": "date +%Y:%m:%d -d \"yesterday\""}
{"input": "Extract all gzip-compressed files from tar archives beginning with 'myfiles_split.tgz_*'", "output": "cat myfiles_split.tgz_* | tar xz"}
{"input": "Change permissions to 755 recursively only for directories", "output": "find . -type d -exec chmod 755 {} \\;"}
{"input": "Counts total line number of all *.php file in a current folder and subfolders.", "output": "cat `/gnuwin32/bin/find.exe . -name *.php` | wc -l"}
{"input": "download contents from \"https://raw.github.com/creationix/nvm/master/install.sh\" and execute", "output": "curl https://raw.github.com/creationix/nvm/master/install.sh | sh"}
{"input": "find all regular/normal files in the folder \"pathfolder\" and display the count of files, save all the errors to err.txt file", "output": "find pathfolder -type f  2> err.txt | wc -l"}
{"input": "delete all the files in the current folder which do not belong to any user", "output": "find . -nouser | xargs rm"}
{"input": "find md5sum of 'string to be hashed'", "output": "echo 'string to be hashed' | md5"}
{"input": "Find all .log files in the /var/log directory tree and compress them using bzip2", "output": "find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2"}
{"input": "Count the number of lines in every regular .rb file in the current directory tree", "output": "find . -name \"*.rb\" -type f -print0 | xargs -0 wc -l"}
{"input": "Print the last 10 lines of the file '/var/log/syslog'", "output": "tail /var/log/syslog"}
{"input": "Kill all processes which were executed in background by the current shell.", "output": "jobs -p | xargs kill -9"}
{"input": "Find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string \"debug (\"", "output": "find /srv/www/*/htdocs/system/application/ -name \"*.php\" -exec grep \"debug (\" {} \\; -print"}
{"input": "Print the path names of all regular .rb files prefixing them with string \"Hello, \"", "output": "find . -name \"*.rb\" -type f | xargs -I {} echo Hello, {} !"}
{"input": "Force create a symbolic link named \"mylink\" with target \"/apps/myapps/new/link/target\"", "output": "ln -f -s /apps/myapps/new/link/target mylink"}
{"input": "list all files under the current directory called cookies.txt", "output": "find -name cookies.txt"}
{"input": "Mathematically sum each line in the output of \"...\"", "output": "echo $(( $(... | paste -sd+ -) ))"}
{"input": "Find all files/directories under '/usr/local/games' directory tree that contain the string 'xpilot' in their names", "output": "find /usr/local/games -name \"*xpilot*\""}
{"input": "display the number of lines in all the \".c\" files in the current folder", "output": "find . -name \"*.c\" -print0 | xargs -0 wc -l"}
{"input": "Find all files whose names end with \"~\" in the /home/peter directory tree, following symlinks, and delete them", "output": "find -L /home/peter -name *~ -print0 |xargs -0 -r -n1000 rm"}
{"input": "Change owner to \"root\" and group to \"wheel\" of \"bin\"", "output": "sudo chown root:wheel bin"}
{"input": "Set variable \"b\" to the first word of \"a\" converted to lowercase.", "output": "b=`echo \"$a\" | awk '{ print tolower($1) }'`"}
{"input": "Find all files/directories under current directory", "output": "find -print"}
{"input": "Remove all the files and directories that are in /dir1 but not in /dir2.", "output": "diff -rq /dir1 /dir2 | grep -E \"^Only in /dir1.*\" | sed -n 's/://p' | awk '{print $3\"/\"$4}' xargs -I {} rm -r {}"}
{"input": "Find all empty files under /tmp and below", "output": "find /tmp -type f -empty"}
{"input": "Search the file hierarchy for files larger than 100000 KB without searching any mounted removable media", "output": "find / -path /media -prune -o -size +200000 -print"}
{"input": "Append \"foo\" and \"bar\" column in file \"file\" with values dependent on the current table contents", "output": "awk 'NR==1 {print $0, \"foo\", \"bar\"; next} {print $0, ($2==\"x\"?\"-\":\"x\"), ($4==\"x\"?\"-\":\"x\")}' file | column -t"}
{"input": "Rename \"file0001.txt\" to \"1.txt\"", "output": "mv file0001.txt 1.txt"}
{"input": "find all the jpg images in folders which are in the path \"/201111/\"  and sort them according to name and convert them into the video output.mp4", "output": "find */201111/*20111130* -name \"*.jpg\" -print0 | sort -t '_' -nk2 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 \"output.mp4\""}
{"input": "display all the files in the home folder excluding directories which have been modified in the last 24 hours", "output": "find /home/ -mtime -1 \\! -type d"}
{"input": "Find all files/directories in directories/files taken from the glob pattern '/tmp/test/*' recursively that have not been modified from the start of the day", "output": "find /tmp/test/* -daystart -mtime +0"}
{"input": "Filters unique lines by matching against the first column of a .csv file", "output": "tac a.csv | sort -u -t, -r -k1,1 |tac"}
{"input": "search for the file \"filename\" in the entire file system", "output": "find / -name filename"}
{"input": "Delete all files in the current directory tree whose names end with ~", "output": "find . -name \"*~\" -exec rm {} \\;"}
{"input": "find all files that do not have execute permission to all", "output": "find . -type d ! -perm -111"}
{"input": "Lists all paths to all subfolders in a current folder.", "output": "ls -mR * | sed -n 's/://p'"}
{"input": "Give all files in the /path/to/base/dir tree read privileges", "output": "find /path/to/base/dir -type f -print0 | xargs -0 chmod 644"}
{"input": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence between the first and second dot.", "output": "echo \"$f\" | grep -Eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f2"}
{"input": "Split \"file.txt\" into files of at most 20 lines each with a prefix \"new\"", "output": "split -l 20 file.txt new"}
{"input": "display all files in the entire file system excluding those that are in the transfer directory", "output": "find / -name /transfer -prune -o -print"}
{"input": "recursively finds all files newer than a date", "output": "find . -type f -newermt \"$(date '+%Y-%m-%d %H:%M:%S' -d @1494500000)\""}
{"input": "Discard the first letter from every line in $line and calculate the md5 sum of the remaining", "output": "echo $line | cut -c2- | md5sum"}
{"input": "Remove all *.log files from the current directory tree that have been gzipped", "output": "find ./ -name '*.log' | xargs -I{} sh -c \"if [ -f {}.gz ]; then rm {}; fi\""}
{"input": "Move all files in \"/path/subfolder\" to \"/path\" without clobbering any destination files", "output": "find /path/subfolder -maxdepth 1 -type f -name '*' -exec mv -n {} /path \\;"}
{"input": "Find all files owned by group `group2'", "output": "find / -group group2"}
{"input": "Find all regular files in /usr/bin modified less than within the last 10 days", "output": "find /usr/bin -type f -mtime -10"}
{"input": "Search the /path directory recursively for TXT files", "output": "find /path -type f -iname \"*.txt\""}
{"input": "Search for a pattern \"can't\" in all the files with the name \"file-containing-can't\" in the current directory tree", "output": "find . -name \"file-containing-can't\" -exec grep \"can't\" '{}' \\; -print"}
{"input": "Create a compressed archive from \"www\" and split the contents into files of at most 1073741824 bytes and use prefix \"www-backup.tar.\"", "output": "tar czf - www|split -b 1073741824 - www-backup.tar."}
{"input": "find files in home directory that accessed more than 100 days ago", "output": "find ~ -atime 100"}
{"input": "Open all files named 'filename' with 'nano' editor in the entire filesystem", "output": "find / -name filename -exec nano '{}' \\;"}
{"input": "convert epoch second timestamp to date", "output": "date -d @1278999698 +'%Y-%m-%d %H:%M:%S'"}
{"input": "Split all files in the directory tree \"/dev/shm/split/\" into files of at most 1000 lines each and use the filename as the prefix", "output": "find /dev/shm/split/ -type f -exec split -l 1000 {} {} \\;"}
{"input": "Replace all matches with the regex expanded by $P_FROM with the text expanded by $P_TO in all regular files under current directory not going into subdirectories and modify the files in-place", "output": "find . -type f -maxdepth 1 -exec sed -i \"s/$P_FROM/$P_TO/g\" {} \\;"}
{"input": "Copy all files in \"/mail\" to \"/home/username\" preserving the directory hierarchy and modification times", "output": "find /mail -type f | cpio -pvdmB /home/username"}
{"input": "copy the file header.shtml to each directory under dir1, dir2, dir3, or dir4", "output": "find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \\;"}
{"input": "Set up a remote port forward from port 10022 on host \"server\" to port 22 on localhost", "output": "ssh -R 10022:localhost:22 device@server"}
{"input": "Create 5 empty .txt files", "output": "echo \"a.txt b.txt c.txt d.txt z.txt\" | xargs touch"}
{"input": "Display the sizes and filepaths of all files/directories sorted in descending order of size", "output": "du -a -h --max-depth=1 | sort -hr"}
{"input": "find not case sensitive all directories that names are 'apt' and display details", "output": "find  / -type d -iname \"apt\" -ls"}
{"input": "Remount \"/dev/shm\" with a maximum size of \"40G\"", "output": "mount -o remount,size=40G /dev/shm"}
{"input": "Set the timestamp of B to the same one as A", "output": "touch -r A B"}
{"input": "Find files that end in \".gz\" and execute \"awk -F, '$1 ~ /F$/'\" on their unzipped contents", "output": "find . -maxdepth 1 -name \\*.gz -print0 | xargs -0 zcat | awk -F, '$1 ~ /F$/'"}
{"input": "display the count of regular/normal files in the current folder do not search in sub directories", "output": "find . -maxdepth 1 -type f |wc -l"}
{"input": "display all the files in the current directory and do not search in sub directories", "output": "find . -maxdepth 1 -print0"}
{"input": "Print a list of all the files in entire file system whose inode has been modified no later than one minute ago", "output": "find / -newerct '1 minute ago' -print"}
{"input": "change the permission of all the files in the current directory to 664 and change the permission of all the directories  in the current folder to 775.", "output": "find . \\( -type f -exec sudo chmod 664 \"{}\" \\; \\) , \\( -type d -exec sudo chmod 775 \"{}\" \\; \\)"}
{"input": "Check if \"$FILE_PATH\" exists on \"$HOST\"", "output": "ssh -q $HOST [[ -f $FILE_PATH ]] && echo \"File exists\" || echo \"File does not exist\";"}
{"input": "Find all Executable files in the file system", "output": "find / -perm /a=x"}
{"input": "remove all text files from the current folder", "output": "find -name \"*.txt\" | xargs rm"}
{"input": "Find all files in the current directory tree whose names are \".DS_STORE\"", "output": "find . -name \".DS_STORE\""}
{"input": "Remove all directories called \"test\" from the current directory tree", "output": "find -path \"*/test/*\" -delete"}
{"input": "list all the files which have size 0 bytes in some directories", "output": "find `gen_root_dirs.sh` -type f -size 0 -ls"}
{"input": "find all text files in the folder \"FFF\" and find the md5sum for them and save the output to a file", "output": "find FFF -name \"*.txt\" -exec md5sum '{}' \\; > $TMP_ORI"}
{"input": "Make directory and parents as needed for each unique mime type in the current directory", "output": "mkdir -p `file -b --mime-type *|uniq`"}
{"input": "display all the files  in the current folder excluding the current folder and do not search in the sub directories", "output": "find . -maxdepth 1 -type d \\( ! -name . \\)"}
{"input": "Set permissions for files in `foldername' to 777", "output": "find foldername -exec chmod a+rwx {} \";\""}
{"input": "List all files in the /myfiles directory tree", "output": "find /myfiles -exec ls -l {} ;"}
{"input": "change owner of the files into directory dir_to_start except directory dir_to_exclude to user owner", "output": "find dir_to_start -name dir_to_exclude -prune -o -print0 | xargs -0 chown owner"}
{"input": "Find all *.cpp files in the current directory tree that contain \"sub\" in their names", "output": "find . -name \"*sub*.cpp\""}
{"input": "display the contents of all the files in the current folder which have the name \"dummy\" and discard all the errors while searching", "output": "find / -type f -name dummy 2>/dev/null -exec cat {} \\;"}
{"input": "Find all *.rb files/directories under current directory", "output": "find . -name '*.rb'"}
{"input": "Unsets random one from first five array members.", "output": "unset array[`shuf -i 0-4 -n1`];"}
{"input": "Print content of each file under the current directory followed by that file name", "output": "find . -type f -exec cat {} \\; -print"}
{"input": "run command \"createdb $DBNAME\" as user postgres", "output": "su --login postgres --command \"createdb $DBNAME\""}
{"input": "Print the date, then prompt \"Hit ENTER or wait ten seconds\" with a 10 second timeout, then the date again", "output": "date ; read -t 10 -p \"Hit ENTER or wait ten seconds\" ; echo ; date"}
{"input": "Archive \"src/bar\" on host \"foo\" to local directory \"/data/tmp\"", "output": "rsync -avz foo:src/bar /data/tmp"}
{"input": "Change permissions of \".bash_logout\", \".bashrc\", and \".profile\" to 444", "output": "chmod 444 .bash_logout .bashrc .profile"}
{"input": "Find all directories under current directory and change their permission to 700", "output": "find . -type d -exec chmod 700 {} \\;"}
{"input": "list complete path name to process associated with pid \"$1\"", "output": "find /proc/$1/exe -printf '%l\\n'"}
{"input": "change the extension of all the \".abc\" files in the folder \"/the/path\" to \".edefg\" and do not change in the sub directories", "output": "find /the/path -depth -name \"*.abc\" -exec rename 's/\\.abc$/.edefg/' {} +"}
{"input": "download file  \"https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh\" and execute it", "output": "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash"}
{"input": "Find all *shp* files/directories under current directory", "output": "find . -name '*shp*'"}
{"input": "set alias \":\" for command 'xargs -I{}'", "output": "alias :='xargs -I{}'"}
{"input": "convert all the png images in the current folder to jpg images", "output": "find . -iname '*.png' | while read i; do mogrify -format jpg \"$i\" && rm \"$i\"; echo \"Converted $i to ${i%.*}.jpg\"; done"}
{"input": "Change permissions to u=rw,g=r,o= for all files inside the current directory tree", "output": "find . -type f -exec chmod u=rw,g=r,o= '{}' \\;"}
{"input": "Make regular files from debian/fglrx-amdcccle/usr/lib/fglrx/bin/ executable for all", "output": "find debian/fglrx-amdcccle/usr/lib/fglrx/bin/ -type f | xargs chmod a+x"}
{"input": "List files larger than 9MB residing in the current directory and below", "output": "find . -size +9M"}
{"input": "Copy the current directory tree to '/path/to/destination/dir' preserving permissions, timestamp and ownership", "output": "find . | cpio -pdumv /path/to/destination/dir"}
{"input": "SSH using parameters in $@ in master mode in the background without executing any commands and set the ControlPath to \"$MASTERSOCK\"", "output": "ssh -o ControlPath=\"$MASTERSOCK\" -MNf \"$@\""}
{"input": "Compute difference between two dates", "output": "date -ujf%s $(($(date -jf%T \"10:36:10\" +%s) - $(date -jf%T \"10:33:56\" +%s))) +%T"}
{"input": "Execute \"wget -qO-  http://fake.link/file.txt | tail\" every 5 seconds", "output": "watch -n 5 \"wget -qO-  http://fake.link/file.txt | tail\""}
{"input": "display all regular/normal files in the entire file system with the name dummy and discard all the errors", "output": "find / -type f -name dummy 2>/dev/null"}
{"input": "Send SIGTERM (signal 15) to all processes using TCP port 6000 on the system.", "output": "kill -15 $( lsof -i:6000 -t )"}
{"input": "Read a single character from standard input with delimeter '' and no echo", "output": "read -d'' -s -n1"}
{"input": "Print all group names known to the system.", "output": "getent group | cut -d: -f1"}
{"input": "Search the current directory tree for files whose names contain \"TextForRename\"", "output": "find ./ -name \"*TextForRename*\""}
{"input": "Mark variables and function which are modified or created for export to the environment of subsequent commands", "output": "set -a"}
{"input": "Get the sizes (and total size) of all files under dir2 directory", "output": "find dir2 ! -type d |xargs wc -c"}
{"input": "Find all the regular files with '.tgz' and '.gz' extensions and delete the oldest file under '/home/backups' directory tree", "output": "find /home/backups -type f \\( -name \\*.tgz -o -name \\*.gz \\) -print0 | xargs -0 ls -t | tail -1 | xargs rm"}
{"input": "Find all files/directories under current directory that match the case insensitive regex .*/\\(EA\\|FS\\)_.*", "output": "find . -iregex '.*/\\(EA\\|FS\\)_.*'"}
{"input": "Delete files in $DIR_TO_CLEAN older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -mtime +$DAYS_TO_SAVE -exec rm {} \\;"}
{"input": "Show the subdirectories of the current directory", "output": "find . -maxdepth 1 -type d -print | parallel echo Directory: {}"}
{"input": "display the files along with the size of all the files in the current which are bigger than 100MB", "output": "find . -size +100M -exec ls -s {} \\;"}
{"input": "Report total file systems disk usage estimated in terabytes", "output": "df --total -BT | tail -n 1"}
{"input": "Append \"& Bytes\" to the end of every line in \"$TEMPFILE\" and format the result as a table", "output": "sed 's/.*/& Bytes/' \"$TEMPFILE\" | column -t"}
{"input": "Remove duplicates in variable \"variable\" and preserve the order", "output": "variable=$(echo \"$variable\" | tr ' ' '\\n' | nl | sort -u -k2 | sort -n | cut -f2-)"}
{"input": "run a command \"dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbName qualidade -sysPassword password -systemPassword password -scriptDest /u01/app/oracle/oradata/qualidade -characterSet WE8ISO8859P1\" with bash shell as user oracle", "output": "su -c \"dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbName qualidade -sysPassword password -systemPassword password -scriptDest /u01/app/oracle/oradata/qualidade -characterSet WE8ISO8859P1\" -s /bin/sh oracle"}
{"input": "Prints process tree of a cron process with command arguments and process id number.", "output": "pstree -ap `pidof cron`"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \""}
{"input": "Find all files/directories under current directory with null character as the delimiter", "output": "find . -print0"}
{"input": "Number each line in \"/etc/passwd\" as right-justified zero padded to a width of 9", "output": "nl -nrz -w9  /etc/passwd"}
{"input": "set alias \"webshare\" for command 'python -m SimpleHTTPServer'", "output": "alias webshare='python -m SimpleHTTPServer'"}
{"input": "Installs 'php-mbstring' package, enabling 'remi' repository.", "output": "yum --enablerepo=remi install php-mbstring"}
{"input": "Find grub.conf files in entire file system discarding errors in csh or tcsh shell", "output": "find / -name grub.conf >& /dev/null"}
{"input": "find  files which full path name is /tmpfoo/bar under foo directory and print", "output": "find foo -path /tmp/foo/bar -print"}
{"input": "Pass numbers 1 to 100000 as arguments to \"/bin/true\"", "output": "/bin/true $(seq 1 100000)"}
{"input": "display the count of number html files in the current folder", "output": "find . -name \"*.html\" -print | xargs -l -i wc {}"}
{"input": "Extract 8 bytes as an unsigned integer that is \"$o\" offset into \"$pkg\"", "output": "set `od -j $o -N 8 -t u1 $pkg`"}
{"input": "Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding \"*\"  before it's passed to find.", "output": "find . -name \\*.pdf -print"}
{"input": "find all c, cpp files in current folder", "output": "find -name \"*.cpp\" -o -name \"*.c\""}
{"input": "Remove trailing white spaces from all files under dir directory ensuring white space safety in the filename", "output": "find dir -type f -print0 | xargs -r0 sed -i 's/ *$//'"}
{"input": "split file \"${fspec} into pieces named as \"xyzzyNNN\" with numeric prefix from 1 to 6", "output": "split --number=l/6 ${fspec} xyzzy."}
{"input": "Set permissions of all directories under \"/path/to/base/dir\" to 755", "output": "chmod 755 $(find /path/to/base/dir -type d)"}
{"input": "Redirects output of 'time' built-in function and prints only real-time statistic.", "output": "{ time ls -l >/dev/null; } |& grep real"}
{"input": "Find and show all files on the system that are larger than 900 MB", "output": "find / -size +900M"}
{"input": "Find all files whose names end with \"~\" in the /home/peter directory tree, following symlinks, and delete them", "output": "find -L /home/peter -name *~ -exec rm '{}' +"}
{"input": "Replace all spaces with underscores in directory names under current directory.", "output": "find /tmp/ -depth -name \"* *\" -execdir rename 's/ /_/g' \"{}\" \\;"}
{"input": "Find all symbolic links under the current folder and below", "output": "find \u2013L \u2013xtype l"}
{"input": "List the files from the current directory tree that contain lines matching regular expression  '^Subject:.*unique subject'", "output": "find . -type f -print | xargs grep -il '^Subject:.*unique subject'"}
{"input": "Print the IP addresses for the current host name", "output": "hostname -i"}
{"input": "Output \"testFile.txt.1\" without the \".1\" suffix.", "output": "basename testFile.txt.1 .1"}
{"input": "Change permission to 755 for all directories under $d directory tree", "output": "find \"$d/\" -type d -print0 | xargs -0 chmod 755"}
{"input": "Print the names of all files in /some/directory and its subdirectories recursively whose MIME type is video", "output": "find /some/directory -type f -exec file -N -i -- {} + | sed -n 's!: video/[^:]*$!!p'"}
{"input": "find all the symbolic links in the current folder that are broken", "output": "find . -xtype l"}
{"input": "list regular file which file name end with '*.c' or '*.sh' in current directory", "output": "find . -type f \\( -name \"*.c\" -o -name \"*.sh\" \\)"}
{"input": "find all the files in the entire file system that have been modified exactly  50 days ago", "output": "find / -mtime 50"}
{"input": "Listen on port 1234 on root@123.123.123.123 and forward it to port 22 on localhost", "output": "ssh -fNR 1234:localhost:22 root@123.123.123.123"}
{"input": "Silently read exactly 1 character ignoring any delimiters  into variable \"SELECT\"", "output": "read -s -N 1 SELECT"}
{"input": "Creates detached tmux session named 'cf'.", "output": "tmux new-session -ds cf"}
{"input": "find all files in the current folder that have a single letter in their name and have not been modified today", "output": "find . -name \\? -mtime +0"}
{"input": "search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end", "output": "find /data/images -type f -newer /tmp/start -not -newer /tmp/end"}
{"input": "Search the system for directories named \"needle\"", "output": "find / -type d -name \"needle\""}
{"input": "Remount \"/media/Working/\" with a umask of 000", "output": "mount /media/Working/ -oremount,umask=000"}
{"input": "Find all 1US* files/directories under current directory", "output": "find . -name '1US*'"}
{"input": "List files in the current directory", "output": "find . \\( -path './*' -prune \\)"}
{"input": "Print the sizes and names of all TXT files from the current directory tree", "output": "find . -iname \"*.txt\" -exec du -b {} +"}
{"input": "Read a single character from standard input into variable \"REPLY\" ignoring backslash escapes and using the prompt \"${1:-Continue?} [y/n]: \"", "output": "read -r -n 1 -p \"${1:-Continue?} [y/n]: \" REPLY"}
{"input": "List all files and directories residing in the current directory and below", "output": "find -print0 | xargs -0 ls"}
{"input": "Write \"Hello, world\" to standard output and to \"/tmp/outfile\"", "output": "echo \"Hello, world\" | tee /tmp/outfile"}
{"input": "search for a pattern in all the python files in the current folder. and save the output to output.txt file", "output": "find . -name '*.py' -exec grep 'something' {} \\; > output.txt"}
{"input": "Find all files with '.conf' extension under '/etc' directory going into at most 2 level deep and show the last 10 of them", "output": "find /etc -maxdepth 2 -name \"*.conf\" | tail"}
{"input": "Search for 'example' in all regular files under current directory tree and also print the filenames", "output": "find . -type f -exec grep \"example\" '{}' \\; -print"}
{"input": "Save the first 3 lines output by 'yes' to 'file', and log the rest through 'more' which simply waits for user interaction at each page.", "output": "yes | awk 'FNR<4 {print >>\"file\"; close(\"file\")}  1' | more"}
{"input": "list in long format all files from / whose filename ends in \"jbd\", not descending into directories that are not readable while searching, and not descending into directories on other filesystems", "output": "find / -mount \\! -readable -prune  -o  -path /dev -prune  -o  -name '*.jbd' -ls"}
{"input": "Find all files called \"INPUT.txt\" in the current directory tree and remove lines starting with # in them, saving backup copies as INPUT.txt.bak", "output": "find . -type f -name INPUT.txt -print0 | xargs -0 -I file  sed -i.bak '/^#/d' file"}
{"input": "Search /usr, /home, /tmp for *.jar files", "output": "find /usr /home  /tmp -name \"*.jar\""}
{"input": "Collapse double slashes in variable \"dir\" into a single one.", "output": "dir=\"`echo $dir | sed s,//,/,g`\""}
{"input": "find all files in the current folder which start with pro", "output": "find . -name pro\\*"}
{"input": "Print the files in the current directory as a list of semicolon separated values", "output": "ls -1b | tr '\\n' ';'"}
{"input": "Archive \"myfile\" to \"/foo/bar/\" and create directory \"/foo/bar/\" if \"/foo/\" exists", "output": "rsync -a myfile /foo/bar/"}
{"input": "Read a line from standard input into variable \"prompt\" with the prompt \"Are you sure you want to continue? <y/N> \"", "output": "read -p \"Are you sure you want to continue? <y/N> \" prompt"}
{"input": "Show all running processes with name matching \"postgres\"", "output": "ps aux | grep postgres"}
{"input": "Search for 'whatIWantToFind' in all files under current directory", "output": "find . -exec grep whatIWantToFind {} \\;"}
{"input": "Find all regular files with 400 permission under '/data' directory tree", "output": "find /data -type f -perm 400 -print"}
{"input": "find all executable files in /home directory.", "output": "find  /home -type f -perm /a=x"}
{"input": "Read a line from standard input into variable \"message\" with prompt \"Please Enter a Message: \" followed by a newline", "output": "read -p \"`echo -e 'Please Enter a Message: \\n\\b'`\" message"}
{"input": "Set the exit code($?) to '0'.", "output": "true"}
{"input": "Add line numbers to each non-blank line in \"file\" starting with number 1000001", "output": "nl -v1000001 file"}
{"input": "Delete characters in columns 36 through 40 from the output of \"finger\"", "output": "finger |  cut --complement -c36-40"}
{"input": "search for all the files in current folder which start with \"file2015-0\" and move them to another folder", "output": "find . -name \"file2015-0*\" -exec mv {} .. \\;"}
{"input": "List all ~/bin/FilesDvorak/.* (non-recursive) and ~/.PAST_RC_files/.* (recursive) files/directories and take common entries between these two lists", "output": "comm -12 <(find ~/bin/FilesDvorak/.* -maxdepth 0) <(find ~/.PAST_RC_files/.*)"}
{"input": "Find files containing `blah' in their names modified less than 2 days ago, case insensitive", "output": "find . -iname '*blah*' -mtime -2"}
{"input": "Print as many dots as there are files named \"file.ext\" in the /home/kibab directory tree", "output": "find /home/kibab -name file.ext -exec echo . ';'"}
{"input": "Print full path of command \"python\"", "output": "which python"}
{"input": "Find files/directories named 'photo.jpg' in the entire filesystem", "output": "find / -name photo.jpg"}
{"input": "Creates file by template 'aws-sync-XXXXX' in a current folder and stores file name in a 'dir' variable.", "output": "dir=\"$(mktemp aws-sync-XXXXX)\""}
{"input": "create a tar.gz compress file with all the jpg files in the entire file system", "output": "find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz"}
{"input": "Recursively findsfiles with text pattern in current folder, ingnoring case differences, prefixes each matched line with number in file and suppresses error messages about nonexistent or unreadable files.", "output": "grep -insr \"pattern\" *"}
{"input": "Recursively copy all files and directories in \"demo\" excluding \".git\" to \"demo_bkp\"", "output": "find demo -depth -name .git -prune -o -print0 | cpio -0pdv --quiet demo_bkp"}
{"input": "search for all the files in the folder /usr/bin which have not been accessed in the last 100*24 hours", "output": "find /usr/bin -type f -atime +100"}
{"input": "Find for all *.txt files/directories in vfat file systems", "output": "find / -name  \"*.txt\" -fstype vfat 2> /dev/null"}
{"input": "display all the text files in the current folder except readme files", "output": "find . -type f -name \"*.txt\" ! -name README.txt -print"}
{"input": "change the owner and group of all the normal/regular files in the current folder and /home/admin/data/ to admin & admin", "output": "find . /home/admin/data/ -type f -exec chown admin.admin {} \\;"}
{"input": "display a long listing of all the files in the current directory", "output": "find . -name  * -exec ls -a {} \\;"}
{"input": "Find all files under /path/to/file which are greater than 25600KB", "output": "find /path/to/file -type f -size +51200c 2>/dev/null"}
{"input": "Run the Java archive \"program.jar\" in the background and immune to SIGHUP (hangup signals) sent to it.", "output": "nohup java -jar program.jar &"}
{"input": "Remove all .txt files from the /full/path/dir directory tree", "output": "find /full/path/dir -name '*.txt' -exec /bin/rm {} \\;"}
{"input": "Find all files/directories that contain 'packet' (case insensitive) in their names excluding directories that are bigger than 1500 bytes in size", "output": "find . -iregex \".*packet.*\" ! -type d -size +1500c"}
{"input": "Finds IP address of system network interface, that belongs to 192.168.111 subnet.", "output": "ifconfig | grep 192.168.111 | awk '{print $2}'"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree with counts per extension", "output": "find . -type f | sed -e 's/.*\\.//' | sed -e 's/.*\\///' | sort | uniq -c | sort -rn"}
{"input": "Test if files named 'something' were found in YOUR_DIR", "output": "[[ ! -z `find 'YOUR_DIR/' -name 'something'` ]] && echo \"found\" || echo \"not found\""}
{"input": "Print summary of new/missing files, and which files differ between dir1 and dir2.", "output": "diff  --brief --recursive dir1/ dir2/"}
{"input": "Delete all in the current directory tree", "output": "find . -delete"}
{"input": "Count the number of the regular files residing under and below ./randfiles/", "output": "find ./randfiles/ -type f | wc -l"}
{"input": "display all directories in current folder excluding those which do not have read permission to all users and save the output to a file", "output": "find . -type d ! -perm -g+r,u+r,o+r -prune -o -print > files_and_folders"}
{"input": "Calculate md5 checksum of $line and save to variable 'md5'", "output": "md5=$(echo \"$line\"|md5sum)"}
{"input": "Find recursively all regular files in directory tree b that were changed within the last 5 minutes and copy them to directory c", "output": "find b -type f -cmin -5 -exec cp '{}' c \\;"}
{"input": "Set 644 permission to all regular files under current directory", "output": "chmod 644 `find -type f`"}
{"input": "Connect to host \"server_b\" as ssh user \"user\" and copy local file \"/my_folder/my_file.xml\" to server_b's directory \"/my_new_folder/\".", "output": "scp -v /my_folder/my_file.xml user@server_b:/my_new_folder/"}
{"input": "Find files/directories writable by group and others under the /path directory", "output": "find /path -perm -g+w,o+w"}
{"input": "Find \"$i\" files under current directory and search for \"$SrchStr\" in those files", "output": "find . -name \"$i\" -type f -print | xargs egrep -n \"$SrchStr\" >/dev/null"}
{"input": "List empty directories in the current directory tree", "output": "find . -depth -empty -type d"}
{"input": "display the contents of all the files in the current folder which start with test (case insensitive search)", "output": "find . -iname '*test*' -exec cat {} \\;"}
{"input": "Search the current directory, except the subdirectory tree \".svn\", for files whose name is \"foo.cpp\"", "output": "find . -name 'foo.cpp' '!' -path '.svn'"}
{"input": "find all files having certain word in its name in the current folder", "output": "find . -name \"*bsd*\" -print"}
{"input": "find all html or cgi files in current folder", "output": "find ./ -type f -iregex \".*\\.html$\" -or -iregex \".*\\.cgi$\""}
{"input": "Find all .gif files in the /var/www directory tree", "output": "find /var/www -name *.gif"}
{"input": "Search for 'mystring' in all *.txt files under current directory", "output": "find . -name *.txt | xargs egrep mystring"}
{"input": "Find all files under /path and below writable by `group' and `other'", "output": "find /path -perm -g+w,o+w"}
{"input": "display all files in current folder which have not been modified in the last 60 minutes", "output": "find -mmin +60"}
{"input": "delete all the normal/regular files in the current folder", "output": "find . -type f -print -delete"}
{"input": "Find all directories under ~/code excluding hidden directories and their subdirectories and replace all newlines with : in the output then remove the last :", "output": "find ~/code -type d | sed '/\\/\\\\./d' | tr '\\n' ':' | sed 's/:$//'"}
{"input": "Change the ownership to the user daisy for all directories under current directory that are owned by harry", "output": "find . -type d -user harry -exec chown daisy {} \\;"}
{"input": "Print unique lines of \"a\" and \"b\"", "output": "comm -3 a b"}
{"input": "File \"files.txt\" contains a list of files, copy all files listed to host \"remote\", connecting as ssh user \"user\", and copying the files to this user's home directory - this will not work with files/directory names containing spaces.", "output": "cat files.txt | xargs scp user@remote:"}
{"input": "Sort the lines of the file 'inputfile', keep only the uniq lines and change it in-place", "output": "sort inputfile | uniq | sort -o inputfile"}
{"input": "display a long listing of all the directories in the entire file system", "output": "find / -print0 -type d | xargs -0 ls -al"}
{"input": "Returns 0 if user $1 belongs to group $2.", "output": "groups $1 | grep -q \"\\b$2\\b\""}
{"input": "Save the absolute path of \"$path\" to variable \"fullpath\"", "output": "fullpath=`readlink -f \"$path\"`"}
{"input": "Print each \".txt\" file in the current directory", "output": "paste --delimiter=\\\\n --serial *.txt"}
{"input": "show the disk use of all the regular/normal files in the file system which are bigger than 100MB", "output": "find / -type f -size +100M | xargs du -sh"}
{"input": "Delimit standard input with \":\" and display as a table", "output": "column -s: -t"}
{"input": "Find every JavaScript file in the wordpress directory", "output": "find wordpress -maxdepth 1 -name '*js'"}
{"input": "Prints top-ten of most used utilities from history.", "output": "history | awk '{print $2}' | awk 'BEGIN {FS=\"|\"}{print $1}' | sort | uniq -c | sort -nr | head"}
{"input": "Create new crontab set for user 'test' including $job and only jobs from current crontab of 'test' user that don`t contain $command", "output": "cat <(fgrep -i -v \"$command\" <(crontab -u test -l)) <(echo \"$job\") | crontab -u test -"}
{"input": "display all the text and pdf files in the current folder", "output": "find . -regex \".*\\(\\.txt\\|\\.pdf\\)$\""}
{"input": "Execute commands from \"$file\" in the current shell.", "output": "source \"$file\""}
{"input": "find all the files in the folder \"myfiles\" which have not been accessed in the last 30 days", "output": "find /myfiles -atime +30"}
{"input": "Convert directory of files from dos to unix", "output": "find . -type f | while read file; do sed -e 's/^M//g' -i \"$file\"; done"}
{"input": "Print full path of command \"programname\"", "output": "which programname"}
{"input": "Find the first file/directory under $DIR which matches the $TMP_DIR in its path", "output": "/usr/bin/find $DIR -maxdepth 1 -ipath $TMP_DIR -print -quit"}
{"input": "find all the \".wma\" files in the folder \"$current_directory\"", "output": "find \"${current_directory}\" -type f -iname \"*.wma\""}
{"input": "Report available space on the file system containing /tmp in kilobytes.", "output": "df -k /tmp | tail -1 | awk '{print $4}'"}
{"input": "Print which files differ in \"PATH1/\" and \"PATH2/\" recursively excluding any files that match any pattern in \"file1\"", "output": "diff PATH1/ PATH2/ -rq -X file1"}
{"input": "Replace spaces with underscores in the names of all files and directories in the \"/tmp\" directory tree", "output": "find /tmp/ -depth -name \"* *\" -execdir rename \" \" \"_\" \"{}\" \";\""}
{"input": "Find all files in the file system with the SUID bit", "output": "find / -perm -u+s -print"}
{"input": "Find files that are writable by the user, the group, or both under the plsql directory", "output": "find plsql -type f  -perm /ug=rw -exec ls -l {} \\; 2>/dev/null"}
{"input": "find the depth of all the files in current folder and display the depth and file name", "output": "find folder1/ -depth -type f -printf \"%d\\t%p\\n\""}
{"input": "Search the current directory tree for files matching sed regular expression '.*myfile[0-9]\\{1,2\\}'", "output": "find . -regextype sed -regex '.*myfile[0-9]\\{1,2\\}'"}
{"input": "Find all directories named 'mydir' under 'local' and '/tmp' directory tree", "output": "find local /tmp -name mydir -type d -print"}
{"input": "Find all files/directories under current directory tree that are newer than backup.tar.gz by modification time", "output": "find . -newer  backup.tar.gz"}
{"input": "Search the current directory tree for regular files omitting directory `omit-directory'", "output": "find . \\( -name omit-directory -prune -o -type f \\) -print"}
{"input": "Find all *.txt files/directories under current directory and execute process for each of them", "output": "find . -name \\*.txt -print0 | xargs -0 -I{} process {} argument"}
{"input": "search for the files with the name \"temp\" and which have not been accessed in the last 7*24 hours in the /usr folder", "output": "find /usr -name temp -atime +7 -print"}
{"input": "Find all the files in file system which are modified 50 days back", "output": "find / -mtime 50"}
{"input": "Search the current directory tree for .rb files ignoring the \"./vendor\" subdirectory", "output": "find . -name '*.rb' ! -wholename \"./vendor/*\" -print"}
{"input": "Find all files that are exactly 50 bytes", "output": "find / -size 50c"}
{"input": "Monitor 3 specific process IDs: 18884, 18892, and 18919 (GNU specific)", "output": "top -p 18884 -p 18892 -p 18919"}
{"input": "Search for files/directories which are writable by either their owner or their group", "output": "find . -perm /u+w,g+w"}
{"input": "search for all the regular/normal mp3 files in the file system and create a directory int /mt/mp3/ with the basename of the mp3 file", "output": "find / -iname \u201c*.mp3\u2033 -type f -print0 | xargs -0 -I \u2018{}\u2019 mkdir -p /mnt/mp3/`basename {}`"}
{"input": "Recursively finds all \"*.pas\" and \"*.dfm\" files and prints strings with \"searchtext\" ignoring text distinctions, suppressing error messages, highlighting found patterns and preceding each found string with file name and string number.", "output": "find . -type f \\( -name \"*.pas\" -o -name \"*.dfm\" \\) -print0 | xargs --null grep --with-filename --line-number --no-messages --color --ignore-case \"searchtext\""}
{"input": "find all files in the file system which have been accessed in the last 24 hours", "output": "find / -atime 0"}
{"input": "Lists installed packages from  'fedora' repository only.", "output": "yum list installed  --disablerepo=\"*\" --enablerepo=\"fedora*\""}
{"input": "Create a symbolic lnk named \"$1/link\" to \"$dir\"", "output": "ln -s \"$dir\" \"$1/link\""}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory", "output": "find var/log/ -iname anaconda.*"}
{"input": "Find the file whose inode number is 1316256", "output": "find . -inum 1316256"}
{"input": "search for files cart4 or cart5 or cart6 in the folder junk which is in home folder and delete it.", "output": "find ~/junk  -name 'cart[4-6]' -exec rm {}  \\;"}
{"input": "Find files/directories named 'document' in the entire filesystem and in the directory tree '/usr' even if it's in a different partition without traversing to other devices/partitions", "output": "find / /usr -xdev -name document -print"}
{"input": "Delete all files under $INTRANETDESTINATION/monthly directory tree that were modified more than 366 days ago", "output": "find $INTRANETDESTINATION/monthly -mtime +366 -exec rm {} \\;"}
{"input": "Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.", "output": "basedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")"}
{"input": "Write to standard error a trace for each command after it expands the command and before it executes it", "output": "set -x"}
{"input": "Find files that don\u2019t have 644 permissions", "output": "find / -type f ! -perm 644"}
{"input": "display the filename and size of all the files in the file system which are bigger than 20MB", "output": "find / -type f -size +20000k -exec ls -lh {} \\; | awk '{ print $8 \": \" $5 }'"}
{"input": "Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'dirrmtry'", "output": "find /usr/ports/ -name pkg-plist\\* -exec grep dirrmtry '{}' '+' | wc -l"}
{"input": "Prints the size in kb of the first 100 lines of a file", "output": "echo `cat $FILE | head -n 100 | wc -c` / 1024 | bc -l"}
{"input": "List level 2 subdirectories of the current directory", "output": "find . -mindepth 2 -maxdepth 2 -type d -printf '%M %u %g %p\\n'"}
{"input": "Find all files in the current directory tree which do not belong to any user", "output": "find . -nouser"}
{"input": "Find files/directories that does not have write permssion for group and others", "output": "find /path ! -perm /022"}
{"input": "Split \"bigfile\" into files of at most 1000 lines each with prefix \"/lots/of/little/files/here\"", "output": "split bigfile /lots/of/little/files/here"}
{"input": "Count line numbers on files and record each count along with individual file name.", "output": "find /home/my_dir -name '*.txt' | xargs grep -c ^.*"}
{"input": "Recursively set all permissions under \"/whatever/your/directory/is\" to 755", "output": "sudo chmod 755 -R /whatever/your/directory/is"}
{"input": "Enables shell option 'failglob'.", "output": "shopt -s failglob"}
{"input": "Find all directories matching the regex '.texturedata' in their names under '/path/to/look/in/' directory tree", "output": "find /path/to/look/in/ -type d | grep .texturedata"}
{"input": "Find the 5 largest regular files in the Downloads folder of tecmint's home directory.", "output": "find /home/tecmint/Downloads/ -type f -exec du -Sh {} + | sort -rh | head -n 5"}
{"input": "display all the directories in the folder /usr/share", "output": "find /usr/share -type d"}
{"input": "Delete current cron job list, and use those in yourFile.text", "output": "crontab yourFile.text"}
{"input": "List all files in entire file system owned by the user wnj and are newer than the file ttt", "output": "find / -newer ttt -user wnj -print"}
{"input": "Remove all *.sql files in the $backup_path directory tree that were last modified more than 30 days ago", "output": "find $backup_path/* -name *.sql -mtime +30 -exec rm {} \\;"}
{"input": "Recursively copies everything from '/source/path/*' to the '/destination/path/', preserving from overwriting existing files, and printing info message on each operation.", "output": "cp -Rvn /source/path/* /destination/path/"}
{"input": "For each line of colon-separated information in files 'empsal' and 'empname' whose first field matches in both files, output: first field of empname, second field of empname, fourth field of empname, and third field of empsal.", "output": "join -j 1 -t : -o 2.1,2.2,2.4,1.3 <(sort empsal) <(sort empname)"}
{"input": "Create a tar archive with all *.java files under the current directory", "output": "find . -type f -name \"*.java\" | xargs tar cvf myfile.tar"}
{"input": "Takes folder path from string '/path/to/copy/file/to/is/very/deep/there' and created it with all parents.", "output": "mkdir -p `dirname /path/to/copy/file/to/is/very/deep/there` \\"}
{"input": "Count and show the number of lines for each PHP files in the current directory tree", "output": "find . -name '*.php' | xargs wc -l"}
{"input": "recursively change owner of directories $(npm config get prefix)/lib $(npm config get prefix)/node_modules $(npm config get prefix)/bin $(npm config get prefix)/share to the current user", "output": "sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}"}
{"input": "display the contents of all the files in the current folder which have the name \"dummy\" and discard all the errors while searching and save the output to the file tesst.txt", "output": "find / -type f -name dummy 2>/dev/null -exec cat {} \\; >tesst.txt"}
{"input": "List all files in the current directory tree that were last modified on the 3rd of March, 2010 or later", "output": "find -newermt \"mar 03, 2010\" -ls"}
{"input": "Search the files from the current directory tree for \"foo\"", "output": "find . -exec grep foo {} \\;"}
{"input": "Recursively and forcibly removes $TMP folder with all content.", "output": "rm -fR \"${TMP}/\";"}
{"input": "Enables shell option 'histappend'.", "output": "shopt -s histappend"}
{"input": "Left justify number each non-blank line in \"log.txt\" as input to \"sed ...\"", "output": "nl -n ln log.txt | sed ..."}
{"input": "Look for *log files in directories at most three levels down the directory tree", "output": "find / -maxdepth 3  -name \"*log\""}
{"input": "find directory which name is Cookbook under /users/al", "output": "find /users/al -name Cookbook -type d"}
{"input": "delete all the php files in the folder /var/www", "output": "find /var/www/*.php -type f -exec rm {} \\;"}
{"input": "Cut all remote paths from HTTP URLs received from standard input (one per line) keeping only the protocol identifier, host name, and trailing slash, of the form http://example.com/", "output": "sed -n 's;\\(http://[^/]*/\\).*;\\1;p'"}
{"input": "search for the folder .dummy in the entire directory structure of \"test folder\" and remove it.", "output": "find -depth \"Test Folder\" -type d -name .dummy -exec rm -rf \\{\\} \\;"}
{"input": "split listing of the current directory into pieces per 500 lines named \"outputXYZNNN\"", "output": "ls | split -l 500 - outputXYZ."}
{"input": "Locate OGG files under the home directory larger than 100 megabytes", "output": "find $HOME -iname '*.ogg' -size +100M"}
{"input": "find all the php files", "output": "find -name '*.php'"}
{"input": "find all the files in current folder ending with \"ini\" and display all files which contain several patterns", "output": "find . -name *.ini -exec sh -c \"grep -q PROJECT_A {} && grep -q CONFIG_A {} && echo {}\" \\;"}
{"input": "Show directory sizes in KB and sort to give the largest at the end", "output": "find . -type d -exec du -sk {} \\; |  sort -n -k 1"}
{"input": "Remove files under current directory with inode number $inum", "output": "find . -inum $inum -exec rm {} \\;"}
{"input": "Search the current directory recursively for files containing \"needle text\"", "output": "find . -type f | xargs grep -I \"needle text\""}
{"input": "List all functions defined in the shell", "output": "set | grep \" () $\" | cut -d' ' -f1"}
{"input": "Print \"$PATH\" variable as input to awk script \"rem_dup.awk\" and concatenate the result with \":\"", "output": "echo $PATH | awk -F: -f rem_dup.awk | paste -sd:"}
{"input": "copy all java files from current folder to another folder", "output": "find . -name \"*.java\" -print0 | xargs -0 -J % cp % destinationFolder"}
{"input": "Remove trailing tabs in .java files from the current directory tree", "output": "find . -type f -name \"*.java\" -exec perl -p -i -e \"s/[ \\t]$//g\" {} \\;"}
{"input": "extract the content of the file doc.gz and split it into pieces per 1000 lines compressed with gzip", "output": "zcat doc.gz | split -l 1000 --filter='gzip > $FILE.gz'"}
{"input": "Find all regular files whose names contain \"@\" in directory tree ~/$folder", "output": "find ~/$folder -name \"*@*\" -type f"}
{"input": "Remove sequence like '\\xEF\\xBB\\xBF' from first string of every '*.js' file in a current folder and subfolders, creating backup file with .bak extension for every changed file, and removing backup on success.", "output": "find . -iname *.js -type f -exec sed 's/^\\xEF\\xBB\\xBF//' -i.bak {} \\; -exec rm {}.bak \\;"}
{"input": "Find root's files in the current directory tree", "output": "find ./ -user root"}
{"input": "Find files/directories modified within the last day under /etc", "output": "find /etc -type f -ctime -1"}
{"input": "find all the files in the current folder which do not have the read permission", "output": "find . -type f ! -perm -444"}
{"input": "Prints long listing of \"$dir/$file\" file.", "output": "ls -l -- \"$dir/$file\""}
{"input": "Remove all .txt files from the /full/path/dir directory tree", "output": "find /full/path/dir -name '*.txt' -print0 | xargs -0 rm"}
{"input": "Get the number of \"use\" statements in all PHP files, ordered", "output": "find . -type f -name \"*.php\" -exec grep --with-filename -c \"^use \" {} \\; | sort -t \":\" -k 2 -n -r"}
{"input": "Find file names *blast* in specfied directory", "output": "find /usr/local -name \"*blast*\""}
{"input": "Search for 'string-to-find' in all files under current directory tree and show the matched lines with their filenames", "output": "find . -exec grep -H string-to-find {} \\;"}
{"input": "bind \"\\C-i\" to \"complete\" function", "output": "bind '\"\\C-i\":complete'"}
{"input": "Find all *foo files/directories under current directory (error prone)", "output": "find . name *foo"}
{"input": "search for the word \"redeem reward\" in all the regular/normal files in the current folder and discard all the errors", "output": "find . -type f -exec grep -i \u201credeem reward\u201d {} \\; -print 2>/dev/null"}
{"input": "List all environment variables", "output": "set"}
{"input": "Print numbers from 1 to 30 with a leading 0", "output": "seq -w 30"}
{"input": "display all the regular/normal files in a folder and save errors to a log file", "output": "find ./subdirectory -type f 2>>error.log"}
{"input": "Counts lines in file fileName ignoring empty lines and lines with spaces only.", "output": "awk '!/^[[:space:]]*$/{++x} END{print x}' filename"}
{"input": "Search the /tmp tree for files between 10kb and 20kb", "output": "find /tmp -size +10k -size -20k"}
{"input": "Print every 3 characters of standard input as a line", "output": "fold -w3"}
{"input": "search for the word foo in all the js files in the current folder", "output": "grep -iH foo `find . -name \"*.js\"`"}
{"input": "Save the user name of the current user to variable \"whoami\"", "output": "whoami=$(whoami)"}
{"input": "Find files with a question mark in their names and save the output as a file", "output": "find . -name \\*\\\\?\\* > output.txt"}
{"input": "Search for .bam files anywhere in the current directory recursively", "output": "find . -name \"*.bam\""}
{"input": "Execute \"some_script\" on all files in the current directory tree", "output": "find -exec some_script {} \\;"}
{"input": "find all log files larger then 100MB  in /home directory and delete them .", "output": "find /home -type f -name *.log -size +100M -exec rm -f {} \\;"}
{"input": "Search the current directory tree for files executable by at least someone", "output": "find . -type f -perm +111 -print"}
{"input": "Prints full path to files in a current folder.", "output": "ls -d -1 $PWD/**"}
{"input": "Print out all .pdf files from the current directory tree as plain text on the standard output", "output": "find . -name '*.pdf' -print0 | xargs -0 -n1 -I '{}' pdftotext '{}' -"}
{"input": "convert all the regular/normal files in the current folder from dos to unix format", "output": "find . -name \"*\" -type f -exec dos2unix {} \\;"}
{"input": "Search the current directory recursively for regular files last accessed 2 minutes ago", "output": "find . type -f -amin 2"}
{"input": "Print which files differ in \"dir1\" and \"dir2\" recursively", "output": "diff -qr dir1/ dir2/"}
{"input": "Find all *.so files/directories under current directory and run myCommand with the file/directory paths as its argument then search for ExpectedResult in the output of myCommand", "output": "find . -name *.so -print0 | xargs -0 -I % sh -c 'echo % ; myCommand \"%\" | grep ExpectedResult'"}
{"input": "forcibly and verbosely create symbolic links in directory \"~/Library/LaunchAgents\" to all files located in /usr/local/opt/mongodb/ and that have filename extension \".plist\"", "output": "ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents"}
{"input": "Remove all *.txt files in the home directory tree with confirmation", "output": "find $HOME/. -name *.txt -ok rm {} \\;"}
{"input": "Get the disk space used by all *.txt (case insensitive) files/directories under current directory", "output": "find . -name \"*.txt\" -print0 |xargs -0 du -ch | tail -n1"}
{"input": "split file abc.txt into pieces per 1500000000 bytes named as \"abc.NNN\"", "output": "split --bytes=1500000000 abc.txt abc"}
{"input": "display all the regular files in the current folder which have the permission 777", "output": "find . -type f -perm 777"}
{"input": "Find all *.java files in the current directory tree", "output": "find . -name  \\*.java"}
{"input": "Print unique lines in \"set1\" and \"set2\" when compared to each other and remove any tabs", "output": "comm -3 <(sort set1) <(sort set2) | sed 's/\\t//g'"}
{"input": "Send SIGTERM signal to any process which 'ps' lists as \"python csp_build.py\"", "output": "kill `ps ax | grep 'python csp_build.py' | awk '{print $1}'`"}
{"input": "Save the list of .log files in the current directory tree to sas_log_list.txt", "output": "find `pwd` -name \"*.log\" > sas_log_list.txt"}
{"input": "Delete all files in the current user's home directory and its sub-directories that have not been accessed for more than 100 days.", "output": "find ~ -atime +100 -delete"}
{"input": "Find all the SUID files in the current directory tree", "output": "find . -perm /u=s"}
{"input": "find all the files in the current folder that have been accessed in today", "output": "find -atime 0"}
{"input": "Find all files larger than 20000k and print their names and sizes", "output": "find / -type f -size +20000k -exec ls -lh {} \\; | awk '{ print $8 \": \" $5 }'"}
{"input": "List all files in the \"test\" directory tree except those with '/invalid_dir/' in the pathnames", "output": "find test -print | grep -v '/invalid_dir/'"}
{"input": "Copy the entire contents of the current directory preserving ownership, permissions, and times", "output": "find . | cpio -pdumv /path/to/destination/dir"}
{"input": "Shuffles strings of text received by 'awk' command on the input.", "output": "awk 'BEGIN{srand();} {printf \"%06d %s\\n\", rand()*1000000, $0;}' | sort -n | cut -c8-"}
{"input": "Search the /path directory tree for files lacking the group writable bit", "output": "find /path ! -perm /g+w"}
{"input": "Copy all *.data files under jcho directory to files whose names are constructed by appending the parent directory names at the beginning of their names", "output": "find jcho -name '*.data' | while read -r f; do cp \"$f\" \"$(echo \"$f\" | sed 's~\\([^)]*\\)/\\([^()]*\\)$~\\1_\\2~')\"; done"}
{"input": "Find all *.* directories under /home/feeds/data directory", "output": "find /home/feeds/data -type d \\( -name 'def/incoming' -o -name '456/incoming' -o -name arkona \\) -prune -o -name '*.*' -print"}
{"input": "Remove all regular files named \"Waldo\" in the ~/Books directory tree", "output": "find ~/Books -type f -name Waldo -exec rm {} \\;"}
{"input": "Find directories named `doc' in /usr and below", "output": "find /usr \\( -name doc -and -type d \\)"}
{"input": "display a long listing of all the files that begin with the name \"Metallica\" in the entire file system", "output": "find / -name 'Metallica*' -exec ls -l {} \\;"}
{"input": "Finds all files with names like \"*.rm\" in a '/home/me/download/' folder, launches ffmpeg conversion for each one, and deletes source file after.", "output": "find /home/me/download/ -type f -name \"*.rm\" -exec ffmpeg -i \\{} -sameq \\{}.mp3 \\; -exec rm \\{} \\;"}
{"input": "find a file in current folder and discard the errors", "output": "find /. -name 'toBeSearched.file' 2>/dev/null"}
{"input": "Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.", "output": "find . -perm 664"}
{"input": "Search through the /usr/local directory for files that end with the extension .html, and print the file locations.", "output": "find /usr/local -name \"*.html\" -type f"}
{"input": "Use metaflac to extract the artist field from myfile.flac, and set the variable ARTIST to the value of that field.", "output": "source <(metaflac --show-tag ARTIST myfile.flac)"}
{"input": "find all of the files that are readable", "output": "find / -readable"}
{"input": "Find all files on the system that are world writeable", "output": "find / -perm -0002"}
{"input": "Find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file name and directory paths", "output": "find . -type d -print0 | xargs -0 -I {} sh -c ' echo \"{}: \\c\" ; find {} -maxdepth 1 -type f | wc -l ; find {} -maxdepth 1 -type f -print | sed \"s#.*/##\" '"}
{"input": "Delete all files/directories named test under maximum 2 level down the current directory", "output": "find . -maxdepth 2 -name \"test\" -exec rm -rf {} \\;"}
{"input": "find all the files which have been accessed after modifying the file /etc/hosts", "output": "find -anewer /etc/hosts"}
{"input": "Find .log files in the /var/log directory tree and copy them to a bzip2 archive", "output": "find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2"}
{"input": "set alias \"py\" for command \"python2.5 -O\"", "output": "alias py='python2.5 -O'"}
{"input": "Find all files under current directory that are read less than 1 minute ago", "output": "find . -amin -1"}
{"input": "Find all .core files on the system starting from / and delete them", "output": "find / -name \"*.core\" -print -exec rm {} \\;"}
{"input": "Find all *.sh files owned by user vivek", "output": "find / -user vivek -name \"*.sh\""}
{"input": "Create a zip file ($zipFile) of all *.log files under $sourcePath", "output": "find $sourcePath -type f -name \"*.log\" | xargs zip $zipFile -@"}
{"input": "Print all file/directory names without white space safety under the /proc directory", "output": "find /proc | xargs"}
{"input": "Find broken symlinks", "output": "find ./ -follow -lname \"*\""}
{"input": "Print the list of all directories in the /myfiles directory tree", "output": "find /myfiles -type d"}
{"input": "Create new crontab set including $job and only jobs from current crontab that don`t contain $command", "output": "cat <(fgrep -i -v \"$command\" <(crontab -l)) <(echo \"$job\") | crontab -"}
{"input": "List all regular files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 -type f | xargs ls -l"}
{"input": "kill all background jobs", "output": "jobs -p | xargs kill"}
{"input": "Merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted.", "output": "join -t, in1 in2"}
{"input": "Find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play", "output": "find /tmp/ -ctime -1 -name 'x*' -exec sh -c '   exec mv \"$@\" ~/play/' sh {} +"}
{"input": "List .html files in the current directory tree that contain string \"base\\-maps\" but do NOT contain string \"base\\-maps\\-bot\"", "output": "find . -name \"*.html\" -exec grep -lR 'base\\-maps' {} \\; | xargs grep -L 'base\\-maps\\-bot'"}
{"input": "Delete files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -execdir /bin/rm {} \\+"}
{"input": "Replace all URLs in \"MyHTMLFile.html\" with \"$pub_url\" and create a backup with suffix \".bak\"", "output": "sed -i.bak \"s#https.*\\.com#$pub_url#g\" MyHTMLFile.html"}
{"input": "Print the file system disk space usage for \"/dev/disk0s2\" if exists", "output": "df | grep /dev/disk0s2"}
{"input": "search for the regulars file starting with HSTD which have been modified yesterday from day start and copy them to /path/tonew/dir", "output": "find . -type f -iname \u2018HSTD*\u2019 -daystart -mtime 1 -exec cp {} /path/to new/dir/ \\;"}
{"input": "Print file information of the executable file of command \"gcc\"", "output": "ls `which gcc` -al"}
{"input": "SSH into server \"app1\" as the current user", "output": "ssh app1"}
{"input": "Rename all *.jpg files to *.jpg$.jpg files under current directory", "output": "find . -name '*.jpg' -exec sh -c 'mv \"$0\" \"${0%.JPG}$.jpg\"' {} \\;"}
{"input": "List all *.txt files/directories under current directory", "output": "find . -name '*.txt' -exec echo \"{}\" \\;"}
{"input": "Read standard input until a null character is found and save the result in variable \"f2\"", "output": "read -r -d $'\\0' f2"}
{"input": "Print first field from semicolon-seprated line $string.", "output": "echo $string | cut -d';' -f1"}
{"input": "Getting a detailed list of files/dirs", "output": "find  / -name \"apt\" -ls"}
{"input": "Copy \"source\" recursively to \"destination\" excluding \"path1/to/exclude\" and \"path2/to/exclude\"", "output": "rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination"}
{"input": "Replace \"firstWord\" with \"newFirstWord\", \"secondWord\" with \"newSecondWord\", \"thirdWord\" with \"newThirdWord\" in all XML files in the current directory tree", "output": "find -name \"*.xml\" -exec sed -s --in-place=.bak -e 's/firstWord/newFirstWord/g;s/secondWord/newSecondWord/g;s/thirdWord/newThirdWord/g' {} \\;"}
{"input": "Search the files from the current directory tree for \"chrome\"", "output": "find . -exec grep chrome {} \\;"}
{"input": "Find all files named \"file.ext\" under the current working directory tree and print its filename", "output": "find `pwd` -name \"file.ext\" -printf \"%f\\n\""}
{"input": "list files that the user does not have permissions to read, do not try to descend into directories that cannot be read.", "output": "find . ! -perm -g+r,u+r,o+r -prune"}
{"input": "Execute \"sleep 30; touch nohup-exit\" in the background on target machine \"REMOTE\"", "output": "ssh REMOTE \"sh -c \\\"(nohup sleep 30; touch nohup-exit) > /dev/null &\\\"\""}
{"input": "Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files", "output": "find /home/www/ -type f | xargs perl -pi -e 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "List the z* links in the /usr/bin directory and the file to which it points to", "output": "find /usr/bin  -type l  -name \"z*\" -exec ls  -l {} \\;"}
{"input": "Print file system disk space usage in human readable format of the root filesystem", "output": "df -h /"}
{"input": "Recursively search through all files in all directories for any lines containing \"pattern\" and whose second word is not \"Binary\".", "output": "grep -Ri \"pattern\" * | awk '{if($1 != \"Binary\") print $0}'"}
{"input": "Connect to host 'hostname' as user 'username' by forcing host key confirmation", "output": "ssh -o UserKnownHostsFile=/dev/null username@hostname"}
{"input": "Removes resursively all files and folders named \".DS_Store\".", "output": "find . -name \".DS_Store\" -print0 | xargs -0 rm -rf"}
{"input": "Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.", "output": "rm /var/www/html/**/_* /var/www/html/**/.DS_Store"}
{"input": "Dump the character output of 'echo `echo \"Ho ho ho\"`'", "output": "echo `echo \"Ho ho ho\"` | od -c"}
{"input": "Find all files/directories following symlinks under /path/to/dir/* paths and print the timestamp in YmdHMS format along with their paths", "output": "find -L /path/to/dir/* -printf \"%TY%Tm%Td%TH%TM%TS|%p\\n\""}
{"input": "Find all directories with 755 permission and change the permission to 700", "output": "find . -type d -perm 755 -exec chmod 700 {} \\;"}
{"input": "Print file size with the file name", "output": "find . -name '*.ear' -exec du -h {} \\;"}
{"input": "Search the entire file hierarchy for files ending in '.old' and delete them.", "output": "find / -name \"*.old\" -exec /bin/rm {} \\"}
{"input": "Find files in the /home/user directory tree changed exactly 10 minutes ago", "output": "find /home/user/ -cmin 10 -print"}
{"input": "show all the \".acc\" files in the folder /home", "output": "find /home -type f -name '*.aac'"}
{"input": "delete all the normal files in the current directory whcih have the word \"gui\" in their content.", "output": "find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f"}
{"input": "Find all files in the current directory tree that were last changed $minutes minutes ago", "output": "find . -cmin $minutes -print"}
{"input": "Print git branch currently checked out in a working directory.", "output": "git branch | grep \"*\" | cut -d ' ' -f 2"}
{"input": "long list the detials of all the shell scripts in current directory", "output": "find . -name \"*.sh\" -exec ls -ld {} \\;"}
{"input": "Find files accessed at 23:59", "output": "find . -atime -1 -print"}
{"input": "Sort \",\" delimited lines in \"file\" by the first field preserving only unique lines", "output": "sort -u -t, -k1,1 file"}
{"input": "delete all the files in the current folder which end with \".bak\" or \".backup\" and which have not been accessed in the last 30 days", "output": "find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec rm '{}' ;"}
{"input": "Replace all newlines from standard input except the last with spaces", "output": "sed ':a;N;$!ba;s/\\n/ /g'"}
{"input": "Removes 'subversion' packages from system.", "output": "yum remove subversion"}
{"input": "Prints process tree of a bash process.", "output": "pstree $(pgrep -fn bash)"}
{"input": "Find all files under $d directory and set read-write permission for owner and group and no permission for other for those files", "output": "find $d -type f -exec chmod ug=rw,o= '{}' \\;"}
{"input": "Remove all files under /myfiles that were accessed more than 30 days ago", "output": "find /myfiles -atime +30 -exec rm {} \\;"}
{"input": "Find all files more than 700 megabytes", "output": "find / -size +700M"}
{"input": "Merge each line in \"file\" into a single comma separated line", "output": "paste -d, -s file"}
{"input": "Find all files that are modified in last 3 days", "output": "find . -type f -mtime -3"}
{"input": "Convert \"/usr/share/man/man1/man.1.gz\" to html", "output": "zcat /usr/share/man/man1/man.1.gz  | groff -mandoc -Thtml"}
{"input": "Find all .txt files under the current directory and below", "output": "find -name \\*.txt"}
{"input": "display the count of all directories in a folder excluding hidden files", "output": "find /path/to/directory -type d \\! -name . -prune -exec printf x \\; | wc -c"}
{"input": "Run sed command \"s#\\(export\\ PATH=\\\"\\)\\(.*\\)#\\1/home/$(whoami)/bin:~/\\.local/bin:\\2#\" on \"~/.zshrc\" where \"$(whoami)\" is replaced with the current user name", "output": "sed -i \"s#\\(export\\ PATH=\\\"\\)\\(.*\\)#\\1/home/$(whoami)/bin:~/\\.local/bin:\\2#\" ~/.zshrc"}
{"input": "View line 500 to line 1000 in gzipped file \"bigfile.z\"", "output": "zcat bigfile.z | sed -ne '500,1000 p'"}
{"input": "Stores system load average number in the 'proc_load_average' variable.", "output": "proc_load_average=$(w | head -1 | cut -d\" \" -f13 | cut -d\",\" -f1-2 | tr ',' '.')"}
{"input": "this find command Substitute space with underscore in the file name replaces space in all the *.mp3 files with _", "output": "find . -type f -iname '*.mp3' -exec rename '/ /_/'  {} \\;"}
{"input": "Make directory \"destdir\"", "output": "mkdir destdir"}
{"input": "Gets IP addresses of all active network interfaces on host.", "output": "ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_,\" \");print _[1]}'"}
{"input": "Read a line from standard input with prompt \"Enter your choice: \", arrow keys enabled, and \"yes\" as the default input, and save the response to variable \"choice\"", "output": "read -e -i \"yes\" -p \"Enter your choice: \" choice"}
{"input": "Unzip \"file.gz\", list the unique lines matching regex pattern '\"searchstring\":\"[^\"]*\"' prefixed by the number of occurrences, sort from least frequent to most frequent", "output": "zcat file.gz | grep -o '\"searchstring\":\"[^\"]*\"'| sort | uniq -c | sort -n"}
{"input": "find all text files which have extra extensions in the current folder", "output": "find . -name '*.text' -exec sh -c 'if [ ! -f \"$(dirname \"$1\")/$(basename \"$1\" .text)\" ]; then echo == $1; fi' sh {} \\;"}
{"input": "Print the day at 1 day ago in 2 months from now", "output": "date -d \"$(date -d \"2 months\" +%Y-%m-1) -1 day\" +%a"}
{"input": "Search the current directory tree for .rb files ignoring .vendor directories", "output": "find . -name .vendor -prune -o -name '*.rb' -print"}
{"input": "List the regular files of the current directory tree that contain string \"texthere\"", "output": "find -type f -exec grep -l \"texthere\" {} +"}
{"input": "Find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play", "output": "find /tmp/ -ctime -1 -name 'x*' -print0 | xargs -r0 mv -t ~/play/"}
{"input": "find all txt files under the current folder except ./misc folder", "output": "find . -path ./misc -prune -o -name '*.txt' -print"}
{"input": "Search the current directory tree for files that are less than 50kb", "output": "find . -size -50k"}
{"input": "Find all files in the /usr directory tree that are owned by group `staff'", "output": "find /usr -group staff"}
{"input": "Write \"hey hey, we're the monkees\" to standard output and as input to \"gzip --stdout > my_log.gz\"", "output": "echo \"hey hey, we're the monkees\" | tee >(gzip --stdout > my_log.gz)"}
{"input": "Get current directory name without full path, ie. the part after the last /", "output": "basename \"$(pwd)\""}
{"input": "send GET request to \"http://testsite/api/\" with header \"Authorization: Token wef4fwef54te4t5teerdfgghrtgdg53\" and format as json", "output": "curl -X GET -H \"Authorization: Token wef4fwef54te4t5teerdfgghrtgdg53\" http://testsite/api/ | python -mjson.tool"}
{"input": "List all files in the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 |xargs ls -l"}
{"input": "Search the *.code files from the current directory tree for string 'pattern'", "output": "find . -name '*.code' -exec grep -H 'pattern' {} +"}
{"input": "Rename all files in current directory to lowerase.", "output": "rename 'y/A-Z/a-z/' *"}
{"input": "Find *.css files in the current directory tree, skipping all directories that match pattern '*/lang/en.css'", "output": "find . -path '*/lang/en.css' -prune -o -name '*.css' -print"}
{"input": "Evaluate the output of recursively changing the owner and group of \"/data/*\" to \"mongodb\"", "output": "`sudo chown -R mongodb:mongodb /data/*`"}
{"input": "Find all files under  current directory and rename them by replacing all white spaces with _", "output": "find ./ -name \"* *\" -type f -d 1 | perl -ple '$file = $_; $file =~ s/\\s+/_/g; rename($_, $file);'"}
{"input": "search for all the .o files in the current directory which have permisssions 664 and print them.", "output": "find . -name *.o -perm 664 -print"}
{"input": "Find and print detailed information about all regular files in your home directory and below that have only the group permission set", "output": "find . -perm g=r -type f -exec ls -l {} \\;"}
{"input": "Search for 'foo' in all the java files under 'dir1', 'dir2' and 'dir3' directory tree and print only the names of the matched files", "output": "find dir1 dir2 dir3 -type f -name \"*.java\" -exec grep -il 'foo' {} \\;"}
{"input": "find all the pdf files in a folder which start with a specific name and display them in the sorted order of their time stamps", "output": "find \"/path/to/pdfs/\" -type f -name \"$1*.pdf\" -exec stat -f \"%10Dm %SN\" {}\\;  | sort -k1,1n -k2,2"}
{"input": "Find all *.css files under $DIR and print the lines matching the regex '\\.ExampleClass.{/,/}' from those files", "output": "find ${DIR} -type f -name \"*.css\" -exec sed -n '/\\.ExampleClass.{/,/}/p' \\{\\} \\+"}
{"input": "Find all Name* files under ../../$name-module and rename them by replacing 'Name' with $Name (will be expanded in the current shell) in their names", "output": "find ../../$name-module -print0 -name 'Name*' -type f | xargs -0 rename \"s/Name/$Name/\""}
{"input": "Creates temporary file and saves path to it in 'content_dir1' variable.", "output": "content_dir1=$(mktemp)"}
{"input": "Locate files that reside in the home directory and have not been accessed in the past 30 days", "output": "find $HOME -atime +30"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn -exec rm -rf {} +"}
{"input": "Set permissions to 500 for directories under the current directory", "output": "find . -type d -exec chmod 500 {} \\;"}
{"input": "Print the home directory of \"$username\"", "output": "finger $username | awk '/^Directory/ {print $2}'"}
{"input": "Finds recursively all folders in current folder which path not contains \"NameToExclude\" string and removes only ones without files and another folders within.", "output": "find . -type 'd' | grep -v \"NameToExclude\" | xargs rmdir"}
{"input": "Reports time consumed by command 'sleep 1' to the file time.txt together, and saves command error output to sleep.stderr.", "output": "{ time sleep 1 2> sleep.stderr ; } 2> time.txt"}
{"input": "Find all files that belong to user root", "output": "find / -user root"}
{"input": "Prints current directory name", "output": "pwd | awk -F/ '{print $NF}'"}
{"input": "Find all files owned by user vivek", "output": "find / -user vivek"}
{"input": "filter output of bind -p by regex", "output": "bind -p | grep -a forward"}
{"input": "Print disk of mount point \"/pa/th\"", "output": "mount | awk '$3 == \"/pa/th\" {print $1}'"}
{"input": "display all the files in the usr folder which have been modified after Feburary 1st", "output": "find /usr -newermt \"Feb 1\""}
{"input": "recursively change owner of the directory /usr/local/lib to the current user", "output": "sudo chown -R `whoami` /usr/local/lib"}
{"input": "Get a list of directories owned by group ID 100", "output": "find / -type d -gid  100"}
{"input": "Display long listing of all the files/directories owned by the user 'me' under '/tmp' directory tree", "output": "find /tmp -user me -ls"}
{"input": "Unpack all *.gz archives in the current directory tree", "output": "find . -name '*.gz' -print0 | xargs -0 gunzip"}
{"input": "Find files not matching the posix extended regex '.+\\-[0-9]{2,4}x[0-9]{2,4}\\.jpg' in their paths under Folder1 and copy them to Folder2", "output": "find Folder1 -type f -regextype posix-extended \\( ! -regex '.+\\-[0-9]{2,4}x[0-9]{2,4}\\.jpg' \\) -print0 |  xargs -0 cp -p --target-directory=Folder2"}
{"input": "Create a bzip2 archive of all .log files from the /var/log directory tree", "output": "find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2"}
{"input": "Find all *.py files under current directory and run 'perl script.pl' with the file paths as arguments", "output": "find . -name '*.py' | xargs perl script.pl"}
{"input": "Find and the 5 largest regular files in the Downloads folder of tecmint's home directory and output the file sizes in bytes.", "output": "find /home/tecmint/Downloads/ -type f -printf \"%s %p\\n\" | sort -rn | head -n 5"}
{"input": "display a long listing of all regular files  in current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60 -type f -ls"}
{"input": "Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and no permission for other for those directories", "output": "find . -type d -exec chmod u=rwx,g=rx,o= '{}' \\;"}
{"input": "Create archive \"backup1.tar\" of all subdirectories of the current directory", "output": "find . -mindepth 1 -maxdepth 1 -type d | awk 'BEGIN {FS=\"./\"}; {print $2}' | xargs -d '\\n' tar czf backup1.tar"}
{"input": "Find all files in the /home/ directory tree that were last accessed more than 7 days ago", "output": "find /home -atime +7"}
{"input": "Find all files/directories under current directory excluding the paths that match the POSIX extended regex \".*def/incoming.*|.*456/incoming.*\"", "output": "find . -regex-type posix-extended -regex \".*def/incoming.*|.*456/incoming.*\" -prune -o -print"}
{"input": "find all the empty files and folders in your system", "output": "find / -empty"}
{"input": "Check if current shell is running within a 'screen' process.", "output": "pstree --show-parents -p $$ | head -n 1 | sed 's/\\(.*\\)+.*/\\1/' | wc -l"}
{"input": "list files found under the current directory ending in \"txt\" or ending in \"html\"", "output": "find . -name '*.txt' -o -name '*.html'"}
{"input": "Show filename and filetype description of all PHP files in all directories contained in current directory whose name or filetype description includes \"UTF\"", "output": "file */*.php | grep UTF"}
{"input": "Format email message in file specified by \"$2\" to fit in 80 characters split at spaces and send to \"$EMAIL\" and a BCC to \"abc@abc.com\" from \"$MAILBCC\" with subject \"$SUBJECT\"", "output": "fold -s \"$2\" | mailx -s \"$SUBJECT\" -b \"abc@abc.com\" \"$EMAIL\" -r \"$MAILBCC\""}
{"input": "Print which files differ in \"dir1\" and \"dir2\" recursively", "output": "diff -qr dir1 dir2"}
{"input": "Opens menu item 'Basic Shell Features' -> 'Shell Expansions' -> 'Filename Expansion' -> 'Pattern Matching' in the 'bash' manual.", "output": "info bash 'Basic Shell Features' 'Shell Expansions' 'Filename Expansion' 'Pattern Matching'"}
{"input": "Search the current directory tree for all .java files that were last modified at least 7 days ago", "output": "find . -name '*.java' -mtime +7 -print"}
{"input": "Remount \"/dev/stl12\" on \"/system\" as read only", "output": "mount -o ro,remount /dev/stl12 /system"}
{"input": "Output the last slash-separated component of specified path, in this case \"data_report_PD_import_script_ABF1_6\"", "output": "basename /EBF/DirectiveFiles/data_report_PD_import_script_ABF1_6"}
{"input": "Find all files in the current directory recursively that were last modified more than 5 days ago", "output": "find ./* -mtime +5"}
{"input": "Print \"new.txt\" with line numbers prepended", "output": "cat new.txt  | nl"}
{"input": "create a compressed archive \"compressFileName.tar.gz\" with verbose output", "output": "tar -zcvf compressFileName.tar.gz folderToCompress"}
{"input": "Find directories and regular files containing `blah' in their names modified less than 2 days ago, case insensitive", "output": "find . -iname '*blah*' \\( -type d -o -type f \\) -mtime -2"}
{"input": "tar all the regular java files to myfile.tar", "output": "find . -type f -name \"*.java\" | xargs tar cvf myfile.tar"}
{"input": "Search for all files in the current directory recursively whose names begin with \"Linkin Park\"", "output": "find . -name \"Linkin Park*\""}
{"input": "Delete all files/directories taken by the glob pattern * except the ones with the name 'b'", "output": "find * -maxdepth 0 -name 'b' -prune -o -exec rm -rf '{}' ';'"}
{"input": "find all files in the current folder that are modified exactly 2 minutes ago", "output": "find -mmin 2 -print"}
{"input": "Find files in and below the current directory whose names begin with \"not\" and remove one of them", "output": "find . -name not\\* | tail -1 | xargs rm"}
{"input": "Find all files/directories under 'my key phrase' directory", "output": "find 'my key phrase'"}
{"input": "Overwirte file '/path/to/your/file' with zeroes and remove, showing progress while execution.", "output": "shred -v -n 0 -z -u /path/to/your/file #overwriting with zeroes and remove the file"}
{"input": "Find *.java files under current directory and compress them to myfile.tar", "output": "find . -type f -name \"*.java\" | xargs>    tar cvf myfile.tar"}
{"input": "Answer \"y\" to any prompts in the interactive recursive removal of \"dir1\", \"dir2\", and \"dir3\"", "output": "yes y | rm -ir dir1 dir2 dir3"}
{"input": "Search the current directory tree for files whose name is \".note\", case insensitive", "output": "find . -iname '.note'"}
{"input": "force delete all the regular/normal files in the current folder", "output": "find . -type f -exec rm -fv {} \\;"}
{"input": "Recursively change owner and group of \"/usr/local/rvm/gems/ruby-2.0.0-p481/\" to the current user", "output": "sudo chown $(whoami):$(whoami) /usr/local/rvm/gems/ruby-2.0.0-p481/ -R"}
{"input": "Search directory /path/to/check/ for regular files", "output": "find /path/to/check/* -maxdepth 0 -type f"}
{"input": "Print unique list of who is logged in and the time of login formatted in columns", "output": "who -su | sort | uniq | column"}
{"input": "remove a specific file among a group of specific files", "output": "find . -name \"*.pdf\" -print | grep -v \"^\\./pdfs/\" | xargs -J X mv X ./pdfs/"}
{"input": "Find all files that were last modified less than7 days ago under /home", "output": "find /home -mtime -7"}
{"input": "Print a line of 3 '%' characters", "output": "seq -s % 4|tr -d '[:digit:]'"}
{"input": "Find all regular files that reside in the current directory tree and were last modified more than 3 days ago", "output": "find . -type f -mtime +3"}
{"input": "Find all files under 'dir' directory with white space safety in their paths and print their md5 sums into file.txt", "output": "find dir -type f -print0 | xargs -0 md5sum >> file.txt"}
{"input": "Print percents of the space used on the file system containing path to the current working directory.", "output": "df . -B MB | tail -1 | awk {'print substr($5, 1, length($5)-1)'}"}
{"input": "Preprocess C++ file 'omnitest.cpp' (resolve all preprocessor directives) and page interactively through the result.", "output": "g++ omnitest.cpp -E | less"}
{"input": "Read a line from standard input and save response in variable \"VARNAME\"", "output": "read VARNAME"}
{"input": "display all the soft links in a  folder which are not broken", "output": "find -L /target ! -type l"}
{"input": "Continuously send \"ok\" plus newline to the program \"recalcitrant.php\"", "output": "yes ok | recalcitrant.php"}
{"input": "Apply script ./group.sed with option --separate to all regular files of the current directory tree", "output": "find . -type f -print0 | xargs -0 ./group.sed --separate"}
{"input": "Find all *.ext files/directories under current directory and print their path and parent directory path", "output": "find /path -type f -name \"*.ext\" -printf \"%p:%h\\n\""}
{"input": "List environment variables whose name contains \"X\"", "output": "set | cut -d= -f1 | grep X"}
{"input": "change group of the file /var/lib/php/session  to group lighttpd", "output": "chown -R :lighttpd /var/lib/php/session"}
{"input": "find all text files in current folder and trim the extra spaces in all lines in these files and save it to the original file", "output": "find . -type f -name \"*.txt\" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' \"$i\">/tmp/.$$ && mv /tmp/.$$ \"$i\";done' arg0 {} +"}
{"input": "Find & Write Changes to a File and Print the Changes Using sed s//gpw", "output": "find . -type f -name \"*.txt\" -exec sed -n 's/Linux/Linux-Unix/gpw output' thegeekstuff.txt"}
{"input": "Delete all hidden files/directories under $some_directory including $some_directory", "output": "find $some_directory '.*' -delete"}
{"input": "Expand bash array \"myargs\" as arguments to \"mv\"", "output": "mv \"${myargs[@]}\""}
{"input": "Reformat date \"Sat Aug 09 13:37:14 2014 +1100\" according to format string \"%a %b %d %H:%M:%S %Y %z\"", "output": "date -j -f \"%a %b %d %H:%M:%S %Y %z\" \"Sat Aug 09 13:37:14 2014 +1100\""}
{"input": "Recursively find all files in the directory \"posns\" and split each one into files of at most 10000 lines each", "output": "find posns -type f -exec split -l 10000 {} \\;"}
{"input": "Search the current directory recursively for regular files last accessed more than 2 minutes ago", "output": "find . type -f -amin +2"}
{"input": "Search for 'mystring' in all *.txt files under current directory", "output": "find . -name \"*.txt\" -print0 | xargs -0 egrep mystring"}
{"input": "Find all files/directories under Mainfolder directory and redirect the output to outputfle", "output": "find Mainfolder > outputfile"}
{"input": "remove all core files in the file system", "output": "find / -name \"*.core\" | xargs rm"}
{"input": "Mount partition with label \"WHITE\" on \"/mnt/WHITE\"", "output": "mount -L WHITE /mnt/WHITE"}
{"input": "List all VPN_CALLRECORD_20140409* files under current directory and print the 9th fields from the output to log.txt", "output": "find . -name 'VPN_CALLRECORD_20140409*' -type f| xargs ls -lhrt |awk '{print $9}' > log.txt"}
{"input": "Search all *.c files from the current directory tree for \"hogehoge\"", "output": "find . -name \\*.c -exec grep hogehoge {} \\;"}
{"input": "Print continuous lines of 100 random characters either \".\" or \" \"", "output": "cat /dev/urandom | tr -dc '. ' | fold -w 100"}
{"input": "search for all the regular/normal mp3 files in the file system and sync them to the folder /mnt/mp3", "output": "find / -iname \"*.mp3\" -type f -print0 | xargs -0 -I '{}' /usr/bin/rsync -avR \"{}\" /mnt/mp3/"}
{"input": "Print the sizes and file names of all files in the current directory tree that are between 700k and 1000k", "output": "find . \\( -size +700k -and -size -1000k \\) -exec du -Hs {} \\; 2>/dev/null"}
{"input": "Enable history and history expansion within a script", "output": "set -o history -o histexpand"}
{"input": "Find all files named 'foo' under your home directory and list them with confirmation prompt", "output": "find ~ -type f -name 'foo*' -ok ls -l '{}' ';'"}
{"input": "Unset RBENV_VERSION variable from within tmux session.", "output": "tmux set-environment -u RBENV_VERSION"}
{"input": "Recursively set all permissions under \"/opt/lampp/htdocs\" to 755", "output": "sudo chmod 755 -R /opt/lampp/htdocs"}
{"input": "Count all the mp3 files in the music user's home and subdirs.", "output": "find ~music -type f -iname *.mp3 | wc -l"}
{"input": "Make directories and parents as needed for each file path in \"a.txt\" excluding the basename for each path", "output": "cat a.txt | grep / | sed 's|/[^/]*$||' | sort -u | xargs -d $'\\n' mkdir -p"}
{"input": "display all file names in current folder", "output": "find . -printf '%p '"}
{"input": "Recursively change the owner to \"ec2-user\" and group to \"apache\" of all files in \"/vol/html\"", "output": "sudo chown -R ec2-user:apache /vol/html"}
{"input": "display all directories in the entire file system", "output": "find / -type d -print"}
{"input": "Copy all files matching \"*.sh\" in \"$from/*\" to \"root@$host:/home/tmp/\" compressing data during transmission", "output": "rsync -zvr --include=\"*.sh\" --exclude=\"*\" $from/*  root@$host:/home/tmp/"}
{"input": "Recursively removes $TMPDIR folder, prompting user on each deletion.", "output": "rm -r $TMPDIR"}
{"input": "Find all directories under and below /home/admin/public_html/, and change their permissions to 755", "output": "find /home/admin/public_html/ -type d -exec chmod 755 {} \\;"}
{"input": "Calculate the md5 sum of the contents of all files sorted in directory tree \"/path\"", "output": "find /path -type f | sort -u | xargs cat | md5sum"}
{"input": "Copy \"./export\" recursively to \"/path/to/webroot\" preserving permissions", "output": "rsync -pr ./export /path/to/webroot"}
{"input": "Print '-ok is an action so an implicit -print is not applied' with confirmation from the user for each file or directory found by the name 'file' under current directory tree", "output": "find -name file -ok echo '-ok is an action so an implicit -print is not applied' \\;"}
{"input": "Archive \"/path/to/sfolder/\" to \"name@remote.server:/path/to/remote/dfolder\" preserving hard links and compressing the data during transmission", "output": "rsync -aHvz /path/to/sfolder/ name@remote.server:/path/to/remote/dfolder"}
{"input": "search for the \".git\" folder in the current folder and run the git pull request", "output": "find . -name .git -type d -execdir git pull -v ';'"}
{"input": "Find recursively all regular files in the current directory skipping hidden files and directories matching pattern '.?*'", "output": "find -name '.?*' -prune -o \\( -type f -print0 \\)"}
{"input": "List file contents of compressed file 'compressed.tar.gz'", "output": "gzip -l compressed.tar.gz"}
{"input": "Count case insensitive absolute paths recursively from the current directory", "output": "find -type f  -exec readlink -m {} \\; | gawk 'BEGIN{FS=\"/\";OFS=\"/\"}{$NF=tolower($NF);print}' | uniq -c"}
{"input": "Find all flies under current directory excluding *.png files and print the file paths (with match count) that match the case insensitive regex 'foo=' in their contents", "output": "find . -not -name '*.png' -o -type f -print | xargs grep -icl \"foo=\""}
{"input": "Find all file in current directory with have .c extenstion & have 777 permission . delete then", "output": "find . -name \"*.c\" -a  -perm -777 | xargs rm -rf"}
{"input": "Find all files/directories under $something directory", "output": "find $something"}
{"input": "Count the number of equal lines in sorted files \"ignore.txt\" and \"input.txt\"", "output": "comm -12 ignore.txt input.txt | wc -l"}
{"input": "Clean directories and subdirectories of the temporary files generated during normal use", "output": "find . \\( -name a.out -o -name '*.o' -o -name 'core' \\) -exec rm {} \\;"}
{"input": "Search the entire file system for .jpg files.", "output": "find / -name \u201c*.jpg\u201d"}
{"input": "Find all directories under /home that doesn't contain a file/directory named 'bin'", "output": "find /home -type d ! -exec test -e '{}/bin' \\; -print"}
{"input": "Find all files whose filename does not end with *.html.", "output": "find . -type f -not -name \"*.html\""}
{"input": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers", "output": "find . -name '*js' | grep -n  'some string'"}
{"input": "Display all files in a folder", "output": "find man5 -print"}
{"input": "Find all files in the current directory tree with extension .html and replace all occurences of \"php\" with \"html\" inside them", "output": "find ./ -type f -name *\".html\" | xargs sed -i \"s/php/html/g\""}
{"input": "Replace all spaces (' ') with comma (',') in ${TO_IGNORE[@]}, append with '--ignore ' and save the resultant string to variable 'ARGS'", "output": "ARGS=\"--ignore `echo ${TO_IGNORE[@]} | tr ' ' ','`\""}
{"input": "Report file system containing path to /dir/inner_dir/ disk usage in kilobytes.", "output": "df -k /dir/inner_dir/"}
{"input": "Print the files to which symbolic links in the current directory point", "output": "find . -type l -print | xargs ls -ld | awk '{print $10}'"}
{"input": "Display all files in the folder home which are owned by the group test.", "output": "find /home -group test"}
{"input": "Find all directories under $1/.hg and set their SGID bit", "output": "find $1/.hg -type d -exec chmod g+s {} \\;"}
{"input": "List screen session IDs", "output": "screen -list"}
{"input": "Find all *.c files on the system and feed the output to wc", "output": "find / -name *.c | wc"}
{"input": "Search the current directory tree for regular files owned by user \"www\"", "output": "find -type f -user www"}
{"input": "Compress \"Hello world\", base64 encode, and save to variable \"FOO\"", "output": "FOO=$(echo \"Hello world\" | gzip | base64)"}
{"input": "SSH into \"server\" as user \"user\" and interpret commands in \"/bin/bash\" until \"EOT\" is received", "output": "ssh user@server /bin/bash <<'EOT'"}
{"input": "Find all files starting from / that belong to user1", "output": "find / -user user1"}
{"input": "Recursively find the latest modified file in the current directory and print the modification time and filename", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \" | sed 's/.*/\"&\"/' | xargs ls -l"}
{"input": "create directory /var/svn as user root", "output": "sudo mkdir /var/svn"}
{"input": "test if the 2nd column in file A is in the reverse order of the second column of file B", "output": "diff --brief <(awk '{print $2}' A) <(tac B | awk '{print $2}')"}
{"input": "Cuts off last part from the path $dir, and deletes resulted folder if empty.", "output": "rmdir \"$(dirname $dir)\""}
{"input": "Prints long listing of directories '/tmp', '/tnt' themselves.", "output": "ls -ld /tmp /tnt"}
{"input": "extract /path/to/my_archive.tar.xz to /path/to/extract and preserve permissions.", "output": "tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract"}
{"input": "delete all the broken symbolic links from the folder /usr/ports/packages", "output": "find -L /usr/ports/packages -type l -exec rm -- {} +"}
{"input": "Find all *.txt files except for those on other file systems", "output": "find / -name  \"*.txt\" -xdev 2> /dev/null"}
{"input": "Search recursively through /mydir, outputting only the base (leaf) name of each file, directory, symlink etc. without any containing directories, that is the part following the last slash.", "output": "find /mydir | xargs -I{} basename {}"}
{"input": "Saves list of logged in users in system together with 'USER' header in the 'a' variable.", "output": "a=`w|cut -d' ' -f1`;"}
{"input": "Counts lines in file 'file1' and shows progress bar while doing.", "output": "pv file1 | wc -l"}
{"input": "find all the files in the current folder whose name starts with 2 alphabets and ends with 2 digits.", "output": "find . \u2014 name \"[a\u2011z][a\u2011z][0\u20149][0\u20149].txt\" \u2014 print"}
{"input": "Save long listing of all files listed in file 'filenames.txt' to 'listing' variable", "output": "listing=$(ls -l $(cat filenames.txt))"}
{"input": "display all the regular files in the current folder that are less than 10KB", "output": "find . -type f -size -10k"}
{"input": "Print the full path of executable \"lshw\"", "output": "which lshw"}
{"input": "Create a symbolic link named \"$HOME/bin/\" to \"$HOME/downloads/fnord\"", "output": "ln -s $HOME/downloads/fnord $HOME/bin/"}
{"input": "Strip all '\\' and newlines from $output and save the result to variable 'output'", "output": "output=$(echo \"$output\" | tr -d '\\' | tr -d '\\n')"}
{"input": "Print absolute path of \"PATH\"", "output": "readlink -f PATH"}
{"input": "search for a word in all the files in the entire filesystem and display the matched fline along with the file name", "output": "find / -type f -exec grep -Hi 'the brown dog' {} +"}
{"input": "Print lines 16225 to 16482 in file \"file\"", "output": "cat file | head -n 16482 | tail -n 258"}
{"input": "Find Flash videos stored by browsers on a Mac", "output": "find /private/ 2>/dev/null | grep /Flash"}
{"input": "run command \"/path/to/my_daemon\" as user joe and redirect the output to file /some/output/file", "output": "su - joe -c \"/path/to/my_daemon > /some/output/file\" &"}
{"input": "View history using \"vim\"", "output": "vim <(history)"}
{"input": "Set the setgid bit on all directories in the repository \"/git/our_repos\"", "output": "find /git/our_repos -type d -exec chmod g+s {} +"}
{"input": "Find all files on local host whose name contains \"labra\" and copy them to remote  host 11.11.11.11 connecting as ssh user \"masi\" and copying the files to the Desktop directory this user's home directory - this will not work with file/path names containing spaces.", "output": "locate labra | xargs -I{} scp '{}' masi@11.11.11.11:~/Desktop/"}
{"input": "Find *.html files in the /usr/src/linux directory tree", "output": "find /usr/src/linux -name \"*.html\""}
{"input": "Print all non-hidden files in the current directory and its subdirectories", "output": "find . -not -path '*/\\.*'"}
{"input": "copy all the log files in the current folder which have not been accessed in the last 30*24 hours to the folder old", "output": "find . -type f -mtime +30 -name \"*.log\" -exec cp {} old \\;"}
{"input": "Find all directories on the system whose size is greater than 50k", "output": "find / -type d -size +50k"}
{"input": "display all the normal/regular files in the directory FOLDER1", "output": "find FOLDER1 -type f -print0"}
{"input": "Make a copy of file1 in dir1, dir2, and dir3.", "output": "echo dir1 dir2 dir3 | xargs -n 1 cp file1"}
{"input": "Move all files listed in $i file to dir.$count directory", "output": "cat $i | xargs mv -t dir.$count"}
{"input": "Print the first 24 alphanumeric characters from \"/dev/urandom\", determining C locale for all categories", "output": "cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1"}
{"input": "Add cron lists from \"file1\" and \"file2\" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab.", "output": "cat file1 file2 | crontab"}
{"input": "Isolate first comma-delimited field of each line in \"file\", discard consecutive duplicates, and search \"file\" for first matching occurrence of that field.", "output": "cut -d, -f1 file | uniq | xargs -I{} grep -m 1 \"{}\" file"}
{"input": "Copy \"src/prog.js\" and \"images/icon.jpg\" to \"/tmp/package\" keeping relative path names", "output": "rsync -R src/prog.js images/icon.jpg /tmp/package"}
{"input": "Identify CMS version/releases accross all your Wordpress websites", "output": "find /home/*/public_html/ -type f -iwholename \"*/wp-includes/version.php\" -exec grep -H \"\\$wp_version =\" {} \\;"}
{"input": "Delete and count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -mtime +$DAYS_TO_SAVE -exec bash -c 'printf \"Total: %d\\n\" $#; rm \"$@\"' _ {} +"}
{"input": "Print the real path of \"$F\" where each symbolic link component must exist", "output": "echo \"$(dirname $(readlink -e $F))/$(basename $F)\""}
{"input": "Find all regular files with permissions 777 under and below /home/user/demo/", "output": "find /home/user/demo -type f -perm 777 -print"}
{"input": "Send content to screen session windows with a certain title", "output": "screen -S SessionName -X at \".#\" stuff \"date \""}
{"input": "Prints total count of lines of all *.php files in a current folder and subfolders.", "output": "find . -name '*.php' -type f -exec cat -- {} + | wc -l"}
{"input": "Display differences between /tmp/test1 and /tmp/test2 side-by-side.", "output": "diff -y /tmp/test1  /tmp/test2"}
{"input": "Find all *.jpg files under current directory and print only unique names", "output": "find . -name \\*.jpg -exec basename {} \\; | uniq -u"}
{"input": "Print output of script 'trap.sh'", "output": "~ $ . trap.sh | cat"}
{"input": "Count the number of files named 'job.history' under '/data/SpoolIn' directory tree that match 'FAIL' in their contents", "output": "find /data/SpoolIn -name job.history -exec grep -l FAIL {} \\+ | wc -l"}
{"input": "Force create a symbolic link named \"currentDir\" to \"newDir\" without dereferencing \"currentDir\"", "output": "ln -sfn newDir currentDir"}
{"input": "find all the directories starting with the name \"someNamePrefix\" which have not been modified in the last 10 days and force delete them", "output": "find /somePath -type d -name \u2018someNamePrefix*\u2019 -mtime +10 -print | xargs rm -rf ;"}
{"input": "remove top-level domain (.com, .org) from URL's in urllist.txt", "output": "rev urllist.txt | cut -d. -f 2- | rev"}
{"input": "Numerically sort each line of standard input", "output": "sort -n"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and \"en\" and \"es\" directories", "output": "find . \\( -name en -o -name es \\) -prune , -mtime 0 ! -name \"*.swp\""}
{"input": "Create links for all files in the current directory tree that are more than 1000 days old in \"/home/user/archives\"", "output": "find . -type f -mtime +1000 -print0 | cpio -dumpl0 /home/user/archives"}
{"input": "Execute \"ls -l\" every 2 seconds and highlight the differences in runs", "output": "watch -d ls -l"}
{"input": "Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.", "output": "cat files | sort -t- -k2,2 -n"}
{"input": "Reports time consumed by command 'sleep 1' to the file time.txt together with command error output.", "output": "{ time sleep 1 ; } 2> time.txt"}
{"input": "Add \"Line of text here\" on top of each *.py files under current directory", "output": "find . -name \\*.py -print0 | xargs -0 sed -i '1a Line of text here'"}
{"input": "Show manual page of find", "output": "man find"}
{"input": "Recursively copy all files matching \"*.sh\" in \"$from\" to \"root@$host:/home/tmp/\" compressing data during transmission", "output": "rsync -zvr --exclude=\"*\" --include=\"*.sh\" --include=\"*/\" \"$from\" root@$host:/home/tmp/"}
{"input": "display all the files in the entire file system which have set uid bit set.", "output": "find / -perm -u+s -print"}
{"input": "Move all files that contain \"Subject: \\[SPAM\\]\" to \"your_file\"", "output": "grep -L -r 'Subject: \\[SPAM\\]' . | while read f; do mv \"$f\" out; done"}
{"input": "Convert the first 1024 bytes of \"/dev/urandom\" to a string of hexadecimal bytes", "output": "head -c1024 /dev/urandom | xxd -p | tr -d $'\\n'"}
{"input": "Search the local subdirectory tree of the current working directory and the /tmp directory tree for directories named mydir", "output": "find local /tmp -name mydir -type d -print"}
{"input": "Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*", "output": "find /path/to/directory/* -maxdepth 0 -type d -exec basename -a {} +"}
{"input": "Executes tmux commands that are stored in the '$tmux_command' variable, and then attaches to the tmux session.", "output": "tmux \"$tmux_command \\; attach\""}
{"input": "search for *.log files starting from /", "output": "find / -name \"*.log\""}
{"input": "display all the C, CPP, Header files in the kat folder", "output": "find kat -type f \\( -name \"*.c\" -o -name \"*.cpp\" -o -name \"*.h\" \\)"}
{"input": "Search all the regular files in the current directory for \"example\"", "output": "find -maxdepth 1 -type f | xargs grep -F 'example'"}
{"input": "Send SIGTERM signal to entire session of processes containing processes whose command match \"rsync\".", "output": "kill $(ps -o pid= -s $(ps -o sess --no-heading --pid $(pgrep rsync )))"}
{"input": "Print numbers from 1 to 30 with 0 padding to a width of 2", "output": "seq -f \"%02g\" 30"}
{"input": "Print last four bytes of string '0a.00.1 usb controller some text device 4dc9'", "output": "echo 0a.00.1 usb controller some text device 4dc9 | rev | cut -b1-4 | rev"}
{"input": "View line 500 to line 500 + 501 in gzipped file \"bigfile.z\"", "output": "zcat bigfile.z | tail -n +500 | head -501"}
{"input": "Count the number of files in the current directory and below", "output": "find . -type d -exec basename {} \\; | wc \u2013l"}
{"input": "Save the system host name into variable \"HOST\"", "output": "HOST=$(hostname)"}
{"input": "Reattach to a screen session", "output": "screen -d -r remote-command"}
{"input": "get all files in a current directory modified in the last day and a half", "output": "find . -mtime -1.5 | xargs tar --no-recursion -czf myfile.tgz"}
{"input": "Format the time string @133986838 according to the default time format and save it to variable 'VARIABLENAME'", "output": "VARIABLENAME=$(date -d @133986838)"}
{"input": "Finds only parts of echoed string that match with regex 'run-parts (-{1,2}\\S+ )*\\S+', and saves them in $match variable, each matched part on a separate line.", "output": "match=$(echo \"${line}\" | egrep -o 'run-parts (-{1,2}\\S+ )*\\S+')"}
{"input": "Count the number of lines in all \".txt\" files", "output": "cat *.txt | wc -l"}
{"input": "list all *.java files under the src directory", "output": "find src -name \"*.java\""}
{"input": "find all regular files  then display the number of occurrences of banana without lines not proper end", "output": "find . -type f -print0| xargs -0 grep -c banana| grep -v \":0$\""}
{"input": "Find all files starting from / whose names end with \".rpm\" and change their permissions to 755", "output": "find / -name *.rpm -exec chmod 755 '{}' \\;"}
{"input": "Calculate the md5 sum of \"exampleString\"", "output": "echo -n 'exampleString' | md5sum"}
{"input": "Print summary of new/missing files, and which files differ between /path/to/folder1 and /path/to/folder2, sorted alphabetically.", "output": "diff -rq /path/to/folder1 /path/to/folder2"}
{"input": "Copies all files with \"FooBar\" in the path under the current directory to the '~/foo/bar' directory.", "output": "find . | grep FooBar | xargs -I{} cp {} ~/foo/bar"}
{"input": "Recursively changes group ownership of everything within a '/path/to/repo' to 'GROUP'.", "output": "chgrp -R GROUP /path/to/repo"}
{"input": "Remove all files under $DIR that were accessed more than 5 days ago", "output": "find \"$DIR\" -type f -atime +5 -exec rm {} \\;"}
{"input": "Find all *.rb (regular) files under current directory", "output": "find . -name \"*.rb\" -type f"}
{"input": "Verbosely change ownership of \"$file\" to \"root\"", "output": "chown -v root \"$file\""}
{"input": "Delete all 'restore.php' files in /var/www and 3 levels below", "output": "find /var/www -maxdepth 4 -name 'restore.php' -exec rm -r {} \\;"}
{"input": "Saves listing of a current folder in 'OUTPUT' variable.", "output": "OUTPUT=\"$(ls -1)\""}
{"input": "Print the terminal file of the users who are logged in with \"admin\" in their name", "output": "who |grep -i admin |cut -c10-20"}
{"input": "Print file information of command \"studio\"", "output": "which studio | xargs ls -l"}
{"input": "check readline bindings for \"\\x61\"", "output": "bind -p | grep $'\"\\x61\"'"}
{"input": "Archive \"path/to/working/copy\" to \"path/to/export\" excluding files or directories named \".svn\"", "output": "rsync -a --exclude .svn path/to/working/copy path/to/export"}
{"input": "Search for \"www.athabasca\" in all files under current directory", "output": "find . -exec grep \"www.athabasca\" '{}' \\; -print"}
{"input": "Creates temporary folder and save path to that in a TMPDIR variable.", "output": "TMPDIR=$(mktemp -d)"}
{"input": "Report file systems disk usage using POSIX output format.", "output": "df -P"}
{"input": "List all regular files in the current directory tree", "output": "find . -type f -exec ls -l '{}' \\;"}
{"input": "Extracts single file 'filename' from bzip2-compressed tarball archive.tbz.", "output": "bzip2 -dc archive.tbz | tar xvf - filename"}
{"input": "display the number of lines in all the php files in the current folder", "output": "find -name '*php' | xargs cat | wc -l"}
{"input": "find all normal/regular files in current folder an save the output to the files /tmp/grep1 & /tmp/grep2", "output": "find ./ -type f | tee /tmp/grep1 /tmp/grep2 >/dev/null"}
{"input": "Recursively add \".jpg\" to all files in the current directory tree", "output": "find . -type f -exec mv '{}' '{}'.jpg \\;"}
{"input": "Recursively finds all files with whole word \"pattern\" in a current folder, and precedes found string with its number in file.", "output": "grep -rnw `pwd` -e \"pattern\""}
{"input": "Find all .txt files under the current directory and below", "output": "find . -name '*.txt' -print0"}
{"input": "Count the number of matches for the regex '\\<exception\\>'  in all *.txt files under /usr/share/doc/ directory", "output": "cat $(find /usr/share/doc/ -name '*.txt') | zegrep -ic '\\<exception\\>'"}
{"input": "search a url in all regular/normal files in a folder.", "output": "find ./ -type f -exec grep https://www.ksknet.net {} \\;"}
{"input": "Find files/directories under current directory without descending into it", "output": "find -prune"}
{"input": "search for text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search) and display their contents", "output": "find /home/you -iname \"*.txt\" -mtime -60 -exec cat {} \\;"}
{"input": "Create intermediate directories \"b and \"c\" as required and directory \"c\"", "output": "mkdir -p a/b/c"}
{"input": "search for all the regular/normal files in the current folder which start with \"my\"", "output": "find . -name 'my*' -type f"}
{"input": "Find all files/directories with 777 permission under '/apps/audit' and strip write permission for 'other' from them", "output": "find /apps/audit -perm -7 -print | xargs chmod o\u2011w"}
{"input": "Execute Shell script with find comamnd", "output": "find -maxdepth 0 -name \"*.sh\"  -exec ./lastline.sh {} \\;"}
{"input": "find all the files in the current folder that have been accessed in today from the start of the day", "output": "find -daystart   -atime 0"}
{"input": "Find all regular files in the current directory tree ignoring GIT and SVN directories", "output": "find . \\( -type d -regex '^.*/\\.\\(git\\|svn\\)$' -prune -false \\) -o -type f -print0"}
{"input": "find the oldest normal file in the current directory and display its contents", "output": "find -type f -printf \"%T+ %p\\0\" | sort -z | grep -zom 1 \".*\" | cat"}
{"input": "Find all files, folders, symlinks, etc matching pattern \"*.php\" in the current directory recursively", "output": "find . -name \\*.php"}
{"input": "List all regular files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -type f -mmin -60 -print0 | xargs -r0 ls -l"}
{"input": "Remove symbolic links and get absolute path of \"${the_stuff_you_test}\" and save to variable \"DIR_PATH\"", "output": "DIR_PATH=`readlink -f \"${the_stuff_you_test}\"`"}
{"input": "Print the IP addresses for the current host name", "output": "hostname -I | awk '{print $1}'"}
{"input": "Print the contents of \"order.txt\"", "output": "cat order.txt"}
{"input": "Find all files in the current directory tree and count them", "output": "find | wc -l"}
{"input": "Run an awk program on every TXT file found in the current directory tree", "output": "find . -name '*txt' -print -exec awk 'BEGIN {nl=1 ;print FILENAME} $9 !=\"\" {if (nl<11) { print $0 ; nl = nl + 1 }}' {}  \\;"}
{"input": "List the last entry of the numerically sorted list of all files and folders under \"/foldername\"", "output": "find /foldername | sort -n | tail -1"}
{"input": "Delete empty lines from standard input", "output": "sed -n \"s/^$//;t;p;\""}
{"input": "Deletes folder like /tmp/*/* or deeper, older than +7 days if they don`t contain files or other folders.", "output": "find /tmp/*/* -mtime +7 -type d -exec rmdir {} \\;"}
{"input": "Remove the last file extension from \"filename.gz\"", "output": "echo \"filename.gz\"     | sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn -exec rm -v {} \\;"}
{"input": "delete all files in $DIR that have not been accessed in at least 5 days", "output": "find \"$DIR\" -type f -atime +5 -exec rm {} \\;"}
{"input": "Changes group ownership of 'myprog' to 'groupb'.", "output": "chgrp groupb myprog"}
{"input": "Add read and execute permission to every directory under the current directory", "output": "find . -type d -exec chmod +rx {} \\;"}
{"input": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"", "output": "find . -iname .svn -print0 | xargs -0 rm -rf"}
{"input": "Find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago", "output": "find -mtime +0"}
{"input": "Creates temporary folder in a TMPDIR folder or /tmp folder if TMPDIR doesn`t defined, with folder name like current shell name and 10-letter suffix, and saves created path in 'mydir' variable.", "output": "mydir=$(mktemp -d \"${TMPDIR:-/tmp/}$(basename $0).XXXXXXXXXXXX\")"}
{"input": "Execute \"ls\" every second", "output": "watch -n 1 ls"}
{"input": "Shifts the positional parameters to the left by 1.", "output": "shift"}
{"input": "search for all html files in a folder and create a zip file of all these files", "output": "find /your/path/ -type f -name \"*.html\" | xargs zip all_html_files.zip"}
{"input": "Search for broken symlinks", "output": "find -L -type l"}
{"input": "Make directory \"alpha_real\"", "output": "mkdir alpha_real"}
{"input": "Recursively changes group ownership of every folder in a current directory to the name of that folder.", "output": "find . -type d | sed -e 's/^\\.\\///g' -e 's/^\\./avoid/g' | grep -v avoid | awk '{print $1\"\\t\"$1}' | xargs chgrp"}
{"input": "find all jpg images starting with image in the folder \"dir\" and give them as input to the script, script.ksh", "output": "find dir -name image\\*.jpg -exec /bin/ksh script.ksh {} \\;"}
{"input": "Unzip \"some.file.gz\" to standard output", "output": "gunzip < some.file.gz"}
{"input": "Find writable files in the current directory tree", "output": "find . -writable"}
{"input": "Find all *.htm files under current directory", "output": "find -type f -name \"*.htm\""}
{"input": "Find all files which  are accessed after modifying /etc/passwd files.", "output": "find -newer /etc/passwd"}
{"input": "Print the list of all regular files residing in the current directory and below", "output": "find ./ -type f -print"}
{"input": "Print \"RDBMS exit code : $RC  \" to the console and append to \"${LOG_FILE}\"", "output": "echo \" RDBMS exit code : $RC  \"     | tee -a ${LOG_FILE}"}
{"input": "download content from \"http://search.twitter.com/search.json?q=node.js\" and format it as json", "output": "curl -s http://search.twitter.com/search.json?q=node.js | json"}
{"input": "search the entire file system for the file \"jan92.rpt\"", "output": "find / -name jan92.rpt -print"}
{"input": "Print the gcc version installed on \"machine.example.com\" using identity file \"identity_file\" and suppressing the known hosts check and warnings", "output": "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet -i identity_file machine.example.org gcc -dumpversion"}
{"input": "display all the files in the current folder except those whose name is \"PERSONAL\"", "output": "find . -name PERSONAL -prune -o -print"}
{"input": "Create intermediate directories as required and directory /tmp/test/blah/oops/something", "output": "mkdir -p /tmp/test/blah/oops/something"}
{"input": "Print line number \"${linenum}\" in file \"$filename\"", "output": "cat $filename | sed \"${linenum}p;d\";"}
{"input": "download contents from \"http://example.com/\" using a socks5 proxy \"125.119.175.48:8909\"", "output": "curl --socks5 125.119.175.48:8909 http://example.com/"}
{"input": "Create empty file (or update timestamp to current date/time if file already exists) named with full timestamp (year/month/day/hour/minute/second).", "output": "touch filename_`/bin/date +%Y%m%d%H%M%S`.txt"}
{"input": "List files greater than 1024KB under /path/to/directory and print the time and size on stdout", "output": "find /path/to/directory -type f -size +1024k -exec ls -lh {} \\; | awk '{ print $8 \": \" $5 }'"}
{"input": "Search for the extended grep regex 'expr' in all files with '.c' and '.h' extension under current directory tree", "output": "find . -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "search for all the jpg files in the folder \"/mnt/hda1/zdjecia/test1/\" and create a directory in /mnt/hda1/test with the same name as the mp3 file", "output": "find /mnt/hda1/zdjecia/test1/ -type f -iname \u2018*.jpg\u2019 -printf \u2018%\u2019h\u2019\\'\u201d0\u2033 | xargs -0 -I \u2018{}\u2019 mkdir -p /mnt/hda1/test/{} \\;"}
{"input": "find all the text files in current folder and change the extension of these files and move them to another folder", "output": "find ./ -name \\*.txt | perl -p -e 's/^(.*\\/(.*)\\.txt)$/mv $1 .\\/foo\\/$2.bar.txt/' | bash"}
{"input": "display a long listing of all the normal/regular files in the current folder (print0 is used to handle files which have newlines in their names or files with the name only as spaces )", "output": "find . -type f -print0 | xargs -0 ls -l"}
{"input": "display a long listing of all the files in the current folder", "output": "find . \u2014 type f -exec ls -1 {} \\;"}
{"input": "Find files owned by nonexistent groups", "output": "find / -nogroup -print"}
{"input": "List the files from the current directory tree that contain lines approximately matching regular expression '^Subject:.*unique subject'", "output": "find . -type f -print | xargs agrep -2 -il '^Subject:.*unique subject'"}
{"input": "Interpret in the current shell all lines in config.sh which contain the word \"marker\"", "output": "source <( grep \"marker\" config.sh )"}
{"input": "list regular files under the current directory ending in .mbox putting a null between each file found", "output": "find . -type f -wholename \\*.mbox -print0"}
{"input": "List screen IDs", "output": "screen -r"}
{"input": "Search directory trees foo and bar for .java files", "output": "find foo bar -name \"*.java\""}
{"input": "open interactive list of jobs to select from", "output": "fg `jobs | iselect -a | grep -o [0-9]*`"}
{"input": "Find all files and directories whose names end in \".rpm\", ignoring removable media, such as cdrom, floppy, etc.", "output": "find / -xdev -name \\*.rpm"}
{"input": "Save absolute path of the script filename in variable \"SCRIPT\"", "output": "SCRIPT=\"$(readlink --canonicalize-existing \"$0\")\""}
{"input": "Display the count of regular files under 'home/magie/d2' directory tree which have execute permission to all the users", "output": "find home/magie/d2 -type f -perm +111 | wc -l"}
{"input": "Saves value '1' in the $PIPESTATUS variable and returns 0.", "output": "false | tee /dev/null"}
{"input": "Recursively finds all '*.pdf' files in a current folder and removes them.", "output": "find . -name \"*.pdf\" -exec rm {} \\;"}
{"input": "Save the full path of command \"f\" to variable \"full_f\"", "output": "full_f=\"$(which f)\""}
{"input": "Display the files/directories under current directory tree matching the regex '/$prefix$ypatt' where $prefix and $ypatt expands in the current shell", "output": "find . -print | grep \"/${prefix}${ypatt}\""}
{"input": "change the permissions of all the regular/normal files in the folder \"/path/to/someDirectory\" to 644", "output": "sudo find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644"}
{"input": "Find and remove all .txt regular files under the current directory and below", "output": "find . -type f -name \"*.txt\" -exec rm -f {} \\;"}
{"input": "delete all files in the home directory which ahve the name core in them", "output": "find ~/ -name 'core*' -exec rm {} \\;"}
{"input": "Find all files under /usr/tom that matches the extended regex '*.pl| *.pm'   in their names and also matches the regex <PATTERN> in their contents", "output": "find /usr/tom | egrep '*.pl| *.pm' | xargs cat | grep <PATTERN>"}
{"input": "Find all the files on the system that have been changed within the last hour", "output": "find / -cmin -60"}
{"input": "Move all files and directories in the current directory to \"somewhere/\"", "output": "mv `ls` somewhere/"}
{"input": "Find links that point to nothing", "output": "find / -type l -print | perl -nle '-e || print';"}
{"input": "show all the \".flac\" files in the current folder and do not search in the sub directories", "output": "find . -maxdepth 1 -type f -name '*.flac'"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names", "output": "find /home -type f -name \"*.ext\" -print0 | while read -r -d \"$(printf \"\\000\")\" -r path; do cat $path | tr -d '\\r' > $path\"_new\"; done"}
{"input": "Prints list of processes in system ascending by memory usage.", "output": "ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS"}
{"input": "create a link to all the html or htm files in the current folder which have been changed in the last 30*24 hours", "output": "find \\( -name \"*.htm\" -o -name \"*.html\" \\) -a -ctime -30 -exec ln {} /var/www/obsolete \\;"}
{"input": "find all the shell scripts or perl files in the current directory", "output": "find . -type f \\( -name \"*.sh\" -o -name \"*.pl\" \\)"}
{"input": "find all the files ending with undo in the current folder and calculate the total size of these files", "output": "find . -name \"*.undo\" -ls | perl -lane '$t += $F[6]; END{print $t}'"}
{"input": "Lists all files and folders with its content in a current folder, excluding names starting with 'b'.", "output": "ls !(b*)"}
{"input": "Archive \"./dir\" to \"user@host:/path\" via ssh on port 2222 and display progress", "output": "rsync -rvz -e 'ssh -p 2222' --progress ./dir user@host:/path"}
{"input": "Find files changed in the last 1 day", "output": "find . -mtime -1 -type f"}
{"input": "Filters out all comments from the output of the command \"crontab -u $user -l\" ignoring errors", "output": "crontab -u $user -l 2>/dev/null | grep -v '^#'"}
{"input": "Search for lines that have zero or more whitespace characters before \"http://\" and number the uniquely sorted output", "output": "grep '^[[:space:]]*http://' | sort -u | nl"}
{"input": "Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree", "output": "find -O3 \"$save_path\" -depth -mindepth 1 -name 'sess_*' -ignore_readdir_race -type f -cmin \"+$gc_maxlifetime\" -delete"}
{"input": "display all the text files in current folder and save the output to a file", "output": "find . -name \"*.txt\" -printf \"%f\\n\" > /tmp/a"}
{"input": "Find all *.rb files/directories under current directory", "output": "find . -name *.rb"}
{"input": "Write 200 lines of \"this is the text I want to add to a file\" to myFile.txt", "output": "yes \"this is the text I want to add to a file\"|head -200>myFile.txt"}
{"input": "Go to directory /some/where/long", "output": "cd /some/where/long"}
{"input": "change owner of the file \"file\" to user user_name", "output": "chown user_name file"}
{"input": "recursively convert all symlinks under the current working folder to its regular file", "output": "find . -type l | while read f; do /bin/cp -rf --remove-destination -f $(find . -name $(readlink \"${f}\")) \"${f}\";done;"}
{"input": "Unzip \"file.gz\" and print each line with the 5th \" or | separated field greater than 5", "output": "zcat file.gz | awk -F'[|\"]' '$5>5'"}
{"input": "Read a single character from standard input into variable \"key\" without backslash escapes, with a timeout of 5 seconds, and with the prompt \"Press any key in the next five seconds...\"", "output": "read -t5 -n1 -r -p 'Press any key in the next five seconds...' key"}
{"input": "Display the mount point of a device file \"$path\"", "output": "mount | grep \"^$path\" | awk '{print $3}'"}
{"input": "find all directories with the name like \"????-??-??\" and which have not been modified in the last 24 hours in the folder /volume1/photo/ipcam and send them as input to the script in the exec section", "output": "find /volume1/photo/ipcam -maxdepth 1 -type d -name \"????-??-??\" -mtime +0 -exec sh -c 'echo /home/pi/Dropbox-Uploader/dropbox_uploader.sh move /ipcam/$(basename {}) /ipcam/archive' \\;"}
{"input": "Copy local file \"file\" via ssh to remote \"host\" path \"/directory/\"", "output": "rsync -e ssh file host:/directory/."}
{"input": "List all leaf directories of the current directory tree", "output": "find . -type d -execdir sh -c 'test -z \"$(find \"{}\" -mindepth 1 -type d)\" && echo $PWD/{}' \\;"}
{"input": "Search folder /home/ABCD/ recursively for regular files", "output": "find /home/ABCD/ -type f -print"}
{"input": "find  files which full path name is foo/bar under foo directory and print", "output": "find foo -path /tmp/foo/bar -print"}
{"input": "Recursively finds 'pattern' in files from current folder, and prints matched string with number only if matching whole word.", "output": "grep -rnw \"pattern\""}
{"input": "Remount \"extX\" filesystem \"/dev/hdaX\" on \"/\" without writing in \"/etc/mtab\"", "output": "mount -n -o remount -t extX /dev/hdaX /"}
{"input": "Search the \"katalogi\" directory tree for files named \"wzorzec\"", "output": "find katalogi -name wzorzec"}
{"input": "Add group write permission to all files in the current directory", "output": "find . -maxdepth 0 -type f -exec chmod g+w {} ';'"}
{"input": "display all the directories in the current folder for the files which have not been accessed in the last 48 hours", "output": "find . -type d -atime +2"}
{"input": "List each unique character in \"file\" prefixed by number of occurrences and sorted from most frequent to least frequent", "output": "grep -o . filename | sort | uniq -c | sort -nr"}
{"input": "list all regular files which path is not dir1 or dir2", "output": "find dir -not \\( -path \"dir1\" -o -path \"dir2\" -prune \\) -type f"}
{"input": "Execute the file utility for each file found under /etc and below", "output": "find /etc -print0 | xargs -0 file"}
{"input": "Change the ownership of all aluno1's files in the current directory and below to aluno2", "output": "find . -user aluno1 -exec chown aluno2 {}"}
{"input": "Generates temporary file name with full path by template 'fifo.XXXXXX' and saves it to variable 'fifo_name'", "output": "fifo_name=$(mktemp -u -t fifo.XXXXXX)"}
{"input": "Runs 'mpv' command for each *.mpv and *.flv file in a current folder.", "output": "mpv --no-audio \\`ls ~/Down/other/*.{mp4,flv} --color=never\\`"}
{"input": "Find all files/directories with '.o' extension under '/lib/modules' directory tree", "output": "find /lib/modules -name '*.o'"}
{"input": "List files named \"accepted_hits.bam\" in the current directory tree prefixing their names with \"somecommand\"", "output": "find `pwd` -name \"accepted_hits.bam\" | xargs -i echo somecommand {}"}
{"input": "find all the \".flac\" files in the current folder and convert them to mp3 with 160k bit rate", "output": "find . -name \"*.flac\" -exec ffmpeg -i {} -ab 160k -map_metadata 0 -id3v2_version 3 {}.mp3 \\;"}
{"input": "Remove everything within parentheses and substitute all non digit characters with a space from \"1/2 [3] (27/03/2012 19:32:54) word word word word 4/5\" and format the output as a table", "output": "echo '1/2 [3] (27/03/2012 19:32:54) word word word word 4/5' | sed -e 's/(.*)//' -e 's/[^0-9]/ /g' | column -t"}
{"input": "Print numbers from 1 to 10 with 2 values per line", "output": "seq 10 | sed 'N;s/\\n/ /'"}
{"input": "Forcibly removes ${temp} file.", "output": "rm --force \"${temp}\""}
{"input": "Print file information of the executable file of command \"g++\"", "output": "ls `which g++` -al"}
{"input": "Find all files/directories named orm.properties in entire file system", "output": "sudo find / -name \"orm.properties\""}
{"input": "display the long listing of all files in /var/log which were modified 60 days or more ago.", "output": "find /var/log/ -mtime +60 -type f -exec ls -l {} \\;"}
{"input": "download contents from website \"www.example.com\" using URL-encoding \"paramName=param\"", "output": "curl --data-urlencode \"paramName=param\" www.example.com"}
{"input": "Continuously answer \"y\" to any prompt from \"mv ...\"", "output": "yes | mv ..."}
{"input": "Archive \"fileToCopy\" to \"/some/nonExisting/dirToCopyTO\" on host \"ssh.myhost.net\" via ssh", "output": "rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO"}
{"input": "list regular file which file name end with 'cache' 'xml' or 'html' in current directory", "output": "find . -type f \\( -name \"*cache\" -o -name \"*xml\" -o -name \"*html\" \\)"}
{"input": "Show the last 10 .conf files found by `find' in the /etc directory and 1 level below", "output": "find /etc -maxdepth 2 -name \"*.conf\" | tail"}
{"input": "Rename \"original.filename\" to \"new.original.filename\"", "output": "mv {,new.}original.filename"}
{"input": "Add \"prefix_\" to every non-blank line in \"a.txt\"", "output": "nl -s \"prefix_\" a.txt | cut -c7-"}
{"input": "Gets IP address of first listed active network interface in system.", "output": "ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -1"}
{"input": "Find all .jpg files in the current directory and below.", "output": "find . -name \u201c*.jpg\u201d"}
{"input": "Counts total number of lines in all file under current folder.", "output": "find ./ -type f -exec wc -l {}  \\; | cut -d' ' -f1 | paste -sd+ | bc"}
{"input": "Find files recursively with extension \"ext\"", "output": "find . -name \"*.ext\""}
{"input": "Numerically sort IPv4 addresses specified on standard input with presedence to first, second, third, then fourth octet", "output": "tr '.' ' ' | sort -nu -t ' ' -k 1 -k 2 -k 3 -k 4 | tr ' ' '.'"}
{"input": "Add '.avi' extension to all files/directories with '.mkv' extension under '/volume1/uploads' directory tree", "output": "find /volume1/uploads -name \"*.mkv\" -exec mv \\{\\} \\{\\}.avi \\;"}
{"input": "split file /usr/bin/firefox into pieces per 1000 lines", "output": "split -n 1000 /usr/bin/firefox"}
{"input": "find all the text files in the current folder starting with \"somefiles-\"", "output": "find . -name \"somefiles-*-.txt\" -type f"}
{"input": "find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir", "output": "find . -type d -mtime 0 -exec mv {} /path/to/target-dir \\;"}
{"input": "Finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within.", "output": "find . -name \"a\" -type d | xargs rmdir"}
{"input": "search for the directory \"mysql\" in the entire file system", "output": "find / -name mysql -type d"}
{"input": "Remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree", "output": "find /tmp -type f -name '*' -mtime +7 -print0 | xargs -0 rm -f"}
{"input": "Find all the files which are modified 50 days back", "output": "find / -mtime 50"}
{"input": "find all the normal/regular files in the current folder which have been accessed in the last 24 hours and display a long listing of them", "output": "find . -type f -atime -1 -exec ls -l {} \\;"}
{"input": "Delete all files in the current directory tree whose names end with ~", "output": "find . -name \"*~\" -delete"}
{"input": "Prepends date to ping output", "output": "ping www.google.com | while read endlooop; do echo \"$(date): $endlooop\"; done"}
{"input": "Delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions", "output": "find / -maxdepth 1 -xdev -type f -exec grep -Zli \"stringtofind\" {} + | parallel -0 sed \"'/./d'\" '{}'"}
{"input": "Write '\"myname=\"Test\"' to the console and append to \"$CONFIG\" as root", "output": "echo \"myname=\\\"Test\\\"\" | sudo tee --append $CONFIG"}
{"input": "Copy the owner and group from \"file.txt\" to \"$tempfile\"", "output": "chown --reference=file.txt -- \"$tempfile\""}
{"input": "Fix files to default permissions 755", "output": "find . -type d -exec chmod 755 {} \\;"}
{"input": "Find all directories under /home/mywebsite/public_html/sites/all/modules and set their permission to 750", "output": "find /home/mywebsite/public_html/sites/all/modules -type d -exec chmod 750 {} +"}
{"input": "Read one character from standard input into variable 'c'", "output": "read -n 1 c"}
{"input": "find all files in current folder using name patterns", "output": "find . -iregex \".*packet.*\""}
{"input": "Find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command", "output": "find -maxdepth 1 -name '*.sql' -exec sed -e 's/ , );/1,1);/g' '{}' + | mysql -D ootp"}
{"input": "Search for first match of the regex 're' in all *.coffee files under current directory", "output": "find . -name \\*.coffee -exec awk '/re/ {print;exit}' {} \\;"}
{"input": "find all the text files in current folder and force delete them", "output": "find . -name \"*.txt\" | xargs rm -rf"}
{"input": "Gets string with IP4 address of en0 network interface.", "output": "ifconfig en0 | grep inet | grep -v inet6"}
{"input": "Find files modified within the past 24 hours", "output": "find . -mtime 0"}
{"input": "Calculate md5sum of the contents of the archives '/tmp/tst.gz', '/tmp/tst.bz2', '/tmp/tst.lzma' and '/tmp/tst.xz'.", "output": "md5sum <(zcat /tmp/tst.gz) <(bzcat /tmp/tst.bz2) <(lzcat /tmp/tst.lzma) <(xzcat /tmp/tst.xz)"}
{"input": "Search $MYGROUP in /etc/group, take the 4th colon (':') separated field, replace comma (',') with newline and save the result to variable 'MYUSERS'", "output": "MYUSERS=`grep $MYGROUP /etc/group | cut -d \":\" -f4| tr \",\" \"\\n\"`"}
{"input": "Remove trailing spaces, replace tabs with spaces, replace Windows CRLF with Unix LF  in all *.java, *.xml and *.css files under current directory excluding ./vendor directory and its contents", "output": "find . -path ./vendor -prune -o \\( -name '*.java' -o -name '*.xml' -o -name '*.css' \\)  -exec gsed -i -E 's/\\t/    /' \\{} \\; -exec gsed -i -E 's/[[:space:]]*$//' \\{} \\; -exec gsed -i -E 's/\\r\\n/\\n/' \\{} \\;"}
{"input": "Search the current directory recursively for regular files with extensions sdw, sdc, sdd and save the search result as \"list_1\"", "output": "find . -type f | egrep '(sdw|sdc|sdd)$' > list_1"}
{"input": "Add read permission for 'other' for all files/directories named 'rc.conf' under current directory tree", "output": "find . -name \"rc.conf\" -exec chmod o+r '{}' \\;"}
{"input": "Create a new directory \"existing-dir/new-dir/\" on host \"node\"", "output": "rsync /dev/null node:existing-dir/new-dir/"}
{"input": "Prints ten latest modified files within the current directory.", "output": "find . -type f -printf '%T@ %p\\n' | sort -n -r | head -${numl} |  cut -f2- -d\" \" | sed -e 's,^\\./,,' | xargs ls -U -l"}
{"input": "Save the short DNS lookup output of $WORKSTATION to 'WORKSTATION_IP' variable", "output": "WORKSTATION_IP=`dig +short $WORKSTATION`"}
{"input": "Calculate the md5 sum of the contents of \"$FILES\"", "output": "cat $FILES | md5sum"}
{"input": "Find all files/directories under current directory and run <script> for each of them", "output": "find -exec <script> {}\\;"}
{"input": "Archive the directory structure under backup directory into directory-structure.tar", "output": "find backup/ -type d | xargs tar cf directory-structure.tar --no-recursion"}
{"input": "Find all files of the user with UID=1000", "output": "find -uid 1000"}
{"input": "Find all files under current directory with their size and paths, reverse sort them numerically, then print the 2nd field (with space as the delimiter) of the first 4 entries", "output": "find -type f -printf \"%s %p\\n\" | sort -nr | head -n 4 | cut -d ' ' -f 2"}
{"input": "Display a long listing of the files/directories with human readable sizes (100M, 10G etc..) under '/var' directory tree which are bigger than 10MB", "output": "find /var/ -size +10M -exec ls -lh {} \\;"}
{"input": "find all files in the home folder that are modified in the last 7 days", "output": "find $HOME -mtime -7"}
{"input": "Recursively copy /path/foo on host \"prod\" to local directory \"/home/user/Desktop\", connecting as ssh username corresponding to local username.", "output": "scp -r prod:/path/foo /home/user/Desktop"}
{"input": "Print file names of all files ending with '*.csv' in  '/home/ABC/files/' directory", "output": "ls /home/ABC/files/*.csv | rev | cut -d/ -f1 | rev"}
{"input": "Read a line from an interactive shell's standard input into variable \"message\" without backslash escapes and prompt $'Please Enter a Message:\\n'", "output": "read -rep $'Please Enter a Message:\\n' message"}
{"input": "Clear the in-memory history and read from the current history file", "output": "history -cr"}
{"input": "Recursively lists all files in a current folder in long format.", "output": "ls -ld $(find .)"}
{"input": "Find all files/directories named 'file1' under current directory tree", "output": "find . -name file1 -print"}
{"input": "Show all files in user's home directory that have read, write and execute permissions set for user, group and others.", "output": "find ~ -perm 777"}
{"input": "Lists all files and folders with its content in a current folder, excluding names ending with 'foo'.", "output": "ls !(*foo)"}
{"input": "Changes group ownership of 'public' and 'private' to 'god'.", "output": "chgrp god public private"}
{"input": "display a long listing of all the files in the current folder that have been accessed in today from the start of the day", "output": "find -daystart   -atime 0 -ls"}
{"input": "Print the path of all the network mounts", "output": "mount | sed -n -e \"s/\\/\\/mynetaddr on \\([^ ]*\\).*$/\\1/p\""}
{"input": "Find all empty directories under $somedir and copy /my/configfile into those directories", "output": "find \"$somedir\" -type d -empty -exec cp /my/configfile {} \\;"}
{"input": "Print \"Total generated: \" followed by the number of unique lines in \"$generated_ports\"", "output": "echo \"Total generated: $(echo \"$generated_ports\" | sort | uniq | wc -l).\""}
{"input": "Print the mount point of the last mounted drive", "output": "mount | tail -1 | sed -e \"s/^[^/]*\\(.*\\) type .*$/\\1/g\""}
{"input": "Find all files in directory tree /tmp/foo and pass them as arguments to script /tmp/echoargs", "output": "find /tmp/foo -exec /tmp/echoargs {} +"}
{"input": "Find all $tofind* files/directories under $parentdir", "output": "find $parentdir -name $tofind*"}
{"input": "Compress all files with '.txt' extension under current directory", "output": "echo *.txt | xargs gzip -9"}
{"input": "Sort \"file1.txt\" and output the result to \"file1.txt\"", "output": "sort -o file1.txt file1.txt"}
{"input": "Start program 'scriptname' with an empty environment.", "output": "env - scriptname"}
{"input": "Set permissions to 644 for all regular files under the current directory tree that have permissions 755", "output": "find . -type f -perm 755 -exec chmod 644 {} \\;"}
{"input": "Find all symbolic links under '/some/directory' driectory tree", "output": "find /some/directory -type l -print"}
{"input": "list files that the user does not have permissions to read, do not try to descend into directories that cannot be read.", "output": "find . ! -readable -prune"}
{"input": "Calculate the md5 sum of the contents of the sorted list of files \"$FILES\"", "output": "cat $(echo $FILES | sort) | md5sum"}
{"input": "Search the current directory tree for files AAA and BBB", "output": "find . \\( -name AAA -o -name BBB \\) -print"}
{"input": "Print 'bla.txt' if at least one file with such name is present below the current directory.", "output": "ls -alFt `find . -name \"bla.txt\"` | rev | cut -d\" \" -f1 | rev | head -1"}
{"input": "Enables shell option 'expand_aliases'.", "output": "shopt -s expand_aliases"}
{"input": "Exclude directory from find . command", "output": "find -name \"*.js\" -not -path \"./directory/*\""}
{"input": "cope *.mp3 files to /tmp/MusicFiles", "output": "find . -type f -name \"*.mp3\" -exec cp {} /tmp/MusicFiles \\;"}
{"input": "Find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command", "output": "find -maxdepth 1 -name '*.sql' -exec sed -e 's/ , );/1,1);/g' '{}' | mysql -D ootp"}
{"input": "Truncate all non-empty regular files under the current directory", "output": "find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i cp /dev/null {}"}
{"input": "display all the files in the current folder and do not search in sub directories and move them to the directory /directory1/directory2.", "output": "find . -maxdepth 1 -type f | xargs -I \u2018{}\u2019 sudo mv {} /directory1/directory2"}
{"input": "Search all *.c files from the current directory tree for \"hogehoge\"", "output": "find . -name \\*.c -print | xargs grep hogehoge"}
{"input": "Correct permissions for directories in the web directory", "output": "find /your/webdir/ -type d -print0 | xargs -0 chmod 755"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*", "output": "find \"$(pwd -P)\" -mtime 0 -not \\( -name '*.swp' -o -regex './es.*' -o -regex './en.*' \\)"}
{"input": "display the files modified between last 18 to 24 months in the format filename, file size, Last access date, modification date and save the output to the file /dir/dir/output.csv", "output": "find /dir/dir -type f -mtime +540 -mtime -720 -printf \\\u201d%p\\\u201d,\\\u201d%s\\\u201d,\\\u201d%AD\\\u201d,|\u201d%TD\\\u201d\\\\n > /dir/dir/output.csv"}
{"input": "display list of all the files in the /tmp folder", "output": "find /tmp/ -exec ls \"{}\" +"}
{"input": "List all files/directories under current directory", "output": "find . -print"}
{"input": "Forcefully remove files *~important-file", "output": "rm -rf *~important-file"}
{"input": "search for all C, C++, Header, JavaScript files in the folder /opt/chromium/src and exclude the search in the path \"/.svn\" and save the output list to CSRC.LST", "output": "find /opt/chromium/src -wholename '*/.svn' -prune -o -type f -regex \".*\\.\\(c\\|cc\\|h\\|js\\)\" -print > CSRC.LST"}
{"input": "Keep the last 3 components (directories) of $path", "output": "echo $path | rev | cut -d'/' -f-3 | rev"}
{"input": "Run command specified by $line, replace space (' ') with newline and save the output to variable 'arr'", "output": "arr=$( $line | tr \" \" \"\\n\")"}
{"input": "In a ssh session, set the variable 'user' to the last dot-separated number of the client's IP address.", "output": "export user=`env|grep -i SSH_CLIENT|cut -d' ' -f1|cut -d'.' -f4`"}
{"input": "Subtract all columns in \"File2\" from \"File1\" except the first", "output": "awk 'FNR==NR { for(i=2;i<=NF;i++) a[$1][i]=$i; next } { for(j=2;j<=NF;j++) $j-=a[$1][j] }1' File2 File1 | rev | column -t | rev"}
{"input": "find for xml files in current folder using regular expressions", "output": "find ./ -regex \"cmn-.*[\\x4e00-\\x9fa5]*\\.xml\""}
{"input": "set alisa \"12np\" for command 'ssh mydomain\\\\stephencheng@userxyz@host.com'", "output": "alias 12np='ssh mydomain\\\\stephencheng@userxyz@host.com'"}
{"input": "Unsets random one from first four array members.", "output": "unset array[`shuf -i 0-3 -n1`]"}
{"input": "Mount partition with label \"WHITE\" on \"/mnt/WHITE\" with read and write permission", "output": "mount -L WHITE /mnt/WHITE -o rw"}
{"input": "set alisa \"py\" for command \"$EDITOR\"", "output": "alias -s py=$EDITOR"}
{"input": "split processed content of the file inout_file into pieces per 2000000 named as \"out-prefix-NNN\"", "output": "sed 's/\\(.....\\)\\(.....\\)/\\1\\n\\2/' input_file | split -l 2000000 - out-prefix-"}
{"input": "Print lines in the sorted contents of \"a.txt\" that are not in the sorted contents of \"b.txt\"", "output": "comm -23 <(sort a.txt) <(sort b.txt)"}
{"input": "Copy all \".xml\" files in the current directory tree to \"/new/parent/dir\" preserving the directory hierarchy", "output": "find . -name \\*.xml -print0 | cpio -pamvd0 /new/parent/dir"}
{"input": "Print bash environment variable array \"fields\" and its values", "output": "set | grep ^fields=\\\\\\|^var="}
{"input": "Recursively find all files ending with '*.txt' and print they names and content", "output": "find  . -name \\*.txt -print -exec cat {} \\;"}
{"input": "find all the files in the home folder which have been modified today", "output": "find ~ -type f -mtime 0"}
{"input": "display all the regular/normal files in the entire file system", "output": "find / -type f -exec echo {} \\;"}
{"input": "run command \"/usr/bin/psql database -c \\\"SELECT 'DROP TABLE ' || .... \" as user postgres", "output": "su - postgres -c \"/usr/bin/psql database -c \\\"SELECT 'DROP TABLE ' || .... \""}
{"input": "Compare column 3 with column 2 of the next line in \"file\" and format output as a table", "output": "awk 'NR==1 { print; next } { print $0, ($1 == a && $2 == b) ? \"equal\" : \"not_equal\"; a = $1; b = $3 }' file | column -t"}
{"input": "Print the file names along with their sizes under current directory tree", "output": "find . -type f -printf \"%f %s\\n\""}
{"input": "Execute script \"your_command_here\" for each file from directory tree /target/path passing the filename as an argument to the script", "output": "find /target/path -type f -exec your_command_here \\{\\} \\;"}
{"input": "Find links to file path/to/foo.txt", "output": "find -L / -samefile path/to/foo.txt"}
{"input": "Make directory \"TestProject\"", "output": "mkdir TestProject"}
{"input": "Find all regular .mp3 files larger than 10M and delete them", "output": "find / -type f -name *.mp3 -size +10M -exec rm {} \\;"}
{"input": "Update 'openssl' package to '2013.09' version.", "output": "sudo yum --releasever=2013.09 update openssl"}
{"input": "Write \"ee\" to standard output on \"/dev/pty/2\" and as input to command \"foo\"", "output": "echo ee | tee /dev/pty/2 | foo"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree", "output": "find . -type f | grep -o -E '\\.[^\\.]+$' | sort -u"}
{"input": "Removes alias with 'sudo' name.", "output": "unalias sudo"}
{"input": "Continuously convert \"20131202\" into \"2013 12 02\" and print the result", "output": "yes a=\\\"20131202\\\" | sed -e :a -e 's/...\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)./\\1 \\2 \\3/'"}
{"input": "print bindings for \"p\" and \"e\" with no case sensitivity", "output": "bind -p|grep -i '\"[pE]\"'"}
{"input": "Find all files under current directory excluding hidden files", "output": "find . -depth -path './.*' -prune -o -print"}
{"input": "find all the text files in the current directory which have been modified in the last 4 days and not today and copy them to another folder", "output": "find . -name \"*.txt\" -type f -daystart -mtime -4 -mtime +0|xargs -i cp {} /home/ozuma/tmp"}
{"input": "Display differences between /tmp/test1 and /tmp/test2.", "output": "diff /tmp/test1  /tmp/test2"}
{"input": "Set the 'xtrace' shell option", "output": "set -x"}
{"input": "find all text files in current folder and delete them", "output": "find . -name \".txt\" -exec rm \"{}\" \\;"}
{"input": "Find all files under /home/username/public_html/sites/all/themes and set their permission to 640", "output": "find /home/username/public_html/sites/all/themes -type f -exec chmod 640 {} +"}
{"input": "display a long list of all the directories which have files ending with \".todo\"", "output": "find \"$STORAGEFOLDER\" -name .todo -printf '%h\\n' | uniq | xargs ls -l"}
{"input": "Find all *.ogg (case insensitive) files/directories under your home directory", "output": "find $HOME -iname '*.ogg'"}
{"input": "Give all directories in the /path/to/base/dir tree read and execute privileges", "output": "find /path/to/base/dir -type d -print0 | xargs -0 chmod 755"}
{"input": "Use multiple -exec command in find . Find all .txt files & grep banna in .txt files .", "output": "find . -name \"*.txt\" -exec echo {} \\; -exec grep banana {} \\;"}
{"input": "Count the number of total files and folders under current directory tree", "output": "find . -print0 | tr -cd '\\0' | wc -c"}
{"input": "Search the current directory recursively for regular files last accessed more than 2 days ago", "output": "find . type -f -atime +2"}
{"input": "Find all *.rb (regular) files under current directory and count their line numbers ensuring white space safety on file name/path.", "output": "find . -name \"*.rb\" -type f -print0 | xargs -0 wc -l"}
{"input": "Find all *.tex regular files in maximum 2 levels down the current directory", "output": "find . -type f -maxdepth 2 -name \"*.tex\""}
{"input": "Gets IP address of 'eth0' network interface.", "output": "ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}'"}
{"input": "Save the full path of the current script into variable \"THIS\"", "output": "THIS=`readlink -f \"${BASH_SOURCE[0]}\" 2>/dev/null||echo $0`"}
{"input": "Copies file 'test' to each of directories like './fs*/*'.", "output": "echo ./fs*/* | xargs -n 1 cp test"}
{"input": "Delete all contents form the files that contain the regex 'string' in maximum 1 level down the / directory excluding other partitions", "output": "find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.//g'"}
{"input": "Find all SGID set files in the file system", "output": "find / -perm /g=s"}
{"input": "Recursively removes all files like '*.r*' in current folder and removes folders with such files if they become empty.", "output": "find ./ -type f -name '*.r*' -delete -printf \"%h\\0\" | xargs -0 rmdir"}
{"input": "search for all xml files in some directory", "output": "I'm assuming you only want to zip files that match names in $Namese. In your script, try replacing the find command with:  export Namese  find /var/tmp/ -type f -name '*.xml'"}
{"input": "Move all files from the `sourceDir' directory tree to the `destDir' directory", "output": "find sourceDir -mindepth 1 -print0 | xargs -0 mv --target-directory=destDir"}
{"input": "Installs all packages from a '/home/pkglist.txt' list, answering 'yes' on all questions.", "output": "cat /home/pkglist.txt | xargs yum -y install"}
{"input": "Find all files/directories in entire file system that match the pattern '<name_pattern>' in their names and print a sorted list of their unique parent directory paths", "output": "find / -name '<name_pattern>' | perl -pe 's/(.*\\/).*$/$1/' | sort | uniq"}
{"input": "search for all the files excluding directories ending with old or sccs or core or orig in the project folder and append the output to the file exclude", "output": "find . -type f -print | \\ egrep  '/,|%$|~$|\\.old$|SCCS|/core$|\\.o$|\\.orig$' >>Exclude"}
{"input": "Installs all packages from a current folder, excluding ones that match pattern '*glob*'.", "output": "yum install --exclude='*glob*' *.rpm"}
{"input": "show all the mp3 files in the folder /home", "output": "find /home -type f -name '*.mp3'"}
{"input": "display all html files in current folder and replace some pattern in all these files", "output": "find -name \"*.htm\" | while read file; do sed \"s|<title>sometext</title>|<title>${file##*/}</title>|g\" -i $file; done"}
{"input": "delete all the files in the current folder", "output": "find . -delete"}
{"input": "Archive all files specified on standard input under \"/path/to/files\" to \"/path\" on host \"targethost\" as user \"user\" with escalated privileges", "output": "rsync -av --files-from=- --rsync-path=\"sudo rsync\" /path/to/files user@targethost:/path"}
{"input": "Print comma separated gaps in file \"file\" that contains new line separated ordered numbers", "output": "seq $(tail -1 file)|diff - file|grep -Po '.*(?=d)'"}
{"input": "Copy all files matching \"file_name.extension\" to \"/path/to/receiving/folder\" preserving directory hierarchy", "output": "find . -name 'file_name.extension' -print | cpio -pavd /path/to/receiving/folder"}
{"input": "Request IP address of 'myip.opendns.com' from name server 'resolver1.opendns.com'", "output": "dig +short myip.opendns.com @resolver1.opendns.com"}
{"input": "Find all php files whose name is tecmint.php in the current directory", "output": "find . -type f -name tecmint.php"}
{"input": "Find all the files/directories with '.conf' extension under '/etc' directory non-recursively and display the last ten files", "output": "find /etc -maxdepth 1 -name \"*.conf\" | tail"}
{"input": "Prints path to folder that contains target of the symbolic link ../../../../etc/passwd.", "output": "$(dirname $(readlink -e ../../../../etc/passwd))"}
{"input": "Find all files/directories that were modified after February 1st under '/usr' directory tree", "output": "find /usr -newermt \"Feb 1\""}
{"input": "Find all files under current directory that were modified less than 1 day ago", "output": "find -mtime -1"}
{"input": "Recursively copy everything in /source/path whose name doesn't begin with a period, to /destination/path, without overwriting existing files, and outputting a line for each file copied or skipped.", "output": "cp -Rvn /source/path/* /destination/path/"}
{"input": "Find all directories under current directory", "output": "find . -type d"}
{"input": "Find all *.log files under path/ that do not contain \"string that should not occur\"", "output": "find path/ -name '*.log' -print0 | xargs -r0 grep -L \"string that should not occur\""}
{"input": "Find all files/directories in entire file system for which owner has read/write/execute permissions, or the group has at least execute permission, or others have at least execute permission", "output": "find / -perm /711"}
{"input": "display all the files ending with .c in the current folder", "output": "find . -name \\*.c -print0"}
{"input": "Display the contents of \"text\"", "output": "cat text"}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them suppressing error messages", "output": "find MyApp.app -name Headers -type d -exec rm -rf \"{}\" \\; 2>/dev/null"}
{"input": "Rename \"Tux.png\" to \".Tux.png\"", "output": "mv Tux.png .Tux.png"}
{"input": "Recursively changes group ownership of everything within '.git' to 'git'.", "output": "chgrp -R git .git"}
{"input": "find all the files in current folder which have been updated in the last 60 minutes", "output": "find . -mmin -60"}
{"input": "Find all files/directories under minimum 1 level down the $FOLDER directory and sort them", "output": "find \"$FOLDER\" -mindepth 1 | sort"}
{"input": "search for all the directories ending with \".mp3\" in the file system and move them to the folder /mnt/mp3", "output": "find / -iname \"*.mp3\" -type d -exec /bin/mv {} /mnt/mp3 \\;"}
{"input": "Find all .sh files in the current directory tree and remove them", "output": "find . -name \"*.sh\" -print0 | xargs -0 rm -rf"}
{"input": "Assign a name when starting a screen session", "output": "screen -r 'name'"}
{"input": "Mount \"/windows\" using /etc/fstab entry", "output": "mount /windows"}
{"input": "Search for all directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.", "output": "find . -iname foo -type d"}
{"input": "Make directory \"/cpuset\"", "output": "mkdir /cpuset"}
{"input": "find all the files starting with \"config\" in the folder Symfony", "output": "find Symfony -name '*config*';"}
{"input": "Write output of \"foo\" to standard output and to \"output.file\"", "output": "foo | tee output.file"}
{"input": "Save the line number matching \"}]\" in lines starting with \"item_1\" to \"item_2\" in \"itemlist.json\" to variable \"line_to_be_replaced\"", "output": "line_to_be_replaced=`cat itemlist.json | nl |  sed -n '/\"item_1\"/,/\"item_2\"/p' | grep -in \"}]\" | awk '{print $2}'`"}
{"input": "Output success.txt omitting lines whose first field appears in fail.txt - lines in fail.txt must appear in the same order as they do in success.txt.", "output": "join -v1 success.txt fail.txt"}
{"input": "Display the file type description of /bin/bash, ie. symbolic link, ELF executable, etc.", "output": "$ file /bin/bash"}
{"input": "Find all files/directories in entire file system for which owner has at least read/write permissions, or the group has at least read permission, or others have at least read permission", "output": "find / -perm /u+rw,g+r,o+r"}
{"input": "list all javascipts file which whole name does not contain excludeddir or excludedir2  or excludedir3", "output": "find . -name '*.js' | grep -v excludeddir | grep -v excludedir2 | grep -v excludedir3"}
{"input": "Kills all child process and process itself having id 24901.", "output": "kill `pstree -p 24901 | sed 's/(/\\n(/g' | grep '(' | sed 's/(\\(.*\\)).*/\\1/' | tr \"\\n\" \" \"`"}
{"input": "Edit the cron job list for user 'wwwrun' using default editor specified by the EDITOR environment variable, or /usr/bin/editor if no default editor is specified.", "output": "sudo crontab -u wwwrun -e"}
{"input": "Search the current directory tree for files named \"somename\", case insensitive", "output": "find -iname 'somename'"}
{"input": "List all files/directories under /data1/Marcel with their file information which are greater than 524288 bytes and were modified or accessed more than 1 year ago", "output": "find /data1/Marcel -size +1024  \\( -mtime +365 -o -atime +365 \\) -ls -exec file {} \\;"}
{"input": "Go into the first directory whose name contains 1670", "output": "cd `ls -d */ | grep 1670`"}
{"input": "Search directory tree $DIR for *.txt files", "output": "find \"$DIR\" -name \\*.txt"}
{"input": "Save the md5 sum of $twofish to variable 'twofish'", "output": "twofish=`echo -n $twofish | md5sum | tr -d \"  -\"`"}
{"input": "display all the ip addresses in all the files that are present in /etc folder", "output": "find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;"}
{"input": "Find all files that were last accessed less than7 days ago under /home", "output": "find /home -mtime -7"}
{"input": "Check that the master SSH control socket \"my-ctrl-socket\" to \"jm@sampledomain.com\" is running", "output": "ssh -S my-ctrl-socket -O check jm@sampledomain.com"}
{"input": "Search all files in the current directory tree that are named \"whatever\" for \"you_search_for_it\"", "output": "find -name whatever -exec grep --with-filename you_search_for_it {} \\;"}
{"input": "Find all files under current directory that are larger than 10KB in size", "output": "find . -type f -size +10k"}
{"input": "Change permissions of all regular files from the current directory tree to 644", "output": "find . -type f -exec chmod 644 {} +"}
{"input": "searches through the /usr directory for the regular  file named 'Chapter1*'", "output": "find /usr -name \"Chapter*\" -type f"}
{"input": "Write the standard output and error of \"ls\" to the console and append it to \"/tmp/ls.txt\"", "output": "ls 2>&1 | tee --append /tmp/ls.txt"}
{"input": "Counts the number of lines in each file but png|jpg|ico files in a git repository.", "output": "git ls-files | grep -vE \"(png|jpg|ico)\" | xargs wc -l"}
{"input": "Make directory \"/tmp/new\"", "output": "mkdir /tmp/new"}
{"input": "Search the system for *.rpm files ignoring removable media", "output": "find / -xdev -name \\*.rpm"}
{"input": "Print the file content of command \"[whatever]\"", "output": "cat `find [whatever]`"}
{"input": "find regular files and directories that have been modified in the last seven days", "output": "find . -mtime -7 -type f"}
{"input": "Recursively set all permissions under \"/directory\" to 755", "output": "chmod -R 755 /directory"}
{"input": "Search the *.pdf files from directory tree PDFs/ for text \"perry sound\", ignoring the case", "output": "find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep -i --with-filename --label=\"{}\" --color \"perry sound\"' \\;"}
{"input": "unsafed rm all file which name start with '#'", "output": "find / -name '#*' -atime +7 -print | xargs rm"}
{"input": "Recursively search for all directories containing \"foo\" (case insensitive) under the current directory, renaming them to replace \"foo\" (case insensitive) with \"Bar\"", "output": "find . -type d -iname '*foo*' -depth -exec rename 's@Foo@Bar@gi' {} +"}
{"input": "Find all *.gz files/directories under asia and emea directory", "output": "find asia emea -name \\*.gz"}
{"input": "Find all files/directories in directories/files taken from the glob pattern '/tmp/test/*' that were modified within the last day (day counted from today)", "output": "find /tmp/test/* -daystart -mtime -1"}
{"input": "Subtract each column in File2 from matching column in File1, output the result in a similarly formatted table", "output": "awk 'FNR==NR { for(i=2;i<=NF;i++) a[$1][i]=$i; next } { for(j=2;j<=NF;j++) $j-=a[$1][j] }1' File2 File1 | rev | column -t | rev"}
{"input": "Print the entire saved command history", "output": "history"}
{"input": "display all the text files in current folder", "output": "find . -name \"*.txt\" -printf \"%f\\n\""}
{"input": "find md5sum of string 'hi'", "output": "echo -n hi | md5"}
{"input": "Find all 100MB files in file system and delete them using rm command", "output": "find / -size +100M -exec rm -rf {} \\;"}
{"input": "Find and uncompress all files in the current directory tree ending in \".csv.gz\"", "output": "find . -name '*.csv.gz' -print0 | xargs -0 -n1 gzip -d"}
{"input": "Search directory $CURR_DIR for regular files that were changed, accessed, or modified $FTIME days ago", "output": "find ${CURR_DIR} -type f \\( -ctime ${FTIME} -o -atime ${FTIME} -o -mtime ${FTIME} \\) -printf \"./%P\\n\""}
{"input": "Save the list of *.au files in the current directory tree to file `names.txt'", "output": "find -type f -name '*.au' > names.txt"}
{"input": "Split \"<file_name>\" into files of at most 1024 KiB in size", "output": "split -b 1024k <file_name>"}
{"input": "Set IFS variable to empty before reading a line of standard input without backslash escape characters", "output": "IFS= read -r line"}
{"input": "Search in the current directory and all sub-directories except ./D for the file named hi.dat", "output": "find -path ./D -prune -o -name hi.dat -print"}
{"input": "display all the files in the file system excluding all the \".c\" files", "output": "find / \\! -name \"*.c\" -print"}
{"input": "Find all 777 permission files in entire file system and set permissions to 644", "output": "find / -type f -perm 0777 -print -exec chmod 644 {} \\;"}
{"input": "Print \"echo ping -c 2\" on each string in file 'ips'", "output": "cat ips | xargs -n1 echo ping -c 2"}
{"input": "Find all directories under /path/to/dir and change their permission to 755", "output": "find /path/to/dir -type d -exec chmod 755 {} +"}
{"input": "Print the list of the current directory's subdirectories", "output": "find . -maxdepth 1 -mindepth 1 -type d -printf '%f\\n'"}
{"input": "Show total memory used by processes in MB", "output": "ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(\"%13.2f Mb \",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf(\"%s \",$x) } print \"\" }' | awk '{total=total + $1} END {print total}'"}
{"input": "Print the list of all regular files on the system using \"echo\"", "output": "find / -type f -exec echo {} \\;"}
{"input": "Find all directories under current directory excluding  directories (along with their contents) that start with a . (dot) in their names", "output": "find . -type d -a ! -name '.?*' -o -name '.?*' -a ! -prune"}
{"input": "Find all files/directories not with the name 'query_to_avoid' under current directory", "output": "find \\! -name \"query_to_avoid\""}
{"input": "Search for files/directories which have read and write permission for their owner, and group and only read permission for others", "output": "find . -perm 664"}
{"input": "Print mount point of the file system containing $path.", "output": "df --output=target \"$path\" | tail -1"}
{"input": "download contents of a website \"http://example.com/\"", "output": "curl http://example.com/"}
{"input": "find files changed in the last 1 day", "output": "find . -mtime -1 -type f"}
{"input": "Format the output of \"rub-script.rb\" as a tab separated table", "output": "ruby-script.rb | column -s $'\\t' -t"}
{"input": "Search the current directory tree for regular files that can be read by noone", "output": "find -type f ! -perm -444"}
{"input": "search for directories in the folder \"test\" which end have 5 digits as their name", "output": "find ./test -type d -name '[0-9][0-9][0-9][0-9][0-9]'"}
{"input": "Changes group ownership of 'logdir' to 'loggroup'.", "output": "chgrp loggroup logdir"}
{"input": "Find directories named `build'", "output": "find . -type d -name build"}
{"input": "Add group write permission to all files and directories in the current directory including hidden files and excluding \"..\"", "output": "chmod g+w .[^.]* ..?*"}
{"input": "Find all *1234.56789* files/directories under current directory", "output": "find . -name '*1234.56789*'"}
{"input": "create directory /data/db", "output": "sudo mkdir /data/db"}
{"input": "find all the text files in the current folder and do not  search in the sub directories", "output": "find -maxdepth 1 -iname \"*.txt\""}
{"input": "Remove all files and directories in the /home directory tree whose names are \"Trash\"", "output": "find /home -name Trash -exec rm {} \\;"}
{"input": "Non-recursively finds all '*.pdf' files in a current folder and removes them.", "output": "find -maxdepth 1 -name '*.pdf' -exec rm \"{}\" \\;"}
{"input": "find and delete all the files in the entire file system whose size is greater than 100MB.", "output": "find / -size +100M -exec rm -rf {} \\;"}
{"input": "Archive directory specified by variable \"i\" to \"/iscsi\" preserving relative paths.", "output": "rsync -avR $i /iscsi;"}
{"input": "Connect to host \"${HOSTNAME}\" as user \"${USERNAME}\" and execute \"${SCRIPT}\" non-interactively", "output": "ssh -l ${USERNAME} ${HOSTNAME} \"${SCRIPT}\""}
{"input": "find all the files in the current folder and display adding quotations to each file and replace spaces with new line", "output": "find $PWD | sed 's/^/\"/g' | sed 's/$/\"/g' | tr '\\n' '"}
{"input": "List all mounted filesystems", "output": "mount"}
{"input": "login as user YOUR_USER", "output": "su - YOUR_USER"}
{"input": "find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory .", "output": "find . \\( -name a.out -o -name '*.' -o -name  'core' \\) -exec rm {} \\;"}
{"input": "Search for aaa in all files under current directory and count the number of matches", "output": "find .|xargs perl -p -e 's/ /\\n'|xargs grep aaa|wc -l"}
{"input": "Find directories named `doc' in /usr and below", "output": "find /usr -name doc -type d"}
{"input": "Remove everything in the current directory except files matching regular expression \"exclude these\"", "output": "find . -maxdepth 1 | grep -v \"exclude these\" | xargs rm -r"}
{"input": "Mount \"nifs\" filesystem \"/dev/mapper/myldm\" on \"/mnt\" as read only", "output": "mount -t ntfs -o ro /dev/mapper/myldm /mnt"}
{"input": "find all the directory's from root which have the sticky bit on and display their details. Do not display any errors on the standard output.", "output": "find / -type d  -perm -1000  -exec ls -ld {} \\; 2> /dev/null"}
{"input": "Prints folder where current script is located", "output": "echo \"dirname: `dirname \"$0\"`\""}
{"input": "Print the absolute path of third-level files under the current directory tree and number the output", "output": "ls -d -1 $PWD/**/*/* | nl"}
{"input": "set alias \"pwd\" for command \"echo -n `pwd` | pbcopy\"", "output": "alias pwd='echo -n `pwd` | pbcopy'"}
{"input": "Print what year it was 222 days ago", "output": "date '+%Y' --date='222 days ago'"}
{"input": "Save a random 4 byte unsigned integer from \"/dev/urandom\" to variable \"RAND\"", "output": "RAND=`od -t uI -N 4 /dev/urandom | awk '{print $2}'`"}
{"input": "Find files that were modified 7 days ago and archive them", "output": "find . -type f -mtime 7 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`"}
{"input": "Find all files/directories that were modified more than 2 days ago and redirect the list to ~/output.file", "output": "find . -mtime +2 | perl -pe 's{^}{\\\"};s{$}{\\\"}' > ~/output.file"}
{"input": "Unzip file \"$empty_variable\"", "output": "gunzip $empty_variable"}
{"input": "Count the number of times that a single \"-----------\\n\" separated record contains both \"A=2\" and \"dummy=2\" and the number of records that do not have \"dummy=2\" in compressed file \"file.gz\"", "output": "zcat file.gz | awk -v RS=\"-----------\\n\" '/A=2[ ,\\n]/ && /dummy=2[ ,\\n]/{count++} !/dummy=2[ ,\\n]/{other++} END{print \"Final counter value=\",count, \"; other=\", other}'"}
{"input": "Find all files/directories with 'my key phrase' in their names under current directory and redirect the output to mylist.txt", "output": "find -name '*my key phrase*' > mylist.txt"}
{"input": "Clean up all zombie processes by sending SIGTERM signal to their parent process, which requests them to terminate.", "output": "kill $(ps -A -ostat,ppid | awk '/[zZ]/{print $2}')"}
{"input": "find from / a file called 'toBeSearched.file', suppressing any error messages", "output": "find /. -name 'toBeSearched.file' 2>/dev/null"}
{"input": "run command 'source myfile; bash' as user root", "output": "su -c 'source myfile; bash'"}
{"input": "Change the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3", "output": "find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \\;"}
{"input": "Remove duplicate lines in \"file_name\" and print the output on stdout", "output": "awk '{print(NR\"\\t\"$0)}' file_name | sort -t$'\\t' -k2,2 | uniq --skip-fields 1 | sort -k1,1 -t$'\\t' | cut -f2 -d$'\\t'"}
{"input": "search for the regular/normal file java in the entire file system excluding search in the directories share and those starting with 10_Recommended and discard all the errors", "output": "find / \\( -name 10_Recommended* -o -name share \\) -prune -o -type f -name java -print 2>/dev/null"}
{"input": "Unsets GIT_DIR variable.", "output": "unset GIT_DIR"}
{"input": "Convert all markdown files on the system to html", "output": "find / -name \"*.md\" -type f -exec sh -c 'markdown \"${0}\" > \"${0%.md}.html\"' {} \\;"}
{"input": "Extract data from HTML table in \"mycode.html\"", "output": "paste -d: <(grep '<th>' mycode.html | sed -e 's,</*th>,,g') <(grep '<td>' mycode.html | sed -e 's,</*td>,,g')"}
{"input": "Set 644 permission to all regular files under current directory", "output": "find . -type f -print0 | xargs -0 chmod 644"}
{"input": "Displays info about users currently in system.", "output": "\\w"}
{"input": "Find smallest file in the current directory with find commad", "output": "find . -type f -printf \"%s\\t%p\\n\" | sort -n |head -1"}
{"input": "Find all aliencoders.[0-9]+ files/directories under /home/jassi/ directory", "output": "find /home/jassi/ -name \"aliencoders.[0-9]+\""}
{"input": "Print all files that exceed 1000 blocks and were modified at least a month ago", "output": "find / -size +1000 -mtime +30 -exec ls -l {} \\;"}
{"input": "Find all files whose name or type description includes \"text\", display only paths to files.", "output": "find . -exec file {} \\; | grep text | cut -d: -f1"}
{"input": "Change owner of \"my_test_expect.exp\" to \"el\"", "output": "sudo chown el my_test_expect.exp"}
{"input": "Display the last slash-separated part of path, in this case \"example\".", "output": "basename /usr/local/svn/repos/example"}
{"input": "Displays calendar for a previous, current and next month.", "output": "cal -3"}
{"input": "Sort file pointed by variable $filename, removing duplicate entries but ignoring the last N characters of each line.", "output": "rev $filename | sort | uniq -f=N | rev"}
{"input": "Find all PHP files in the current directory recursively and search them for string \"$test\" with 8 simultaneous processes", "output": "find . -name \\*.php -type f -print0 | xargs -0 -n1 -P8 grep -Hn '$test'"}
{"input": "display all the html files in the current folder excluding search in the paths ./foo, ./bar.", "output": "find . -path \"./foo\" -prune -o -path \"./bar\" -prune -o -type f -name \"*.html\""}
{"input": "run command \"${OBJECTDB_HOME}/bin/objectdb.sh start\" $JAVA_USER\" as user $JAVA_USER", "output": "su --session-command=\"${OBJECTDB_HOME}/bin/objectdb.sh start\" $JAVA_USER"}
{"input": "Mount \"device_name\" on \"mount_point\"", "output": "sudo mount device_name mount_point"}
{"input": "Search for \" 000\" in the hex dump of \"file-with-nulls\"", "output": "od file-with-nulls | grep ' 000'"}
{"input": "Search the current directory tree for regular files whose names end in \".shtml\" or \".css\"", "output": "find . -type f \\( -name \"*.shtml\" -or -name \"*.css\" \\)"}
{"input": "Extract files from archive 'archive.tar'", "output": "cat archive.tar | tar x"}
{"input": "Find all files/directories 1 level down the current directory and redirect the sorted output to file a", "output": "find . -maxdepth 1 | sort > a"}
{"input": "Make directory \"aaa/bbb\"", "output": "mkdir aaa/bbb"}
{"input": "Create 256 directories named from '00' to 'ff', each containing 256 subdirectories named '00' to 'ff'.", "output": "join -j2  <(seq 0 255) <(seq 0 255) | xargs -n256 printf \"%02x/%02x\\n\" | xargs mkdir -p"}
{"input": "Find all regular files in and below the home directory that have been modified in the last 90 minutes", "output": "find ~ -type f -mmin -90"}
{"input": "find all the files in the current folder that are modified after the modification date of a file", "output": "find . -newer document -print"}
{"input": "Remove all files/directories in the current directory without '.git' and '.gitignore'", "output": "find -mindepth 1 -depth -print0 | grep -vEzZ '(\\.git(/|$)|/\\.gitignore$)' | xargs -0 rm -rvf"}
{"input": "Find all regular files under current directory tree without descending into './dir1' (except './dir1/subdir1*' pattern) and './dir2' directories", "output": "find . \\( -path './dir1/*' -and -not -path './dir1/subdir1*' -or -path './dir2' \\) -prune -or -type f -print"}
{"input": "Print NS record for domain 'domain.' from 8.8.8.8 nameserver", "output": "dig @8.8.8.8 domain. ns"}
{"input": "display all the files in the current folder along with their timestamps and sort them and save them in the file1", "output": "find -printf '%p %T@\\n' | sort > file1"}
{"input": "Search regular files from the /path/to/dir directory tree for lines that contain \"_START\" and are enclosed in lines \"@GROUP\" and \"@END_GROUP\"", "output": "find /path/to/dir -type f -exec sed '/@GROUP/,/@END_GROUP/!d' {} \\; | grep '_START'"}
{"input": "Create 6-letter named temporary file in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmpfile'", "output": "tmpfile=$(mktemp $(dirname \"$1\")/XXXXXX)"}
{"input": "Recursively finds strings like \"texthere\"  in all \"*.txt\" files of a current folder.", "output": "grep -r --include \"*.txt\" texthere ."}
{"input": "Write \"Some console and log file message\" to standard output and \"/dev/fd/3\"", "output": "echo \"Some console and log file message\" | tee /dev/fd/3"}
{"input": "Create a rsa key of 2048 bits with comment \"michael\" and store it in file \"key\".", "output": "ssh-keygen -b 2048 -t rsa -f key -C michael"}
{"input": "Find files/directories named<filetype> under current directory which were accessed less than 5 days ago", "output": "find -name \"<filetype>\" -atime -5"}
{"input": "Find all files in the current directory and its sub-directories that have been modified sometime in the last 24 hours.", "output": "find . -mtime -1 -prin"}
{"input": "Find all symbolic links under '/some/directory' tree", "output": "find /some/directory -type l -print"}
{"input": "Find all files in current directory with the extension \".ext\" and remove all \"^M\" in those files", "output": "find $(pwd) -type f -name \"*.ext\" | while read file; do sed -e 's/^M//g' -i \"$file\"; done;"}
{"input": "Search the directory given as variable $d for empty subdirectories", "output": "find \"$d\" -mindepth 1 -prune -empty"}
{"input": "Print only printable characters from \"/dev/urandom\"", "output": "cat /dev/urandom | tr -dC '[:graph:]'"}
{"input": "change the ownership of all regular/normal files in the current directory after users confirmation", "output": "find . -type f -ok chown username {} \\;"}
{"input": "Prints folder where current script is located", "output": "echo \"dirname: `dirname $0`\""}
{"input": "Find all files/directories in entire file system that have  \"write\" bit set for either the owner, the group, or others", "output": "find / -perm /222"}
{"input": "find all the swap files (files ending with ~) in the current folder and delete them", "output": "find . -name \"*~\" -delete"}
{"input": "find all the php files in the current folder (discards any directory which has an extension of \".php\")", "output": "find . -name \\*.php -type f"}
{"input": "Search the current directory recursively for regular files modified 2 days ago", "output": "find . type -f -mtime 2"}
{"input": "Find the first file/directory under current directory named 'modules' and exit with empty result", "output": "find . -name modules -exec sh -c 'exit 0' \\;"}
{"input": "Find all the files in entire file system  which are accessed 50 days back", "output": "find / -atime 50"}
{"input": "Change all directories under \"./bootstrap/cache/\" to owner \"apache\" and group \"laravel\"", "output": "sudo find ./bootstrap/cache/ -type d -exec chown apache:laravel {} \\;"}
{"input": "Run \"./configure\" with a new environment variable CC set to the full path of the command 'gcc'", "output": "CC=$(which gcc) ./configure"}
{"input": "find all files in the home folder that are modified in the last 24 hours", "output": "find $HOME -mtime -1"}
{"input": "Change directory to the directory containing the \"oracle\" executable", "output": "cd $(dirname `which oracle`)"}
{"input": "Copy all files in current directory that do not match */exlude-path/* in their paths to /destination/ preserving directory structure", "output": "find . -type f -not -path '*/exlude-path/*' -exec cp --parents '{}' '/destination/' \\;"}
{"input": "Delete all empty directories in the /some/parrent/dir directory tree", "output": "find /some/parrent/dir -type d | while read d ; do ls \"$d\"/* &>/dev/null || rm -r \"$d\"; done"}
{"input": "search for all the files ending with \"fits\" in the folder \"/store/01\"", "output": "find /store/01 -name \"*.fits\""}
{"input": "start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found", "output": "find . -wholename './src/emacs' -prune -print -o -print"}
{"input": "Find all directories under /path/to/base/dir and change their permission to 755", "output": "chmod 755 $(find /path/to/base/dir -type d)"}
{"input": "Replace \"_\" with newlines in \"Testing\\r\\nTested_Hello_World\" and display the named characters", "output": "echo -e \"Testing\\r\\nTested_Hello_World\" | awk -v RS=\"_\" '{ print $0; }' | od -a"}
{"input": "Locate the httpd.conf file on the system", "output": "find / -name httpd.conf"}
{"input": "Find all top level directories under current directory that doesn't contain a file/directory named 'bin'", "output": "comm -3 <(printf '%s\\n' */ | sed 's|/.*||' | sort) <(find */ -type d -name bin | cut -d/ -f1 | uniq)"}
{"input": "find all the files in the current folder and display adding quotations to each file and replace spaces with new line", "output": "find $PWD -exec echo -n '\"{}\" ' \\; | tr '\\n' ' '"}
{"input": "Search *.x files from the current directory tree for string \"fred\"", "output": "find . -name \u2018*.x\u2019 -print0 | xargs -0 grep fred"}
{"input": "print all active readline keybindings", "output": "bind -P | grep --fixed-strings ' can be found on ' | perl -pe 's/((?<!\\\\)(?:\\\\\\\\)*)\\\\C/\\1Ctrl/g;s/((?<!\\\\)(?:\\\\\\\\)*)\\\\e/\\1Esc,/g'"}
{"input": "Copy entire directory structure from dir1 as a subdirectory of dir2, omitting empty directories, special files (sockets, pipes etc) and any directory named \"exclude\".", "output": "mkdir dir2; find dir1 \\( -type l -o -type f \\) -not -wholename '*/exclude/*' -exec cp -P --parents '{}' dir2/ \\;"}
{"input": "Recursively finds all files and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename.", "output": "find ./ -type f -exec grep -H 'text-to-find-here' {} \\;"}
{"input": "Print the current directory tree with file permissions", "output": "tree -p"}
{"input": "Write \"[some repository]\" to standard output and append to \"/etc/apt/sources.list\" as root", "output": "echo \"[some repository]\" | sudo tee -a /etc/apt/sources.list"}
{"input": "find all files in home folder which have been modified after a timestamp", "output": "find ~ -newer /tmp/timestamp"}
{"input": "Recursively finds all \"file_pattern_name\" files and folders and prints strings with \"pattern\", searching through found folders recursively.", "output": "find ./ -name \"file_pattern_name\"  -exec grep -r \"pattern\" {} \\;"}
{"input": "Find all files inside all directories (non-recursive) in maximum 2 levels down the /tmp/test directory and print the number of files in each directory and also print the file/directory paths", "output": "find /tmp/test/ -maxdepth 2 -mindepth 1 -type d | while read dir; do printf \"%s : \" \"$dir\"; find \"$dir\" -maxdepth 1 -type f | wc -l; find \"$dir\" -maxdepth 1 -type f ; done;"}
{"input": "find all jpg files in the current folder", "output": "find . -name \"*.jpg\""}
{"input": "display the contents of  all the regular files in a folder in the sorted order of their depth", "output": "cat $(find src/js -type f -name \"*.js\" -printf \"%d\\t%p\\n\" | sort -n | sed -e \"s|[0-9]*\\t||\")>min.js"}
{"input": "Find files/directories not changed in two weeks under /dev/shm", "output": "find /dev/shm /tmp -type f -ctime +14"}
{"input": "Read standard input and replace any repeated characters except spaces with a single instance", "output": "tr -cs '[:space:]'"}
{"input": "find all the files in the home folder which have been modified in the last 30 minutes", "output": "find $HOME -mmin -30"}
{"input": "Count the number of unique duplicate lines in \"file1\" and \"file2\" combined", "output": "sort file1 file2 | uniq -d | wc -l"}
{"input": "Set the modification timestamp of file 'filename' to specified date/time.", "output": "touch -m --date=\"Wed Jun 12 14:00:00 IDT 2013\" filename"}
{"input": "Remount \"/system\" with read and write permission", "output": "mount -o remount,rw /system"}
{"input": "Displays calendar of a previous, current and next month for December of 2120 year.", "output": "cal -3 12 2120"}
{"input": "search for the file \"myletter.doc\" in the home folder", "output": "find ~ -name myletter.doc -print"}
{"input": "Find all Makefile's in the current directory tree and print the line 235 of each of them", "output": "find . -type f -name Makefile -print -exec sed -n '235p' {} \\;"}
{"input": "Find files/directories in entire file system that had their meta information changed more than 3 days ago", "output": "find / -ctime +3"}
{"input": "Count the number of lines in all \".php\" files in the current directory tree", "output": "wc -l `tree -if --noreport | grep -e'\\.php$'`"}
{"input": "show all files in the entire file system", "output": "find / -print0 | perl -ln0e 'print \"found $_\" if -p'"}
{"input": "Find all directories named \"nasa\"", "output": "find . -name nasa -type d"}
{"input": "find files under the current directory ending in \"txt\" and list them, or ending in  \"html\" but do nothing.", "output": "find . -name '*.txt' -print -o -name '*.html'"}
{"input": "Delete files older than 31 days", "output": "find ./ -mtime +31 -delete"}
{"input": "Find all HTML files starting with letter 'a' in the current directory and below ignoring the case", "output": "find . -iname a\\*.html"}
{"input": "Write \"hello world\" to the console and print number of bytes, symbols and strings in provided input.", "output": "echo \"hello world\" | tee >(wc)"}
{"input": "Split \"$INFILE\" into files of at most \"$SPLITLIMT\" with a numeric suffix and a prefix \"x_\"", "output": "split -d -l $SPLITLIMT $INFILE x_"}
{"input": "display all the files in the folder a", "output": "find a"}
{"input": "Create tar archive \"dirall.tar\" and copy all files from directory tree /tmp/a1 to it", "output": "find /tmp/a1 -exec tar -rvf dirall.tar {} \\;"}
{"input": "Execute \"/some/directory/myprogram\" ignoring output in the background on target machine \"user@target\"", "output": "ssh user@target \"cd /some/directory; nohup myprogram > /dev/null 2>&1\""}
{"input": "Archive all *html files using tar.", "output": "find . -type f -name \"*html\" | xargs tar cvf htmlfiles.tar -"}
{"input": "Calculate the sum of all the numbers from 1 to 10", "output": "seq 10 | tr '[\\n]' '+' | sed -e 's/+/ + /g' -e's/ + $/\\n/' | xargs expr"}
{"input": "Gets IP address of eth0 network interface.", "output": "ifconfig eth0 | grep addr: | awk '{ print $2 }' | cut -d: -f2"}
{"input": "Merge already sorted files in the current directory ending in \".$suffix\"", "output": "sort -m *.$suffix"}
{"input": "Wrap each line in \"longline\" to a maximum of 30 characters", "output": "fold -w30 longline"}
{"input": "Prints top-ten list of most used utilities from history.", "output": "history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head"}
{"input": "Shows size of compressed file in .bz2 archive.", "output": "bunzip2 -c bigFile.bz2 | wc -c"}
{"input": "Search for 'example' in all regular files from the current directory tree", "output": "find -type f -print0 | xargs -r0 grep -F 'example'"}
{"input": "Move \"file1\", \"file2\", \"...\" to \"target\" directory", "output": "mv -t target file1 file2 ..."}
{"input": "search for all the text files in the folder /foo and delete them", "output": "find /foo/ -name \"*.txt\" -exec rm -v {} \\;"}
{"input": "remove all the core files in the home folder", "output": "find /home -name core -exec rm {} \\;"}
{"input": "Find all *.mp3 files under current directory and run mplayer with these files", "output": "find . -name \\*.mp3 -print0 | xargs -0 mplayer"}
{"input": "Find files that are writable by the user, the group, or both under the current directory", "output": "find . -perm +220  -exec ls -l {} \\; 2> /dev/null"}
{"input": "set alias \"go\" for command 'ssh $(pbpaste) -l pete'", "output": "alias go='ssh $(pbpaste) -l pete'"}
{"input": "Prints process tree with command line arguments of a process having id $PID.", "output": "pstree -a \"$PID\""}
{"input": "Create intermediate directories as required", "output": "mkdir -p $2"}
{"input": "display all the regular files in the current folder excluding those that are present in the path \"git\"", "output": "find . -path \"*.git*\" -prune -o -type f -print"}
{"input": "find all the files in the current folder which have execute permission", "output": "find . -executable"}
{"input": "display all normal / regular files in current folder in reverse order", "output": "find . -type f | tac"}
{"input": "Move all files and directories in the current directory to \"/tmp/blah/\"", "output": "mv * /tmp/blah/"}
{"input": "Enables shell option 'cdable_vars'.", "output": "shopt -s cdable_vars"}
{"input": "Find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play", "output": "find /tmp/ -ctime -1 -name \"x*\" -exec mv '{}' ~/play/"}
{"input": "Remove all directories called \"test\" from the current directory tree", "output": "find . -name test -type d -print0|xargs -0 rm -r --"}
{"input": "Display differences between files \"a.txt\" and \"b.txt\" side-by-side and do not output common lines.", "output": "diff -a --suppress-common-lines -y a.txt b.txt"}
{"input": "Print all directories under $root appending a : (colon) at the end of each path", "output": "find $root -type d -printf '%p:'"}
{"input": "Find directories in the current directory recursively that are not \"executable\" by all", "output": "find -type d ! -perm -111"}
{"input": "Changes group ownership of /sys/class/gpio/export and /sys/class/gpio/unexport to 'gpio'.", "output": "sudo chgrp gpio /sys/class/gpio/export /sys/class/gpio/unexport"}
{"input": "Append \"<br/>\" to the end of each line in \"1\\n2\\n3\"", "output": "echo -e \"1\\n2\\n3\" | sed 's/.*$/&<br\\/>/'"}
{"input": "search for the file job.hostory in the folder \"/data/Spoolln\"", "output": "find /data/SpoolIn -name job.history"}
{"input": "Print the list of files in the current directory tree with \"xx\" preceding and following each filename", "output": "find . -exec echo xx{}xx \\;"}
{"input": "Show the last 10 .conf files found by `find' in the /etc directory", "output": "find /etc -maxdepth 1 -name \"*.conf\" | tail"}
{"input": "find the file \"dateiname\" in the entire file system ( case insensitive search)", "output": "find / -iname \"Dateiname\""}
{"input": "Find the files in the current directory that match pattern '*.JUKEBOX.*.txt' and move them to folder ./JUKEBOX", "output": "find . -name '*.JUKEBOX.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./JUKEBOX"}
{"input": "List all .gif files in the current directory tree", "output": "find . -name *.gif -exec ls {} \\;"}
{"input": "Find every file under the directory /home owned by the user joe.", "output": "find /home -user joe"}
{"input": "Return all of the .conf files in Pat's user folder and subdirectories", "output": "find /home/pat -iname \"*.conf\""}
{"input": "display all the \".c\" files which have been modified in the last 10 minutes", "output": "find /home/david -amin -10 -name '*.c'"}
{"input": "Search the current directory tree for regular files that contain \"string\"", "output": "find . -type f | xargs grep string"}
{"input": "Remove all .sh files in the current directory tree whose names begin with \"new\"", "output": "find . -name \"new*.sh\" -exec rm -f '{}' \\+"}
{"input": "Find x* files/directories under /tmp directory whose status was changed less than 1 day ago", "output": "find /tmp/ -ctime -1 -name x*"}
{"input": "list all files under $dir directory except path $dir/prune_me directory", "output": "find \"$dir\" -not -path \"$dir/prune_me*\" -exec bash -c 'echo \"$0\"' {} \\;"}
{"input": "Copy directory hierarchy from the current working directory to \"/path/to/backup/\"", "output": "find . -type d -exec mkdir -p -- /path/to/backup/{} \\;"}
{"input": "display all shell scripts in current folder", "output": "find . -name \"*.sh\""}
{"input": "Unzip and untar \"myarchive.tar.gz\" and check for corruption", "output": "gunzip -c myarchive.tar.gz | tar -tvf -"}
{"input": "Create a new RSA key for ssh with no passphrase, store it in ~/.ssh/id_rsa without prompting to overwrite if this file exists, and minimize output from ssh-keygen.", "output": "echo -e  'y\\n'|ssh-keygen -q -t rsa -N \"\" -f ~/.ssh/id_rsa"}
{"input": "Remove duplicate lines in \"file_name\" and print the output on stdout", "output": "awk '{print(NR\"\\t\"$0)}' file_name | sort -t$'\\t' -k2,2 | uniq -u --skip-fields 1 | sort -k1,1 -t$'\\t' | cut -f2 -d$'\\t'"}
{"input": "find the most recently changed files under current directory", "output": "find . -type f -printf '%TY-%Tm-%Td %TT   %p\\n' | sort"}
{"input": "Search the files from the current directory tree for text \"documentclass\"", "output": "find . -type f -print0 | xargs -0 grep -H 'documentclass'"}
{"input": "Write output of \"sudo ls -hal /root/\" to \"/root/test.out\"", "output": "sudo ls -hal /root/ | sudo tee /root/test.out > /dev/null"}
{"input": "Report file system containing path to the current working directory disk usage in kilobytes.", "output": "df -k ."}
{"input": "List all files with their paths that have identical content.", "output": "find * -type f | xargs md5sum | sort | uniq -Dw32"}
{"input": "Print a list of all files/directories under current directory in myfile.sh file", "output": "find . -print >myfile.sh"}
{"input": "Find files/directories in entire file system newer than myfile", "output": "find / -newer myfile"}
{"input": "find all the files that have been modified today", "output": "find /tmp/test/* -mtime +0"}
{"input": "List \".java\" files that have the same filename and contents", "output": "md5sum *.java | sort | uniq -d"}
{"input": "Enables shell option 'autocd'.", "output": "shopt -s autocd"}
{"input": "Fetch a script from the web, and interpret it in the current shell.", "output": "source <(curl -s http://mywebsite.com/myscript.txt)"}
{"input": "Format the contents of \"[file]\" in a neat table", "output": "column -t [file]"}
{"input": "Calculate the md5 sum of all \".py\" files in \"/your/dir\" including content and filenames", "output": "grep -ar -e . --include=\"*.py\" /your/dir | md5sum | cut -c-32"}
{"input": "Print the list of regular files from the current directory that were last modified on November, 22", "output": "find . -maxdepth 1 -type f -newermt \"Nov 22\" \\! -newermt \"Nov 23\" -exec echo {} +"}
{"input": "Find all SGID set files", "output": "find / -perm /g=s"}
{"input": "find all the links in the current directory and print them in each line and display their names.", "output": "find . -type l -print | xargs ls -ld | awk '{print $10}'"}
{"input": "Save the directory of the full path to the current script in variable \"dir\"", "output": "dir=$(dirname $(readlink /proc/$$/fd/255))"}
{"input": "Saves printed calendar for $month, $year in positional variables.", "output": "set `cal $month $year`"}
{"input": "Find all Read Only files in the file system", "output": "find / -perm /u=r"}
{"input": "find all the jar files in the current folder and display all the \".class\" files or files ending with jar", "output": "find . -name \u201c*.jar\u201d -print -exec jar tvf {} \\; |grep -E \u201cjar$|.class\u201d"}
{"input": "Remove all broken symlinks from the /usr/ports/packages directory tree", "output": "find -L /usr/ports/packages -type l -delete"}
{"input": "remove all the permissions for others to all the files in the current folder which have  read,write,execute access to users,group and others.", "output": "find * -perm 777 -exec chmod 770 {} \\;"}
{"input": "Search /etc for files modified within the last day", "output": "find /etc -type f -ctime -1"}
{"input": "kill group leader", "output": "kill `jobs -lp`"}
{"input": "Find all files in the `work' directory tree, pass them to grep and search for \"profit\"", "output": "find ./work -print | xargs grep \"profit\""}
{"input": "find all the regular/normal files in the folder \"myfiles\" which have the permission 647.", "output": "find /myfiles -type f -perm -647"}
{"input": "Find all regular files starting from the current directory", "output": "find . -type f"}
{"input": "Look for `regexp' in binary files", "output": "find .  -type f -print|xargs file|grep -i text|cut -fl -d:    | xargs grep regexp"}
{"input": "Find and list all files on your current directory and show a few lines of output from the beginning", "output": "find | head"}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them", "output": "find -d MyApp.app -name Headers -type d -exec rm -rf \"{}\" \\;"}
{"input": "list all active jobs and its IDs", "output": "jobs -l"}
{"input": "Report file system containing path to the current working directory inodes usage.", "output": "df -i $PWD"}
{"input": "Count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -mtime +$DAYS_TO_SAVE | wc -l"}
{"input": "Find all directories that have been modified in the last seven days.", "output": "find . -mtime -7 -type d"}
{"input": "find all the cpp(C++ source files), java, header files in the current directory", "output": "find . -name *.cpp -o -name *.h -o -name *.java"}
{"input": "ERROR - this is for DOS", "output": "ping -n 1 %ip% | find \"TTL\""}
{"input": "Search three folders named foo, bar, and baz for all \"*.rb\" files", "output": "find foo bar baz -name \"*.rb\""}
{"input": "Print the list of the subdirectories of the current directory", "output": "find . -mindepth 1 -maxdepth 1 -type d -printf \"%P\\n\""}
{"input": "Creates temporary file with name formatted like 'emacs-manager.XXXXXX' in '/tmp/' folder and saves path to it in 'tmp_file' variable.", "output": "tmp_file=`mktemp --tmpdir=/tmp emacs-manager.XXXXXX`"}
{"input": "Removes all files but 5 newest ones from current folder.", "output": "ls -tp | grep -v '/$' | tail -n +6 | tr '\\n' '\\0' | xargs -0 rm --"}
{"input": "Append all PNG and JPG files to tar archive 'images.tar'", "output": "find . \\( -iname \"*.png\" -o -iname \"*.jpg\" \\) -print -exec tar -rf images.tar {} \\;"}
{"input": "Removes all empty folders under path '/foo/bar' and the path itself.", "output": "find /foo/bar -type d -depth -exec rmdir -p {} +"}
{"input": "Search for the files that are owned by user rooter or by user www-data", "output": "find -user root -o -user www-data"}
{"input": "find all the text files present in the current directory excluding the search in certain paths.", "output": "find . -type f -name \"*.txt\" ! -path \"./Movies/*\" ! -path \"./Downloads/*\" ! -path \"./Music/*\""}
{"input": "Automatically log into \"SOME_SITE.COM\" as user \"YOUR_USERNAME\" using password \"YOUR_PASSWORD\"", "output": "sshpass -p \"YOUR_PASSWORD\" ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM"}
{"input": "Search \"input.txt\" for regex patterns only matching those listed in \"ignore.txt\", list the unique lines and prefix with the number of occurrences", "output": "grep -of ignore.txt input.txt | sort | uniq -c"}
{"input": "search for the directory \"config\" in the current folder and change directory to it", "output": "cd `find . -name \"config\"`"}
{"input": "find all the files that have been changed exactly 24 hours ago", "output": "find . -ctime 1 -type f"}
{"input": "Write standard output and error of \"./a.out\" to standard output and to file \"output\"", "output": "./a.out 2>&1 | tee output"}
{"input": "Find and show all files in the current directory tree that are exactly 2000 kB", "output": "find . -size 2000k"}
{"input": "Print your/dir if it's empty", "output": "find your/dir -prune -empty"}
{"input": "find all the regular/normal files in the folder /travelphotos which are bigger than 200KB and which do not have the word \"2015\" in their name", "output": "find /travelphotos -type f -size +200k -not -iname \"*2015*\""}
{"input": "Find all files/directories under current /export/home/someone directory and upload them to ftp://somehost/tmp/", "output": "find /export/home/someone -exec curl -u someone:password -vT {} ftp://somehost/tmp/"}
{"input": "List the number of occurrences of each unique character in \"The quick brown fox jumps over the lazy dog\" sorted from most frequent to least frequent", "output": "echo \"The quick brown fox jumps over the lazy dog\" | grep -o . | sort | uniq -c | sort -nr"}
{"input": "Unsets GNUPLOT_DRIVER_DIR variable.", "output": "unset GNUPLOT_DRIVER_DIR"}
{"input": "Append the last modification time of file $arg as the seconds since epoch with a preceding space to the variable 'KEY'", "output": "KEY+=`date -r \"$arg\" +\\ %s`"}
{"input": "Take the last slash-separated section of variable \"FILE\" and copy it to variable \"NAME\".", "output": "NAME=`basename \"$FILE\"`"}
{"input": "Print \"huge-file.log\" starting at line 1000001", "output": "tail -n +1000001 huge-file.log"}
{"input": "Find all files called \"INPUT.txt\" in the current directory tree and remove lines starting with # in them, saving backup copies as INPUT.txt.bak", "output": "find . -type f -name INPUT.txt -print0 | xargs -0 -I {}  sed -i.bak '/^#/d' {}"}
{"input": "Read a line from standard input into the variable \"yn\" using the first argument as the prompt (\"$1 \")", "output": "read -p \"$1 \" yn"}
{"input": "Print information about all users who are logged in", "output": "who -la"}
{"input": "Remove spaces recursively from all subdirectories under current directory", "output": "find /path/to/dir -type d | tac | while read LINE; do target=$(dirname \"$LINE\")/$(basename \"$LINE\" | tr -d ' '); echo mv \"$LINE\" \"$target\"; done"}
{"input": "create directory /tmp/new", "output": "mkdir /tmp/new"}
{"input": "search for MP3 files in the current folder and subfolders exclude dir1 AND dir2", "output": "find ! -path \"dir1\" ! -path \"dir2\" -iname \"*.mp3\""}
{"input": "search for all text files in the folder /home", "output": "find /home -name *.txt"}
{"input": "Page through the disassembler output of objdump on executable file 'my-crashing-program'.", "output": "objdump --disassemble my-crashing-program | less"}
{"input": "Delete all directories in minimum 2 levels down the root directory", "output": "find root -mindepth 2 -type d 2>/dev/null -exec rm -fR {} \\;"}
{"input": "Search the `images' directory tree for regular files", "output": "find images/ -type f"}
{"input": "find all the files in the current folder which end with .o or with the name a.out and display them.", "output": "find . ( -name a.out -o -name *.o ) -print"}
{"input": "search the pattern ^PyErr in all the \".c\" files in the folder Lib/", "output": "find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr"}
{"input": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "output": "find data -xdev -name \"filepattern-*2009*\" -print0 | tar --null --no-recursion -uf 2009.tar --files-from -"}
{"input": "Write output and error of \"command\" to standard output and to \"/path/to/logfile\"", "output": "command 2>&1 | tee /path/to/logfile"}
{"input": "Print the current directory tree", "output": "tree"}
{"input": "find all the files in the current directory which have the inode number 31246 and remove them.", "output": "find . -inum 31246 -exec rm [] ';'"}
{"input": "display all the files on the current folder excluding those that are present in the folder \"./src/emacs\"", "output": "find . -path ./src/emacs -prune -o -print"}
{"input": "Find all .zip files in the current directory tree and unzip them", "output": "find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \\;"}
{"input": "Search for the string 'foo' in *.html files under /usr/src/linux directory", "output": "grep foo `find /usr/src/linux -name \"*.html\"`"}
{"input": "Search for directory foo ignoring case", "output": "find . -iname foo -type d"}
{"input": "Print the full path of a 'file.txt' file in the current folder.", "output": "ls \"`pwd`/file.txt\""}
{"input": "Change the group of \"myfile\" to \"friends\"", "output": "chown :friends myfile"}
{"input": "search for all the files in the current directory which have the group staff and have write permission enabled to the user and display them.", "output": "find . -group staff -perm -2000 -print"}
{"input": "display a long list of all regular/normal files in the file system which belong to the root and with suid bit set", "output": "find / -type f -user root -perm -4000 -exec ls -l {} \\;"}
{"input": "Search for 'Processed Files' in all $srch* (case insensitive) files under current directory run the sed script 'N;s/(.*)\\n(.*)/\\2 \\1/' on the output", "output": "find . -iname \"$srch*\" -exec grep \"Processed Files\" {} \\; -print| sed -r 'N;s/(.*)\\n(.*)/\\2 \\1/'"}
{"input": "display all files in the current folder", "output": "find . -print"}
{"input": "Find directories that are directly under /home/user/workspace directory (no-subdirectories) and were modified more than 30 days ago and print a message saying that the directory wasn't modified during last 30 days", "output": "find /home/user/workspace -mindepth 1 -maxdepth 1 -type d -mtime +30 -printf \"\\t- It seems that %p wasn't modified during last 30 day\\n\""}
{"input": "Find all files under /mnt/naspath directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter", "output": "find /mnt/naspath -name .snapshot -prune -o \\( -type f -mtime 0 -print0 \\)"}
{"input": "Reports count of characters in the value of ${FOO} variable as follows:  \"length(FOO)==<counted number of characters>\"", "output": "echo -e \"length(FOO)==$(echo -ne \"${FOO}\" | wc -m)\""}
{"input": "Move all directories from the `sourceDir' directory tree to the `destDir' directory", "output": "find sourceDir -mindepth 1 -type d  -print0 | xargs -0 mv --target-directory=destDir"}
{"input": "Calculate the factorial of 500", "output": "seq -s \"*\" 1 500 |bc"}
{"input": "Print local SRV record of domain '_etcd-client._tcp.'", "output": "dig @\"127.0.0.1\"  _etcd-client._tcp. SRV"}
{"input": "Replace any sequence of spaces in file 'text.txt' with single space and print 4th space separated field", "output": "cat text.txt | tr -s ' ' | cut -d ' ' -f 4"}
{"input": "display all text files in a folder", "output": "find $target -type f -iname \"*.txt\""}
{"input": "Print command with PID 11383", "output": "ps | egrep 11383 | tr -s ' ' | cut -d ' ' -f 4"}
{"input": "Unzip \"path/to/test/file.gz\" to standard output and save all lines matching \"my regex\" to files with a 1000000 limit", "output": "gzip -cd path/to/test/file.gz | awk 'BEGIN{global=1}/my regex/{count+=1;print $0 >\"part\"global\".txt\";if (count==1000000){count=0;global+=1}}'"}
{"input": "Apply script 'script.ksh' to all files matching pattern 'image\\*.jpg' under the directory tree 'dir'", "output": "find dir -name image\\*.jpg -exec /bin/ksh script.ksh {} \\;"}
{"input": "Find all files/directories under current directory and print their paths", "output": "find . -exec echo {} +"}
{"input": "Reports count of processors in system.", "output": "grep \"^core id\" /proc/cpuinfo | sort -u | wc -l"}
{"input": "Recursively print all files and directories in the current directory tree including hidden files", "output": "tree -a ."}
{"input": "Print the first 32 hexadecimal characters from \"/dev/urandom\", determining C locale for character handling functions", "output": "cat /dev/urandom | env LC_CTYPE=C tr -cd 'a-f0-9' | head -c 32"}
{"input": "Find process \"terminal\" displaying the searching process", "output": "ps aux | grep '[t]erminal'"}
{"input": "find all of the executable files on your computer", "output": "find / -executable"}
{"input": "Print the number of entries (files, directories, symlinks, etc.) in the subdirectories of the current directory, stopping search at any device mount points.", "output": "sudo find . -xdev -type f | cut -d \"/\" -f 2 | sort | uniq -c | sort -n"}
{"input": "display all the files in the file system which belong to no user", "output": "find / -nouser -print"}
{"input": "List files under $CURR_DIR which were modified, accessed or whose status were changed $FTIME ago replacing the $CURR_DIR path string to './'", "output": "find ${CURR_DIR} -type f \\( -ctime ${FTIME} -o -atime ${FTIME} -o -mtime ${FTIME} \\) -printf \"./%P\\n\""}
{"input": "Remove regular files whose names match Perl regular expression '\\w+-\\d+x\\d+\\.\\w+$' from the current directory tree", "output": "find -type f |  grep -P '\\w+-\\d+x\\d+\\.\\w+$' | xargs rm"}
{"input": "Assign a name when starting a screen session", "output": "screen -S foo"}
{"input": "Find all files in the `sourceDir' directory", "output": "find sourceDir -mindepth 1 -maxdepth 1"}
{"input": "Find the total size of *.jpg files within the directory tree ./photos/john_doe", "output": "find ./photos/john_doe -type f -name '*.jpg' -exec du -ch {} + | grep total$"}
{"input": "Compresses all files in a current folder (not recursively).", "output": "bzip2 *"}
{"input": "Recursively copy all regular files below current directory to directory /tmp on hostname, connecting as ssh user matching current username on local host.", "output": "find . -type f -exec scp {} hostname:/tmp/{} \\;"}
{"input": "Find all empty files (zero byte files) in your home directory and its sub-directories.", "output": "find ~ -empty"}
{"input": "Output two lines of \"-tcp\"", "output": "yes -- -tcp | head -n 2"}
{"input": "Delete all files with ' .o' extension in the entire filesystem", "output": "find project / src / -name \"* .o\" -exec rm -f {} \\;"}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them in an optimized way", "output": "find -d MyApp.app -name Headers -type d -print0 | xargs -0 rm -rf"}
{"input": "Display inputfile all on one line (replace newlines by spaces)", "output": "awk '{printf \"%s|\", $0} END {printf \"\\n\"}' inputfile"}
{"input": "search for files which are writable by either their owner or their group", "output": "find . -perm /u=w,g=w"}
{"input": "Search only for directories", "output": "find -type d"}
{"input": "lines.txt contains a list of line numbers, one entry per line - output only these lines from text.txt omitting the rest of the file.", "output": "cat -n text.txt | join -o2.2 lines.txt -"}
{"input": "find all text files in the current directory", "output": "find . -name \"*.txt\" -print"}
{"input": "Recursively finds all files containing text 'OPEN' and prints folder where they are placed.", "output": "grep -r OPEN * | awk '{split($1, path, \":\"); print path[1]}' | xargs -I{} dirname {}"}
{"input": "Save Java home in variable \"JAVA_HOME\"", "output": "JAVA_HOME=\"$( readlink -f \"$( which java )\" | sed \"s:bin/.*$::\" )\""}
{"input": "find all files in the file system which belong to no user or which have no user", "output": "find / -nouser"}
{"input": "Find all files recursively which end in \".php\"", "output": "find . -name \"*.php\" -print"}
{"input": "Add the execute and read permission for all and the write permission for the user to the dir_data directory and all of its sub-directories.", "output": "find ~/dir_data -type d -exec chmod a+xr,u+w {} \\;"}
{"input": "Delete all hard links to the physical file with inode number 2655341", "output": "find /home -xdev -inum 2655341 | xargs rm"}
{"input": "Replace spaces in directory names with underscores for all directories in the current directory tree", "output": "find -name \"* *\" -type d | rename 's/ /_/g'"}
{"input": "Use ANSI escape codes to make \"World\" bold from input \"Hello World!\"", "output": "echo 'Hello World!' | sed $'s/World/\\e[1m&\\e[0m/'"}
{"input": "Find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions", "output": "find / -maxdepth 1 -xdev -type f -print -exec grep -i \"stringtofind\" -q {} \\;"}
{"input": "Find all files/directories under '/var/log' directory tree that bave been modified today (from the start of the day)", "output": "find /var/log -daystart -mtime 0"}
{"input": "Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'", "output": "output=$(echo $input | fold -w4 | tac | tr -d \\\\n)"}
{"input": "find all png files in the current folder", "output": "find . -type f -name '*.png'"}
{"input": "Find all *.coffee files under /some/path and run 'perl /path/to/your/program' with all of the file paths as its arguments", "output": "find /some/path -name '*.coffee' -print0 | xargs -0 perl /path/to/your/program"}
{"input": "Find all files/directories in entire file system more than 700 Megabytes", "output": "find / -size +700M"}
{"input": "Change the permission of all regular files under current directory tree to 644", "output": "find . -type f -exec chmod 644 {} \\;"}
{"input": "Find all files under /path and below writable by `group' and `other'", "output": "find /path -perm -go+w"}
{"input": "List all files in a current folder, separating names with semicolon", "output": "ls -m | tr -d ' ' | tr ',' ';'"}
{"input": "create symbolic links in directory \"/usr/local/symlinks \" to all files located in directiry \"incoming\" and that have been modified earlier then 5 days and owned by user \"nr\"", "output": "find /incoming -mtime -5 -user nr -exec ln -s '{}' /usr/local/symlinks ';'"}
{"input": "display all the files in the current folder excluding those that are present in the folder \"secret\"", "output": "find . \\( -name 'secret' -a -prune \\) -o -print"}
{"input": "display all mp3 files in the file system which have not been accessed in the last 24 hours", "output": "find / -name \u201c*.mp3\u201d -atime +01 -type f"}
{"input": "Find a 400 permission file under /data directory", "output": "find /data -type f -perm 400 -print -quit"}
{"input": "Open a ssh connection to user@host with X11 forwarding to run GUI programs", "output": "ssh user@host -X"}
{"input": "Find all php files under current directory", "output": "find . -type f -name \"*.php\""}
{"input": "Make directory \"tata\"", "output": "mkdir tata"}
{"input": "Find all .gz archives in the current directory tree and check if they are valid", "output": "find . -name *.gz -exec gunzip '{}' \\;"}
{"input": "Print lines in \"file1.txt\" that do not exist in \"file2.txt\"", "output": "sort <(sort -u file1.txt) file2.txt file2.txt | uniq -u"}
{"input": "Finds binaries names in a list of running processes and prints containing folder of first 10 binaries.", "output": "ps aux | awk '{print $11}' | grep -x -e \"/.*\" | xargs dirname | head"}
{"input": "Prints week day of a 31 day in a current month.", "output": "cal | awk -v date=31 'NR == 2 { split($0, header) } NR > 2 { for (i = 1; i <= NF; ++i) if ($i == date) { print header[NR == 3 ? i + 7 - NF : i]; exit } }'"}
{"input": "display all files in current directory discard any errors and save the output to a file", "output": "find . 2>/dev/null > files_and_folders"}
{"input": "Find all files in  /mydir  and replace every occurrences of <string1> with <string2> in those files invoking sed as few times as possible", "output": "find /mydir -type f -exec sed -i 's/<string1>/<string2>/g' {} +"}
{"input": "Recursively finds latest modified file in a directory", "output": "find . -type f -print0 | xargs -0 stat -f \"%m %N\" | sort -rn | head -1 | cut -f2- -d\" \""}
{"input": "Remove all files from the current directory tree whose names do not end with \".tex\" or \".bib\"", "output": "find . | egrep -v \"\\.tex|\\.bib\" | xargs rm"}
{"input": "List files in directory \"one\" that exist in directory \"two\"", "output": "sort <(ls one) <(ls two) | uniq -d"}
{"input": "Search for all files in the current directory recursively whose names contain \"linkin park\", ignoring the case", "output": "find . -iname \"*linkin park*\""}
{"input": "Prints server name from SOA record for domain yahoo.com", "output": "dig +noall +answer soa yahoo.com | awk '{sub(/.$/,\"\",$5);print $5}'"}
{"input": "Find all files in the current user's home directory and its sub-directories with the optional constraints of \u043e\u043f\u0446\u0438\u044f_\u043f\u043e\u0438\u0441\u043a\u0430, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 and/or \u043e\u043f\u0446\u0438\u044f_\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f.", "output": "find ~/ [\u043e\u043f\u0446\u0438\u044f_\u043f\u043e\u0438\u0441\u043a\u0430] [\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435] [\u043e\u043f\u0446\u0438\u044f_\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f]"}
{"input": "Find all files named 'aaa.txt' under current directory tree and display their contents", "output": "cat `find . -name aaa.txt`"}
{"input": "Remove all files named tmp or ending in .xx that have not been accessed for seven or more 24-hour periods", "output": "find / \\( -name tmp -o -name '*.xx' \\) -atime +7 -exec rm {} \\;"}
{"input": "Change symbolic link \"$f\" into a file", "output": "cp --remove-destination $(readlink $f) $f"}
{"input": "convert all text files in the current folder from dos to unix format", "output": "find . -name *.txt | xargs dos2unix"}
{"input": "create a gzip of all the files in the current folder excluding the already gzipped files", "output": "gzip `find . \\! -name '*.gz' -print`"}
{"input": "Find .rm files in the /home/me/download/ directory tree and convert them to the MP3 format", "output": "find /home/me/download/ -type f -name \"*.rm\" -exec ffmpeg -i \\{} -sameq \\{}.mp3 \\; -exec rm \\{} \\;"}
{"input": "Recursively search for all files with names ending with \"_test.rb\", renaming them to end with \"_spec.rb\", using at most 4 concurrent processes.", "output": "find . -name \"*_test.rb\" | xargs -P 4 rename s/_test/_spec/"}
{"input": "display all the files in the home folder that have been modified in the last 7*24 hours", "output": "find $HOME -mtime -7"}
{"input": "Find all fonts (in '/usr/local/fonts') that belong to the user 'warwick'", "output": "find /usr/local/fonts -user warwick"}
{"input": "Find all files/directories under current directory with null character as the delimiter and then replace the null characters with :", "output": "find -print0 | tr \"\\0\" \":\""}
{"input": "Replace all occurrences of '2013 Magento Inc.' with '2012 Magento Inc.' in all files with '.php, '.xml' and '.phtml' extensions under current directory tree", "output": "find . -name '*.php' -print0 -o -name '*.xml' -print0 -o -name '*.phtml' -print0 | xargs -0 sed -i '' 's/2013 Magento Inc./2012 Magento Inc./g'"}
{"input": "Find all empty directories in the current one and delete them", "output": "find . -type d -maxdepth 1 -empty -delete"}
{"input": "Find all files/directories that do not belong to any user under '/home' directory tree", "output": "find /home -nouser -print"}
{"input": "Find files/directories writable by group and others under the /path directory", "output": "find /path -perm -go+w"}
{"input": "Create md5sum of a directory", "output": "du -csxb /path | md5sum > file"}
{"input": "SSH into $1 with login name 'pete'", "output": "ssh \"$1\" -l pete"}
{"input": "Selects a job from list and get it back to the foreground (iselect package is required).", "output": "fg `jobs | iselect -a | grep -o [0-9]*`"}
{"input": "Find all .txt files of user Tecmint under /home directory", "output": "find /home -user tecmint -iname \"*.txt\""}
{"input": "display all html files  in  current folder", "output": "find -name \"*.htm\" -print"}
{"input": "Remove sess_* files that were modified more than 2 days ago", "output": "find sess_* -mtime +2 -exec rm {} \\;"}
{"input": "Backup permissions of the files in the current directory tree", "output": "find -depth -printf '%m:%u:%g:%p\\0' >saved-permissions"}
{"input": "Continuously send \"y\" to input of \"command-that-asks-for-input\"", "output": "yes | command-that-asks-for-input"}
{"input": "Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output", "output": "find . -type f -exec grep California {} \\; -print | wc -l"}
{"input": "Find all .java files starting from the current folder", "output": "find . -name \"*.java\""}
{"input": "Remove `core' files whose status was changed more than 4 days ago", "output": "find `pwd` -name core -ctime +4 -execdir /bin/rm -f {} \\;"}
{"input": "List the current directory recursively ignoring the \"dir1\" subdirectory", "output": "find . -path ./dir1\\*  -prune -o -print"}
{"input": "Print the last mounted drive", "output": "mount | tail -1 | sed 's/ on .* ([^)]*)$//'"}
{"input": "show all the files in the current folder which has the word \"ITM\"", "output": "find . -name \u2018*ITM*\u2019"}
{"input": "Split \"data.tsv\" into files of at most 100 MiB preserving lines and use a prefix of \"data.tsv.\" and numeric suffixes", "output": "split -C 100m -d data.tsv data.tsv."}
{"input": "Display the named characters in \"line1\\r\\nline2\"", "output": "echo -e \"line1\\r\\nline2\" | awk '{ print $0; }' | od -a"}
{"input": "delete all the files in the file system which belong to the user edwarda", "output": "find / -user edwarda -exec rm \"{}\" \\;"}
{"input": "find all normal/regular files in current folder which end with \"~\" or which begin and end with \"#\" and and and delete them", "output": "find . -maxdepth 1 -type f -name '*~' -delete  -or -name '#*#' -delete"}
{"input": "Find all files/directories under current directory tree wihout descending into './src/emacs' directory", "output": "find . -path './src/emacs' -prune -o -print"}
{"input": "Change permission to 755 of all files/directories under current directory tree that have 777 permission", "output": "find -perm 777 | xargs -I@ sudo chmod 755 '@'"}
{"input": "ask user confirmation and delete all the files in the directory /mydir which have not been accessed in the last 100*24 hours", "output": "find /mydir -atime +100 -ok rm {} \\;"}
{"input": "find all the directories in the file system which begin with \"man\"", "output": "find / -type d -name 'man*' -print"}
{"input": "change the owner of all the files in the file system which belong to the user with the uid 999", "output": "find / -user 999 -exec chown NEWUSER {} \\;"}
{"input": "Searches through the /usr/local directory for files that end with the extension .html. When these files are found, their permission is changed to mode 644 (rw-r--r--).", "output": "find /usr/local -name \"*.html\" -type f -exec chmod 644 {} \\;"}
{"input": "replace the name php_admin_flag to #php_admin_flag in all the .htaccess files in the folder /home/nobody/public_html", "output": "find /home/nobody/public_html -type f -name .htaccess -exec replace \"php_admin_flag\" \"#php_admin_flag\" -- {} \\;"}
{"input": "Display a named character dump of \"test.sh\"", "output": "od -a test.sh"}
{"input": "Compare files in \"/tmp/dir1\" and \"/tmp/dir2\", treating absent files as empty and all files as text", "output": "diff -Nar /tmp/dir1 /tmp/dir2/"}
{"input": "Creates temporary file in TMPDIR folder or /tmp/ if TMPDIR is not defined, named by template ${tempname}.XXXXXX, and saves path to new file in  a TMPPS_PREFIX variable.", "output": "TMPPS_PREFIX=$(mktemp \"${TMPDIR:-/tmp/}${tempname}.XXXXXX\")"}
{"input": "Save the user name of the current user to variable \"x\"", "output": "x=$(whoami)"}
{"input": "Unzip all *.zip files under current directory", "output": "find . -name '*.zip' | xargs -n1 unzip"}
{"input": "find all the files ending with undo in the current folder and calculate the total size of these files", "output": "find . -name \"*.undo\" -ls | awk '{total += $7} END {print total}'"}
{"input": "List all *.txt files/directories under current directory", "output": "find . -name \"*.txt\" -exec $SHELL -c 'echo \"$0\"' {} \\;"}
{"input": "List all directories in maximum 1 level down the current directory", "output": "find . -type d -maxdepth 1 -exec ls -dlrt {} \\;"}
{"input": "search in the current folder for the files that begin with \"myletter\"", "output": "find . -name 'myletter*' -print"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\\n'| sort -n | tail -n1"}
{"input": "display all the regular/normal files in the current folder which are modified after a file", "output": "find . -type f -newer \"$FILE\""}
{"input": "find all the files in the folder ./machbook and change the owner of them to the user with id \"184\"", "output": "find ./machbook -exec chown 184 {} \\;"}
{"input": "display all files in current folder ending with \"~\" or \"#\" using regular expression", "output": "find -regex \"^.*~$\\|^.*#$\""}
{"input": "Search the /path directory tree for files lacking the group writable bit", "output": "find /path ! -perm /020"}
{"input": "Print reverse lookup for IP address 72.51.34.34", "output": "dig -x 72.51.34.34"}
{"input": "Save full path of command \"tr\" to variable \"TR\"", "output": "TR=`which tr`"}
{"input": "Find all regular files in the home directory tree that were modified in the last 24 hours", "output": "find ~ -type f -mtime 0"}
{"input": "Unzip \"large.csv.gz\" and save every 1000 lines into a file with prefix \"xxx\"", "output": "gzcat large.csv.gz | split -l 1000 - xxx"}
{"input": "display the contents of all the regular/normal files in the entire file system with the name dummy and discard all the errors and save the output to the files tesst.txt", "output": "find / -type f -name dummy 2>/dev/null -exec cat {} \\; >tesst.txt"}
{"input": "find the \"MyCProgram.c\" file (case insensitive find) under the current directory", "output": "find -iname \"MyCProgram.c\""}
{"input": "Split \"<file_name>\" into files of at most 1024 MiB in size", "output": "split -b 1024m <file_name>"}
{"input": "Prints name of a current shell binary file.", "output": "ls -l /proc/$$/exe | sed 's%.*/%%'"}
{"input": "find all regular/normal files in the current folder and display them in the a format.", "output": "find -type f -exec perl -e 'printf qq[%s => %s\\n], scalar @ARGV, length join q[ ], @ARGV' {} +"}
{"input": "Find all files under current directory excluding the $OUTPUT file, calculate their md5sum with $MD5SUM_OPTIONS options and redirect the result to $OUTPUT", "output": "find . -type f ! -name \"$OUTPUT\" -exec md5sum $MD5SUM_OPTIONS {} + > $OUTPUT"}
{"input": "Save directory \"../../lib\" relative to the executable \"gcc\" to variable \"libdir\"", "output": "libdir=$(dirname $(dirname $(which gcc)))/lib"}
{"input": "Finds name of a current month and saves it in a 'month' variable.", "output": "month=$(cal | head -1 | grep -oP \"[A-Za-z]+\")"}
{"input": "find all the cpp files in the current folder and move them to another folder(plus takes the bulk output of the find command and gives it as input to the move command in exec)", "output": "find . -type f -iname '*.cpp' -exec mv -t ./test/ {} \\+"}
{"input": "Find '.git' directories in directory tree /home/madhu/release/workspace", "output": "find /home/madhu/release/workspace -type d -name '.git'"}
{"input": "display the contents of all the text files in the current directory", "output": "find . -name  '*.txt' -exec cat {} \\;"}
{"input": "Print all the file/directory paths under current directory", "output": "find | xargs"}
{"input": "Print list of bash command aliases.", "output": "alias -p | cut -d= -f1 | cut -d' ' -f2"}
{"input": "Find out if there are any files on the system owned by user `account'", "output": "find / -path /proc -prune -o -user account -ls"}
{"input": "display all the \"C\" files in the current folder", "output": "find . -name \"*.c\""}
{"input": "Enables shell option 'promptvars'.", "output": "shopt -s promptvars"}
{"input": "find all files in the a direcotry which have been modified in exactly 1 day back", "output": "find /home/bozo/projects -mtime 1"}
{"input": "Find all Executable files", "output": "find / -perm /a=x"}
{"input": "Create a copy of index.html in all directories in current directory whose name contains Va, pausing for confirmation before overwriting any existing files - names may not contain spaces.", "output": "find . -mindepth 1 -maxdepth 1 -type d| grep \\/a |xargs -n 1 cp -i index.html"}
{"input": "Replace \",,\" with \", ,\" in \"$file\" and display the \",\" delimited result as a table in \"less\" with a shift value of 5 and line numbers", "output": "cat \"$file\" | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S"}
{"input": "Find disk used space of only the target directory", "output": "du --max-depth=0 ./directory"}
{"input": "Find all files under $YOUR_DIR", "output": "find $YOUR_DIR -type f"}
{"input": "set alias jump for command \"cd $(myscript.sh)\"", "output": "alias jump=\"cd $(myscript.sh)\""}
{"input": "Recursively removes all files like '*.pyc' in a current folder.", "output": "find . -name \"*.pyc\"|xargs rm -rf"}
{"input": "Run rsync with options specified by variable OPTS, copying directory(ies) specified by variable FIND, and to destination specified by variable BACKUPDIR.", "output": "rsync $OPTS $FIND $BACKUPDIR"}
{"input": "Recursively changes group ownership of everything within a current folder to 'admin'.", "output": "chgrp -R admin *"}
{"input": "Find all files/directories under current directory tree with '.old' extension", "output": "find . -name \u201d*.old\u201d -print"}
{"input": "Read two bytes from \"/dev/urandom\" and print them as an unsigned integer", "output": "od -A n -N 2 -t u2 /dev/urandom"}
{"input": "Unsets environment variable 'z'.", "output": "unset z"}
{"input": "Copy recursively \"/source/backup\" to \"/destination\" preserving symbolic links, modification times, and permissions", "output": "rsync -rtvpl /source/backup /destination"}
{"input": "Unzip and extract \"userAgent=[^=]*'\" from \"input.gz\"", "output": "zcat input.gz | grep -o 'userAgent=[^=]*' | sed 's/ [^ ]*$//'"}
{"input": "List all files in /home/bozo/projects directory tree that were modified within the last day.", "output": "find /home/bozo/projects -mtime -1"}
{"input": "Print last 10 commands in history", "output": "history 10"}
{"input": "Remove all files under /home/user/Maildir/.SPAM/cur", "output": "find /home/user/Maildir/.SPAM/cur -type f -exec rm '{}' +"}
{"input": "Delete all the .c files present in the current directory and below", "output": "find . -name \"*.c\" | xargs rm -f"}
{"input": "search for all the mp3 files in the folder /home/you which have been accessed 24 ago", "output": "find /home/you -iname \u201c*.mp3\u201d -atime 01 -type -f"}
{"input": "Print the largest 20 files under current directory", "output": "find . -type f -printf '%s %p\\n' | sort -rn | head -20"}
{"input": "Search for 'invalidTemplateName' in all regular files in directories/files taken from the glob pattern './online_admin/*/UTF-8/*' and show the matched lines with the filenames", "output": "find ./online_admin/*/UTF-8/* -type f -exec grep -H \"invalidTemplateName\" {} \\;"}
{"input": "find StringBuffer in all *.java files, ignoring case", "output": "find . -type f -name \"*.java\" -exec grep -il string {} \\;"}
{"input": "Get current hosts's IPv4 address.", "output": "host $(uname -n) | grep \"address\" | grep -v \"IPv6\" | head -n 1 | awk '{print $4}'"}
{"input": "Sort file \"foo.txt\" by line to standard output", "output": "sort foo.txt"}
{"input": "Find all directories under /home/username/tmp and set their permission to 770", "output": "find /home/username/tmp -type d -exec chmod 770 {} +"}
{"input": "Find all files that belongs to group 'root' under / directory and show a few lines of output from the beginning", "output": "find / -group root | head"}
{"input": "Copy all files under director 'foo' whose name doesn't contain 'Music' to directory 'bar'.", "output": "find foo -type f ! -name '*Music*' -exec cp {} bar \\;"}
{"input": "Make a list of all files in the current directory tree, except *.png and *.class, and view it in the vim editor", "output": "find . | grep -v \"\\.png$\" | grep -v \"\\.class$\" | vim -"}
{"input": "find all the perl files in /var/www", "output": "find /var/www/ -type f -name \"*.pl\" -print"}
{"input": "Close the current screen session", "output": "screen -X quit"}
{"input": "sort and display the unique lines display the contents of all the files that have been modified in the last 91 days and not in the last 2 days", "output": "find .  -name \"*.txt\" -type f -daystart -mtime -91 -mtime +2 | xargs cat | sort | uniq"}
{"input": "Print every two lines in \"num.txt\" on a single line separated by a space", "output": "paste -d' ' <(sed -n 'p;n' num.txt) <(sed -n 'n;p' num.txt)"}
{"input": "Compare each file in \"repos1/\" and \"repos2/\", treat absent files as empty, ignore differences in whitespace and tab expansions, and print 3 lines of unified context", "output": "diff -ENwbur repos1/ repos2/"}
{"input": "Rename all files in the current directory to the md5 sum followed by the extension and print the conversions", "output": "md5sum * | sed -e 's/\\([^ ]*\\) \\(.*\\(\\..*\\)\\)$/mv -v \\2 \\1\\3/e'"}
{"input": "Display what flags mount points are mounted with", "output": "mount -l"}
{"input": "List running screen sessions", "output": "screen -ls"}
{"input": "display all regular/normal files in a directory", "output": "find $directory -type f"}
{"input": "search for the regular/normal file \"Dateiname\" in the entire file system", "output": "find / -type f -iname \"Dateiname\""}
{"input": "Use the last 100 lines of \"file1\" as input to \"wc -l\" and monitor the pipeline with the \"pv\" command", "output": "tail -n 100 file1 | pv | wc -l"}
{"input": "search in the home folder for all the files with the name \"monfichier\"", "output": "find /home/ -name monfichier"}
{"input": "find all the files in the current folder which have been accessed in the last 24 hours", "output": "find . -type f -atime 1"}
{"input": "Update the archived copy of the home directory, \"alldata.tar\"", "output": "find ~/ -newer alldata.tar -exec tar uvf alldata.tar {} ;"}
{"input": "Prints string \"0 1 * * * /root/test.sh\" to the terminal, and append it to file '/var/spool/cron/root'", "output": "echo \"0 1 * * * /root/test.sh\" | tee -a /var/spool/cron/root"}
{"input": "Find all files under \"/path\" that do not contain a \".\" and append \".jpg\" to their file name", "output": "find /path -type f -not -name \"*.*\" -print0 | xargs -0 rename 's/(.)$/$1.jpg/'"}
{"input": "display all files in the current folder which are not empty", "output": "find . ! -size 0k"}
{"input": "Print the day 1 day ago", "output": "date --date='1 days ago' '+%a'"}
{"input": "Find SUID files", "output": "find / -perm +u=s"}
{"input": "Find all files in /dir1 and print only the filenames (not paths)", "output": "find ./dir1 -type f -exec basename {} \\;"}
{"input": "Find all *.txt files/directories under current directory", "output": "find . -name \"*.txt\" -print"}
{"input": "display all the files in the user folder which have been modified after the files /tmp/stamp$$", "output": "find /usr -newer /tmp/stamp$$"}
{"input": "Find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree and show them by paging through one screenful at a time", "output": "find ~ -iname \"screen*\" | more"}
{"input": "Prints long listing of content in the current folder with C-style escapes for nongraphic characters", "output": "ls -lb"}
{"input": "Find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days", "output": "find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90"}
{"input": "Find *.java files in the current directory and replace foo with bar in those files", "output": "find . -name \"*.java\" -exec sed -i '' s/foo/bar/g \\;"}
{"input": "Send SIGKILL to all processes owned by user 'daniel', terminating them instantly.", "output": "kill -9 $(lsof -t -u daniel)"}
{"input": "Recursively add read and directory access to all permissions of all files and directories", "output": "chmod -R a+rX *"}
{"input": "Recursively compresses all files within $2 folder.", "output": "find $2 -type f -exec bzip2 {} \\;"}
{"input": "Find all directories under /home/username/public_html/sites/all/themes and set their permission to 750", "output": "find /home/username/public_html/sites/all/themes -type d -exec chmod 750 {} +"}
{"input": "find all files that do not have read permission to all", "output": "find . -type f ! -perm -444"}
{"input": "Run your_command_here for each file found under /target/path with the file path as argument", "output": "find /target/path -type f -exec your_command_here \\{\\} \\;"}
{"input": "Search for 'foo=' in all *.png files under current directory without descending into *.gif and *.svn directories", "output": "find . -name \"*.png\" -prune -o -name \"*.gif\" -prune -o -name \"*.svn\" -prune -o -print0 | xargs -0 -I FILES grep -IR \"foo=\" FILES"}
{"input": "Remove all .sh files in the current directory tree whose names begin with \"t\"", "output": "find . -name \"t*.sh\" -exec rm -vf '{}' \\;"}
{"input": "Rename all regular files under current directory tree with inode number 31467125 to 'new_name.html'", "output": "find . -type f -inum 31467125 -exec mv {} new_name.html \\;"}
{"input": "Execute '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i \"(jpg|bmp|png|gif)$\"`' every 300 seconds and display without title", "output": "watch -n 300 -t '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i \"(jpg|bmp|png|gif)$\"`'"}
{"input": "Display the count of regular files for which the owner has read and execute permission under 'home/magie/d2' directory tree", "output": "find home/magie/d2 -type f -perm -u+rx | wc -l"}
{"input": "Remove all files containing 'sample' (case insensitive) in their names under '/home/user/Series' directory tree", "output": "/usr/bin/find /home/user/Series/ -iname \"*sample*\" -exec rm {} \\;"}
{"input": "Recursively change ownership of \"/usr/local\" to the current user", "output": "sudo chown -R `whoami` /usr/local"}
{"input": "Split standard input into files with at most 75 lines each", "output": "split --lines=75"}
{"input": "Search the current directory recursively for files containing \"needle text\"", "output": "find . -type f -exec grep -Iq . {} \\; -and -print0 | xargs -0 grep \"needle text\""}
{"input": "Find all the files called FindCommandExamples.txt of owner root", "output": "find / -user root -name FindCommandExamples.txt"}
{"input": "Find and remove multiple *.mp3 files", "output": "find . -type f -name \"*.mp3\" -exec rm -f {} \\;"}
{"input": "Mount \"cpuset\" filesystem on \"/cpuset/\"", "output": "mount -t cpuset none /cpuset/"}
{"input": "Continuously send \"Yes\" plus newline to the program \"./ittp-update.sh\"", "output": "yes Yes | ./ittp-update.sh"}
{"input": "Prepend the reverse history number to the output of the history command with arguments \"$@\"", "output": "history \"$@\" | tac | nl | tac"}
{"input": "Find executable files", "output": "find . -perm -100 -print"}
{"input": "display all the file in the folder /home/david/ which start with the word \"index\"", "output": "find /home/david -name 'index*'"}
{"input": "search for all the files in the entire file system which have either suid or sgid bit enabled and find of diff of these files with the file \"files.secure\".", "output": "find / \\( -perm 2000 -o -perm 4000 \\) -print | diff - files.secure"}
{"input": "find all normal/regular files in current folder and replace a word in all these files", "output": "find . -type f -print0 | xargs -0 sed -i '' 's/2013/2012/g'"}
{"input": "find all read me files in a folder", "output": "find /usr/share/doc -name README"}
{"input": "Find the process id of mysql", "output": "ps -A|grep mysql"}
{"input": "Remove the line matching \"pattern to match\" in \"./infile\" and print to standard output", "output": "sed '/pattern to match/d' ./infile"}
{"input": "Rename '.mkv' extension to '.avi' for all files/directories under '/volume1/uploads' directory tree", "output": "find /volume1/uploads -name \"*.mkv\" -exec rename 's/\\.mkv$/.avi/' \\{\\} \\;"}
{"input": "Sets shell option 'nullglob'.", "output": "shopt -s nullglob"}
{"input": "Run 'command', pausing and waiting for user interaction after each page of output.", "output": "command | more"}
{"input": "Find files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -print"}
{"input": "calculate the total size of jpg files in current folder", "output": "find . -name \"*jpg\" -exec du -k {} \\; | awk '{ total += $1 } END { print total/1024 \" Mb total\" }'"}
{"input": "search for all the mp3 files in the current folder and change the character encoding of them to  EUR-KR (Korean characters)", "output": "$ find . -name \"*mp3\" -print0 | xargs -0 mid3iconv -e EUR-KR -d"}
{"input": "Print appended data in \"file\" that match \"my_pattern\"", "output": "tail -f file | grep --line-buffered my_pattern"}
{"input": "Execute \"cd ${REMOTE_PATH}; mkdir -p $i\" on host \"$SERVER\" as user \"$USER\" and connect standard input to \"/dev/null\"", "output": "ssh $USER@$SERVER \"cd ${REMOTE_PATH}; mkdir -p $i\" < /dev/null"}
{"input": "Find all regular files that reside in the current directory tree and were last modified more than 4 days ago", "output": "find . -type f -mtime +4"}
{"input": "Display a long listing of all regular files with 0777 permission under current directory tree", "output": "find . -perm 0777 -type f -exec ls -l {} \\;"}
{"input": "Print URL \"http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr=\" followed by a number ranging from 1 to 786", "output": "yes 'http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr=' | nl -ba | sed 786q | grep . | awk '{print $2$1}'"}
{"input": "Change permissions to 644 for all files showing the respective chmod command", "output": "find ./ -type f -print0 | xargs -t -0 chmod -v 644"}
{"input": "Find all regular files under current directory tree, prepend '#' at the beginning of the lines that contain 'abc' in those files and modify them in-place", "output": "find . -type f -exec sed -i \u2018s/.*abc.*/#&/\u2019 {} \\;"}
{"input": "Remove all *.m4a files in the current directory and its subdirectories", "output": "find . -type f -name '*.m4a' -exec bash -c 'rm \"$0\"' '{}' \\;"}
{"input": "Running /path/to/my/script outputs the name of a directory, go into that directory.", "output": "cd `/path/to/my/script`"}
{"input": "Find files/directories under current directory and print them", "output": "find . -print0 | xargs    -0 echo"}
{"input": "search for a specific word in all files beginning with a specific word in the current directory", "output": "find . -name \"file_*\" -follow -type f -print0 | xargs -0 zcat | agrep -dEOE 'grep'"}
{"input": "Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety", "output": "find /mnt/zip -name \"*prefs copy\" -print0 | xargs    -0 -p /bin/rm"}
{"input": "Check if \"\\[$VLABEL\\]\" is mounted and save the result in variable \"AMV\"", "output": "AMV=$(mount -l | grep \"\\[$VLABEL\\]\")"}
{"input": "find all the files which have been modified in the last 15 minutes excluding hidden files.", "output": "find . -mmin -15 \\( ! -regex \".*/\\..*\" \\)"}
{"input": "Search current directory for any directory named \"config\" and go to first match found.", "output": "cd \"$(find . -name config -type d | sed 1q)\""}
{"input": "Copies files 'src/prog.js' and 'images/icon.jpg' with fully-defined path to '/tmp/package' directory.", "output": "cp --parents src/prog.js images/icon.jpg /tmp/package"}
{"input": "Delete and count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -mtime +$DAYS_TO_SAVE -exec bash -c 'printf \"count=0; for f; do rm \"$f\" && (( count++ )); done; printf \"Total: %d\\n\" $count' _ {} +"}
{"input": "Attempt to connect as root via ssh to host whose IP address or hostname is specified by environment variable IPADDRESS - this will normally fail because ssh servers normally don't accept root logins.", "output": "scp -rp \"DAILY_TEST_FOLDER\" \"root@${IPADDRESS}:/home/root/\""}
{"input": "find all files in the current folder which have not been accessed in the last 30 days in the current folder", "output": "find . -atime +30 -print"}
{"input": "Prints the Nth line of output from 'ls -1'", "output": "ls -1 | tail -n +N | head -n1"}
{"input": "display all the \".mov\" files in the current folder", "output": "find . -name \"*.mov\""}
{"input": "Print a column of CPU usage numbers", "output": "ps aux | tr -s '[:blank:]' | cut -d' ' -f3"}
{"input": "Find all directories under /home/username/public_html/modules  and set their permission to 750", "output": "find /home/username/public_html/modules -type d -exec chmod 750 {} +"}
{"input": "List all environment variables whose name starts with PATH, showing the name and value of each one.", "output": "env | grep ^PATH"}
{"input": "prints a line 19 lines from the line containing PATTERN", "output": "tac | sed -n '/PATTERN/,+19{h;d};x;/^$/!{p;s/.*//};x' | tac"}
{"input": "Find all files/directories named 'foo.bar' under './dir1' and './dir2' directory trees", "output": "find ./dir1 ./dir2 -name foo.bar -print"}
{"input": "Find *.html files in the current directory tree that were last modified more than 7 days ago", "output": "find . -mtime +7 -name \"*.html\" -print"}
{"input": "Archive \"src-dir\" to \"dest-dir\" on \"remote-user@remote-host\" and delete any files in \"dest-dir\" not found in \"src-dir\"", "output": "rsync -av --delete src-dir remote-user@remote-host:dest-dir"}
{"input": "Make directory \"/etc/cron.minute\"", "output": "mkdir /etc/cron.minute"}
{"input": "Find all the files that were modified more than one day ago", "output": "find . -mtime +1"}
{"input": "Remount \"/system\" with read and write permission", "output": "mount -o rw,remount /system"}
{"input": "display all the files in the current folder for the files which have been accessed in the last 24 hours", "output": "find . -type f -atime -1"}
{"input": "find all the files ending with \"clj\" in the current folder and search for a pattern", "output": "find . -name '*.clj' -exec grep -r resources {} \\;"}
{"input": "Infinitely ping every host listed in \"file-of-ips\" with at most 50 processes at once", "output": "cat file-of-ips | xargs -n 1 -I ^ -P 50 ping ^"}
{"input": "Find all files/directories under _CACHE_* directories", "output": "find _CACHE_*"}
{"input": "Replace \"foo\" with \"bar\" in all files in the current directory tree except hidden ones", "output": "find . -type f -not -name \u201c.*\u201d -print | xargs sed -i \u2018s/foo/bar/g\u2019"}
{"input": "Prints a random line from file", "output": "head -$((${RANDOM} % `wc -l < file` + 1)) file | tail -1"}
{"input": "Print each column in \"file\" with \"-\" character removed", "output": "fold -w1 file | pr -4t | tr -d '\\n\\t\\- ' | sed '$a\\'"}
{"input": "Search /usr, /home, /tmp for *.jar files suppressing error messages", "output": "find /usr /home  /tmp -name \"*.jar\" 2>/dev/null"}
{"input": "Print the second line of output of \"ls -l\"", "output": "ls -l | head -2 | tail -1"}
{"input": "Show what content owned by root has been modified within the last day", "output": "find /etc/ -user root -mtime 1"}
{"input": "change the permission of all the directories to 755 in the current folder", "output": "find -type d -exec chmod 755 {} \\;"}
{"input": "Search for the regex \"+\\S\\+\" in file 'in.txt' and print the matches by replacing newlines with comma (',')", "output": "grep -o \"+\\S\\+\" in.txt | tr '\\n' ','"}
{"input": "Calculate the SHA1 sum for the contents of the regular files in the path/to/folder directory tree", "output": "find path/to/folder -type f -print0 | sort -z | xargs -0 cat | sha1sum"}
{"input": "Extract any line in \"f1\" or \"f2\" which does not appear in the other", "output": "comm -3 <(sort -un f1) <(sort -un f2)"}
{"input": "List all *.png files/directories under /home/kibab directory", "output": "find /home/kibab -name '*.png' -exec echo '{}' ';'"}
{"input": "Find all regular files under and below /root that match pattern \"*linux*\", case insensitive", "output": "find /root -type f -iname \"*linux*\""}
{"input": "Find all regular files in .git and replace every occurrences of 'subdomainB.example.com'  with 'subdomainA.example.com' in those files", "output": "find .git -type f -print0 | xargs -0 sed -i 's/subdomainB\\.example\\.com/subdomainA.example.com/g'"}
{"input": "split file \"$file into pieces named with 5 character suffix", "output": "split -a 5 $file"}
{"input": "Enables shell option 'nullglob'.", "output": "shopt -s execfail"}
{"input": "List all files in maximum 2 levels down the current directory", "output": "find . -maxdepth 2  -type f -print0 | xargs -0 -n1 ls -l"}
{"input": "find all files in current folder which have been accessed exactly 10 minutes ago", "output": "find . -amin 10"}
{"input": "Find all empty files under a certain path", "output": "find /tmp -type f -empty"}
{"input": "Find a.out and object files in the current directory tree", "output": "find . ( -name a.out -o -name *.o ) -print"}
{"input": "Unzip \"doc.gz\" and gzip every 1000 lines", "output": "zcat doc.gz | split -l 1000 --filter='gzip > $FILE.gz'"}
{"input": "Pass all the files from the current directory tree as arguments to a single 'echo' command", "output": "find . -exec echo {} +"}
{"input": "Change ownership of \"/data/db\" to the current user", "output": "sudo chown `whoami` /data/db"}
{"input": "Find *log files/directories within a maximum of 3 levels of directories", "output": "find / -maxdepth 3  -name \"*log\""}
{"input": "Search for \"pattern\" in \"file\" and join each line by a space", "output": "cat file | grep pattern | paste -sd' '"}
{"input": "Find all directories named 'local' in entire file system", "output": "find / -name local -type d"}
{"input": "Find all build* directories under /var/www/html/ and print all but first 5 appending with the string 'rf '", "output": "find /var/www/html/ -type d -name \"build*\" | sort | tail -n +5 | xargs -I % echo -rf %"}
{"input": "Archive \"user@host1:/directory/\" to \"user@host2:/directory2/\" via ssh and compressing data during transmission", "output": "rsync -azvu -e ssh user@host1:/directory/ user@host2:/directory2/"}
{"input": "Print the contents of all \".py\" on the file system as input to \"tqdm --unit loc --unit_scale True | wc -l\"", "output": "find / -name '*.py' -exec cat \\{} \\; | tqdm --unit loc --unit_scale True | wc -l"}
{"input": "Find <fileName> files/directories under current directory", "output": "find -name \"<fileName>\""}
{"input": "set alias \"..\" for command \"cd ..\"", "output": "alias ..='cd ..'"}
{"input": "Count the number of \"X\" characters in \"infile\"", "output": "tr -d -C X <infile | wc -c"}
{"input": "Print each line in \"file1\" whose first word does not exist as the first word of any line in \"file2\"", "output": "join -v 1 <(sort file1) <(sort file2)"}
{"input": "Recursively change ownership of \"/usr/local/lib\" to the current user", "output": "sudo chown -R `whoami` /usr/local/lib"}
{"input": "find all the files and folder that were created in 2012 on Friday of every month", "output": "find / -daystart -mtime +41 -mtime -408 \\   -printf \"%M %n %u %g %10s %TY-%Tm-%Td %Ta %TH:%TM:%TS %h/%f\\n\" | awk '($7==\"Fri\"){print}'"}
{"input": "Find all PHP files under current directory that contain only one line", "output": "find . -type f -name '*.php' -exec grep -Hcm2 $ {} + | sed -n '/:1$/{s///;p}'"}
{"input": "Find all *.txt files/directories under current directory and execute the python script hello.py for each of them with the file path as an argument to the script", "output": "find . -name \"*.txt\" | python hello.py"}
{"input": "Delete all files under /path/to/files that are not newer than dummyfile", "output": "find /path/to/files -type f ! -newer dummyfile -delete"}
{"input": "Renumbers all windows in the session in sequential order.", "output": "tmux movew -r"}
{"input": "Find all files with '.db' extension (case insensitive) that belong to user 'exampleuser' and were modified exactly 7 days ago under '/home' directory tree", "output": "find /home -user exampleuser -mtime 7 -iname \".db\""}
{"input": "Sets 'globstar' shell option.", "output": "shopt -s globstar"}
{"input": "Search the home directory tree for files last modified less than 2 days ago or newer than file \"filename\"", "output": "find ~/ -mtime -2 -o newer filename"}
{"input": "Counts lines of /dir/file.txt file.", "output": "cat /dir/file.txt | wc -l"}
{"input": "Find all *.page (case insensitive) files/directories under current directory and run ~/t.sh for each of them with the file path as argument, then sort the output", "output": "find . -iname *.page -exec ~/t.sh {} \\; | sort"}
{"input": "List all variables (names only) with names containing X.", "output": "env | awk -F= '{if($1 ~ /X/) print $1}'"}
{"input": "Display only first and second dot-separated numbers of kernel version, ie. 4.4", "output": "uname -r | cut -d. -f1-2"}
{"input": "change the current working directory to \"B\" and display all the files in that folder and append the output to the file \"tmp.txt\"", "output": "cd B && find . >> ../tmp.txt"}
{"input": "Search the file system for regular files whose names are shorter than 25 characters", "output": "find / -type f -regextype posix-extended -regex '.*/.{1,24}$'"}
{"input": "Append the current date in '%Y%m%d_%H%M' format with the basename of $0 and save it to variable 'LOGNAME'", "output": "LOGNAME=\"`basename \"$0\"`_`date \"+%Y%m%d_%H%M\"`\""}
{"input": "Sort the lines of the file 'temp.txt' and change it in-place", "output": "sort temp.txt -o temp.txt"}
{"input": "Find and delete the file with inode number 1316256", "output": "find ./ -inum 1316256 -delete"}
{"input": "search for all the regular files that have been changed in the last 48 hours and sync these to another folder", "output": "find /my/source/directory -ctime -2 -type f -printf \"%P\\n\" | xargs -IFILE rsync -avR /my/./source/directory/FILE /my/dest/directory/"}
{"input": "Copy specific sub-directories \"company1/\" and \"company1/unique_folder1\" from \"user@server.com:/path/to/old/data/\" to \"/path/to/new/data\" via ssh", "output": "rsync -avzn --list-only --include 'company1/' --include 'company1/unique_folder1/***' --exclude '*' -e ssh user@server.com:/path/to/old/data/ /path/to/new/data"}
{"input": "Read hexadecimal bytes from device \"/dev/midi1\"", "output": "od -vtx1 /dev/midi1"}
{"input": "Find all files/directories named 'text' under current directory", "output": "find -name \"text\""}
{"input": "Find all files/directories containing 'blah' (case insensitive) in their names that were modified in less than 2 days ago uder current directory tree", "output": "find . -iname '*blah*' -mtime -2"}
{"input": "Limit each line in \"your_file\" to 80 characters and view via \"more\"", "output": "fold -80 your_file | more"}
{"input": "find all the normal/regular files in the folder \"pathfolder\" excluding all hidden files and display the count", "output": "find pathfolder -maxdepth 1 -type f -not -path '*/\\.*' | wc -l"}
{"input": "Search the current directory for files whose names start with \"messages.\" ignoring SVN, GIT, and .anythingElseIwannaIgnore files", "output": "find -name 'messages.*' -exec grep -Iw uint {} + | grep -Ev '.svn|.git|.anythingElseIwannaIgnore'"}
{"input": "Locate all the hard links of file `passwd'", "output": "find / -samefile passwd"}
{"input": "Rename all .png files, changing the string \"_h.png\" into \"_half.png\".", "output": "rename 's/_h.png/_half.png/' *.png"}
{"input": "Find all directories in the /data1/realtime directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago", "output": "find /data1/realtime -mmin -60 -mmin +5 -type d"}
{"input": "Unset RBENV_VERSION variable in global environment.", "output": "tmux set-environment -gu RBENV_VERSION"}
{"input": "list symbolic links under the directory \"$directory\"", "output": "find $directory -type l"}
{"input": "List each file or directory in the current directory prefixed with its filesize in MB and sorted from smallest to largest", "output": "du -smc * | sort -n"}
{"input": "Find all identical files in the /usr directory tree that are bigger than 10000 bytes and write the result to usr.dups", "output": "find /usr -type f | samefile -g 10000 >usr.dups"}
{"input": "Unzip \"file.gz\" and print each line with the 2nd | separated field greater than 5", "output": "zcat a.csv.gz | gawk '$2>5' FPAT='[^\"|]+'"}
{"input": "Find all OGG files in the home directory larger than 20 megabytes", "output": "find $HOME -iname '*.ogg' -size +20M"}
{"input": "Find all files under $1 directory excluding hidden files and append a null character at the end of each of their paths", "output": "find \"$1\" -path \"*/.*\" -prune -o \\( -type f -print0 \\)"}
{"input": "show all the regular/normal files in the folder /home/user/demo", "output": "find /home/user/demo -type f -print"}
{"input": "Recursively removes all files like \"(__pycache__|\\.pyc|\\.pyo$)\" in a current folder.", "output": "find . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf"}
{"input": "Find all *.foo files under current directory and print their contents", "output": "find . -name '*.foo' -exec cat {} \\;"}
{"input": "Recursively prints .txt files in current directory", "output": "find $(pwd) -name \\*.txt -print"}
{"input": "delete all the directories empty directories in the current folder", "output": "find . -type d -empty -delete"}
{"input": "Save the UTC date represented by time string $sting2 as the seconds since epoch to variable 'FinalDate'", "output": "FinalDate=$(date -u -d \"$string2\" +\"%s\")"}
{"input": "Change to the directory containing the \"oracle\" executable", "output": "cd \"$(dirname \"$(which oracle)\")\""}
{"input": "list all files under the current directory, writing the output to the file files_and_folders, suppressing all error messages.", "output": "find . 2>/dev/null > files_and_folders"}
{"input": "Find all files under $1, calculate their md5sums and redirect the results to $1__checksums.md5", "output": "find \"$1\" -type f -exec md5sum {} \\; > \"$1\"__checksums.md5"}
{"input": "Print a null delimited list of all *.emlx files/directories under /path/to/folders/ to filelist", "output": "find /path/to/folders/ -name \\*.emlx -print0 > filelist"}
{"input": "Print the list of files in the current directory tree excluding those whose paths contain \"exclude3\" or \"exclude4\"", "output": "find . | egrep -v \"(exclude3|exclude4)\" | sort"}
{"input": "This find command ignore the case when searching for file name , to ignore the case  in this example all .py & .PY file will search", "output": "find . -type f -iname \"*.py\""}
{"input": "Create a named screen session", "output": "screen -x main -p oldwindow -X title blah"}
{"input": "List the commands in /usr/bin, pausing for user input after each page.", "output": "more <( ls /usr/bin )"}
{"input": "Gets MAC address of eth0 network interface.", "output": "ifconfig eth0 | grep HWaddr | cut -d ' ' -f 9"}
{"input": "Find all .java files starting from the current folder", "output": "find * -name \"*.java\""}
{"input": "Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*", "output": "find  /path/to/directory/* -maxdepth 0 -type d -exec basename {} \\;"}
{"input": "Find all *.dbf files/directories in entire file system and print their sorted and unique parent directory paths", "output": "find / -name \\*.dbf -print0 | xargs -0 -n1 dirname | sort | uniq"}
{"input": "Read a line from standard input into variable \"REPLY\" with prompt \"> $line (Press Enter to continue)\"", "output": "read -p \"> $line (Press Enter to continue)\""}
{"input": "looks for all files larger than 10 megabytes (10485760 bytes) within /home", "output": "find /home -type f -size +10485760c -print"}
{"input": "Print the most recently modified file", "output": "ls -1tr * | tail -1"}
{"input": "Find recursively all regular .txt files in the current directory tree except README.txt", "output": "find . -type f -name \"*.txt\" ! -name README.txt -print"}
{"input": "display all the header files  and cpp files in the current folder", "output": "find . -regex '.*\\.\\(cpp\\|h\\)'"}
{"input": "Print '111 22 3\\n4 555 66\\n' by replacing the spaces with tabs and '\\n' with newlines", "output": "echo -en '111 22 3\\n4 555 66\\n' | tr ' ' '\\t'"}
{"input": "get the git user access", "output": "su git"}
{"input": "Find all files that belongs to user root under / directory and show a few lines of output from the beginning", "output": "find / -user root | head"}
{"input": "Rename all \"thumbs\" directories to \"thumb\" in the current directory and 1 level below", "output": "find . -maxdepth 2 -type d | sed 'p;s/thumbs/thumb/' | xargs -n2 mv"}
{"input": "Open a ssh connection to \"user@host\" with a control socket \"/tmp/%r@%h:%p\"", "output": "ssh user@host -S /tmp/%r@%h:%p"}
{"input": "Sets shell option 'extglob'.", "output": "shopt -s extglob"}
{"input": "Searches for 'something' in a large file and prints the matching line", "output": "grep -n 'something' HUGEFILE | head -n 1"}
{"input": "Search for 'js' in all files under current directory that match 'some string' in their names", "output": "find . | grep 'some string' | grep js"}
{"input": "display all the files in the current folder", "output": "find ."}
{"input": "Remove everything in a current folder without prompting.", "output": "rm -rf *"}
{"input": "Format bash array \"${arr}\" in columns", "output": "echo \" ${arr[@]/%/$'\\n'}\" | column"}
{"input": "Calculate MD5 sums for all regular files in the current directory tree and save the result as \"MD5SUMS\"", "output": "find . -type f -exec md5sum {} \\; > MD5SUMS"}
{"input": "Find all files/directories under current directory tree that start with 'test' in their names without descending into directories with the same name pattern", "output": "find . -name 'test*' -prune"}
{"input": "Force delete all files in the temp folder which have not been accesses in the last 240 hours", "output": "find /tmp/* -atime +10 -exec rm -f {} \\;"}
{"input": "find all the png files in current folder which are present in the pattern list file \"search.txt\"", "output": "find . -name '*.png' | grep -f <(sed s/^/[0-9]_[0-9]_[0-9]_/ search.txt)"}
{"input": "show all the files in the current folder excluding those from the directories whose name starts with \"git\"", "output": "find . -type d -name '.git*' -prune -o -type f -print"}
{"input": "Find .rmv files in the ./root directory recursively and copy them to directory /copy/to/here", "output": "find root -name '*.rmv' -type f -exec cp {} /copy/to/here \\;"}
{"input": "Measure the disk space taken up by all TXT files in the current directory tree", "output": "find . -iname \"*.txt\" -exec du -b {} + | awk '{total += $1} END {print total}'"}
{"input": "Print chmod commands that can change permissions of regular files residing in the current directory tree to u=rw,g=r,o=", "output": "find . -type f -exec echo chmod u=rw,g=r,o= '{}' \\;"}
{"input": "Split the sorted and unique lines in files \"emails_*.txt\" into files with at most 200 lines each with numeric suffixes of length 4", "output": "sort --unique emails_*.txt | split --numeric-suffixes --lines=200 --suffix-length=4 --verbose"}
{"input": "Remove all 'a.out', '*.o', and 'core' files in the current directory tree", "output": "find . \\( -name a.out -o -name '*.o' -o -name 'core' \\) -exec rm {} \\;"}
{"input": "Find all files/directories under current directory and print their paths", "output": "find . -exec echo {} ';'"}
{"input": "Copy all files named 'script.sh' in directory 'olddir' to directory 'newdir'", "output": "find olddir -name script.sh -printf \"%p\\0\" -printf \"newdir/%P\\0\" | xargs -0L2 cp -n"}
{"input": "Recursively finds in all folders but \"./output/*\" all files but *.o, *.swp and prints strings with 'soc_attach' text pattern and number of matched string.", "output": "find .  \\( ! -path \"./output/*\" \\) -a \\( -type f \\) -a \\( ! -name '*.o' \\) -a \\( ! -name '*.swp' \\) | xargs grep -n soc_attach"}
{"input": "Copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/copy.' directory", "output": "find /home/mine -iname \"*.png\" -execdir cp {} /home/mine/pngcoppies/copy{} \\;"}
{"input": "Print the list of directories that are present in the /mnt/raid directory tree", "output": "find /mnt/raid -type d"}
{"input": "Delete all .svn subdirectories under current directory", "output": "rm -rf `find . -type d -name \".svn\"`"}
{"input": "Search the current directory tree for .log files containing the string \"The SAS System\", and save their names to sas_log_list.txt", "output": "find . -name \"*.log\" -exec grep -l \"The SAS System\" {} \\; > sas_log_list.txt"}
{"input": "Search the /Path directory tree for files matching pattern \"file_name*\" and containing \"bar\" in their pathnames", "output": "find /Path -name \"file_name*\" | grep \"bar\""}
{"input": "From the list of words (one per line) in list1.txt, display the number of occurrences of this word in list2.txt and sort the results from highest to lowest count.", "output": "grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n"}
{"input": "Find all files with '.txt' extension under '/home/my_dir' dirctory tree and display the number of lines in these files", "output": "find /home/my_dir -name '*.txt' | xargs grep -c ^.*"}
{"input": "Copy current working directory to clipboard", "output": "pwd | tr -d '\\n' | pbcopy"}
{"input": "Create empty files (or update timestamps if they exist) with names matching each word in variable \"correctFilePathAndName\"", "output": "echo -e \"$correctFilePathAndName\" | xargs touch"}
{"input": "Join lines in file \"A\" with lines in file \"B\" if the lines share a common first word", "output": "join <(sort -n A) <(sort -n B)"}
{"input": "Print all user names and terminals of users who are logged in", "output": "who | awk '{ print $1, $2 }'"}
{"input": "Search the current directory tree for symbolic links to files matching pattern '*/test*'", "output": "find -P . -lname '*/test*'"}
{"input": "Write the current date and time followed by \" 0\" to the console and append to \"log.csv\"", "output": "echo $(date) \"0\" | tee -a log.csv"}
{"input": "Print numbers from 1 to 5 without separating spaces", "output": "seq 5 | awk '{printf \"%s\", $0} END {print \"\"}'"}
{"input": "Display mime type of file specified by variable \"file\"", "output": "file -ib \"$file\""}
{"input": "Find directories modified within the last 7 days", "output": "find . -mtime -7 -type d"}
{"input": "Set the 'xtrace' shell variable", "output": "set -x"}
{"input": "display the help of find command", "output": "find --help"}
{"input": "Find all files in current directory and execute 'echo first; false' for each file", "output": "find . -type f -exec sh -c 'echo first; false' \\; -exec echo second \\;"}
{"input": "Find all files/directories named 'javac' under current directory", "output": "find . -name 'javac'"}
{"input": "Prints dates of $m month in $y year, preceded by month number and slash like ' 10/1'.", "output": "cal $m $y | sed -e '1,2d' -e 's/^/ /' -e \"s/ \\([0-9]\\)/ $m\\/\\1/g\""}
{"input": "print the names of all of the unstripped binaries in the /usr/local directory tree. Builtin tests avoid running file on files that are not regular files or are not executable", "output": "find /usr/local -type f -perm /a=x | xargs file |  grep 'not stripped' | cut -d: -f1"}
{"input": "display all the files in current folder which have been changed in the last 24 hours", "output": "find . -ctime -1 -print"}
{"input": "Convert Unix `cal` output to latex table code.", "output": "cal -h 02 2012| cut -c4-17 | sed -r 's/(..)\\s/\\0\\t\\&/g' | sed 's/$/\\t\\\\\\\\/' | head -n-1 | tail -n +2"}
{"input": "Print sorted list of strings from 'ip_addresses' file, with number of occurrences of each string.", "output": "sort ip_addresses | uniq -c"}
{"input": "create directory dir1", "output": "mkdir dir1"}
{"input": "Find all directories under '.cache/chromium/Default/Cache' that are bigger than 100 MB in size excluding single letter directory names", "output": "find .cache/chromium/Default/Cache/ -type d -print0 | du -h | grep '[0-9]\\{3\\}M' | cut -f2 | grep -v '^.$'"}
{"input": "List all regular files residing in the current directory tree and containing string \"/bin/ksh\"", "output": "find . -type f -print | xargs grep -li 'bin/ksh'"}
{"input": "Search the system for files and directories owned by user `admin'", "output": "find / -user admin -print"}
{"input": "List \".java\" files that have the same contents", "output": "md5sum *.java | sort | uniq -d -w32"}
{"input": "Prints full path to files in a current folder.", "output": "ls -d $PWD/*"}
{"input": "Search for all non-hidden files", "output": "find . -name '*'"}
{"input": "Print all files containing \"word1\" and \"word2\" in the current directory tree", "output": "comm -12 <(grep -rl word1 . | sort) <(grep -rl word2 . | sort)"}
{"input": "Split the output of \"ls\" into files of at most 500 lines each with prefix \"outputXYZ.\"", "output": "ls | split -l 500 - outputXYZ."}
{"input": "Print the hexadecimal bytes and printable characters of \"Hello world\"", "output": "echo Hello world | od -t x1 -t c"}
{"input": "Find all files with name ending with .txt and display only the filenames without full paths", "output": "find ./ -name \"*.txt\" | rev | cut -d '/' -f1 | rev"}
{"input": "find in the entire file system for the files which have sticky bit.", "output": "find / -perm 0551"}
{"input": "find all the files in the folder /opt which have been accessed exactly 20 days ago", "output": "find /opt -atime 20"}
{"input": "Find directories in /home/vmail that match pathname \"*/*/Maildir/.LearnAsSpam/cur\", and move them to folder .Junk/cur", "output": "find /home/vmail/ -type d -path \"*/*/Maildir/.LearnAsSpam/cur\" -exec sh -c '(cd {} && mv ./* ../../.Junk/cur)' ';'"}
{"input": "Counts lines of all *.txt files in a current folder.", "output": "cat *.txt | wc -l"}
{"input": "Count the number of lines in all \".php\" files in the current directory tree using bash for Windows", "output": "cat `/gnuwin32/bin/find.exe . -name *.php` | wc -l"}
{"input": "Find all .sql files in the current directory recursively and apply script \"scriptname\" to them", "output": "find . -name '*.sql' -exec scriptname {} +"}
{"input": "Extract 8 bytes as an unsigned integer that is \"$o\" offset into \"$rpm\"", "output": "set `od -j $o -N 8 -t u1 $rpm`"}
{"input": "Find files in the current directory tree that were accessed within the last 60 minutes", "output": "find . -amin -60"}
{"input": "Wrap standard input to fit in 10 characters per line", "output": "fold -w 10"}
{"input": "Find all *.txt and *.json files", "output": "find . -type f \\( -name \"*.txt\" -o -name \"*.json\" \\)"}
{"input": "search for all the files in the current directory which belong to the user \"xuser1\" and change the owner ship of them to \"user2\"", "output": "find . -user xuser1 -exec chown -R user2 {} \\;"}
{"input": "search in all the directories of the folder /PROD for JSON files and send them as input to the python file /tmp/test.py", "output": "find /PROD -type d -exec sh -c 'cd \"{}\" && for f in *.json; do /tmp/test.py \"$f\"; done' \\;"}
{"input": "Print a frequency count of column two for every file in the current directory", "output": "awk -F '\\t' '{print $2}' * | sort | uniq -c | sort -nr"}
{"input": "Remove files named \"core\" from the /work directory tree and write their names to /dev/stderr (the standard error", "output": "find /work \\( -fprint /dev/stderr \\) , \\( -name 'core' -exec rm {} \\; \\)"}
{"input": "Recursively change the group of all files in \"/var/lib/php/session\" to \"lighttpd\"", "output": "chown -R :lighttpd /var/lib/php/session"}
{"input": "find all html files in the current directory which have size greater than 100 bytes and display their details and discard all the errors.", "output": "find . \\( -size 100 -o -size -100 \\)  -name '*.html' \\    -exec  ls -l {} \\;  2> /dev/null"}
{"input": "List all files with their modification time in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time and sort them according to file modification time", "output": "find / -type f -name \"*\" -newermt \"$newerthan\" ! -newermt \"$olderthan\" -printf \"%T+\\t%p\\n\" | sort"}
{"input": "Remove trailing white spaces from all files under current directory ignoring .git and .svn directories", "output": "find . -not \\( -name .svn -prune -o -name .git -prune \\) -type f -exec sed -i \"s/[[:space:]]*$//g\" \"{}\" \\;"}
{"input": "Find files not matching shell pattern '*/vendor/*'", "output": "find . -not -wholename '*/vendor/*"}
{"input": "Find recursively all regular files in the current directory tree ending in .dll or .exe", "output": "find . -type f | grep -P \"\\.dll$|\\.exe$\""}
{"input": "find all the files in the folder .home/calvin which have been modified in th last 45 minutes", "output": "find /home/calvin/ -mmin -45"}
{"input": "Find files containing string \"#!/bin/ksh\" and append their names and matching strings to /tmp/allfiles", "output": "find . -type f -execdir /usr/bin/grep -iH '#!/bin/ksh' {} \\; | tee /tmp/allfiles"}
{"input": "extract archive stored in $1", "output": "tar -zxvf $1"}
{"input": "Search the /Path directory tree for files matching pattern \"file_name*\"", "output": "find /Path -name \"file_name*\""}
{"input": "Find files/directories under current directory excluding the path ./src/emacs", "output": "find . -path ./src/emacs -prune -o -print"}
{"input": "find all text files in user/directory/ which have been modified today and display the last line of these files", "output": "find /user/directory/ -name \"*txt\" -mtime 0 -type f -exec printf '%s: ' {} \\; -exec tail -1 {} \\;"}
{"input": "For each line of the sorted output of both file1 and file2, print lines whose first field of file2 does not appear as first field of file1.", "output": "join -v1 <(sort file1) <(sort file2)"}
{"input": "change the permissions of all regular/normal files in the current directory, print0 is used for handling files with newlines in their file name", "output": "find . -type f -print0 | xargs -0 chmod 664"}
{"input": "display the count of all the normal/ regular files in the current directory", "output": "find . -type f |wc -l"}
{"input": "display a long listing of all the files in the /var folder which are bigger than 10MB. print0 is used to handle the files which have new lines in their names", "output": "find /var -size +10000k -print0 | xargs -0 ls -lSh"}
{"input": "display the list of all the normal files excluding hidden files which have been accessed in the last 500 days", "output": "find . -type f -not -name \u2018.*\u2019 -mtime +500 -exec ls {} \\;"}
{"input": "Count the number of .java files in all folders rooted in the current folder", "output": "find . -name \"*.java\" | wc -l"}
{"input": "display all the files in the current folder which have been modified in the last 2 days", "output": "find . -mtime -2"}
{"input": "Delete files with inode number specified by [inode-number] under current directory", "output": "find . -inum [inode-number] -exec rm -i {} \\;"}
{"input": "Find all *.mp4 files under /foo/bar and move them to /some/path", "output": "find /foo/bar -name '*.mp4' -print0 | xargs -I{} -0 mv -t /some/path {}"}
{"input": "Create intermediate directories as required and directory  /my/other/path/here", "output": "mkdir -p /my/other/path/here"}
{"input": "Gets list of IP addresses of all network interfaces.", "output": "ifconfig | awk -F\"[ :]+\" '/inet addr/ && !/127.0/ {print $4}'"}
{"input": "Delete \"\\n\\r\" from \"yourfile.txt\"", "output": "tr -d \"\\n\\r\" < yourfile.txt"}
{"input": "Save number of lines in '/some/big/file' to 'LINES' variable", "output": "LINES=$(cat /some/big/file | wc -l)"}
{"input": "Search for the regex ^catalina in the first line of each file under current directory", "output": "find -type f | xargs head -v -n 1 | grep -B 1 -A 1 -e '^catalina'"}
{"input": "Find all files/directories under current directory with the null character as the delimiter", "output": "find -print0"}
{"input": "display all the mp4 and flv files in a folder along with their timestamps in the sorted order of time", "output": "find /storage -type f \\( -name '*.mp4' -o -name '*.flv' \\) -printf '%T@ %p\\0' | sort -zn)"}
{"input": "Save a comma separated list of all directories under current directory tree to variable 'FOLDER'", "output": "FOLDERS=$(find . -type d -print0 | tr '\\0' ',')"}
{"input": "Check if *RBENV* variable is defined in tmux session 'sessname' environment.", "output": "tmux show-environment -t sessname | grep RBENV"}
{"input": "search in the current folder for the file with the name \"test\"", "output": "find . -name test"}
{"input": "Display a long listing of all files/directories named 'file' under current directory tree", "output": "find -name file -ls"}
{"input": "Prints out all the logged-in users along with their group information.", "output": "groups $(who | cut -d' ' -f 1)"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours", "output": "find . -mtime 0"}
{"input": "Unzip all *.zip files under current directory", "output": "find . -name '*.zip' -exec unzip '{}' ';'"}
{"input": "search for the directory testdir in the folder /home", "output": "find /home -type d -name testdir"}
{"input": "find all jpg files in current folder", "output": "find . -type f -name \"*.JPG\""}
{"input": "Write \"error\" to both the log file \"log\" and standard error", "output": "echo \"error\" | tee -a log 1>&2"}
{"input": "Change permissions of all files ending \".php\" under the current directory to 755 with a progress bar based on lines", "output": "find . -name \"*.php\" | pv --line-mode | xargs chmod 755"}
{"input": "Print yesterday's date", "output": "date -j -v-1d"}
{"input": "Read the history file and append the contents to the history list", "output": "history -r"}
{"input": "Find all `doc.txt' files in the current directory tree printing \"found\" for each of them", "output": "find ./ -name doc.txt -printf \"found\\n\""}
{"input": "Find all files under /path/to/base/dir and change their permission to 644", "output": "find /path/to/base/dir -type f -print0 | xargs -0 chmod 644"}
{"input": "Find all empty regular files in the current directory tree", "output": "find . -size 0c -type f"}
{"input": "Print a minimal set of differences between files in directories \"a\" and \"b\", ignore the first 3 lines of output, and print any line starting with \"-\" with the first character removed", "output": "diff -dbU0 a b | tail -n +4 | grep ^- | cut -c2-"}
{"input": "Find all directories whose name is root in / directory", "output": "find / -type d -name root"}
{"input": "Compress all directories found in directory tree $LOGDIR that have been modified within the last 24 hours", "output": "find $LOGDIR -type d -mtime -1 -exec compress -r {} \\;"}
{"input": "Remove all directories called \"test\" from the current directory tree", "output": "find . -name test -type d -exec rm -r {} +"}
{"input": "Print a list of all filepattern-*2009* files/directories under data/ to filesOfInterest.txt file", "output": "find data/ -name filepattern-*2009* -print > filesOfInterest.txt"}
{"input": "Runs programs and prints formatted summary of system resource usage.", "output": "\\time -f \"%E real,%U user,%s sys\" ls -Fs"}
{"input": "Append \".txt\" to all filenames in the current directory tree", "output": "find -type f | xargs -I {} mv {} {}.txt"}
{"input": "lists txt or html files older than 5 days, null separated", "output": "find . \\( -name '*.txt' -o -name '*.html' \\) -mtime +5 -print0"}
{"input": "List every symbolic link in every home directory's subdirectory owned by group `staff'", "output": "find `pwd` -group staff -exec find {} -type l -print ;"}
{"input": "Execute COMMAND on all files and directories in the current directory tree", "output": "find . -exec COMMAND {} +"}
{"input": "Create intermediate directories as required directory{1..3} and subdirectory{1..3} and directories subsubdirectory1 and subsubdirectory2", "output": "mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}"}
{"input": "Count the number of \"x\" characters in \"filename\"", "output": "sed 's/[^x]//g' filename | tr -d '\\012' | wc -c"}
{"input": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"", "output": "find . -name \\*.c -print0 | xargs -0 grep wait_event_interruptible /dev/null"}
{"input": "Change permissions to 644 for all regular files in and below the current directory", "output": "find . -type f -print | sed -e 's/^/\"/' -e 's/$/\"/' | xargs chmod 644"}
{"input": "Print package information the command \"ldconfig\" belongs to in rpm", "output": "rpm -qfi `which ldconfig`"}
{"input": "Find number of different rows between File1 and File2.", "output": "diff --suppress-common-lines --speed-large-files -y File1 File2 | wc -l"}
{"input": "Saves bytes count of the value of '$each' variable.", "output": "a=$(echo $each | wc -c)"}
{"input": "Print the file system \"file/goes/here\" is on", "output": "df -P file/goes/here | tail -1 | cut -d' ' -f 1"}
{"input": "Prints path location of $BASH_SOURCE file.", "output": "echo this dir: `dirname $BASH_SOURCE`"}
{"input": "Find all duplicate \".jar\" files in the current directory tree", "output": "find . -type f -printf \"%f\\n\" -name \"*.jar\" | sort -f | uniq -i -d"}
{"input": "Find the total size of *.jpg files within the current directory tree", "output": "find . -type f -iname '*.jpg' -print0 | xargs -r0 du -a| awk '{sum+=$1} END {print sum}'"}
{"input": "Save host name in variable \"thisHOSTNAME\"", "output": "thisHOSTNAME=`hostname`"}
{"input": "Unzip and expand tar archive \"compressFileName\"", "output": "zcat compressFileName | tar xvf -"}
{"input": "Make directory \"foo\" and do not cause an error if it exists", "output": "mkdir -p foo"}
{"input": "Find all files/directories under current directory and print their paths", "output": "find . -exec echo {} \";\""}
{"input": "Adjust the timestamp of 'filename' by subtracting 2 hours from it.", "output": "touch -d \"$(date -r filename) - 2 hours\" filename"}
{"input": "store absolute path of executing script", "output": "ABSOLUTE_PATH=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)/$(basename \"${BASH_SOURCE[0]}\")\""}
{"input": "Output the standard input followed by the line number until line 786", "output": "nl -ba | sed 786q | grep . | awk '{print $2$1}'"}
{"input": "print all files in the current directory and all subdirectories", "output": "find . -print"}
{"input": "find any files or directories called \".svn\" under the current directory and run a long list on each one, displaying a line count of the resultant output.", "output": "find . -iname .svn -exec bash -c 'ls -l \"{}\" | wc -l' \\;"}
{"input": "Convert all image.pdf files to image.png files under ./polkadots", "output": "find ./polkadots -name 'image.pdf' -exec convert -transparent white -fuzz 10% {} image.png \\; -print"}
{"input": "Delete all files under $INTRANETDESTINATION/weekly directory tree that were modified more than 32 days ago", "output": "find $INTRANETDESTINATION/weekly -mtime +32 -exec rm {} \\;"}
{"input": "Pass \"y\" to all the prompts for the command \"execute_command\"", "output": "yes | execute_command"}
{"input": "List all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "find -depth -type d |sed 'h; :b; $b; N; /^\\(.*\\)\\/.*\\n\\1$/ { g; bb }; $ {x; b}; P; D'"}
{"input": "Print name of the file system containing $path.", "output": "df -h $path | cut -f 1 -d \" \" | tail -1"}
{"input": "Find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/large/* paths and run `mogrify -resize 428x270\">\" -quality 80 -compress JPEG -monitor -strip` with the file paths as arguments", "output": "find temp/large/* -maxdepth 2 -iname \"*.jpg\" -print0 | xargs -0 mogrify -resize 800x800\">\" -quality 85 -compress JPEG -monitor -strip -gravity SouthEast -draw 'text 10,10 \"www.kmstools.com\"'"}
{"input": "Gets IP address of 'eth0' network interface.", "output": "ifconfig eth0 | awk '/inet addr/{sub(\"addr:\",\"\"); print $2}'"}
{"input": "Search directory trees /usr/share/doc, /usr/doc, and /usr/locale/doc for files named 'instr.txt'", "output": "find /usr/share/doc /usr/doc /usr/locale/doc -name instr.txt"}
{"input": "Calculate the SHA1 sum for the contents of the regular files in the path/to/folder directory tree", "output": "find path/to/folder -type f -print0 | xargs -0 sha1sum | sha1sum"}
{"input": "Find recursively all files whose names begin with \"foo\"", "output": "find . -name \"foo*\""}
{"input": "Print each line in \"file1\" and file2\" separated by a space", "output": "paste -d'\u00a4' file1 file2 | sed 's,\u00a4, ,g'"}
{"input": "Use \"composer validate\" command on all composer.json files", "output": "find . -type f -name \"composer.json\" -exec composer validate {} \\;"}
{"input": "Find all regular files under ./Desktop directory", "output": "find ./Desktop -type f"}
{"input": "Print a line of 100 '=' characters", "output": "printf %100s |tr \" \" \"=\""}
{"input": "Print the list of all files in the current directory except for SVN, CVS, GIT, and binary files", "output": "find . -not \\( -name .svn -prune -o -name .git -prune -o -name CVS -prune \\) -type f -print0 | xargs -0 file -n | grep -v binary | cut -d \":\" -f1"}
{"input": "Print out all files with their paths that have identical content and the same filename in different cases", "output": "find * -type f  | xargs md5sum | sort | uniq -Dw32 | awk -F'[ /]' '{ print $NF }' | sort -f | uniq -Di"}
{"input": "Find SGID files", "output": "find / -perm +g=s"}
{"input": "set alias \"foo\" for command \"printf\"", "output": "alias foo=\"printf\""}
{"input": "Print out the full path name of \"mypathname\" with dots resolved", "output": "readlink -ev mypathname"}
{"input": "find all files in the current folder which have not been changed in the last 48 hours", "output": "find ./ -daystart -ctime +2"}
{"input": "Interactively page through a list of all processes running on the system - the arrow keys pan around, and the Q key quits.", "output": "ps aux | less -S"}
{"input": "Recursively move \"./dir\" to \"user@host:/path\" via ssh on port 2222 compressing data and displaying progress during transmission", "output": "rsync -rvz -e 'ssh -p 2222' --progress --remove-sent-files ./dir user@host:/path"}
{"input": "delete all the files in the current folder  which do not belong to any user", "output": "find / -nouser -exec rm {}\\;"}
{"input": "search for the text file \"file.txt\" and display its parent directory", "output": "cd /nfs/office/ &&  find . -name 'file.txt' | sed -r 's|(\\./([^/]*/)?).*|\\1|'"}
{"input": "Delete and count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -type -f -mtime \"+$DAYS_TO_SAVE\" -exec rm {} \\; -printf '.' | wc -c"}
{"input": "Display permissions, user, group, and full path for each file in the current directory tree as a list", "output": "tree -p -u -g -f -i"}
{"input": "Find files on the system that are bigger than 20 megabytes", "output": "find / -type f -size +20M -exec ls -lh {} \\; 2> /dev/null | awk '{ print $NF \": \" $5 }'"}
{"input": "find all the directories in current folder and do not search in sub directories and create the same directory structure in another folder", "output": "find . -maxdepth 1 -type d -print0 | (cd /SomeWhere/Else; xargs -0 mkdir)"}
{"input": "Delete all regular files that have not been modified in the last 60 weeks under $DIR directory tree", "output": "find $DIR -type f -mtime +60w -exec rm {} \\;"}
{"input": "Change owner and group of \"script.sh\" to \"root\"", "output": "chown root:root script.sh"}
{"input": "display the commands to force delete all jpg files in current directory which are less than 50KB and do not search in the sub directories", "output": "find . -maxdepth 1 -name \"*.jpg\" -size -50k | xargs echo rm -f"}
{"input": "Delete all files in the /myDir directory tree that were last modfied more than 7 days ago", "output": "find /myDir -mindepth 1 -mtime +7 -delete"}
{"input": "find all the files in the filesystem which do not belong to any group", "output": "find / -nogroup -print"}
{"input": "Find all *.txt files under current directory and print their timestamps and paths", "output": "find . -name \"*.txt\" -printf \"%T+ %p\\n\""}
{"input": "Display the number of regular files under current directory tree", "output": "find . -type f -exec echo {} \\; | wc -l"}
{"input": "Write \"hey hey, we're the monkees\" to standard output and as input to to \"gzip --stdout\" saved to \"my_log.gz\" without writing to disk", "output": "echo \"hey hey, we're the monkees\" | (exec 1>&3 && tee /proc/self/fd/3 | gzip --stdout > my_log.gz)"}
{"input": "List all IP addresses assigned to current hostname, pausing for user interaction after each page.", "output": "more /etc/hosts | grep '[[:space:]]*'`hostname`'[[:space:]]*' | awk '{print $1}'"}
{"input": "Set the variable \"me\" to the name of the running script, or shell, login shells have a hyphen appended to the beginning of the name, such as \"-bash\".", "output": "me=`basename -- \"$0\"`"}
{"input": "Find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username", "output": "find $dir -maxdepth 1 -type d -user $username -perm -100"}
{"input": "display all the directories in the current folder which are atleast one level deep", "output": "find . -mindepth 1 -type d -print0"}
{"input": "Non-recursively finds all '*.pdf' files in a current folder and removes them.", "output": "find . -maxdepth 1 -name \"*.pdf\" -print0 | xargs -0 rm"}
{"input": "Change file permissions on all regular files within a directory", "output": "find /path/to/directory -type f -exec chmod 644 {} +"}
{"input": "Print groups of all users logged in", "output": "groups $(who | cut -d' ' -f 1)"}
{"input": "Recursively copy all directories in \"/path/to/source\" to \"/path/to/dest/\" preserving directory hierarchy", "output": "find /path/to/source -type d | cpio -pd /path/to/dest/"}
{"input": "Search level 3 of the current directory tree for the directories whose pathnames contain \"New Parts\"", "output": "find -mindepth 3 -maxdepth 3 -type d | grep \"New Parts\""}
{"input": "Counts the number of lines in each file in a git repository.", "output": "wc -l $(git ls-files)"}
{"input": "Download \"http://www.multitran.ru/c/m.exe?CL=1&s=hello&l1=1\" and convert encoding to \"windows-1251\" and print only printable characters", "output": "curl 'http://www.multitran.ru/c/m.exe?CL=1&s=hello&l1=1' | iconv -f windows-1251 | tr -dc '[:print:]'"}
{"input": "display all regular/normal files in the current folder which are accessed in the last 7*24 hours", "output": "find . -type f -atime -7"}
{"input": "Find all files matching pattern '.#*' in the current directory tree and execute \"foobar\" for each of them with the file name as an argument", "output": "find . -iname '.#*' -print | while read -r i; do foobar \"$i\"; done"}
{"input": "get all files in a current directory modified in the last 7 days", "output": "find . -mtime -7 -print0 | xargs -0 tar -rf /foo/archive.tar"}
{"input": "Split \"abc.txt\" into files with at most 1500000000 bytes each and use prefix \"abc\"", "output": "split --bytes=1500000000 abc.txt abc"}
{"input": "find the file \"foo.txt\" in the current folder and assign the output to a variable", "output": "OUTPUT=`find . -name foo.txt`"}
{"input": "Find all the files in entire file system with the extensions txt or doc, as well as any file larger than 5MB in size", "output": "find / \\( -name '*.txt' -o -name '*.doc' -o -size +5M \\)"}
{"input": "Save the current date to 'DATE' variable", "output": "DATE=$(echo `date`)"}
{"input": "List the full path of each directory under the current working directory", "output": "tree -dfi \"$(pwd)\""}
{"input": "Find all files/directories in 1 level down the current directory", "output": "find -mindepth 1 -maxdepth 1"}
{"input": "Find all files/directories named file in minimum 4 levels down the current directory", "output": "find -mindepth 4 -name file"}
{"input": "Disable X11 forwarding and execute \"cd yourRemoteDir; ./yourRemoteScript.sh </dev/null >/dev/null 2>&1\" in the background on \"remoteServer\"", "output": "ssh -x remoteServer \"cd yourRemoteDir; ./yourRemoteScript.sh </dev/null >/dev/null 2>&1 & \""}
{"input": "Search the /Path directory tree for files whose pathnames match \"/Path/bar*\" or \"/Path/foo*\" and whose names match pattern \"file_name*\"", "output": "find /Path \\( -path \"/Path/bar*\" -o -path \"/Path/foo* \\) -name \"file_name*\""}
{"input": "removes last N lines from file.txt", "output": "head --lines=-N file.txt"}
{"input": "List all *.ogg files under your home directory along with their size", "output": "find $HOME -name '*.ogg' -type f -exec du -h '{}' \\;"}
{"input": "Find all files that have wrong permission", "output": "find / \\( -perm -006 -o -perm -007 \\) \\( ! -type -l \\) -ls"}
{"input": "find all the \".mov\" video files in the current folder and convert them to flv using ffmpeg. print0 is used to handle files with newline in their names", "output": "find . -iname \"*.mov\" -print0 | xargs -0 -i sh -c 'ffmpeg -i {} -f flv `basename {}`'"}
{"input": "Find all files/directories that start with 'readme' (case insensitive) in their names under '/usr/share/doc' directory tree", "output": "find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'"}
{"input": "Send uncompressed contents of \"large_file.gz\" to \"largesplitter\"", "output": "zcat large_file.gz | largesplitter"}
{"input": "For each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file.", "output": "$ join -j 2 -o 1.1 1.2 2.1 <(sort 1) <(sort -k2 2)"}
{"input": "Make directories to file \"/full/path/to/file.txt\" as needed", "output": "mkdir -p `dirname /full/path/to/file.txt`"}
{"input": "Find all files/directories under current directory tree that belong to user 'john'", "output": "find . -user john"}
{"input": "set alias \"foo\" for command \"$'echo A \\'*\\' is born at $(date)'\"", "output": "alias foo=$'echo A \\'*\\' is born at $(date)'"}
{"input": "Print the list of files and directories of the /etc directory", "output": "find /etc/. ! -name . -prune"}
{"input": "Find the \"param1\" string in regular files under and below /var", "output": "find /var -type f  | xargs grep \"param1\""}
{"input": "Replace \"inputfile\" with a sorted unique list of its contents", "output": "sort inputfile | uniq | sort -o inputfile"}
{"input": "Insert \"insert\" every 3 lines for the output of \"seq 1 10\"", "output": "seq 1 10 | sed $': loop; n; n; a insert\\nn; b loop'"}
{"input": "Connect to port 2222 of example.com as ssh user \"user\", and copy local file \"/absolute_path/source-folder/some-file\" to remote directory \"/absolute_path/destination-folder\"", "output": "scp -P 2222 /absolute_path/source-folder/some-file user@example.com:/absolute_path/destination-folder"}
{"input": "For each line in list.txt, output the line adding \"FAIL\" if the same line appears in fail.txt, and \"PASS\" otherwise - lines in fail.txt must be in the same order as they appear in list.txt.", "output": "sed 's/$/ FAIL/' fail.txt | join -a 1 -e PASS -j 1 -o 1.1,2.2 list.txt -"}
{"input": "display all files in a folder", "output": "find \"/proc/$pid/fd\""}
{"input": "Find all directories name nasa in the current directory and below.", "output": "find . -name nasa -type d"}
{"input": "Find all .mpg files in the current ditrectory tree and convert them to the MP4 format", "output": "find . -name \"*.mpg\" -type f -print0 | xargs -0 -I {} -n 1 -P 4 ffmpeg -i {} {}.mp4"}
{"input": "Prints list of all libraries linked with binaries in '/bin/' and '/usr/bin/', with number of linkages for each library.", "output": "ldd /bin/* /usr/bin/* | sed -e '/^[^\\t]/ d; s/^\\t\\(.* => \\)\\?\\([^ ]*\\) (.*/\\2/g' | sort | uniq -c"}
{"input": "Prints full path to files with dot in name in a current folder.", "output": "ls -d -1 $PWD/*.*"}
{"input": "Mount \"proc\" file system on \"/var/snmp3/proc\"", "output": "mount -t proc none /var/snmp3/proc"}
{"input": "display all the files in the home folder which have not been modified in the last 365*24 hours", "output": "find $HOME -mtime +365"}
{"input": "Look for files whose names begin with letters a-j", "output": "find  / -name \"[a-j]*\" -print"}
{"input": "Remove the file with inode number 752010", "output": "find -inum 752010 -exec rm {} \\;"}
{"input": "set alias \"your_env\" for command 'source ~/scripts/your_env.sh'", "output": "alias your_env='source ~/scripts/your_env.sh'"}
{"input": "Concatenate all PDF files under current directory into all.pdf", "output": "pdfunite `find . -name \"*.pdf\" | sort` all.pdf"}
{"input": "Find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories", "output": "find \"$1\" -perm -u+w -print0 | xargs chmod g+w"}
{"input": "Find all *.txt files/directories in entire file system", "output": "find / -name \"*.txt\""}
{"input": "Add \"new.\" to the beginning of the name of \"original.filename\", renaming it to \"new.original.filename\".", "output": "rename 's/^/new./' original.filename"}
{"input": "Remove all \"CVS\" directories from the current directory tree, ignoring the case", "output": "find . -iname CVS -type d | xargs rm -rf"}
{"input": "Removes the last 2 lines from a file", "output": "head -n -2 myfile.txt"}
{"input": "Output \"stuff\", removing \"/foo/bar/\" from the specified path.", "output": "basename /foo/bar/stuff"}
{"input": "Search the current directory tree for files whose names begin with \"my\" and end with \"p\" followed by any character", "output": "find . -regex \".*/my.*p.$\""}
{"input": "Find files newer than `tmpfile' starting from the current directory", "output": "find . -newer tmpfile"}
{"input": "create a backup of all the files in the current folder to the floppy and save the file list in the file /tmp/BACKUP.LOG", "output": "find . -cpio /dev/fd0 -print | tee /tmp/BACKUP.LOG"}
{"input": "search for the file \"program.c\" in the entire file system and save the errors to the file errors.txt", "output": "find / -name 'program.c' 2>errors.txt"}
{"input": "Copy files, removing digits from the filename (e.g file123 to file or te12345st to test). Do not overwrite any existing file.", "output": "find . -type f -execdir bash -c '   dest=${1//[0-9]/}   [[ -f $dest ]] || cp -- \"$1\" \"$dest\" ' _ {} \\;"}
{"input": "List all files in the current directory tree that were last modified in March 2007", "output": "find ! -newermt \"apr 01 2007\" -newermt \"mar 01 2007\" -ls"}
{"input": "find all files in current folder which are bigger than 1MB", "output": "find ./ -size +1000k"}
{"input": "Extract any line in \"set1\" which does not appear in \"set2\"", "output": "comm -23 <(sort set1) <(sort set2)"}
{"input": "create directory /tmp/foo", "output": "mkdir /tmp/foo"}
{"input": "Find all *.txt files/directories under current directory", "output": "find . -name *.txt -print"}
{"input": "Recursively finds all files not like *.itp, *ane.gro, *.top in a current folder and removes them.", "output": "find . -depth -type f -not -name *.itp -and -not -name *ane.gro -and -not -name *.top -exec rm '{}' +"}
{"input": "Search the current directory recursively for regular files last accessed less than 2 days ago", "output": "find . type -f -atime -2"}
{"input": "Count the number of users logged in", "output": "who | wc -l"}
{"input": "Start 'top' to monitor all processes with the default settings.", "output": "top"}
{"input": "Search the current directory tree for all files except SVN ones", "output": "find . | grep -v \\.svn"}
{"input": "display all regular/normal files in the folder /Users/david/Desktop/", "output": "find /Users/david/Desktop/-type f"}
{"input": "Send one ping request to host with local address in the 192.168.1.x range, with last number specified by variable \"COUNTER\", and output only lines containing \"ms\" to standard output.", "output": "ping -c 1 192.168.1.$COUNTER | grep 'ms'"}
{"input": "Print canonical filename of \"/path/here/..\"", "output": "readlink -f  /path/here/.."}
{"input": "Catch output from a script printing to /dev/tty", "output": "screen -D -m yourEvilProgram"}
{"input": "Remove all vmware-*.log files under current directory", "output": "find . -name \"vmware-*.log\" -exec rm '{}' \\;"}
{"input": "Move each of the 'm?' directories in $path_to_folders to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory", "output": "find \"$path_to_folders\" -name 'm?' -type d -exec mv {} {}.mbox \\; -exec mkdir {}.mbox/Messages \\; -exec sh -c \"mv {}.mbox/*.emlx {}.mbox/Messages\" \\;"}
{"input": "Print the git log in a tabular form", "output": "git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|'"}
{"input": "list files in /usr modified after the time which /tmp/stamp$$ modified", "output": "find /usr -newer /tmp/stamp$$"}
{"input": "Prints a random number between 1 and 10", "output": "grep -m1 -ao '[0-9]' /dev/urandom | sed s/0/10/ | head -n1"}
{"input": "display long listing of all the text files in the current folder and then execute the script myScript.sh by passing the output of previous exec as input", "output": "find . -name \"*.txt\" -exec ls -la {} \\; -exec ./myScript.sh {} \\;"}
{"input": "Change the owner to \"user\" and group to \"group\" of files \"file ...\"", "output": "chown user:group file ..."}
{"input": "Search the XML files from directories /res/values-en-rUS and /res/xml for string \"hovering_msg\"", "output": "find /res/values-en-rUS /res/xml -iname '*.xml' | while read file; do grep -i \"hovering_msg\" \"$file\"; done"}
{"input": "Split \"mybigfile.txt\" into files of at most 200000 lines each", "output": "split -l 200000 mybigfile.txt"}
{"input": "find all the files in the file system which belong to the groep \"users\" and with the name \"dateiname\"", "output": "find / -group users -iname \"Dateiname\""}
{"input": "List files and directories one level deep in the current directory tree", "output": "tree -L 2"}
{"input": "Find all files/directories that contain the string literal '$VERSION' in their names under current directory tree", "output": "find . -name '*$VERSION*'"}
{"input": "Save the contents of \"file\" in the clipboard", "output": "cat file | xclip"}
{"input": "Search the \"test1\" directory recursively for regular files", "output": "find test1 -type f -print"}
{"input": "Immediately kill all child processes of parent process whose ID is specified by the variable PPID.", "output": "ps -o pid= --ppid $PPID | xargs kill -9"}
{"input": "Print the base name of the current working directory", "output": "basename `pwd`"}
{"input": "display all the directories in specific path ( saved in $x ) excluding those that are present in a path and save the ouput to a file", "output": "find $x -type d -wholename '*' ! -wholename */@eaDir* > /tmp/mediaindex/$nn.dir"}
{"input": "Copy \"/new/x/y/z/\" over the network to \"user@remote:/pre_existing/dir/\" preserving the directory hierarchy", "output": "rsync -a --relative /new/x/y/z/ user@remote:/pre_existing/dir/"}
{"input": "Set the bash environmental variable \"PROMPT_COMMAND\" to save the output of the last executed command to variable \"LAST\" and file '/tmp/x\"", "output": "PROMPT_COMMAND='LAST=\"`cat /tmp/x`\"; exec >/dev/tty; exec > >(tee /tmp/x)'"}
{"input": "Find hard links to the same file lpi104-6/file1 in the directory tree lpi104-6", "output": "find lpi104-6 -samefile lpi104-6/file1"}
{"input": "Page through extended information about all PCI devices on system.", "output": "lspci -v -v | less"}
{"input": "Find all files under current directory and change their permission to 600", "output": "find . -type f -exec chmod 600 {} \\;"}
{"input": "Search for file \"file\" between level 2 and 3 of the directory tree", "output": "find -mindepth 2 -maxdepth 3 -name file"}
{"input": "search for a word in all the php files in the current folder and display the count of all matching lines.", "output": "find . -name \\*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test' | wc -l"}
{"input": "Print each column in \"file\" with \"-\" character removed", "output": "fold -w1 file | pr -4t | sed 's/\\s*-\\s*//g' | tr -d '\\n' | sed '$a\\'"}
{"input": "compare each C header file in or below the current directory with the file /tmp/master", "output": "find . -name '*.h' -execdir diff -u '{}' /tmp/master ';'"}
{"input": "Search the *.pdf files from directory tree PDFs/ for text \"perry sound\", ignoring the case, and print the list of matched files", "output": "find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep -l -i --with-filename --label=\"{}\" --color \"perry sound\"' \\;"}
{"input": "Find all directories named \"0\" in the current directory tree and create a tar archive of their RS* subdirectories", "output": "find . -type d -name \"0\" -execdir tar -cvf filename.tar RS* \\;"}
{"input": "Find all files/directories  under  /eserver6 directory and follow symlinks if needed", "output": "find /eserver6 -L"}
{"input": "Find all files under current directory", "output": "find . -type f"}
{"input": "Change permissions to 755 for all directories in the current directory tree", "output": "find . -type d | xargs chmod -v 755"}
{"input": "Get a detailed list of all files on the system larger than 10MB", "output": "find / -size +10M -printf \u201c%12s %t %h/%fn\u201d"}
{"input": "Removes 'foo' file.", "output": "rm foo"}
{"input": "set alias \"dosetit\" for command 'eval `setit-sh`'", "output": "alias dosetit='eval `setit-sh`'"}
{"input": "find directory which case-insensitive name is foo in current directory.", "output": "find . -iname foo -type d"}
{"input": "List all file details with filenames matching \"*2012*.xml\" from \"serveripaddress::pt/dir/files/\" listening on port 111 and write to \"output.txt\"", "output": "rsync --list-only --include \"*2012*.xml\" -exclude \"*.xml\" serveripaddress::pt/dir/files/ --port=111 > output.txt"}
{"input": "Reverse the order of lines in \"dax-weekly.csv\" keeping the first line the same", "output": "cat dax-weekly.csv | awk '1 { last = NR; line[last] = $0; } END { print line[1]; for (i = last; i > 1; i--) { print line[i]; } }'"}
{"input": "Remount \"/system\" as read only", "output": "mount -o remount,ro /system"}
{"input": "Find all broken symlinks under current directory", "output": "find -type l -xtype l"}
{"input": "Search in the current directory and all sub-directories except ./D for the file hi.dat using the extending file-globbing features of the shell.", "output": "shopt -s extglob find !(D) -name hi.dat"}
{"input": "Execute /usr/bin/find with $* arguments", "output": "/usr/bin/find $*"}
{"input": "Prints process tree of user 'user' processes.", "output": "pstree -p user"}
{"input": "Creates temporary file with file name formatted like /tmp/gnuplot_cmd_$(basename \"${0}\").XXXXXX.gnuplot and saves path to it in a variable 'gnuplotscript'.", "output": "gnuplotscript=$(mktemp /tmp/gnuplot_cmd_$(basename \"${0}\").XXXXXX.gnuplot)"}
{"input": "Find only number of hard link & name of files from long list", "output": "find -type f -iname \"*.txt\" -exec ls -lrt {} \\;|awk -F' ' '{print $1 $2  $9}'"}
{"input": "Find all *.mp3, *.aif*, *.m4p, *.wav, *.flac files under $musicdir directory", "output": "find \"$musicdir\" -type f -print | egrep -i '\\.(mp3|aif*|m4p|wav|flac)$'"}
{"input": "Change the permission to 0755 for all directories under current directory", "output": "find . -type d -exec chmod 0755 {} \\;"}
{"input": "Copy all .png files from the home directory tree to imagesdir/", "output": "find ~/ -name *.png -exec cp {} imagesdir \\;"}
{"input": "change owner and group of the all files with group owner vboxusers into home directory to user and group kent", "output": "find ~ -group vboxusers -exec chown kent:kent {} \\;"}
{"input": "Join strings from 'file1' and 'file2', discarding excessive strings from largest file, and printing first, second and third space-separated field from first file, and third and fourth field from second file as a join result", "output": "join -o 1.2,1.3,2.4,2.5,1.4 <(cat -n file1) <(cat -n file2)"}
{"input": "Find all files in the current directory tree with size bigger than 5 MB and sort them by size", "output": "find ./ -size +5M -type f | xargs -r ls -Ssh"}
{"input": "Set the system date to Sat May 11 06:00:00 IDT 2013", "output": "sudo date --set=\"Sat May 11 06:00:00 IDT 2013\""}
{"input": "Truncate all regular files under the current directory", "output": "find . -type f -maxdepth 1 -exec sh -c 'cat /dev/null > {}' \\;"}
{"input": "Replace the text 'Windows' with 'Linux' in all text files in the current directory and below", "output": "find . -name '*.txt' -print | xargs perl -pi -e's/Windows/Linux/ig' *.txt"}
{"input": "Sources script incl.sh in the folder where current running script is located", "output": "source \"$( dirname \"${BASH_SOURCE[0]}\" )/incl.sh\""}
{"input": "Check if \"/path/to/file\" exists on remote host \"host\"", "output": "ssh host \"test -e /path/to/file\""}
{"input": "Rename all *.jpg files to *.jpg$.jpg files under ../<dirname>  directory by appending the parent directory name at the beginning of their names", "output": "find ../<dirname> -name '*.jpg' -exec sh -c 'mv \"$0\" \"$(basename $(dirname $0))-${0%.JPG}$.jpg\"' {} \\;"}
{"input": "List the unique file extensions of all files under the current directory", "output": "find . -type f | grep -o -E '\\.[^\\.]+$' | sort -u"}
{"input": "Write \"ee\" to standard output and as input to command \"foo\"", "output": "echo 'ee' | tee /dev/tty | foo"}
{"input": "Find all files under current directory that match the case insensitive regex .\\|./.git and replace the text matching the regex '$lower1'  (literal) with $lower2 (literal)in these files", "output": "find . -type f \\! -iregex '.\\|./.git' -exec perl -i -pe 's/$lower1/$lower2/g' {} \\;"}
{"input": "Print all files and directories in the `.' directory tree skipping SCCS directories but printing out the SCCS directory name", "output": "find . -print -name SCCS -prune"}
{"input": "Find all .txt files under the current directory and below", "output": "find . -name \"*.txt\""}
{"input": "Find all directories under /var/www directory and set their permission to 755", "output": "sudo find /var/www -type d -print0 | xargs -0 chmod 755"}
{"input": "Move all hidden files in \"wordpress\" to the current directory", "output": "mv wordpress/.* ."}
{"input": "Calculate the total size of all *.jpg files in the directory tree", "output": "find . -name \"*jpg\" -exec du -k {} \\; | awk '{ total += $1 } END { print total/1024 \" Mb total\" }'"}
{"input": "Sort file1 and file2 then display differences between them.", "output": "diff <(sort file1 -u) <(sort file2 -u)"}
{"input": "Find all directories under /path whose names are 33 characters long", "output": "find /path -type d -printf \"%f\\n\" | awk 'length==33'"}
{"input": "Copy a whole directory tree skipping files residing on other files systems to destination_dir", "output": "find ./ -mount -depth -print | cpio -pdm /destination_dir"}
{"input": "Sends current job to the background.", "output": "bg"}
{"input": "list all files in /home/bozo/projects directory tree that were modified exactly one day ago.", "output": "find /home/bozo/projects -mtime 1"}
{"input": "Counts lines in each *.php file.", "output": "wc -l $(find . -name \"*.php\")"}
{"input": "display all the files in the current folder which do not belong to any user", "output": "find . -nouser"}
{"input": "find all files in the current folder which have been modified in the last 24 hours and whose file name is of length 1", "output": "find . -name \\? -mtime -1"}
{"input": "display a long listing of all the temp files whose size is 0 bytes and which have not been accessed in the last 10 days", "output": "find /tmp -size 0 -atime +10 -exec ls -l {} \\; > /tmp/checkold.txt"}
{"input": "Calculate a list of duplicate md5 sum hashes for all the \".java\" files in the current directory", "output": "md5sum *.java | awk '{print $1}' | sort | uniq -d"}
{"input": "Check if a drive with UUID \"09b8f1ab-8d4b-4c5f-b395-40be09c090b0\" is mounted on \"/media/WD_Disk_1\"", "output": "mount | grep $(blkid -U '09b8f1ab-8d4b-4c5f-b395-40be09c090b0') | grep '/media/WD_Disk_1 '"}
{"input": "Extract protocol part from URL.", "output": "echo \"$url\" | cut -d':' -f1"}
{"input": "Rename all .html files to .txt", "output": "rename 's/\\.html$/\\.txt/' *.html"}
{"input": "Find files matching regular expression regexp", "output": "find . | xargs grep regexp"}
{"input": "Find all files/directories that belong to the group 'staff' under '/usr' directory tree", "output": "find /usr -group staff"}
{"input": "Continuously send \"y\" as input to \"./MyScript.sh\" and ignore standard error", "output": "yes 2>/dev/null | ./MyScript.sh"}
{"input": "recursively delete, without prompting, directories under /data/bin/test, that are older than 10 days and where the name starts with a number", "output": "find /data/bin/test -type d -mtime +10 -name \"[0-9]*\" -exec rm -rf {} \\;"}
{"input": "Find all files/directories under current directory following symlinks if needed", "output": "find -L"}
{"input": "Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.", "output": "cd -P xyz"}
{"input": "Delete files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \\;"}
{"input": "Run `fastqc' on all the fastqc files in the current directory tree", "output": "find . -name \"*.fq.gz\"  -exec gunzip -c  '{}' ';' | fastqc  /dev/stdin"}
{"input": "display all regular/normal files in the current folder ending with the word ummy", "output": "find -type f -name *ummy"}
{"input": "Find recursively regular files in the current directory tree", "output": "find -type f -print0"}
{"input": "Saves list of currently logged in users in 'userlist' variable.", "output": "userlist=$(w|awk 'BEGIN{ORS=\",\"}NR>2{print $1}'|sed 's/,$//' )"}
{"input": "Save all entries that are wrapped around with opening and closing square brackets in file 'FILENAME' to variable 'var'", "output": "var=`egrep -o '\\[.*\\]' FILENAME | tr -d ][`"}
{"input": "print all files which name is xyzzy  followed by null and save to list", "output": "find / -name xyzzy -print0 > list"}
{"input": "Save yesterday's date into variable \"dt\" using perl", "output": "perl -e '@T=localtime(time-86400);printf(\"%02d/%02d/%04d\",$T[3],$T[4]+1,$T[5]+1900)' | read dt"}
{"input": "send GET request to \"https://graph.facebook.com/me/feed\" using URL-encoding \"access_token=$(cat .fb_access_token)\"", "output": "curl -v --get --data-urlencode \"access_token=$(cat .fb_access_token)\" https://graph.facebook.com/me/feed"}
{"input": "Convert the contents of \"infile\" from dos to unix style text and display the result as printable characters or backslash escapes", "output": "cat infile | dos2unix -U | od -c"}
{"input": "Recursively search for all files whose name contains 'foo', and change the 'foo' in the filenames to 'bar'.", "output": "find -f \\( -exec sed -i s/foo/bar/g \\; , -name \\*foo\\* -exec rename 's/foo/bar/ {} \\; \\)"}
{"input": "Find *.avi and *.flv files in /path/to/your/directory and below and copy them to /path/to/specific/folder", "output": "find /path/to/your/directory -regex '.*\\.\\(avi\\|flv\\)' -exec cp {} /path/to/specific/folder \\;"}
{"input": "Adds %Pathname% to the dirs stack (Windows format).", "output": "pushd %Pathname%"}
{"input": "Find all *.ps files under $STARTDIR and run ps2pdf for each files with the file path as a argument", "output": "find $STARTDIR -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf \\{}.ps"}
{"input": "Connect to port 1234 of specified IP address or hostname as ssh user \"user\", and copy all visible files in /var/www/mywebsite/dumps/ on this host to local directory /myNewPathOnCurrentLocalMachine - this directory must already exist on local host.", "output": "scp -P 1234 user@[ip address or host name]:/var/www/mywebsite/dumps/* /var/www/myNewPathOnCurrentLocalMachine"}
{"input": "Remove files in the current directory tree whose names match pattern \"file?\"", "output": "find . -name \"file?\" -exec rm -vf {} \\;"}
{"input": "change the group of all the files which belong to the user edwarda to pubs", "output": "find / -user edwarda -exec chgrp pubs \"{}\" \\;"}
{"input": "find all directories that names are 'project.images'", "output": "find  / -type d -name \"project.images\""}
{"input": "Find all .c, .h files in the current directory tree and search them for string \"expr\"", "output": "find . -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "Searches manual pages which descriptions contain 'postscript', and prints name and description of only ones that contain any-cased 'png' pattern.", "output": "apropos postscript | grep -i png"}
{"input": "Mathematically sum a column of numbers in \"FileWithColumnOfNumbers.txt\"", "output": "cat FileWithColumnOfNumbers.txt | xargs ruby -e \"puts ARGV.map(&:to_i).inject(&:+)\""}
{"input": "Locate and rename unprintable directories using inode numbers", "output": "find . -inum 211028 -exec mv {} newname.dir \\;"}
{"input": "Change permissions to 755 for all directories in the /path/to/dir directory tree", "output": "find /path/to/dir -type d -exec chmod 755 {} \\;"}
{"input": "find all the bit map files (.bmp) in the current folder and convert them to .png", "output": "find . -name \"*bmp\" -print0 | xargs -0 -l -i basename \"{}\" \".bmp\" | xargs -0 -l -i convert \"{}.bmp\" \"{}.png\""}
{"input": "Search for the case insensitive pattern 'search for me' in all files with '.p', '.w' and '.i' extension under current directory tree without descending into '.svn' and 'pdv' directories", "output": "find . \\( \\( -name .svn -o -name pdv \\) -type d -prune \\) -o \\( -name '*.[pwi]' -type f -exec grep -i -l \"search for me\" {} + \\)"}
{"input": "display all the files in the /usr folder which have the permissions 777", "output": "find /usr -perm 0777 -print"}
{"input": "Read the contents of \"${some_variable}\" until a null character is found and save the result in variable \"content\"", "output": "read -r -d $'\\0' content <<< \"${some_variable}\""}
{"input": "Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and prints location of such files.", "output": "diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq"}
{"input": "Locate symbolic links in /usr and below", "output": "find /usr -type l"}
{"input": "Forcefully delete all files in the current directory", "output": "find . -name '*' | xargs rm"}
{"input": "Find grub.conf files in entire file system", "output": "find / -name grub.conf"}
{"input": "Find all xml files under current directory", "output": "find . -name '*.xml'"}
{"input": "display all file in the folder /dir/to/search except \".c\" files", "output": "find /dir/to/search/ \\! -name \"*.c\" print"}
{"input": "Mathematically sum all lines in \"filename\"", "output": "cat filname | lua -e \"sum = 0;for i in io.lines() do sum=sum+i end print(sum)\""}
{"input": "Display the contents of variable \"a\" converted to lowercase.", "output": "echo \"$a\" | awk '{print tolower($0)}'"}
{"input": "Make $WEEKS_TO_SAVE+1 directories named \"weekly.N\" where N ranges from 0 to \"$WEEKS_TO_SAVE\"", "output": "mkdir -p $(seq -f \"weekly.%.0f\" 0 $WEEKS_TO_SAVE)"}
{"input": "Archive the list of 1st level subdirectories in /fss/fin to /fss/fi/outfile.tar.gz", "output": "tar -czf /fss/fi/outfile.tar.gz `find /fss/fin -d 1 -type d -name \"*\" -print`"}
{"input": "find all the files in the directory which is pointed by $1 variable ending with the name held in the variable $2 or having the extension of value saved in the argument $2.", "output": "find $1 \\( -name \"*$2\" -o -name \".*$2\" \\) -print"}
{"input": "search for the file test.txt in the folders /home and /opt", "output": "find /home /opt -name test.txt"}
{"input": "Find all files/directories under current directory tree that have modified in the last 2 days and contain 'blah' (case insensitive) in their names", "output": "find . -iname '*blah*' \\( -type d -o -type f \\) -mtime -2"}
{"input": "list regular file which file name is NOT end with '.html' in current directory in current directory", "output": "find . -type f -not -name \"*.html\""}
{"input": "Find all files/directores under '/usr/local' directory tree that case insensitively contain the word 'blast' in their names", "output": "find /usr/local -iname \"*blast*\""}
{"input": "Find files in the \"dir\" directory tree whose names are 33 characters in length", "output": "find dir -name '?????????????????????????????????'"}
{"input": "Removes all empty folders under current folder.", "output": "find . -type d -exec rmdir {}\\;"}
{"input": "display all text files in the folder /tmp/1", "output": "find \"/tmp/1\" -iname \"*.txt\""}
{"input": "Find all directories in maximum 2 levels down the /tmp/test directory", "output": "find /tmp/test/ -maxdepth 2 -mindepth 1 -type d"}
{"input": "search for a word in all the files in the current directory", "output": "find . -exec grep chrome {} +"}
{"input": "List all cron jobs which contain \"word\".", "output": "crontab -l | egrep \"word\""}
{"input": "Find all files under /home/feeds/data without descending into *def/incoming* and *456/incoming* paths", "output": "find /home/feeds/data -type f -not -path \"*def/incoming*\" -not -path \"*456/incoming*\""}
{"input": "find all normal/regular files in the entire file system having the word \"filename\" in their name.", "output": "find / -type f -iname \"filename\""}
{"input": "Find all files, folders, symlinks, etc in the current directory recursively", "output": "find ."}
{"input": "display all files in the file system which are bigger than 50MB and having size \"filename\" in them", "output": "find / -size +50M -iname \"filename\""}
{"input": "Find all status.c files in the current directory tree and show stat's information on them", "output": "find . -name status.c -exec stat --format \"%A %s %x %n\" {} \\;"}
{"input": "Archive \"/source/backup\" to \"/destination\" with compression during transfer", "output": "rsync -ravz /source/backup /destination"}
{"input": "Keep only the last two hyphen-separated sections of \"abc-def-ghi-jkl\"", "output": "echo \"abc-def-ghi-jkl\" | rev | cut -d- -f-2 | rev"}
{"input": "Search /etc for files modified within the last 10 minutes", "output": "find /etc -type f -mmin -10"}
{"input": "Search the current directory tree for all files except SVN ones", "output": "find . -not -iwholename '*.svn*'"}
{"input": "find all the files in the current folder which belong to the user root.", "output": "find . -user root -perm -4000 -print"}
{"input": "Print 2 lines of \"123456789\"", "output": "yes 123456789 | head -2"}
{"input": "display all the files in the file system which do not belong to the user \"wnj\" and which are modified before the file \"ttt\"", "output": "find / \\! \\( -newer ttt -user wnj \\) -print"}
{"input": "Delete files with inode number 782263 under current directory", "output": "find . -inum 782263 -exec rm -i {} \\;"}
{"input": "display all the files in the directory modules", "output": "find . -name modules"}
{"input": "Search /usr/bin for regular files that have been modified within the last 10 days", "output": "find /usr/bin -type f -mtime -10"}
{"input": "Recursively copy all (non-hidden) files and directories in current dir except \"foo\" to location specified by variable \"other\"", "output": "rsync --recursive --exclude 'foo' * \"$other\""}
{"input": "Search the current directory tree for files named \"accepted_hits.bam\"", "output": "find . -name \"accepted_hits.bam\""}
{"input": "List all regular files matching the name pattern \"$1*\" (where $1 is a positional parameter) under '/usr', '/bin', '/sbin' and '/opt' directory tree", "output": "find /usr /bin /sbin /opt -name \"$1*\" -type f -ls"}
{"input": "Change directory to the alphabetically last path under the current directory", "output": "cd \"$(find . -print0 | sort -z | tr '\\0' '\\n' | tail -1)\""}
{"input": "Copies newest file under the current folder to the '/tmp/'", "output": "cp $(ls -1tr * | tail -1) /tmp/"}
{"input": "Find *.java files under current directory and compress them to myfile.tar  (unsafe)", "output": "find . -type f -name \"*.java\" | xargs    tar cvf myfile.tar"}
{"input": "Print \"$somedir is empty\" if $somedir is empty", "output": "find \"$somedir\" -maxdepth 0 -empty -exec echo {} is empty. \\;"}
{"input": "Find file1 in the level 1 directories and above", "output": "find -maxdepth 2 -name file1"}
{"input": "Print the average time of 4 ping requests to \"www.stackoverflow.com\"", "output": "ping -c 4 www.stackoverflow.com | tail -1| awk '{print $4}' | cut -d '/' -f 2"}
{"input": "Report file system containing the current directory disk usage", "output": "df ."}
{"input": "delete all the empty files in the current directory", "output": "find . -empty -exec rm {}\\;"}
{"input": "Print only first line of 'file' content, formatted as 29-symbol wide column", "output": "cat file | fold -w29 | head -1"}
{"input": "Find all directories by the name `httpdocs' on the system", "output": "find / -type d -name 'httpdocs'"}
{"input": "Receive pattern to search for on the standard input and print only matching part of lines from file 'f.html'", "output": "cat f.html | grep -o \\"}
{"input": "Show file type information for files in /usr/bin", "output": "find /usr/bin | xargs file"}
{"input": "DNS lookup of the current host", "output": "nslookup `hostname`"}
{"input": "set alias \"foo\" for command 'BAR=baz'", "output": "alias foo='BAR=baz'"}
{"input": "Find files with size more than 200557600B and which are more than 2 days old under  ${userdir}/${i}/incoming directory", "output": "find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -ls"}
{"input": "Delete all files with '.old' extension under current directory tree", "output": "find . -name \u201c*.old\u201d -exec rm {} \\;"}
{"input": "finda all the hidden files excluding those having the extension htaccess", "output": "find . -type f \\( -iname \".*\" ! -iname \".htaccess\" \\)"}
{"input": "Find all *.jpg files/directories under current directory", "output": "find . -name '*.jpg'"}
{"input": "Send two ping requests to \"www.google.com\"", "output": "ping -c 2 www.google.com"}
{"input": "find all the files in the entire file system which belong to the user \"roger\"", "output": "find / -user roger -print"}
{"input": "search for a file in current folder and append the file name at the starting of all the lines in the file", "output": "find /path/to/dir -type f | sed -r 'p;s:.*/(.*)/.*:\\1:' | xargs -n 2 sh -c 'sed -i \"s/^/$1 /\" $0'"}
{"input": "search for soft links in current folder and display those links which are not pointed to files in current folder", "output": "find . -type l -exec readlink -f '{}' \\; | grep -v \"^`readlink -f ${PWD}`\""}
{"input": "Unsets 'history' shell option.", "output": "shopt -u -o history"}
{"input": "Check if \"/path/to/dir\" is a nfs mount point", "output": "mount -l | grep 'type nfs' | sed 's/.* on \\([^ ]*\\) .*/\\1/' | grep /path/to/dir"}
{"input": "display all the .sh scripts and perl files in the current folder", "output": "find . -type f \\( -name \"*.[sS][hH]\" -o -name \"*.[pP][lL]\" \\)"}
{"input": "Search the entire file hierarchy for files larger than 100 megabytes and delete them.", "output": "find / -size +100M -exec /bin/rm {} \\;"}
{"input": "display all soft links in current folder", "output": "find . -type l"}
{"input": "create directories foo and bar", "output": "mkdir foo bar"}
{"input": "Search for \"LOG\" in jsmith's home directory tree", "output": "find ~jsmith -exec grep LOG '{}' /dev/null \\; -print"}
{"input": "display all regular/normal files in the folder \"dir\" and display the filename along with file size", "output": "find dir -type f -printf \"f %s %p\\n\""}
{"input": "find all CSS files under currenty directory and use sed to edit them", "output": "find . -name \"*.css\" -exec sed -i -r 's/#(FF0000|F00)\\b/#0F0/' {} \\;"}
{"input": "find all files in the current folder which have been modified in the last 24 hours", "output": "find . -mtime -1 -print"}
{"input": "Remove all spaces from standard input", "output": "tr -d ' '"}
{"input": "Print each character of \"abcdefg\" on a line", "output": "echo \"abcdefg\" | fold -w1"}
{"input": "Prints top-ten biggest top-level folders within a 'var' folder.", "output": "sudo du -hDaxd1 /var | sort -h | tail -n10"}
{"input": "Find regular files with permissions less than 111", "output": "find -perm -111 -type f"}
{"input": "Move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path", "output": "find /foo/bar -name '*.mp4' -exec mv -t /some/path {} +"}
{"input": "Find List empty directories", "output": "find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find \"$dir\" | wc -l); let n--; if [ $n -eq 0 ]; then printf \"%4d : %s\\n\" $n \"$dir\"; fi; done"}
{"input": "Search for all files with same inode NUM", "output": "find . -inum NUM"}
{"input": "Add a date time stamp to every line of output in \"ping google.com\"", "output": "ping google.com | xargs -L 1 -I '{}' date '+%c: {}'"}
{"input": "Print the minimum transmission time of 10 ping requests to \"google.com\" from cygwin", "output": "ping google.com -n 10 | awk '/Minimum =/ { sub(\",\",\"\",$3); print $3 }'"}
{"input": "Prints yesterday's date information", "output": "date --date yesterday \"+%a %d/%m/%Y\""}
{"input": "List all screen sessions", "output": "screen -ls"}
{"input": "Find all test1.h files under current directory", "output": "sudo find . -name test1.h"}
{"input": "create a backup of all the files in the current folder excluding those that are present in the .snapshot sub directory and excluding the swap files (files ending with  ~)", "output": "find . -name .snapshot -prune -o \\( \\! -name *~ -print0 \\) | cpio -pmd0 /dest-dir"}
{"input": "Find all broken symlinks under current directory", "output": "find -xtype l"}
{"input": "Renames all *.html files in a 'folder' directory to *.txt files.", "output": "ls folder/*.html | xargs -I {} sh -c 'mv $1 folder/`basename $1 .html`.txt' - {}"}
{"input": "Prints total count of lines of all *.py files in a current folder and subfolders.", "output": "find . -name \"*.py\" -exec wc -l {} \\; | awk '{ SUM += $0} END { print SUM }'"}
{"input": "Remove all core dump files from user's home directory", "output": "find ~/ -name 'core*' -exec rm {} \\;"}
{"input": "Find regular files in the current directory tree that are called FindCommandExamples.txt and remove them", "output": "find . -type f -name \"FindCommandExamples.txt\" -exec rm -f {} \\;"}
{"input": "Save \"XXX-\" followed by a random 4 byte unsigned integer to variable \"tempfile\"", "output": "tempfile=XXX-$(od -N4 -tu /dev/random | awk 'NR==1 {print $2} {}')"}
{"input": "List the MD5 digest of all files under \"teste1\" and \"teste2\" sorted alphabetically", "output": "find teste1 teste2 -type f -exec md5 -r {} \\; | sort"}
{"input": "Remount \"/path/to/chroot/jail/usr/bin\" as read only", "output": "mount -o remount,ro /path/to/chroot/jail/usr/bin"}
{"input": "print readline bindings that use key code '\\\\e\\\\C-k'", "output": "bind -P | grep '\\\\e\\\\C-k'"}
{"input": "Pushes directory path that saved in $line variable to the dirs stack, expanding symbol '~', if present, as home folder path.", "output": "pushd \"${line/#\\~/$HOME}\";"}
{"input": "Find all files starting from the current directory that match regular expression '.*Message.*\\.java'", "output": "find . -print | grep '.*Message.*\\.java'"}
{"input": "Removes all empty folders that ends with any-cased '*.bak' under '/Users/' path.", "output": "find /Users -type d -iname '*.bak' -print0 | xargs -0 rmdir"}
{"input": "display all regular/normal files in the folder Symfony", "output": "find Symfony -type f"}
{"input": "create a symbolic link named \"www\" to file \"www1\"", "output": "ln -s www1 www"}
{"input": "find all the files that have been modified in the last 24 hours", "output": "find . -type f -mtime -1"}
{"input": "Search for 'some string' in all *js files under current directory and show the matched lines with line numbers", "output": "find . -name '*js' -exec grep -n 'some string' {} \\;"}
{"input": "Saves listing of a current folder in 'var' variable.", "output": "var=$(ls -l)"}
{"input": "Returns the single most recent file in a directory and all subdirectories.", "output": "find $DIR -type f -exec stat --format '%Y :%y %n' \"{}\" \\; | sort -nr | cut -d: -f2- | head -n 1"}
{"input": "Mathematically sum all lines in \"infile\"", "output": "sed 's/^/.+/' infile | bc | tail -1"}
{"input": "Search everywhere for a file called `httpd.conf' that is newer than /etc/apache-perl/httpd.conf", "output": "find / -name httpd.conf -newer /etc/apache-perl/httpd.conf"}
{"input": "Find regular files which have 644 permission", "output": "find . -perm 644 -type f -exec ls -l {} \\;"}
{"input": "Find all files/directories with 664 permission under current directory tree", "output": "find -perm 664"}
{"input": "set alias \"pwd\" for command '/bin/pwd | pbcopy'", "output": "alias pwd='/bin/pwd | pbcopy'"}
{"input": "List all files and directories in \"/data/\" sorted by version number", "output": "tree -ivL 1 /data/ | perl -nlE 'say if /\\Acommand-[0-9][0-9a-z.]*-setup\\z/'"}
{"input": "Print PID and user of processes running ssh or sshd and replace sequential spaces with a single space", "output": "ps h -o pid,user -C ssh,sshd | tr -s \" \""}
{"input": "Search  in current directory downwards all files whose size is 10 blocks .", "output": "find .  -size 10 print"}
{"input": "search for text files in the directory \"/home/user1\" and copy them to the directory /home/backup", "output": "find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents"}
{"input": "Remove all files in the ~/backups/mydatabasename directory recursively that were last modified more than 30 days ago", "output": "find ~/backups/mydatabasename/* -mtime +30 -exec rm {} \\;"}
{"input": "display all files in current folder which are bigger than 1 MB", "output": "find . -size +1M"}
{"input": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits", "output": "find . -regextype sed -regex '.*myfile[0-9]\\{1,2\\}'"}
{"input": "Print base name of the file name without all extensions.", "output": "basename \"$FILE\" | cut -d'.' -f-1"}
{"input": "Recursively finds all bzip2 compressed files in a current folder and decompresses them.", "output": "find ./ -iname \"*.bz2\" -exec bzip2 -d {} \\;"}
{"input": "Gets IP address of first listed network interface in system.", "output": "ifconfig | grep -E \"([0-9]{1,3}\\.){3}[0-9]{1,3}\" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:"}
{"input": "Split file 'afile' into parts as of two lines per each and compress each part with 'bzip2'", "output": "cat afile | split -l 2 --filter='bzip2 > \"$FILE.bz2\"'"}
{"input": "Search the current directory recursively for regular files with the read permission set for everybody", "output": "find -type f ! -perm -444"}
{"input": "find all the html files in the current folder and delete a line", "output": "find ./ -type f -name '*.html' | xargs sed -i '1,/sblmtitle/d'"}
{"input": "find file which case-insensitive name is foo in current directory.", "output": "find . -iname foo"}
{"input": "Rename .jpg files to .jpeg in all level 2 subdirectories of the current directory", "output": "find -maxdepth 3 -mindepth 3 -type f -iname '*.jpg' -exec rename -n 's/jpg$/jpeg/i' {} +"}
{"input": "Save list of groups which user $line belongs to and not matching pattern \"_unknown|sciences|everyone|netaccounts\" in 'results' variable", "output": "results=$(groups \"$line\" | tr ' ' '\\n' | egrep -v \"_unknown|sciences|everyone|netaccounts\")"}
{"input": "Display smbios/DMI information, pausing for user interaction between pages of output.", "output": "dmidecode | more"}
{"input": "find all the regular files in the current folder which start with a \"some text\"", "output": "find . -type f -name '*some text*'"}
{"input": "Recursively finds all files in a current folder excluding already compressed files and compresses them with level 9.", "output": "find . -type f | egrep -v '\\.bz2' | xargs bzip2 -9 &"}
{"input": "List all files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 | xargs -r ls -ld"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in /var/log", "output": "find /var/log/ -iname anaconda.*"}
{"input": "Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found", "output": "cd `find . -name Subscription.java | xargs dirname`"}
{"input": "find all the php files in the current folder", "output": "find . -name \\*.php"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory", "output": "find /home -type f -name \"*.ext\" -exec sed -i -e 's/^M$//' {} \\;"}
{"input": "Calculate the values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and \"x.txt\"", "output": "octave -q --eval 'printf (\"%f\\n\", [0:0.1:pi/2])'|nl|tee x.txt"}
{"input": "Print only digits in variable \"$name\"", "output": "echo $name | tr -c -d 0-9"}
{"input": "display all files in current folder", "output": "find ."}
{"input": "Set read, write and execute permission for all (owner, group, other) for the files/directories in foldername directory tree", "output": "sudo find foldername -exec chmod a+rwx {} \";\""}
{"input": "Display 'file.txt' all occurrences of \"foo\" replaced by \"bar\", letting the user interactively page through the result.", "output": "cat file.txt | perl -ne 's/foo/bar/g;' | less"}
{"input": "prints top 10 commands used", "output": "history | awk '{print $2}' | awk 'BEGIN {FS=\"|\"}{print $1}' | sort | uniq -c | sort -nr | head"}
{"input": "Changes group ownership of 'target_directory' to 'target_group'.", "output": "chgrp target_group target_directory"}
{"input": "Find all files under /home/mywebsite/public_html/sites/all/modules and set their permission to 640", "output": "find /home/mywebsite/public_html/sites/all/modules -type f -exec chmod 640 {} +"}
{"input": "rename all the text files  in the current folder to html files", "output": "find -name \"*.txt\" -exec mv {} `basename {} .htm`.html \\;"}
{"input": "Recursively add user write permission to all files under \"/path/to/git/repo/objects\"", "output": "chmod -Rf u+w /path/to/git/repo/objects"}
{"input": "Find all broken symlinks under /path/to/search directory", "output": "find /path/to/search -xtype l"}
{"input": "Exclude directory from find . command", "output": "find build -not \\( -path build/external -prune \\) -name \\*.js"}
{"input": "Gets IP address of 'eth0' network interface.", "output": "ifconfig eth0 | awk '/inet addr/{sub(/[^0-9]*/,\"\"); print $1}'"}
{"input": "display files ending with \".ext\" in current folder excluding those that are present in the list list.txt", "output": "find . -type f -name \"*.ext\" $(printf \"! -name %s \" $(cat list.txt))"}
{"input": "Search all regular files in the current directory tree for \"string\"", "output": "find . -type f -exec grep string {} \\;"}
{"input": "change the owner of the files which belong to the group 1000 to username and modify only the symbolic link not the originally pointed file", "output": "find -gid 1000 -exec chown -h :username {} \\;"}
{"input": "List and see contents of all abc.def files under the directories /ghi and /jkl", "output": "find /ghi /jkl -type f -name abc.def 2> /dev/null -exec ls {} \\; -exec cat {} \\;"}
{"input": "create a tar ball of all the jpg and png images in the current folder", "output": "find . \\( -iname \"*.png\" -o -iname \"*.jpg\" \\) -print -exec tar -rf images.tar {} \\;"}
{"input": "create directory aaa/bbb", "output": "mkdir aaa/bbb"}
{"input": "Find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output", "output": "{ find . -name '*my key phrase*'; grep -rl 'my key phrase' .; } | sort -u"}
{"input": "Remove all *.swp files under current directory ensuring white space safety", "output": "find . -name \"*.swp\" -print0|xargs -0 rm"}
{"input": "Terminates shell before 'echo foo' if 'set -e' was applied and shell behavior matches the POSIX standart.", "output": "echo $(false; echo foo)"}
{"input": "Display inputfile all on one line (replace newlines by spaces)", "output": "awk '{printf \"%s \", $0} END {printf \"\\n\"}' inputfile"}
{"input": "Report file systems disk usage in kilobytes.", "output": "df -k"}
{"input": "Count the number of characters in the list of regular files from the current directory tree", "output": "find . -type f | xargs | wc -c"}
{"input": "Replace spaces in file names with underscores for all files in the current directory tree", "output": "find -name \"* *\" -type f | rename 's/ /_/g'"}
{"input": "find all symbolic links in the current folder", "output": "find -type l"}
{"input": "Print all files in the current directory tree as a comma separated list", "output": "find . -type f -print0 | tr '\\0' ','"}
{"input": "Find all directories under /path/to/dir (no sub-directories) and archive them (with relative paths) into files with .tar.gz extension", "output": "find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sudo tar -zcpvf {}.tar.gz {} \\;"}
{"input": "Find all PDF files in the current directory and its sub-directories that are not currently stored in the ./pdfs directory and move them into the ./pdfs directory.", "output": "find . -name \"*.pdf\" -print | grep -v \"^\\./pdfs/\" | xargs -J X mv X ./pdfs/"}
{"input": "find all  files that match \"[a-f0-9\\-]{36}\\.jpg\" of grep", "output": "find . * | grep -P \"[a-f0-9\\-]{36}\\.jpg\""}
{"input": "Run perl -V (displays informations about perl's setup) in an empty environment.", "output": "env -i perl -V"}
{"input": "Find all files under /home that belong to user tecmint", "output": "find /home -user tecmint"}
{"input": "display all the users in the current folder which do not belong to the user root", "output": "find . ! -user root"}
{"input": "find all empty files", "output": "find / -empty"}
{"input": "force remove all the c files in the current folder, print0 is used to handle all files with new lines in their names or files with only spaces in their name", "output": "find . -name \"*.c\" -print0 | xargs -0 rm -rf"}
{"input": "display all the files in the current folder which hare in the sub directory trees of the folders which begin with the word \"kt\" followed by a digit", "output": "find . -path './kt[0-9] '"}
{"input": "Replace the \"openssl\" command executable with a symbolic link to \"/usr/local/ssl/bin/openssl\"", "output": "sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`"}
{"input": "Print \"huzzah\" if directory \"/some/dir\" is empty", "output": "find /some/dir/ -maxdepth 0 -empty -exec echo \"huzzah\" \\;"}
{"input": "Recursively change owner and group to \"tomcat7\" of \"webapps\", \"temp\", \"logs\", \"work\", and \"conf\"", "output": "chown -R tomcat7:tomcat7 webapps temp logs work conf"}
{"input": "delete all text files from current folder", "output": "find . -type f ! -iname \"*.txt\" -delete"}
{"input": "Print the number of lines in file.txt.", "output": "wc -l file.txt | cut -f1 -d\" \""}
{"input": "search for all the php files in the folder \"/home/mywebsite\" which have been changed in the last 30*24 hours", "output": "find /home/mywebsite -type f -name \"*.php\" -ctime -30"}
{"input": "find all PDFs owned by user \u201cseamstress\u201d", "output": "find / -user seamstress -iname \u201c*.pdf\u201d"}
{"input": "Print a colon-separated list of all directories from the $root directory tree, except those matching pattern \".[a-z]*\"", "output": "find \"$root\" -name \".[a-z]*\" -prune -o -type d -printf '%p:'"}
{"input": "find all the files in the home folder which have been modified in the last 7 days", "output": "find $HOME -mtime -7"}
{"input": "search all mp3 files in the folder \"/home/you\" which have been modified yesterday (from the start of day 00:00 to 23:59)", "output": "find /home/you -iname \"*.mp3\" -daystart -type f -mtime 1"}
{"input": "Find and remove all .mp3 regular files under the current directory and below", "output": "find . -type f -name \"*.mp3\" -exec rm -f {} \\;"}
{"input": "Construction with additional '-exec true' to be used if both commands need to run regardless of their success or failure.", "output": "find . -name \"*.txt\" \\( -exec echo {} \\; -o -exec true \\; \\) -exec grep banana {} \\;"}
{"input": "Find all files starting from the current directory which are smaller than 100MB", "output": "find . -size -100M"}
{"input": "Get the disk space used by all *.txt (case insensitive) files/directories under current directory", "output": "find . -iname \"*.txt\" -exec du -b {} + | awk '{total += $1} END {print total}'"}
{"input": "find setuid files and directories writing the details to /root/suid.txt , and find large files writing the details to /root/big.txt, traversing the filesystem just once", "output": "find / \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , \\  \\( -size +100M -fprintf /root/big.txt '%-10s %p\\n' \\)"}
{"input": "Find all regular files whose names contain a case insensitive pattern composed of space separated positional arguments and display a long listing of them", "output": "find . -type f -iname '*'\"$*\"'*' -ls"}
{"input": "Search for first match of the case insensitive regex 're' in all *.coffee files under current directory", "output": "find . -name \\*.coffee -exec grep -m1 -i 're' {} \\;"}
{"input": "Output only the filetype suffix of \"foo.tar.gz\", in this case \"gz\"", "output": "echo \"foo.tar.gz\" | rev | cut -d\".\" -f1 | rev"}
{"input": "Search everywhere for directories named `root'", "output": "find / -type d -name root"}
{"input": "Find all regular files with '.what_to_find' extension in the entire filesystem and move them to directory '/new_directory'", "output": "find / -iname \"*.what_to_find\" -type f -exec mv {} /new_directory \\;"}
{"input": "Print mv commands to rename all files under current directory by formatting the filenames with the sed scripts '\\''s/^([^-]*)-\\s*([^\\.]*)/\\L\\1\\E-\\2/'\\'', '\\''s/ /_/g'\\'' and '\\''s/_-/-/g'\\''", "output": "find ./ -type f -exec bash -c 'echo \"mv \\\"$1\\\" \\\"$(echo \"$1\" | sed -re '\\''s/^([^-]*)-\\s*([^\\.]*)/\\L\\1\\E-\\2/'\\'' -e '\\''s/ /_/g'\\'' -e '\\''s/_-/-/g'\\'')\\\"\"' - {} \\;"}
{"input": "Find files with 002 permission in entire file system and print them with the string 'has world write permissions' printed at last", "output": "echo $(find / -type f -perm -002) has world write permissions"}
{"input": "List in detail all *.txt files in the current directory tree, omitting paths ./Movies/*, ./Downloads/*, and ./Music/*", "output": "find . -type f -name \"*.txt\" ! -path \"./Movies/*\" ! -path \"./Downloads/*\" ! -path \"./Music/*\" -ls"}
{"input": "create and list contents of the archive", "output": "tar cf - $PWD|tar tvf -"}
{"input": "search all undo files(ending with .undo) in the current folder and calculate the total size of them", "output": "find -name '*.undo' -exec wc -c {} + | tail -n 1 | cut -d' ' -f 1"}
{"input": "search for the word \"put\" in all the files in the current folder which have the word \"bills\" in their name and display the matched line along with the filename.", "output": "find . -name '*bills*' -exec grep -H \"put\" {} \\;"}
{"input": "find  files which full path name is foo/bar under foo directory and print", "output": "find foo -path foo/bar -print"}
{"input": "Recursively set the file access control list of \"app/cache\" and \"app/logs\" to rwx for the current user and for user \"www-data\"", "output": "sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/cache app/logs"}
{"input": "Finds all folders that contain 'ssh' file and have 'bin' in path.", "output": "dirname `find / -name ssh | grep bin`"}
{"input": "print all files in the directories except the ./src/emacs directory", "output": "find . -wholename './src/emacs' -prune -o -print"}
{"input": "Find all *.txt files/directories under current directory and execute the python script hello.py with all their paths as arguments", "output": "find . -name \"*.txt\" -print0 | xargs -0 python hello.py"}
{"input": "get a PID of a process with name 'test.sh &'", "output": "jobs -l | grep 'test.sh &' | grep -v grep | awk '{print $2}'"}
{"input": "Prints process tree with command line arguments and process id numbers.", "output": "pstree -apl"}
{"input": "Find all hidden directories starting from the current directory", "output": "find . -type d -name \".*\""}
{"input": "Find all files under and below the current working directory with the word California in the file", "output": "find . -type f -exec grep California {} \\; -print"}
{"input": "find all the png files in current folder and pass them as input to the perl script and copy the result files to a folder", "output": "find . -name '*.png' | perl match4th.pl '/tmp/search.txt' | xargs cp -t /tmp/results"}
{"input": "Removes all empty folders under current path, aged between 'first' and 'last' timestamps.", "output": "find . -newer first -not -newer last -type d -print0 |  xargs -0 rmdir"}
{"input": "Find all regular files with the group read permission set in your home directory and below and output detailed information about each file.", "output": "find . -perm -g=r -type f -exec ls -l {} \\;"}
{"input": "display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names", "output": "find /var/log -name \"*.log\" -print0"}
{"input": "List the files/directories under /PATH_to_SEARCH, do a numeric sort and print the ones with different inode numbers", "output": "find /PATH_to_SEARCH -ls | sort -n | awk '!seen[$1]++'"}
{"input": "Forcefully delete all files in the current directory that begin with spam-", "output": "find . -name 'spam-*' | xargs rm"}
{"input": "Find all hidden regular files starting from the current directory", "output": "find . -type f -name \".*\""}
{"input": "Save the system host name in variable \"HOSTNAME\"", "output": "HOSTNAME=\"`hostname`\""}
{"input": "Find all executable files under the current directory and below", "output": "find . -perm /a=x"}
{"input": "Counts the number of lines in each file in a git repository.", "output": "git ls-files | xargs wc -l"}
{"input": "Lists available updates for installed packages.", "output": "yum check-update | awk 'p; /Updated packages/ {p=1}'"}
{"input": "Delete all .svn directories under current directory", "output": "find . -type d -name .svn -print0|xargs -0 rm -rf"}
{"input": "display all the directories in the current folder excluding those that are present in the aa directory tree", "output": "find . -type d -name aa -prune -o -print"}
{"input": "Recursively copy directories \"A\" and \"D\" to directory \"/path/to/target/directory\" on host \"anotherhost\", connecting as ssh user matching current user on local host, via default TCP port for ssh (22).", "output": "scp -r A D anotherhost:/path/to/target/directory"}
{"input": "Create directories \"/tmp/x/y/z/\" on remote host before copying \"$source\" to \"user@remote:/tmp/x/y/z/\"", "output": "rsync -a --rsync-path=\"mkdir -p /tmp/x/y/z/ && rsync\" $source user@remote:/tmp/x/y/z/"}
{"input": "Find all *.txt and *.json files in current directory", "output": "find . -type f \\( -name \"*.txt\" -o -name \"*.json\" \\)"}
{"input": "print the line containing TERMINATE and everything after in 'file'", "output": "tail -n \"+$(grep -n 'TERMINATE' file | head -n 1 | cut -d \":\" -f 1)\" file"}
{"input": "Print epoch seconds for given time string \"Oct 21 1973\"", "output": "date -d \"Oct 21 1973\" +%s"}
{"input": "Find regular files in the current directory tree that have the user executable bit set", "output": "find . -type f -perm -u=x"}
{"input": "find a 'fool.scala' named regular file under /opt /usr /var those directories.", "output": "find /opt /usr /var -name foo.scala -type f"}
{"input": "Print a line of 10 '#' characters", "output": "seq  -f \"#\" -s '' 10"}
{"input": "Force create a symbolc link named \"/usr/local/bin/fpdf\" to \"/usr/local/bin/findpdftext\"", "output": "sudo ln -s -f \"/usr/local/bin/findpdftext\" \"/usr/local/bin/fpdf\""}
{"input": "find all files in the current directory which are bigger than 2MB", "output": "find -size +2M"}
{"input": "For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv - both files must be sorted first.", "output": "join -o 1.1,1.2,1.3,1.4 -t, file1.csv file2.txt"}
{"input": "List all files in the current directory tree including those that may contain spaces in their names", "output": "find . -print0 | xargs -0 -l -i echo \"{}\";"}
{"input": "display all the files in the current folder excluding the directory aa", "output": "find . -type d ! -name aa"}
{"input": "Send SIGHUP signal to all SSH server processes, causing them to re-read the SSH server configuration.", "output": "kill -HUP $(lsof -t -c sshd)"}
{"input": "Search file /etc/logs/Server.log for lines containing \"Error\"", "output": "find /etc/logs/Server.log -exec grep Error {} \\; -print"}
{"input": "Removes any empty folder that matches pattern ed*.", "output": "rmdir ed*"}
{"input": "Find all directories under minimum 2 levels down the mydir directory", "output": "find mydir -mindepth 2 -type d"}
{"input": "Print reverse lookup for adress 127.0.0.1", "output": "dig -x 127.0.0.1"}
{"input": "Search for all files newer than file /tmp/t", "output": "find / -newer /tmp/t"}
{"input": "Print and delete all directories named 'work' under '/usr/ports/' directory tree", "output": "find /usr/ports/ -name work -type d -print -exec rm -rf {} \\;"}
{"input": "List all aliencoders.[0-9]+ files/directories under /home/jassi/ directory", "output": "find /home/jassi/ -name \"aliencoders.[0-9]+\" |& xargs ls -lrt | awk '{print $9}'"}
{"input": "Find all *.txt files/directories under current directory and execute process once with all of them as arguments", "output": "find . -name \\*.txt -exec process {} +"}
{"input": "Split \"file.txt\" into files of at most 1 MiB in size with a numeric suffix, prefix \"file\", and additional suffix \".txt\"", "output": "split -b 1M -d  file.txt file --additional-suffix=.txt"}
{"input": "Print the current date followed by \": $line\"", "output": "echo \"$(date): \" $line"}
{"input": "Find all *.txt files under /foo and print their total size", "output": "find /foo -name \"*.txt\" -exec du -hc {} + | tail -n1"}
{"input": "beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line", "output": "tac error.log | awk '{if(/2012/)print;else exit}'"}
{"input": "Remove last two underscore-delimited fields and following characters in \"t1_t2_t3_tn1_tn2.sh\" keeping only \"t1_t2_t3\"", "output": "echo t1_t2_t3_tn1_tn2.sh | rev | cut -d_ -f3- | rev"}
{"input": "Replace each new line in \"INPUT.txt\" with \":\"", "output": "paste -sd: INPUT.txt"}
{"input": "Find files and directories whose owner is daniel", "output": "find . -user daniel"}
{"input": "Get a recursive file list of directory $dir", "output": "find \"$dir\" -type f"}
{"input": "Find all regular files in the current directory tree that are not readable by all", "output": "find -type f ! -perm -444"}
{"input": "display all the hidden directories in the directory \"/dir/to/search/\"", "output": "find /dir/to/search -path '*/.*' -print"}
{"input": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"", "output": "find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +"}
{"input": "Send SIGTERM signal to entire session of processes containing process whose ID is 21709.", "output": "kill $(ps -o pid= -s $(ps -o sess --no-heading --pid 21709))"}
{"input": "Send SIGTERM signal to last process sent to background by the current shell.", "output": "kill $!"}
{"input": "Removes all files like 'A*.pdf' from current folder without prompting.", "output": "rm -f A*.pdf"}
{"input": "Recursively list all the files and directories that are only in directory /dir1 with their full paths.", "output": "diff -rq /dir1 /dir2 | grep -E \"^Only in /dir1.*\" | sed -n 's/://p' | awk '{print $3\"/\"$4}'"}
{"input": "Decompress \"/file/address/file.tar.gz\" to standard output", "output": "gzip -dc /file/address/file.tar.gz"}
{"input": "Count the total number of lines in all HTML files under /usr/src that contain string \"foo\"", "output": "find /usr/src -name \"*.html\" -execdir /usr/bin/grep -H \"foo\" {} ';' | wc -l"}
{"input": "Search all variables and their values for \"NAME\"", "output": "env | grep NAME"}
{"input": "Print only second from the end field from slash-separated string in file 'datafile'", "output": "cat datafile | rev | cut -d '/' -f 2 | rev"}
{"input": "recursively change owner and group of the directory and all files into it to user root and group root", "output": "chown -R root:root /var/lib/jenkins"}
{"input": "List all entry names contained directly by directory in_save in the current directory, pausing for user input at each page.", "output": "find ./in_save/ -type f -maxdepth 1| more"}
{"input": "Save full path of command \"cat\" to variable \"CAT\"", "output": "CAT=`which cat`"}
{"input": "List all *.txt files/directories under /etc", "output": "ls -l $(find /etc -name \"*.txt\" )"}
{"input": "Delete all empty directories in minimum 1 level down the directory 'directory'", "output": "find directory -mindepth 1 -type d -empty -delete"}
{"input": "Print the calendar for February 1956", "output": "cal 02 1956"}
{"input": "Copy \"6.3.3/6.3.3/macosx/bin/mybinary\" to \"~/work/binaries/macosx/6.3.3/\" and create directory \"~/work/binaries/macosx/6.3.3/\" if \"~/work/binaries/macosx/\" exists", "output": "rsync 6.3.3/6.3.3/macosx/bin/mybinary ~/work/binaries/macosx/6.3.3/"}
{"input": "Search the home directory tree for video files", "output": "find ~ -type f -regex '.*\\.\\(mkv\\|mp4\\|wmv\\|flv\\|webm\\|mov\\)'"}
{"input": "Search directories /path/to/directory/folder{1..50} for .txt files, outputting only the names of the matched files", "output": "find /path/to/directory/folder{1..50} -name '*.txt' -exec basename {} \\; 2>/dev/null"}
{"input": "find all the directories with the name \"some-dir\" in the current folder and move them to another folder and do not search in subfolders", "output": "find ./ -maxdepth 1 -name \"some-dir\" -type d -print0 | xargs -0r mv -t x/"}
{"input": "Add variable 'v' with value '5' to a temporary environment, list this environment using 'less' to interactively view it.", "output": "v=5 env|less"}
{"input": "Count files accessed more than a month ago", "output": "find . -atime +30 -exec ls \\; | wc -l"}
{"input": "Find all files/directories with 644 permission in entire file system", "output": "find / -perm 644"}
{"input": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script", "output": "find $1 -path /proc -prune -o -name \"$2\" -print -exec grep -Hn \"$3\" {} \\;"}
{"input": "Archive all non-hidden files in the current directory and its sub-directories in the file arch.cpio", "output": "find ./* | cpio -o > arch.cpio"}
{"input": "display list of all the hidden directories in the directory \"/dir/to/search/\"", "output": "find /dir/to/search/ -type d -iname \".*\" -ls"}
{"input": "Find sqlite3 databases in the current directory tree and execute query 'SELECT * FROM table WHERE column1=\"value\"' on all of them", "output": "find . -name 'sqlite.db' -exec sqlite3 \"{}\" 'SELECT * FROM table WHERE column1=\"value\"' \\;"}
{"input": "Find all files/directories named 'Waldo' under 'Books' directory tree that is located in user's home directory", "output": "find ~/Books -name Waldo"}
{"input": "extract the content of the file large.csv.gz and split it into pieces per 1000 lines named as xxxNNN", "output": "gzcat large.csv.gz | split -l 1000 - xxx"}
{"input": "find list of all files with file permission , link , owner , group , reation time , size , file name", "output": "find . -exec ls -ld {} \\;"}
{"input": "Bypass all prompts by sending return to the install script downloaded from \"https://raw.github.com/Homebrew/homebrew/go/install\"", "output": "yes '' | ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\""}
{"input": "Split \"your_file\" into files with at most 9 lines each", "output": "split -l9 your_file"}
{"input": "Remove all *.tmp files from the /tmp directory tree", "output": "find /tmp -name \"*.tmp\" -print0 | xargs -0 rm"}
{"input": "search for all the files in the folder /home which have sticky bit set and have the permissions 553", "output": "find /home -perm 1553"}
{"input": "find all java files in current folder and trim extra spaces, tab spaces", "output": "find . -type f -name \"*.java\" -exec perl -p -i -e \"s/[ \\t]$//g\" {} \\;"}
{"input": "find all the css files", "output": "find -name '*.css'"}
{"input": "Find all *.old files and move them to directory oldfiles", "output": "find . -name \"*.old\" -exec mv {} oldfiles \\;"}
{"input": "Save 'foo' into variable 'bar' in ksh", "output": "echo foo | read bar"}
{"input": "List screen IDs", "output": "screen -ls"}
{"input": "Recursively change owner to \"$1\" and group to \"httpd\" of all files in the current directory", "output": "chown -R $1:httpd *"}
{"input": "Remove newline characters from \"file.txt\"", "output": "paste -sd \"\" file.txt"}
{"input": "Delete all filename* files under /dir directory", "output": "find /dir -name \"filename*\" -type f -delete"}
{"input": "Search the src/ directory recursively for .c and .h files", "output": "find src/ -name '*.[ch]'"}
{"input": "find regular  file named foo.txt under root / directory.", "output": "find / -name foo.txt -type f"}
{"input": "Move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT_LOCATION} to ${OUTPUT_LOCATION}", "output": "find $INPUT_LOCATION -name '*.pdf.marker' -exec bash -c 'mv ${0%.marker} $0 $1' {} $OUTPUT_LOCATION \\;"}
{"input": "Find all files in the current directory tree containing \"foo\" in their names", "output": "find . -print | grep -i foo"}
{"input": "Take a file path from standard input and remove it.", "output": "xargs -i rm '{}'"}
{"input": "Find and uncompress all files in the current directory tree ending in \".csv.gz\"", "output": "find . -name '*.csv.gz' -exec gzip -d {} \\;"}
{"input": "Search regular files under ~/mail for string \"Linux\"", "output": "find ~/mail -type f | xargs grep \"Linux\""}
{"input": "Print the current date followed by ' doing stuff'", "output": "echo $(date) doing stuff"}
{"input": "Search for utility \"foo\" in PATH, display its file type description.", "output": "file $(which foo)"}
{"input": "Search for the files/directories that were modified more than an hour ago", "output": "find . -mtime +1"}
{"input": "Execute \"ls -l\" every 0.5 seconds", "output": "watch -n 0.5 ls -l"}
{"input": "Find all files/directories named 'photoA.jpg' under current directory tree", "output": "find . -name photoA.jpg"}
{"input": "Search the current directory tree for the files with extension \"trc\" and list them if they are more than three days old", "output": "find . -name \"*.trc\" -ctime +3 -exec ls -l {} \\;"}
{"input": "Find all symbolic links under '/proc/$pid/fd' directory tree with name pattern '$save_path/sess_\\*' and update their timestamps", "output": "find \"/proc/$pid/fd\" -ignore_readdir_race -lname \"$save_path/sess_\\*\" -exec touch -c {}"}
{"input": "Wrap each line in \"file\" to fit in 80 characters and count the number of lines", "output": "fold file | wc -l"}
{"input": "Find all empty directories recursively starting from the current one and delete them", "output": "find . -type d -empty -print0 | xargs -0 /bin/rmdir"}
{"input": "Search the .java files from the /Applications/ directory tree for TODO lines", "output": "find /Applications/ -name \"*.java\" -print0 | xargs -0 grep -i \"TODO\""}
{"input": "Replace the occurrences of \"HOGE\" with \"MOGA\" once per each line of the .yaml files from the current directory tree", "output": "find . -type f -name \"*.yaml\" -print0 | xargs -0 sed -i -e \"s/HOGE/MOGA/\""}
{"input": "Find all the files in the current directory recursively whose permissions are not 777", "output": "find . -type f ! -perm 777 | head"}
{"input": "find all the files that have been modified exactly yesterday (from 00:00 to 23:59 yesterday)", "output": "find . -type f -daystart -mtime 1"}
{"input": "Print the first 20 of the most changed \".cs\" files in git", "output": "git log --pretty=format: --name-only | grep .cs$ | sort | uniq -c | sort -rg | head -20"}
{"input": "change the permission of all the regular/normal files in the current folder from 777 to 755", "output": "find . -type f -perm 777 -exec chmod 755 {} \\;"}
{"input": "Make a directory in the current working directory with a random 32 alphanumeric character name", "output": "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | xargs mkdir"}
{"input": "Find all files in maximum 1 level down the current directory that were modified less than 1 day ago", "output": "find -maxdepth 1 -type f -mtime -1"}
{"input": "Force create a symbolic link in \"/usr/bin/\" for each file matching \"$javaUsrLib/jdk1*/bin/*\"", "output": "sudo ln -f -s $javaUsrLib/jdk1*/bin/* /usr/bin/"}
{"input": "Get the sizes (and total size) of all files under dir1 directory", "output": "find dir1 ! -type d |xargs wc -c"}
{"input": "Search /public/html/cosi for files whose name is \"wiki.phtml\"", "output": "find /public/html/cosi -name \"wiki.phtml\""}
{"input": "display a long listing of all fles in current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60 -ls"}
{"input": "Copies ${FILE} to COLLECT folder with unique name formatted like 'job_XXXXXXXXX'.", "output": "cp \"${FILE}\" \"COLLECT/$(mktemp job_XXXXXXXXX)\""}
{"input": "Find all *.ogg (case insensitive) files/directories under your home directory that are greater than 20MB in size", "output": "find $HOME -iname '*.ogg' -size +20M"}
{"input": "Find all *.cgi files/directories under current directory and change their permission to 755", "output": "find . -name '*.cgi' -print0 | xargs -0 chmod 755"}
{"input": "find all text files in current folder; which have been modified exactly 5 days ago", "output": "find . \u2013name \"*.txt\" \u2013mtime 5"}
{"input": "find all the files in the current folder which are bigger than 9MB", "output": "find . -size +9M"}
{"input": "Calculate md5 checksum of '/etc/localtime' and save the first space separated part in variable 'checksum'", "output": "checksum=`md5sum /etc/localtime | cut -d' ' -f1`"}
{"input": "remove all the core files from /usr folder which have not been accessed in the last 7*24 hours", "output": "find /usr -name core -atime +7 -exec rm \"{}\" \\;"}
{"input": "Exits from script with exit code 1.", "output": "exit 1"}
{"input": "Set the 'verbose' shell option causing bash to print shell input lines as they are read", "output": "set -v"}
{"input": "Create a symbolic link named \"$1/link\" to the existing full and real path of \"$2\"", "output": "ln -s \"$(readlink -e \"$2\")\" \"$1/link\""}
{"input": "Find all files under ./lib/app and sort them, then print their contents to myFile", "output": "find ./lib/app -type f | sort | xargs awk 'ENDFILE {print \"\"} {print}' > myFile"}
{"input": "Print the names and sizes of all regular files from the current directory tree", "output": "find . -type f -printf \"%f %s\\n\""}
{"input": "Find files/directories under current directory that are modified exactly one hour ago", "output": "find . -mtime 1"}
{"input": "delete all the tmp files ( files with the extension tmp ) in the /tmp folder. Print0 is used to display all those files which have newline in their names or files whose name is only spaces.", "output": "find /tmp -name \"*.tmp\" -print0 | xargs -0 rm   find /tmp -name \"*.tmp\" -print0 | xargs -0 rm"}
{"input": "Remove all vmware-*.log files under current directory", "output": "find . -name vmware-*.log | xargs rm"}
{"input": "Split a file \"file.tar.gz\" into pieces with size 1024 MB", "output": "split -b 1024m file.tar.gz"}
{"input": "record the absolute path of a relative path to a variable", "output": "SRC_DIR=$(cd ..; pwd)"}
{"input": "create a hard link as directory named \"new_hard_link\" to the directory \"existing_dir\" as root", "output": "sudo  ln  -d  existing_dir  new_hard_link"}
{"input": "Find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file", "output": "find . -iname \"*.mov\" -printf \"%p %f\\n\" | xargs -r -n2 ffmpeg -f flv -i"}
{"input": "find all the core files in the entire file system and  delete them", "output": "find / -name core -exec rm -f {} \\;"}
{"input": "Search the current directory tree for files containing \"sh\" in their names", "output": "find . -name \"*sh*\""}
{"input": "Find all files with '.txt' (case insensitive) extension under $dir directory non-recursively and sort them numerically", "output": "find \"$dir\" -maxdepth 1 -type f -iname '*.txt' | sort -n"}
{"input": "Create an empty file with a carriage return character in its name.", "output": "touch $'Icon\\r'"}
{"input": "find all the undo files in the current folder and display the toal lines, words, characters", "output": "find ./ -name *.undo | xargs wc"}
{"input": "find the count of all the regular files in a directory", "output": "find /usr -type f | wc -l"}
{"input": "Find all files/directories with space in their names under current directory and rename them by replacing all spaces with _", "output": "find . -depth -name \"* *\" -execdir rename \"s/ /_/g\" \"{}\" \\;"}
{"input": "Save hexadecimal byte 10 in binary file \"file.moi\" to variable \"day\"", "output": "day=$(od -t x1 --skip-bytes=9 --read-bytes=1 file.moi | head -1 | awk '{print $2}')"}
{"input": "Use the uncompressed contents of \"blah.gz\" as input to \"some_command\"", "output": "gunzip -c blah.gz | some_command"}
{"input": "Find all file.ext files/directories under current directory with \"FooBar\" in their paths and copy them into the current directory", "output": "find . -name \"file.ext\"| grep \"FooBar\" | xargs -i cp -p \"{}\" ."}
{"input": "display all the files in the current folder which end with \".bash\"", "output": "find . -name \"*.bash\""}
{"input": "Calculate the sha1 sum and md5 sum of \"foo\"", "output": "echo foo | tee >(sha1sum) >(md5sum)"}
{"input": "Split \"file.txt\" excluding the first line into files with at most 20 lines each and a prefix \"split_\"", "output": "tail -n +2 file.txt | split -l 20 - split_"}
{"input": "Recursively search for all regular files below directory \"dir1\" in currentd directory, and output the name of each, without any containing directories.", "output": "find ./dir1 -type f -exec basename {} \\;"}
{"input": "find all the ogg files in the current directory which have the word \"monfichier\" in their name", "output": "find -name *monfichier*.ogg"}
{"input": "search for a word in all the php files in the current folder and display the matching lines.", "output": "find . -name \\*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test'"}
{"input": "Print each line in \"file1\" and file2\" separated by tabs and \"file3\" separated by a space", "output": "paste -d\" \" file1 file2 | paste -d'|' - file3 | sed 's,|, ,g'"}
{"input": "Copy directory hierarchy \"dir\" and all its .txt files to \"dir_txt\"", "output": "find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents"}
{"input": "List *.txt files under current directory that have 'mystring' in their name", "output": "find . -name *.txt | egrep mystring"}
{"input": "display all the directories in the current folder excluding those that have the name \"node_modules\"", "output": "find . ! -name \"node_modules\" -type d"}
{"input": "Remove trailing white spaces from all files under current directory ignoring .git, .svn directories and binary files", "output": "find . -not \\( -name .svn -prune -o -name .git -prune \\) -type f -print0 | xargs -0 file -In | grep -v binary | cut -d \":\" -f1 | xargs -0 sed -i '' -E \"s/[[:space:]]*$//\""}
{"input": "grep for the last occurrence of text between two tags", "output": "tac a | grep -m1 -oP '(?<=tag>).*(?=</tag>)'"}
{"input": "Verbosely compresses all files on sixth and seventh depth level keeping original files in place.", "output": "bzip2 -kv */*/*/*/*/*/*"}
{"input": "Find *.conf files/directories only upto 2 levels down under /etc directory and show a few lines of output from the end", "output": "find /etc -maxdepth 2 -name \"*.conf\" | tail"}
{"input": "search for a word in all the php files in the current folder and display the count of all matching lines.", "output": "find . -name \\*.php -type f -print0 | xargs -0 -grep -Hn '$test' | wc -l"}
{"input": "Find all files/directories named 'foo' under current directory tree without descending into directories named 'foo'", "output": "find . -name foo -type d -prune -o -name foo"}
{"input": "Search all the regular files in the current directory tree for \"example\"", "output": "find -type f -print0 | xargs -r0 grep -F 'example'"}
{"input": "Run checksums recursively from the current directory, and give back the filenames of all identical checksum results", "output": "find ./ -type f -print0 | xargs -0 -n1 md5sum | sort -k 1,32 | uniq -w 32 -d --all-repeated=separate | sed -e 's/^[0-9a-f]*\\ *//;'"}
{"input": "search for al cpp files in current folder and display distinct parent directory of these files in sorted order", "output": "find . -name \"*.cpp\" -exec dirname {} + | sort -u"}
{"input": "Find all files/directories with spaces in their names under ~/Library directory", "output": "find ~/Library -name '* *'"}
{"input": "Move all files from \"src/test/\" to \"dest\" displaying progress", "output": "rsync -a --progress --remove-source-files src/test/ dest"}
{"input": "find files which do not have all permissions to all the users in the current directory", "output": "find . -type f ! -perm 777 | head"}
{"input": "Count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??'", "output": "find xargstest/ -name 'file??' | sort | xargs wc -l"}
{"input": "Write \"error\" to standard output", "output": "echo \"error\" | tee"}
{"input": "Display the number of lines in all regular files under current directory tree and also show the total count", "output": "find . -type f -exec wc -l {} +"}
{"input": "Find all files under $musicdir directory", "output": "find \"$musicdir\" -type f -print"}
{"input": "Search for file names with \"bad\" characters in the current directory and delete the files.", "output": "find . -name '*[+{;\"\\\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \\;"}
{"input": "Print the base name of the current working directory", "output": "basename $(pwd)"}
{"input": "explicitly list all files in the current directory", "output": "find . -print"}
{"input": "find all the text files in the home folder", "output": "find ~ -name \"*.txt\" \u2014 print"}
{"input": "Shows state of shell option 'extglob'.", "output": "shopt extglob"}
{"input": "find all the regular files in the current directory which do not have a read permission", "output": "find -type f ! -perm -444"}
{"input": "Find all files/directories in all paths expanded by the glob pattern *", "output": "find *"}
{"input": "Recursively change the owner and group of all files in \"public_html\" to \"owner\"", "output": "chown -R owner:owner public_html"}
{"input": "Print which files differ in \"dir1\" and \"dir2\" recursively", "output": "diff -rq dir1 dir2"}
{"input": "display all files in current folder which are bigger than 100KB but are less than 500KB", "output": "find . -size +100k -a -size -500k"}
{"input": "Remove the regular files from the current directory that were last modified on November, 22", "output": "find -maxdepth 1 -type f -newermt \"Nov 22\" \\! -newermt \"Nov 23\" -delete"}
{"input": "find all the regular/normal files in the current folder and rename them to html files", "output": "find main-directory -type f -exec mv -v '{}' '{}'.html \\;"}
{"input": "Infinitely write \"1\" with line numbers to the console and \"/tmp/to\"", "output": "yes 1 | nl | tee /tmp/to"}
{"input": "Remove all *.swp files/directories under current directory", "output": "find . -name \"*.swp\"-exec rm -rf {} \\;"}
{"input": "Read a single character from standard input with prompt \"Are you sure? \"", "output": "read -p \"Are you sure? \" -n 1 -r"}
{"input": "Recursively finds and compresses all files in the directory '/path/to/dir'", "output": "find /path/to/dir -type f -exec bzip2 {} \\;"}
{"input": "Find all .gif and .jpg files in the /var/www directory tree", "output": "find /var/www -name *.gif -o -name *.jpg"}
{"input": "convert all the normal files in the current folder from dos format to unix format (remove extra characters at the end etc.) and save the output to a file", "output": "find . -type f -exec dos2unix {} {} \\;"}
{"input": "Recursively removes all files like '*.pyc' of '*.pyo' in a current folder without prompting.", "output": "find . -type f -name \"*.py[c|o]\" -exec rm -f {} +"}
{"input": "show the list of all the files in the current folder which have been modified within the 24 hours", "output": "find . -mtime 0 -print"}
{"input": "show a count of the number of filenames ending in .txt in the current directory, without descending into sub-directories", "output": "find . -maxdepth 1 -name \\*.txt -print0 | grep -cz ."}
{"input": "Get virtual private memory use of process", "output": "top -l 1 -s 0 -stats vprvt -pid 8631"}
{"input": "all .jpg or .png images modified in the past week", "output": "find . -mtime -7 \\( '*.jpg' -o -name '*.png' \\)"}
{"input": "Remount \"/dev/stl12\" on \"/system\" as read and write", "output": "mount -o rw,remount /dev/stl12 /system"}
{"input": "Find all CDC* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files and count the number of lines in the output", "output": "find .  -type f -name \"CDC*\" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \\ | wc -l"}
{"input": "ERROR - need to add -a or -r for recursive copy", "output": "rsync --exclude='B/' --exclude='C/' . anotherhost:/path/to/target/directory"}
{"input": "Print a ping request and the number of packets sent, received, and the percentage lost for each ping request to \"google.com\"", "output": "ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { print $0; printf \"sent:%d received:%d loss:%d%%\\n\", sent, received, loss; }'"}
{"input": "Write unbuffered output of \"python -u client.py\" to standard output and to \"logfile\"", "output": "python -u client.py | tee logfile"}
{"input": "Create symbolic links in the current directory for all files located in directory \"/path/with/files\" with a name containing \"txt\"", "output": "find /path/with/files -type f -name \"*txt*\" -exec ln -s {} . ';'"}
{"input": "Find all empty files in the current directory and delete them", "output": "find . -type f -maxdepth 1 -empty -print0 | xargs -0 /bin/rm"}
{"input": "Print the names of any differing files in directories \"dir1/\" and \"dir2/\"", "output": "diff  --brief --recursive dir1/ dir2/"}
{"input": "Print A record for domain 'domain.' from 'ns2.newnameserver' nameserver", "output": "dig @ns2.newnameserver domain. a"}
{"input": "Find all *.rb (regular) files under current directory and print them on stdout putting the file name/path in-between two string literals 'Hello,' and '!'", "output": "find . -name \"*.rb\" -type f | xargs -I {} echo Hello, {} !"}
{"input": "List files that have been renamed in Git repository.", "output": "find -name .git -prune -o -exec git log --pretty=tformat:'' --numstat --follow --find-copies-harder --reverse {} ';' | cut -f3- | grep '.* => .*'"}
{"input": "Prints the Nth line of output from 'ls -1'", "output": "ls -1 | (for ((x=0;x<N;x++)) ; do read ; done ; head -n1)"}
{"input": "Print the current working directory without a trailing newline", "output": "echo -n $(pwd)"}
{"input": "Create 1000 files each file having a number from 1 to 1000 named \"file000\" to \"file999\"", "output": "seq 1 1000 | split -l 1 -a 3 -d - file"}
{"input": "Execute \"cat /tmp/iostat.running\" every 10 seconds", "output": "watch -n10 cat /tmp/iostat.running"}
{"input": "Backup MySQL database \"database\" with \"username\" and \"pswd\", compress with gzip and add the time stamp before emailing to \"me@domain.com\"", "output": "mysqldump -e --user=username --password=pswd database | gzip | uuencode my-dbbackup.`date +\"\\%Y-\\%m-\\%d\"`.gz | mail me@domain.com"}
{"input": "Lists all subdirectories in a current folder, removing trailing slash.", "output": "ls -d */|sed 's|[/]||g'"}
{"input": "Search the current directory for files whose names start with my", "output": "find . -name 'my*'"}
{"input": "Print a list of all *.code files from the current directory tree", "output": "find . -name *.code"}
{"input": "display all the regular/normal files in the current folder which have been modified after a specific time stamp and do not search in the sub directories", "output": "find -maxdepth 1 -type f newermt \"$timestamp\"'"}
{"input": "Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension", "output": "find . -regextype sed -regex \"./test[0-9]\\{2\\}.txt\""}
{"input": "Search for files greater than 20MB in the entire file system and display the path and file size", "output": "find / -type f -size +20M -exec ls -lh {} \\; | awk '{ print $NF \": \" $5 }'"}
{"input": "Run 'git pull' in every subdirectory of the current directory", "output": "find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \\;"}
{"input": "Use \"$BYTES\" amount of RAM with no output", "output": "yes | tr \\\\n x | head -c $BYTES | grep n"}
{"input": "Display machine architecture, ie. x86_64", "output": "uname -m"}
{"input": "Find all files/directories under '/etc' directory tree that have been modified after '/etc/motd'", "output": "find /etc -newer /etc/motd"}
{"input": "Compare *.csv files in the current directory tree with their analogs stored in /some/other/path/ prompting before running `diff'", "output": "find . -okdir diff {} /some/other/path/{} \";\""}
{"input": "Recursively copies 'SRCFOLDER' to the 'DESTFOLDER/'", "output": "cp -R SRCFOLDER DESTFOLDER/"}
{"input": "search for the files \"foo.txt\" in the current folder and rename it to foo.xml", "output": "find -name foo.txt -execdir rename 's/\\.txt$/.xml/' '{}' ';'"}
{"input": "Set permissions of all directories under \"/opt/lampp/htdocs\" to 755", "output": "find /opt/lampp/htdocs -type d -exec chmod 755 {} \\;"}
{"input": "Print the list of files in the current directory tree skipping SVN files", "output": "find . -path '*/.svn*' -prune -o -print"}
{"input": "Read a line of standard input in an interactive shell", "output": "read -e"}
{"input": "Create an empty file (or update timestamp of file) specified by variable \"correctFilePathAndName\"", "output": "touch \"$correctFilePathAndName\""}
{"input": "search for all the files in current folder and display all the file names separated by space", "output": "find . | awk '{printf \"%s \", $0}'"}
{"input": "find all regular/normal files in current folder which have been modified in the last 60 minutes", "output": "find -type f -mtime -60"}
{"input": "Find all sample* files/directories under current directory and print 'program {}-out {}' where {} will expand to file paths", "output": "find . -name \"sample*\" | parallel --dry-run program {}-out {}"}
{"input": "Display the host's ECDSA fingerprint using the sha256 hasing algorithm.", "output": "ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub"}
{"input": "Find all files named \"test2\" in the current directory tree", "output": "find -name test2"}
{"input": "Print all lines of \"seq 1 10\" except the last 3", "output": "seq 1 10 | perl -e '@x=(\"\")x3;while(<>){print shift @x;push @x,$_}'"}
{"input": "Display top 500 mp4 and flv files under current directory along with their timestamps in the sorted order of time", "output": "find . -regex \".*\\.\\(flv\\|mp4\\)\" -type f -printf '%T+ %p\\n' | sort | head -n 500"}
{"input": "Prints number of days in a current month.", "output": "cal $(date +\"%m %Y\") | awk 'NF {DAYS = $NF}; END {print DAYS}'"}
{"input": "Write the output of command \"mongo\" to the screen and to file \"somefile\"", "output": "mongo | tee somefile"}
{"input": "Format bash array \"${arr}\" in columns", "output": "echo \" ${arr[@]/%/$'\\n'}\" | sed 's/^ //' | column"}
{"input": "Create a temporary directory and go into it.", "output": "tmpdir=$(mktemp -d) && cd $tmpdir"}
{"input": "Search the current directory tree for hidden files", "output": "find .*"}
{"input": "Find .rm files in the current directory tree and convert them to the MP3 format", "output": "find . -type f -name \"*.rm\" -exec ffmpeg -i {} -sameq {}.mp3 \\; -exec rm {} \\;"}
{"input": "Find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified less than 30 days ago", "output": "find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime -30"}
{"input": "Email an alert message containing the IP address of the SSH connection with attachment \"tmpfile\" to \"user@example.com\"", "output": "mail -s \"Alert: SSH Access from `who | cut -d'(' -f2 | cut -d')' -f1`\" -a tmpfile user@example.com"}
{"input": "recall the second argument from a previous command by pressing alt-shift-y", "output": "bind '\"\\eY\": \"\\e2\\e.\"'"}
{"input": "Find all .zip files in the current directory tree and unzip them deleting the archives on success", "output": "find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \\; -delete"}
{"input": "find all the files in the current folder and save the output to the file dir-list", "output": "find -type d > dir-list"}
{"input": "Find all files and directories that do not match the pattern given as the $controlchars variable", "output": "find . ! -name \"$controlchars\""}
{"input": "Change owner to \"bob\" and group to \"sftponly\" of \"/home/bob/writable\"", "output": "sudo chown bob:sftponly /home/bob/writable"}
{"input": "Recursively finds string 'class foo' in all *.c files from current folder.", "output": "grep \"class foo\" **/*.c"}
{"input": "Find all IP addresses in /etc directory files", "output": "find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;"}
{"input": "display the type of all the regular/normal files in the entire file system", "output": "find / -type f -print | xargs file"}
{"input": "Find all directories under ~/code excluding hidden directories and replace all newlines with : in the output then remove the last :", "output": "find ~/code -type d -name '[^\\.]*' | tr '\\n' ':' | sed 's/:$//'"}
{"input": "Counts total number of only lines with alphanumeric symbols in all *.php files in a current folder and subfolders.", "output": "find . -name '*.php' | xargs cat | awk '/[a-zA-Z0-9]/ {i++} END{print i}'"}
{"input": "List all files under current directory that are greater than 10000000x512 bytes in size", "output": "find . -type f -size +10000000 -print|xargs ls -ld|more"}
{"input": "Copies file 'file.txt' to each top-level directory in the current directory.", "output": "ls -d */ | xargs -iA cp file.txt A"}
{"input": "Copy a file xyz.c to all the directories below the current one whose names begin with \"temp\"", "output": "find . -type d -name \"temp*\" | xargs -n1 cp xyz.c"}
{"input": "Find all files that are set group ID to staff", "output": "find . -group staff -perm -2000 -print"}
{"input": "Removes resursively all files and folders named \"Thumbs.db\", ignoring case distincts.", "output": "find . -iname \"Thumbs.db\" -print0 | xargs -0 rm -rf"}
{"input": "find all the files in the home folder which are bigger than 2MB and zip them", "output": "find ~ -size +2000000c -regex '.*[^gz]' -exec gzip '{}' ';'"}
{"input": "List in detail the regular files from the /somelocation/log_output directory tree that were last changed more than 40 days ago", "output": "find /somelocation/log_output -type f -ctime +40 -exec ls -l {} \\;"}
{"input": "Display the last 3 characters of variable foo.", "output": "echo $foo | rev | cut -c1-3 | rev"}
{"input": "display all the regular/normal files in the /root folder which are bigger than 500MB", "output": "find /root -type f -size +500M -printf \"The %p file is greater than 500MB\\n\""}
{"input": "Adds execution permissions on a script ./etc/bash_completion within Homebrew home folder path.", "output": "chmod +x $(brew --prefix)/etc/bash_completion"}
{"input": "Replace \"version.old\" with \"version.new\" in the symbolic link target of \"SomeLibrary\"", "output": "ln -f -s -T `readlink SomeLibrary | sed 's/version.old/version.new/'` SomeLibrary"}
{"input": "Clean up the output of \"unzip -l\" and print only the \"jar\" files", "output": "unzip -l some-jars-and-textfiles.zip | tr '[:blank:]' \\\\t | cut -f 5 | grep jar"}
{"input": "display the names without extensions of all the data files in current folder which have not been changed in the last 60 mins", "output": "find ./ -name \"*.dat\" -type f -cmin +60 -exec basename {} \\;"}
{"input": "Remove all *.log files from the current directory tree", "output": "find -name '*.log' -delete"}
{"input": "Search the current directory tree for hidden files skipping .htaccess", "output": "find . -type f \\( -iname \".*\" ! -iname \".htaccess\" \\)"}
{"input": "Find all files/directories under current directory with 'FooBar' in their paths and copy them to ~/foo/bar", "output": "find .|grep \"FooBar\"|yargs -l 203 cp --after ~/foo/bar"}
{"input": "List .c files in the current directory", "output": "find . \\( ! -name . -prune \\) -name \"*.c\" -print"}
{"input": "Change group ownership to `foo' for files with GID=2000", "output": "find / -group 2000 -exec chgrp -h foo {} \\;"}
{"input": "Print lines 10000 to 10010 from input \"seq 1 100000\"", "output": "seq 1 100000 | tail -n +10000 | head -n 10"}
{"input": "List all files/directories under /myfiles directory", "output": "find /myfiles -exec ls -l {} ;"}
{"input": "Opens gawk info manual and goes to command-line options node.", "output": "info -O gawk"}
{"input": "Find and kill a process by name", "output": "kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')"}
{"input": "find all the files in the current folder which have a set uid set", "output": "find . -perm -4000 -print"}
{"input": "delete all the regular files in the temp folder which have not been changed in the last 15*24 hours", "output": "find /tmp/ -ctime +15 -type f -exec rm {} \\;"}
{"input": "Find all .c and .h files in the current directory tree and search them for \"expr\"", "output": "find -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "Silently read standard input until the escape key is pressed ignoring backslash escapes and using the prompt $'Press escape to continue...\\n'", "output": "read -rsp $'Press escape to continue...\\n' -d $'\\e'"}
{"input": "Print a list of each file with the full path prefix in the current directory tree excluding symbolic links", "output": "tree -fi |grep -v \\>"}
{"input": "Find all directories by the name `httpdocs' on the system", "output": "find / -type d -name httpdocs 2> /dev/null"}
{"input": "Copy file header.shtml to directories dir1, dir2, dir3, and dir4", "output": "find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \\;"}
{"input": "Mount \"ntfs-3g\" filesystem \"/dev/mapper/myvolume\" on \"/media/volume\"", "output": "mount -t ntfs-3g /dev/mapper/myvolume /media/volume"}
{"input": "Find all .sh files in the current directory tree and remove them", "output": "find . -name \"*.sh\" -exec rm -rf '{}' \\"}
{"input": "Print unique lines of sorted file \"a\" and \"b\" and remove leading tabs", "output": "comm -3 a b | sed 's/^\\t//'"}
{"input": "List each file or directory in the current directory prefixed by its human readable filesize and sorted from largest to smallest", "output": "du -h --max-depth=0 * | sort -hr"}
{"input": "Search all files and   directories either of the directory /home/oracle and  /home/databse which  contain the \"zip\"  anywhere in the files or directory name .", "output": "find /home/oracle /home/database -name '*zip*'"}
{"input": "find files which full path name like '*/*config' at current directory and print", "output": "find .  -path '*/*config'"}
{"input": "Find all l files in the 'foo' folder but ones with name like '*Music*' to the 'bar' folder.", "output": "find foo -type f ! -name '*Music*' -exec cp {} bar \\;"}
{"input": "Find all foo.mp4 files in the current directory tree", "output": "find ./ -name \"foo.mp4\" -exec echo {} \\;"}
{"input": "Find files with SGID (2000) and SUID(4000) permssions set in the file system", "output": "find /  \\( -perm -2000 -o -perm -4000 \\) -ls"}
{"input": "Format the time string $timestamp according to the format string \"%Y-%m-%d %H:%M:%S\" and save the output to variable 'CDATE'", "output": "CDATE=$( date -d @\"$timestamp\" +\"%Y-%m-%d %H:%M:%S\" )"}
{"input": "Print characters 2 through 4 of \"abcdefg\"", "output": "echo 'abcdefg'|tail -c +2|head -c 3"}
{"input": "Print host name followed by \":\" and the contents of \"/sys/block/sda/size\"", "output": "echo \"$(hostname):$(cat /sys/block/sda/size)\""}
{"input": "Compress all files not ending in \".gz\" in directory \"$PATH_TO_LOGS\" that were last modified more than \"$SOME_NUMBER_OF_DAYS\" days ago", "output": "find $PATH_TO_LOGS -maxdepth 1 -mtime +$SOME_NUMBER_OF_DAYS -exec sh -c \"case {} in *.gz) ;; *)  gzip '{}' ;; esac;\" \\;"}
{"input": "Create a symbolic link to file \"/usr/bin/perl\" named with escaped characters \"/usr/local/bin/perl\\r\\n\"", "output": "sudo ln -s /usr/bin/perl /usr/local/bin/perl`echo -e '\\r'`"}
{"input": "Recursively finds all '*.png' files older than 50 days in a current folder and removes them.", "output": "find . -name \"*.png\" -mtime +50 -exec rm {} \\;"}
{"input": "Move all files from the current directory to \"targetdirectory\"", "output": "find . ! -name . -prune -exec sh -c 'mv \"$@\" targetdirectory/' sh  {} +"}
{"input": "Search  in current directory downwards all files which  have not been accessed since last 7 days", "output": "find . -atime +7 -print"}
{"input": "set alias \"foo\" for command \"BAR=baz\"", "output": "alias foo=BAR=baz"}
{"input": "search for the word \"nutshell\" or \"Nutshell\" in all the files in the folder book", "output": "find /book -print | xargs grep '[Nn] utshell'"}
{"input": "search for all xml files in current folder and display the copy command to copy them to another folder", "output": "find . -name \"*.xml\" -exec sh -c 'echo \"cp $0 someWhereElse/$0\"' {} \\;"}
{"input": "For every cron job with a comment \"change-enabled\" at the end of its crontab entry, change the scheduled hour to 7.", "output": "crontab -l | sed -re '/# *change-enabled *$/s/^([^ ]+) [^ ]+/\\1 7/' | crontab -"}
{"input": "split compressed content of the directory /home into pieces per 4000 mb named as  \"/media/DRIVENAME/BACKUPNAME.tgz.NNN\"", "output": "tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz"}
{"input": "bind word \"foobar\" to key code \"\\e[24~\"", "output": "bind '\"\\e[24~\":\"foobar\"'"}
{"input": "Find all files/directories with '.pdf' extension excluding 'pdfs' directory and all of its contents", "output": "find . -name \"*.pdf\" -print | grep -v \"^\\./pdfs/\""}
{"input": "set alias \"go\" for command 'GOPATH=$(infer-gopath.sh) go'", "output": "alias go='GOPATH=$(infer-gopath.sh) go'"}
{"input": "Prints number of files with extension \"${EXTENSION}\" in the \"${SEARCHPATH}\" directory.", "output": "echo \"Number files in SEARCH PATH with EXTENSION:\" $(ls -1 \"${SEARCHPATH}\"/*.\"${EXTENSION}\" | wc -l)"}
{"input": "split the result of command \"ping -c 25 google.com | tee \" into pieces per 100000 bytes named as \"/home/user/myLogFile.logNNN\"", "output": "ping -c 25 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)"}
{"input": "Search the current directory tree for regular files omitting directory `omit-directory'", "output": "find . -name omit-directory -prune -o -type f"}
{"input": "Find *.c files under $HOME and search for the string 'sprintf' in those files", "output": "find $HOME -name '*.c' -print | xargs    grep -l sprintf"}
{"input": "Lists all files in a current folder, separating names with space.", "output": "ls -1 | awk 'ORS=\" \"'"}
{"input": "search for a word in all the regular/normal files in the current folder and display the filename along with the matched text", "output": "find . -type f -exec grep -l linux {} \\;"}
{"input": "Save the list of all subdirectories of the current directory as \"dirs_to_remove\"", "output": "find . -maxdepth 1 -type d > dirs_to_remove"}
{"input": "List all level 1 subdirectories of the current directory printing line \"cmd2\" after each of them", "output": "find -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done"}
{"input": "Update the history file in the current session", "output": "history -w"}
{"input": "Delete files \"*doc copoy\" in directory tree /mnt/zip", "output": "find /mnt/zip -name \"*doc copy\" -execdir rm \"{}\" \\;"}
{"input": "display table of files with their name, owner, and size in bytes.", "output": "find . -printf 'Name: %f Owner: %u %s bytes\\n'"}
{"input": "find md5sum of 'string to be hashed'", "output": "md5 -s 'string to be hashed'"}
{"input": "Find all directories recursively starting from / and count them", "output": "find / -type d | wc -l"}
{"input": "count all the regular files that are present in a directory", "output": "find . -type f | wc -l"}
{"input": "display all the hidden files in the directory \"/dir/to/search/\"", "output": "find /dir/to/search/ -name \".*\" -print"}
{"input": "Search \"whatyousearchfor\" in history and print 3 lines before and 4 lines after", "output": "history | grep -A 4 -B 3 whatyousearchfor"}
{"input": "Find all empty directories under /tmp", "output": "find /tmp -type d -empty"}
{"input": "Check if *RBENV* variable is defined in global environment", "output": "tmux show-environment -g | grep RBENV"}
{"input": "Recursively copies \"$appname.app\", preserving symlinks as symlinks to the 'Payload' directory.", "output": "cp -Rp \"$appname.app\" Payload/"}
{"input": "Find all files under current directory whose file type description contains \"image\", display only path to each file.", "output": "find . -type f -exec file {} \\; | awk -F: '{if ($2 ~/image/) print $1}'"}
{"input": "Backup all of the Java files in the current directory tree by copying them and appending the suffix .bk to each", "output": "find . -name \"*.java\" -exec cp {} {}.bk \\;"}
{"input": "Remount \"/home/evgeny\" with the \"suid\" flag set", "output": "sudo mount -i -o remount,suid /home/evgeny"}
{"input": "Create a symbolic link to \"$file\" named \"/tmp/allfiles\"", "output": "ln $file /tmp/allfiles"}
{"input": "Find regular files named \"expression -or expression\" under and below /dir/to/search/", "output": "find /dir/to/search/ -type f -name 'expression -or expression' -print"}
{"input": "Format output of 'file' content to columns with wide not less than 80 pixels", "output": "cat file | column -c 80"}
{"input": "Write the output of \"someCommand\" to standard output and \"someFile\"", "output": "someCommand | tee someFile"}
{"input": "Find all files/directories in entire file system that are owned by \"syslog\" user", "output": "find / -user syslog"}
{"input": "find all the empty directories in the current folder and all its sub directories too", "output": "find . -depth -empty -type d"}
{"input": "Request DNS record for  domain 'dragon-architect.com' with tracing and additional section, and extract third block of text, separated between two new lines.", "output": "dig +trace +additional dragon-architect.com | awk 'NR==3' RS=\"\\n\\n\""}
{"input": "Overwrites file $FILE with random content, then truncates and deletes it.", "output": "shred -u $FILE"}
{"input": "Search the .py files residing in the current directory tree for \"something\" and save the output to output.txt", "output": "find . -name '*.py' -exec grep 'something' {} \\; > output.txt"}
{"input": "Find all files/directories named 'articles.jpg' under 'images' directory tree", "output": "find images -name \"articles.jpg\""}
{"input": "Calculate md5 checksum of theDirname", "output": "cpio -i -e theDirname | md5sum"}
{"input": "Remove safely all *.bak and *.backup files that were accessed last time more than 30 days ago", "output": "find . -name '*.bak' -type f -atime +30 -exec csh -c 'test -s $1:r && rm $1' '{}' ';'"}
{"input": "Find all files except files with '.gz' extension in the current directory non-recursively and compress them with gzip", "output": "find . -maxdepth 1 -type f ! -name '*.gz' -exec gzip \"{}\" \\;"}
{"input": "Remove the .jpg files from the current directory whose names match regular expression \".+-[0-9]+x[0-9]+\\.jpg\"", "output": "find . -type f -regex \".+-[0-9]+x[0-9]+\\.jpg\" | xargs rm"}
{"input": "Look for directory `Cookbook'", "output": "find -name Cookbook -type d"}
{"input": "Find all directories under ${1:-.} directory without descending into any sub-directories", "output": "find ${1:-.} -mindepth 1 -maxdepth 1 -type d"}
{"input": "create an archive using 7zhelper.sh as a compress program", "output": "tar -I 7zhelper.sh -cf OUTPUT_FILE.tar.7z paths_to_archive"}
{"input": "find all the directories in current folder and delete them", "output": "find . -type d -delete"}
{"input": "find all the file that have been modified in the last 3 days ( considers day starting not 24 hours )", "output": "find ./ -daystart -mtime -3"}
{"input": "Find all regular files in the current directory tree, except GIT files", "output": "find .  -name .git -prune -o -type f -print"}
{"input": "Shows strings that NOT match regex '^($|\\s*#|\\s*[[:alnum:]_]+=)'", "output": "echo \"${line}\" | egrep --invert-match '^($|\\s*#|\\s*[[:alnum:]_]+=)'"}
{"input": "Copies all files under the current directory but ones with '*/not-from-here/*' in path to the '/dest/' directory.", "output": "find . -type f -not -iname '*/not-from-here/*' -exec cp '{}' '/dest/{}' ';'"}
{"input": "Find all files under current directory and run /tmp/clever.sh for each of them with each file path as an argument", "output": "find . -type f -exec /tmp/clever.sh {} \\;"}
{"input": "Check if the directory tree whose name is given as variable $somedir contains no regular files", "output": "find \"$somedir\" -type f -exec echo Found unexpected file {} \\;"}
{"input": "display the contents of all java script files in a folder and save the output to a file", "output": "find src/js -type f -name \"*.js\" -exec cat {} >> ${jsbuild}$@ \\;"}
{"input": "display all the directories in the current folder and create a skeleton of make directory commands with all these folders", "output": "find -type d|sed -r '/^.$/{s:.:#!/bin/bash:};{s/^\\./mkdir -p &/}'"}
{"input": "Recursively make all mounts under \"/\" private", "output": "mount --make-rprivate /"}
{"input": "find all the html files in current folder and replace old string with new string", "output": "find . -name '*.html' -print0 | xargs -0 perl -pi -e 's/oldstring/newstring/g'"}
{"input": "run command 'bash --rcfile <(echo \"source ~/.bashrc; source myfile\")' as user root with a bash shell", "output": "su -s /bin/bash -c 'bash --rcfile <(echo \"source ~/.bashrc; source myfile\")'"}
{"input": "Find all files under dir and calculate their md5sum and save the output to dir.md5", "output": "find dir -type f -print0 | xargs -0 md5sum > dir.md5"}
{"input": "Find all hard links to file /path/to/file that exist under the current directory tree", "output": "find . -samefile /path/to/file"}
{"input": "Find all syslog directories under /var/log directory", "output": "find /var/log -name \"syslog\" -type d"}
{"input": "Search the files of the current directory tree for string \"searched-string\"", "output": "find . | xargs grep \"searched-string\""}
{"input": "Use the PHP interpreter to output an endless stream of \"a\" characters to \"nohup.out\" in the current directory, or in the home directory if that is not possible. The PHP process will not receive or respond to SIGHUP (signal 1) which are sent to it.", "output": "nohup php -r 'while (true) { echo \"a\";}' &"}
{"input": "finds all directories named CVS, and deletes them and their contents.", "output": "find . -type d -name CVS -exec rm -r {} \\;"}
{"input": "find all the symbolic links in the current folder and check the file type and display the names of files which are broken", "output": "find . -type l -exec sh -c \"file -b {} | grep -q ^broken\" \\; -print"}
{"input": "Remove files in current directory according to the filenames found in ~/clang+llvm-3.3/bin/", "output": "find ~/clang+llvm-3.3/bin/ -type f -exec basename {} \\; | xargs rm"}
{"input": "find all the files ending with \"mkv\" in current folder", "output": "find -name \"*.mkv\""}
{"input": "Delete all directories under '.cache/chromium/Default/Cache/' directory tree that are bigger than 100MB and are at least 1 level deep", "output": "find .cache/chromium/Default/Cache/ -mindepth 1 -type d -size +100M -exec rm -rf {} \\;"}
{"input": "Generate UUIDs for the files from the current directory tree", "output": "find . -printf \"%P\\0\" | sort -z | while IFS= read -d '' -r f; do echo \"$(uuid) $f\"; done"}
{"input": "Search the directory tree given as variable $root_dir for regular files", "output": "find $root_dir -type f"}
{"input": "Find all *.gz files in the current directory and decompress them using gunzip", "output": "find . -name '*.gz' -print0 | xargs -0 gunzip"}
{"input": "Give all files in the /path/to/base/dir tree read privileges", "output": "find /path/to/base/dir -type f -exec chmod 644 {} +"}
{"input": "find all the directories in the current folder", "output": "find -type d"}
{"input": "Execute \"ps -mo pid,tid,%cpu,psr -p \\`pgrep firefox\\`\" every half second displayed with no title and highlighting the differences", "output": "watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \\`pgrep firefox\\`"}
{"input": "Search the current directory for files whose names start with \"messages.\" ignoring SVN, GIT, and .anythingElseIwannaIgnore files", "output": "find . -type f -print0 | xargs -0 egrep messages. | grep -Ev '.svn|.git|.anythingElseIwannaIgnore'"}
{"input": "Split \"$1\" into files of at most \"$2\" or default 10000 using a numeric suffix of length 6 and suffix \"${tdir}/x\"", "output": "split -l ${2:-10000} -d -a 6 \"$1\" \"${tdir}/x\""}
{"input": "Show filename and filetype description of all PHP files in current directory whose name or filetype description includes \"UTF\"", "output": "file *.php | grep UTF"}
{"input": "Print a listing of the `other' directory", "output": "$ find other -maxdepth 1"}
{"input": "Save small letter short day name of the week to variable 'DayOfWeek'", "output": "DayOfWeek=`date +%a |tr A-Z a-z`"}
{"input": "Show file type information for all regular files under '/home' directory tree", "output": "find /home -type f -exec file {} \\;"}
{"input": "Removes only lowest level subfolders from current directory tree (folders without files and another folders within).", "output": "find . -type d | xargs rmdir"}
{"input": "Gets MAC address of eth0 network interface.", "output": "ifconfig eth0 | awk '/HWaddr/ {print $5}'"}
{"input": "Search for 'Text To Find' in all regular files under current directory tree and show the matched files", "output": "find ./ -type f -exec grep -l \"Text To Find\" {} \\;"}
{"input": "Find all *.$input_file_type files/directories under $source_dir with the null character as the delimiter", "output": "find \"$source_dir\" -name \"*.$input_file_type\" -print0"}
{"input": "Find all files/directories in current directory and run the command 'command' on each of them invoking the command as few times as possible", "output": "find -exec command {} +"}
{"input": "Show manual for the find command", "output": "man find"}
{"input": "Find all files/directories under /non-existent/directory directory with ~/bin/find", "output": "~/bin/find /non-existent/directory -name '*.plist' -print"}
{"input": "Save the absolute path of the current script to variable \"SELF\"", "output": "SELF=$(readlink /proc/$$/fd/255)"}
{"input": "Print directories in the the current directory as a list with no report information", "output": "tree -d -L 1 -i --noreport"}
{"input": "List all the .c files under the current directory and below in a 3 column format", "output": "find . -name \"*.c\" | xargs -n3 echo"}
{"input": "show processes for all users, their user/owner, and those not attached to a terminal", "output": "ps aux"}
{"input": "Replace each newline in input \"1\\n2\\n3\\n4\\n5\" with a comma", "output": "echo \"1\\n2\\n3\\n4\\n5\" | paste -s -d, /dev/stdin"}
{"input": "Print each unique entry in \"ip_addresses\" followed by a count", "output": "cat ip_addresses | sort | uniq -c | sort -nr | awk '{print $2 \" \" $1}'"}
{"input": "Read a single character from standard input in zsh", "output": "read -sk"}
{"input": "change owner of all files into current directory except  files named as  './var/foo*' to user www-data", "output": "find . -not -iwholename './var/foo*' -exec chown www-data '{}' \\;"}
{"input": "Display the contents of file 'filename' excluding lines starting with # or empty/space-only lines, waiting for user interaction after each page.", "output": "grep -v '^$\\|^#\\|^\\s*\\#' filename | grep -v \"^[[:space:]]*$\" | more"}
{"input": "Run 'top' in batch mode (don't accept user input) with delay of 1 second between updates, and duplicate the standard output to file 'output.log' in current directory.", "output": "top -b -d 1 | grep myprocess.exe | tee output.log"}
{"input": "Copy all files (not directories) in \"/path/to/local/storage\" to \"/path/to/copy\" on host \"remote.host\" authenticating as user \"user\"", "output": "rsync /path/to/local/storage user@remote.host:/path/to/copy"}
{"input": "find all the symbolic links in the current folder", "output": "find /etc -type l -print"}
{"input": "Removes files ~/.android/adbkey and ~/.android/adbkey.pub without prompting.", "output": "rm -f ~/.android/adbkey ~/.android/adbkey.pub"}
{"input": "Find all hidden files under current directory and remove them excluding the files specified in /tmp/list_files", "output": "find . -iname \".*\" -exec bash -c \"fgrep {} /tmp/list_files >/dev/null || rm -i {}\" \\;"}
{"input": "search for the word \"foo\" in all the regular/normal files in the directory \"/path/to/dir\"", "output": "find /path/to/dir -type f -print0 | xargs -0 grep -l \"foo\""}
{"input": "Recursively copy \"emptydir\" to \"destination/newdir\"", "output": "rsync --recursive emptydir/ destination/newdir"}
{"input": "Find the empty directories and files under current directory", "output": "find -empty"}
{"input": "Creates random file name formatted like expression in variable ${str// /X} and saves it in 'rand_str' variable.", "output": "rand_str=$(mktemp --dry-run ${str// /X})"}
{"input": "search for all the directories in the current folder and save the output to a variable", "output": "dirs=($(find . -type d))"}
{"input": "Find all level 1 subdirectories of the current directory", "output": "find . -maxdepth 1 -type d"}
{"input": "display all the files along with their group name in the folder /home which do not belong to the group test", "output": "find /home ! -group test -printf \"%p:%g\\n\""}
{"input": "print all filenames of files under current dir containing 'foo', case-insensitive", "output": "find . -type f -exec grep -il 'foo' {} \\;"}
{"input": "Unsets shell variable 'penultimate'", "output": "unset -v penultimate"}
{"input": "Display differences between files dir1.txt and dir2.txt.", "output": "diff dir1.txt dir2.txt"}
{"input": "Print nothing because 'MYVAR' string doesn`t match with '/[^/]+:' pattern", "output": "echo MYVAR | grep -oE '/[^/]+:' | cut -c2- | rev | cut -c2- | rev"}
{"input": "Execute \"ps -mo pid,tid,%cpu,psr -p \\`pgrep BINARY-NAME\\`\" every half second displayed with no title and highlighting the differences", "output": "watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \\`pgrep BINARY-NAME\\`"}
{"input": "Dump a MySQL database over a compressed SSH tunnel and use it as input to mysql", "output": "mysqldump \u2013add-drop-table \u2013extended-insert \u2013force \u2013log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost \u201cmysql -uUSER -pPASS NEW_DB_NAME\u201d"}
{"input": "Extract the contents of rpm \"php-5.1.4-1.esp1.x86_64.rpm\"", "output": "rpm2cpio php-5.1.4-1.esp1.x86_64.rpm | cpio -idmv"}
{"input": "Write list of missing files in Subversion repository to file removedProjs.", "output": "svn status | grep '\\!' | cut -d' ' -f2- > removedProjs"}
{"input": "Create a ssh key of RSA type, and prompt for a filename to store it, presenting the default for this type of key as $HOME/.ssh/id_rsa", "output": "ssh-keygen -t rsa"}
{"input": "search for the file \"file1\" in the entire file system", "output": "find / -name file1"}
{"input": "Prints total number of lines of all *.php files in a current folder and subfolders.", "output": "cat `find . -name \"*.php\"` | wc -l"}
{"input": "Find all directories named \"D\" in the \"A\" directory tree", "output": "find A -type d -name 'D'"}
{"input": "Find all regular files that were modified $FTIME days ago under current directory tree", "output": "find . -type f -mtime $FTIME"}
{"input": "Find all the files which are modified in last 1 hour in entire file system", "output": "find / -mmin -60"}
{"input": "Print a count of each unique line in \"ip_addresses.txt\" sorted numerically", "output": "sort -n ip_addresses.txt | uniq -c"}
{"input": "Find all directories under /myfiles directory", "output": "find /myfiles -type d"}
{"input": "display all the configuration files in \"/etc\" folder along with their last access and modified timestamps", "output": "find /etc -name \"*.conf\" -printf \"%f accessed %AF %Ar, modified %TF %Tr\\n\""}
{"input": "Find broken symlinks in current directory", "output": "find . -type l -xtype l"}
{"input": "ssh into default vagrant host without running \"vagrant ssh\" by passing the configuration parameters vagrant uses for ssh", "output": "ssh vagrant@127.0.0.1 -p 2222 -o Compression=yes -o DSAAuthentication=yes -o LogLevel=FATAL -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i ~/.vagrant.d/less_insecure_private_key -o ForwardAgent=yes"}
{"input": "Make directories in \"/TARGET_FOLDER_ROOT/\" for each \".mov\" file in the current directory tree", "output": "find . -type f -iname \\*.mov -printf '%h\\n' | sort | uniq | xargs -n 1 -d '\\n' -I '{}' mkdir -vp \"/TARGET_FOLDER_ROOT/{}\""}
{"input": "search for all the php files in  current directory and check for their syntax ( check for syntax errors) .", "output": "find . -name \\*.php -type f -exec php -l {} \\;"}
{"input": "Find all directories in the /path/to/base/dir tree", "output": "find /path/to/base/dir -type d"}
{"input": "Find all files/directories named '\u0438\u043c\u044f_\u0444\u0430\u0439\u043b\u0430' in the entire filesystem", "output": "find / -name \"\u0438\u043c\u044f_\u0444\u0430\u0439\u043b\u0430\""}
{"input": "Find all files under current directory and set read-write permission for owner and group and no permission for other for those directories", "output": "find . -type f -exec chmod ug=rw,o= {} \\;"}
{"input": "find all the symbolic links in the current folder and follow to the pointing file", "output": "find -L"}
{"input": "Read a line of standard input into variable \"input_cmd\" with prompt \"command : \"", "output": "read -p \"command : \" input_cmd"}
{"input": "Print second field from semicolon-seprated line <line>.", "output": "echo \"<line>\" | cut -d \";\" -f 2"}
{"input": "Print a sorted list of *.so files in the bla directory tree", "output": "find bla -name *.so -print0 | sort -rz"}
{"input": "Copy all directories recursively from \"source/\" to \"destination/\" excluding all files", "output": "rsync -a -f\"+ */\" -f\"- *\" source/ destination/"}
{"input": "Remove all tmp/*.mp3 files", "output": "find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs -n1 rm"}
{"input": "Find all files/directories under /proc and run ls command on each.", "output": "find /proc -exec ls '{}' \\;"}
{"input": "Copy all files with name pattern $j.sh (case insensitive) under '/tmp/2' directory tree to $i directory", "output": "find \"/tmp/2/\" -iname \"$j.sh\" -exec cp {} \"$i\" \\;"}
{"input": "find the file with the name \"esxcfg-firewall\" in the current folder", "output": "find -print | grep esxcfg-firewall"}
{"input": "ssh into \"ssh.myhost.net\" as user \"myusername\" and run command \"mkdir -p $2\"", "output": "ssh myusername@ssh.myhost.net \"mkdir -p $2\""}
{"input": "Remove all *.txt files, except robots.txt, under the given directory modified more than 5 minutes ago", "output": "find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name \"*.txt\" ! -name \"robots.txt\" -delete"}
{"input": "Count the occurrence of 2 in the string '1 1 2 2 2 5'", "output": "echo \"1 1 2 2 2 5\" | tr ' ' $'\\n' | grep -c 2"}
{"input": "search for the files which contain the word start in their name excluding search in ./proc, ./sys, ./run folders", "output": "find . -path ./proc -prune -or -path ./sys -prune -or -path ./run -prune  -or -iname '*start*' -print"}
{"input": "Grab the output of \"basename\" (the last slash-separated section of variable \"filename\") and echo it to stdout, which basename would do by default anyway.", "output": "echo `basename \"$filename\"`"}
{"input": "List all crons in the environment", "output": "cat /etc/passwd | sed 's/^\\([^:]*\\):.*$/crontab -u \\1 -l 2>\\&1/' | grep -v \"no crontab for\" | sh"}
{"input": "List all regular files in and below the home directory that were modified more than 5 years ago", "output": "find ~ -type f -mtime +1825 |xargs ls -l"}
{"input": "Find all directories under foldername directory and set their permission to 755", "output": "sudo find foldername -type d -exec chmod 755 {} \";\""}
{"input": "Find all directories under current directory and set their permission to 755", "output": "find -type d exec chmod 755 {} +"}
{"input": "Move all files matching case insensitive \".cpp\" in the current directory tree to \"./test/\"", "output": "find . -type f -iname '*.cpp' -exec mv -t ./test/ {} \\+"}
{"input": "Search for \"#define\" in all files in the current directory, excluding backup files *~, *.orig, *.bak", "output": "find . -maxdepth 1 ! -regex '.*~$' ! -regex '.*\\.orig$' \\     ! -regex '.*\\.bak$' -exec grep --color \"#define\" {} +"}
{"input": "find all the files in the current directory which have been accessed in the last 1 day and move them to TMP folder.", "output": "find . -atime +1 -type f -exec mv {} TMP \\;"}
{"input": "Send an audible ping to \"10.100.3.104\"", "output": "ping -a 10.100.3.104"}
{"input": "Find all *.jpg files under current directory", "output": "find . -name *.jpg"}
{"input": "Save long listing of all running processes in the 'log' file, and save number of process strings that contain 'cntps' in the 'cnt' variable.", "output": "cnt=`ps -ef| tee log | grep \"cntps\"|grep -v \"grep\" | wc -l`"}
{"input": "Prints shell option 'globstar' with indication of its status.", "output": "shopt -p globstar"}
{"input": "Rename all *.txt regular files in the current directory tree to *.abc", "output": "find . -type f -iname '*.txt' -print0 | xargs -0 rename .txt .abc"}
{"input": "List of directory & count of file in every directory", "output": "find . -maxdepth 1 -type d | while read -r dir; do printf \"%s:\\t\" \"$dir\"; find \"$dir\" -type f | wc -l; done"}
{"input": "Counts all business days in a current month.", "output": "cal -h | cut -c 4-17 | tail -n +3  | wc -w"}
{"input": "display all files in the entire file system", "output": "find /"}
{"input": "list all javascipts file expect files under proc folder", "output": "find . -type d -name proc -prune -o -name '*.js'"}
{"input": "Print calendar for February, March and April of year 2009 side-by-side", "output": "paste <(cal 2 2009) <(cal 3 2009) <(cal 4 2009)"}
{"input": "Change directory to the directory containing the \"oracle\" executable", "output": "cd \"$(dirname $(which oracle))\""}
{"input": "Find all files that have been modified in the last seven days.", "output": "find . -mtime -7 -type f"}
{"input": "search for all the foo.txt files in the current folder and move them to another location", "output": "find . -name foo.txt -print0 | xargs -0  -I{} mv {} /some/new/location/{}"}
{"input": "Copy \"file\" from \"REMOTE\" into local clipboard", "output": "ssh USER@REMOTE \"cat file\"|xclip -i"}
{"input": "find all the links in somedirectory and print them in a single line (to avoid the problem of files having newline in their names)", "output": "find \"somedir\" -type l -print0"}
{"input": "Find all the .mp3 files in the music folder recursively and pass them to the ls command", "output": "find ./music -name \"*.mp3\" -print0 | xargs -0 ls"}
{"input": "Find all files under /path/to/dir that were modified less than 7 days ago with null character as the delimiter", "output": "find /path/to/dir -type f -mtime -7 -print0"}
{"input": "Execute the file utility for each file found under /etc or below that contains \"test\" in its pathname", "output": "find /etc -print0 | grep -azZ test | xargs -0 file"}
{"input": "Print the path to all *.so files under current directory and search for mysymbol in their symbol tables", "output": "find . -type f -print -exec sh -c \"readelf -s {} | grep mysymbol\" \\;"}
{"input": "Search for all zero-byte files and move them to the /tmp/zerobyte folder", "output": "find test -type f  -size 0 -exec mv {} /tmp/zerobyte \\;"}
{"input": "Print unique lines in sorted file \"a.txt\" compared to sorted file \"b.txt\"", "output": "comm -23 a.txt b.txt"}
{"input": "Recursively removes all files like any-cased '*.pyc' in a current folder.", "output": "find . -iname '*.pyc' -print0 | xargs -0 --no-run-if-empty  rm"}
{"input": "Search for the string 'magic' in all regular files under current directory tree and display long listing of them", "output": "find . -type f -exec grep \"magic\" {} \\; -ls"}
{"input": "Save the directory of the full path to the current script in variable \"dir\"", "output": "dir=$(dirname $(readlink -m $BASH_SOURCE))"}
{"input": "Find all files/directories named 'foo.bar' in the entire filesystem", "output": "find / -name foo.bar -print"}
{"input": "Extracts a bz2 file.", "output": "bunzip2 file.bz2"}
{"input": "find all the files in the entire file system that start with the word top and have 3 letters next to it.", "output": "find / -name 'top???'"}
{"input": "List all *.c files in entire file system", "output": "find / \\! -name \"*.c\" -print"}
{"input": "Find all *.xml.bz2 files under current directory", "output": "find . -name \\*.xml.bz2"}
{"input": "Numerically sort each line in file \"bb\" and output the result to console from greatest value to least value", "output": "sort -nr bb"}
{"input": "Merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2', also outputting unmatched lines from 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2.", "output": "join -t, -o 1.1,1.2,2.3 -a1 in1 in2"}
{"input": "Search /some/directory for files that are owned by the user \"joebob\"", "output": "find /some/directory -user joebob -print"}
{"input": "Find files that are writable by the user, the group, or both", "output": "find plsql -type f  -perm /ug=rw -exec ls -l {} \\; 2>/dev/null"}
{"input": "List files in the current directory that have at least one duplicate", "output": "md5sum * | sort | uniq -w32 --all-repeat=separate | awk '{print $2}'"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*", "output": "find -mtime 0 -not \\( -name '*.swp' -o -path './es*' -o -path './en*' \\)"}
{"input": "create directory backup", "output": "mkdir backup"}
{"input": "Replace the occurrences of \"HOGE\" with \"MOGA\" once per each line of the files from the current directory tree", "output": "find . -type f -print0 | xargs -0 sed -i -e \"s/HOGE/MOGA/\""}
{"input": "Find all files/directories with '.js' extension under current directory tree excluding paths that contain the directory './directory'", "output": "find -name \"*.js\" -not -path \"./directory/*\""}
{"input": "Create a symbolic link in the current directory to \"../config/init\"", "output": "ln -s \"../config/init\""}
{"input": "Extract host name part from URL.", "output": "echo \"$url\" | cut -d'/' -f3"}
{"input": "Find all files/directories under current directory and sort them", "output": "find | sort"}
{"input": "Recursively lists all files in a current folder in long format, sorting by modification time.", "output": "ls -ldt $(find .)"}
{"input": "Saves 'tmux' version in the 'tmux_version' variable.", "output": "tmux_version=\"$(tmux -V | cut -c 6-)\""}
{"input": "List existing screen sessions", "output": "screen -ls"}
{"input": "Pick up a list of variable:value pairs from msgs.config and add them to the current shell or script's environment.", "output": "source <( sed 's/:\\(.*\\)/=\"\\1\"/' msgs.config )"}
{"input": "Find all top-level files in the current folder but ones with name like '*Music*' to the 'dest/' folder.", "output": "find . -maxdepth 1 -name '*Music*' -prune -o -print0 | xargs -0 -i cp {} dest/"}
{"input": "Print \"echo ping -c 2\" on each string in file 'ips'", "output": "cat ips | xargs echo ping -c 2"}
{"input": "Search the current user's home directory and its sub-directories for any file that ends in .tar-gz and was modified after filename was last modified.", "output": "find ~/ -name *.tar.gz -newer filename"}
{"input": "Change permissions to 0755 for all directories in the /path directory tree", "output": "find /path -type d | xargs chmod 0755"}
{"input": "Create master SSH control socket \"my-ctrl-socket\" in the background with no terminal or command execution with connection forwarding from localhost port 50000 to localhost port 3306 via \"jm@sampledomani.com\"", "output": "ssh -M -S my-ctrl-socket -fnNT -L 50000:localhost:3306 jm@sampledomain.com"}
{"input": "Creates temporary file in default folder and saves path to it in 'source' variable.", "output": "source=`mktemp`"}
{"input": "display all the files in the current folder which are present in the path \"./src/emacs\"", "output": "find . -path './src/emacs' -prune -o -print"}
{"input": "Remove leading and trailing spaces from the output of 'hg st -R \"$path\"' and save the result in variable \"var\"", "output": "var=\"$(hg st -R \"$path\" | sed \"s/\\(^ *\\| *\\$\\)//g\")\""}
{"input": "find all the text files in the current folder and display the results pagewise", "output": "find . -name \"*.txt\" -print | less"}
{"input": "find all normal/regular files in current folder and display them in sorted order", "output": "find . -type f -ls | awk '{print $(NF-3), $(NF-2), $(NF-1), $NF}'"}
{"input": "Get a list of files and directories in the current directory tree", "output": "find . -print0 | xargs -0 echo"}
{"input": "Find regular files in the current directory tree that have any executable bits set", "output": "find -L . -type f \\( -perm -u=x -o -perm -g=x -o -perm -o=x \\)"}
{"input": "Compare \"file1\" and \"file2\" line by line with 3 lines of unified context", "output": "diff -u file1 file2"}
{"input": "Execute command \"$cmd_str\" on host \"$SERVER\" as user \"$USER\"", "output": "ssh \"$USER@$SERVER\" \"$cmd_str\""}
{"input": "Count total number of lines in all files below current directory.", "output": "find . -type f -exec wc -l {} \\; | awk '{ SUM += $0} END { print SUM }'"}
{"input": "Request MX record of 'example.com' domain, and filter out all comment strings", "output": "dig mx example.com | grep -v '^;' | grep example.com"}
{"input": "find the oldest normal file in the current directory", "output": "find . -type f -print0 | xargs -0 ls -ltr | head -n 1"}
{"input": "Show current date in \"%Y-%m-%d\" format", "output": "date \"+%Y-%m-%d\""}
{"input": "Search the current directory tree for directories", "output": "find \"$PWD\" -type d"}
{"input": "Print a colon-separated list of all directories from the ~/code directory tree", "output": "find ~/code -type d | tr '\\n' ':' | sed 's/:$//'"}
{"input": "Print which files differ in \"/tmp/dir1\" and \"/tmp/dir2\" recursively", "output": "diff -qr /tmp/dir1/ /tmp/dir2/"}
{"input": "change user and group of the file \"/var/run/docker.sock\" to user root and group dockerroot", "output": "sudo chown root:dockerroot /var/run/docker.sock"}
{"input": "Format \"input\" as alternating rows in a table", "output": "( awk 'NR % 2' input; awk 'NR % 2 == 0' input ) | paste - - - | column -s'   ' -t"}
{"input": "display long listing of all the empty files in the current folder", "output": "find . -empty -exec ls -l {} \\;"}
{"input": "find the file with inode $inum under the current directory and delete it", "output": "find . -inum $inum -exec rm {} \\;"}
{"input": "Write lines 16224 through 16482 of \"file.in\" to \"file.out\"", "output": "head -16482 < file.in | tail -259 > file.out"}
{"input": "Find all files that belongs to user Tecmint under /home directory", "output": "find /home -user tecmint"}
{"input": "Use awk command '{ ... }' on compressed files \"input1.vcf.gz\" and \"input2.vcf.gz\"", "output": "awk '{ ... }' <(gzip -dc input1.vcf.gz) <(gzip -dc input2.vcf.gz)"}
{"input": "Check if command \"c++\" and command \"g++\" are equal", "output": "[ `md5sum $(which c++) | cut -d' ' -f1` == `md5sum $(which g++) | cut -d' ' -f1` ] && echo Yes, equal content || echo No, unequal content"}
{"input": "Find all *.jpg (case-insensitive) files under  maximum 2 levels down the temp/medium/* paths and run `mogrify -resize 428x270\"^\" -quality 80 -compress JPEG -monitor -strip` with the file paths as arguments", "output": "find temp/medium/* -maxdepth 2 -iname \"*.jpg\" -print0 | xargs -0 mogrify -resize 428x270\"^\" -quality 80 -compress JPEG -monitor -strip"}
{"input": "Filters only directories from long file listing of a current directory, and prints their names.", "output": "ls -l | grep \"^d\" | awk -F\" \" '{print $9}'"}
{"input": "Print the list of files and directories of the /etc directory", "output": "find /etc/. ! -name /etc/."}
{"input": "Find regular non-hidden files containing 'some text' in their names", "output": "find . -not -path '*/\\.*' -type f -name '*some text*'"}
{"input": "Reconnect to a named screen session", "output": "screen -R -O -t mysession -S mysession -f"}
{"input": "Find all files/directories excluding paths that match '.git' or '.gitignore'", "output": "find -print0 | grep -vEzZ '(\\.git|\\.gitignore/)'"}
{"input": "Print either \"one\" or \"two\" randomly three times", "output": "yes $'one\\ntwo' | head -10 | nl | sort -R | cut -f2- | head -3"}
{"input": "Find files in the current directory excluding CVS, SVN, GIT repository files and all binary files.", "output": "find . -not \\( -name .svn -prune -o -name .git -prune -o -name CVS -prune \\) -type f -print0 | xargs -0 file -n | grep -v binary | cut -d \":\" -f1"}
{"input": "Locate all *.csv files under the current directory tree separating the file names with zeroes", "output": "find . -name \"*.csv\" -print0"}
{"input": "find all the files in the current directory which start with t and have been modified between one hour (60 minutes) and 12 hours (720 minutes) ago.", "output": "find . -mmin -720 -mmin +60 -type f -name \"t*\" -exec ls -l '{}' \\;"}
{"input": "Format \"file.txt\" as space separated columns 28 characters in width", "output": "cat file.txt | column -c 28 -s \"\\ \""}
{"input": "Locate files with user permissions rwx owned by my_user", "output": "find . -user my_user -perm -u+rwx"}
{"input": "Remove all the versioned-but-empty directories from a Subversion checkout under current directory", "output": "find . -name .svn -type d | while read ss; do dir=$(dirname \"$ss\"); test $(ls -a \"$dir\" | wc -l) == 3 && echo \"svn rm \\\"$dir\\\"\"; done"}
{"input": "display a long listing of all the xls or csv files in the entire file system", "output": "find / -type f \\( -name \"*.xls\" -o -name \"*.csv\" \\) -exec ls -l {} \\;"}
{"input": "find foo, Foo, FOo, FOO, etc., but only dirs", "output": "find . -iname foo -type d"}
{"input": "change the ownership of all the files in the file system from edwarda to earnestc", "output": "find / -user edwarda -exec chown earnestc \"{}\" \\;"}
{"input": "Make directory named in variable \"archive\" with \".tar*\" stripped from the end", "output": "mkdir ${archive%.tar*}"}
{"input": "Write the list of regular files in the current directory tree to files /tmp/grep1 and /tmp/grep2", "output": "find ./ -type f | tee /tmp/grep1 /tmp/grep2 >/dev/null"}
{"input": "Print the list of directories residing in the current directory tree", "output": "find . -type d -exec ls -ld {} \\;"}
{"input": "run somecommand with one argument for each file recursively in /path that matches 'pattern'", "output": "find /path -name 'pattern' -exec somecommand {} \\;"}
{"input": "Updates openssl package.", "output": "sudo yum update openssl"}
{"input": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.", "output": "sudo ls -hal /root/ | sudo bash -c \"cat > /root/test.out\""}
{"input": "split all files in directory \"posns \" into pieces per 10000 lines", "output": "find posns -type f -exec split -l 10000 {} \\;"}
{"input": "Join comma-separated information in 4 files - files must be sorted.", "output": "join -t, test.1 test.2 | join -t, - test.3 | join -t, - test.4"}
{"input": "update the permission of all the php files in current directory and save the output to a file", "output": "find . -name '*.php' -exec chmod 755 {} \\; > logfile.txt"}
{"input": "Compress the base64 encoded first 200 characters of \"/dev/urandom\" as input to uuencode", "output": "uuencode <(head -c 200 /dev/urandom | base64 | gzip)"}
{"input": "Recursively removes all files like '*.pyc' in a current folder.", "output": "rm **/*.pyc"}
{"input": "Convert standard input into a dump of octal bytes without the first 8 bytes of address and count the unique results", "output": "od | cut -b 8- | xargs -n 1 | sort | uniq | wc -l"}
{"input": "Print the first 2 lines of tree's help message by redirecting it from standard error to standard output", "output": "tree --help 2>&1 | head -n2"}
{"input": "Find all files/directories in the entire file system and redirect the output to masterfilelist.out file", "output": "find  /   -print > masterfilelist.out"}
{"input": "Search the ./in_save directory for regular files and view the result using pager `more'", "output": "find ./in_save/ -type f -maxdepth 1| more"}
{"input": "Print the top 10 commands with their use count", "output": "history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head"}
{"input": "Remove all files in and below the current directory whose names begin with \"not\"", "output": "find . -name not\\* -print0 | xargs -0 rm"}
{"input": "display all the directories in the folder /path/to/dest except tmp directory", "output": "find /path/to/dest -type d \\( ! -name tmp \\) -print"}
{"input": "create a compressed archive with files newer than 1st of January 2014, 18:00:00.", "output": "tar -N '2014-02-01 18:00:00' -jcvf archive.tar.bz2 files"}
{"input": "Read a line from standard input into variable \"ans\" without backslash escapes", "output": "read -r ans"}
{"input": "List all files and directories in the /home directory tree whose names are \"Trash\"", "output": "find /home -name Trash -exec ls -al {} \\;"}
{"input": "force remove all the text files that have not been modified in the last 89 days", "output": "find .  -name \"*.txt\" -type f -daystart -mtime +89 | xargs rm -f"}
{"input": "Find files under current directory that contains the string '/bin/ksh'", "output": "find . -type f -print | xargs    grep -il 'bin/ksh'"}
{"input": "Copy all files below the current directory whose names contain \"FooBar\" to directory foo/bar/ in user's home directory.", "output": "find . | grep FooBar | xargs -I{} cp {} ~/foo/bar"}
{"input": "Get the disk space used by all *.txt (case insensitive) files/directories under folder 1 and folder2", "output": "find folder1 folder2 -iname '*.txt' -print0 | du --files0-from - -c -s | tail -1"}
{"input": "Print file information of command \"studio\"", "output": "ls -l \"$( which studio )\""}
{"input": "Delete characters in columns 36 through 40 from the output of \"finger\"", "output": "finger |  sed 's/\\(.\\{35\\}\\)...../\\1/'"}
{"input": "find all files in the current directory whose size is 24 or 25 bytes.", "output": "find . -size -26c -size +23c -print"}
{"input": "Find all files matching \"abc*\" in the current directory and append \"\\tok\"", "output": "find . -name 'abc*' | sed 's/$/\\tok/' | column -t"}
{"input": "run command \"/path/to/my_daemon & echo \\$! > /tmp/su.joe.$$\" as user joe and redirect the output to file /tmp/su.joe.$$", "output": "su - joe -c \"/path/to/my_daemon 3>&- & echo \\$! 1>&3\" 3>/tmp/su.joe.$$"}
{"input": "Merge colon-separated information from file1 and file2 where second field of both files matches, sorting the result based on this field - for each line, output: first 3 fields of first file, followed by first 3 fields of second file.", "output": "join -o 1.1,1.2,1.3,2.1,2.2,2.3 -j2 <(sort -k2 file1) <(sort -k2 file2)"}
{"input": "Dispaly the latest version of Joomla in various folders", "output": "find /home/*/public_html/ -type f \\( -iwholename '*/libraries/joomla/version.php' -o -iwholename '*/libraries/cms/version.php' -o -iwholename '*/libraries/cms/version/version.php' \\) -print0 -exec perl -e 'while (<>) { $release = $1 if m/ \\$RELEASE\\s+= .([\\d.]+).;/; $dev = $1 if m/ \\$DEV_LEVEL\\s+= .(\\d+).;/; } print qq( = $release.$dev\\n);' {} \\;"}
{"input": "Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension", "output": "find /path/to/directory/* -maxdepth 0 -type d -printf \"%P\\n\" -exec sudo tar -zcpvf {}.tar.gz {} \\;"}
{"input": "create a backup of all the files which have been modified in the last 48 hours", "output": "find source/directory -ctime -2 | cpio -pvdm /my/dest/directory"}
{"input": "Calculate MD5 sums for all regular files in the current directory tree", "output": "find . -type f | while read f; do g=`md5sum $f | awk '{print $1}'`; echo \"$g $f\"> $f-$g.md5; done"}
{"input": "Copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/' directory with new names constructed by prepending 'copy' in their names", "output": "find  /home/mine -iname \"*.png\" -printf \"%P\\n \" | xargs  -I % -n1 cp %  /home/mine/pngcoppies/copy%"}
{"input": "Count the number of times each person is logged in on the system", "output": "who | awk '{print $1}' | sort | uniq -c | sort -n"}
{"input": "Search for a string in all gzip'd files under the current directory", "output": "find . -type f -name \"*.gz\" -exec zgrep 'string' {} \\;"}
{"input": "Sort file \"file\" by line", "output": "sort file -o !#^"}
{"input": "search for swap files (.swp files) in temp folder and remove them", "output": "find /tmp -name '*.swp' -exec rm {} \\;"}
{"input": "search for the word \"mysql\" in all the files in the current containing the word \"notes\" in their name. print0 is used to handle files  with newlines in their names or those which have only spaces in their names", "output": "find . -iname \"*notes*\" -print0 | xargs -I{} -0 grep -i mysql \"{}\""}
{"input": "Find all the files which are accessed in last 1 hour in entire file system", "output": "find / -amin -60"}
{"input": "Gets MAC address of 'eth0' network interface.", "output": "x=$(ifconfig eth0) && x=${x#*HWaddr } && echo ${x%% *}"}
{"input": "Delete all empty directories under current directory", "output": "find -type d -empty"}
{"input": "Find all *.txt files/directories under current directory and execute process once with all of them as arguments", "output": "find . -name \\*.txt -print0 | xargs -0 process"}
{"input": "Search for symlinks pointing to anywhere within /mnt/oldname/", "output": "find / -type l -lname '/mnt/oldname*'"}
{"input": "find all files under the current directory that end in \"foo\" and, using xargs, execute somecommand once for each filename found", "output": "find . -name '*.foo' -print0 | xargs -0 -n 1 somecommand"}
{"input": "Remove files under /mnt/zip matching \"*prets copy\" with confirmation", "output": "find /mnt/zip -name \"*prefs copy\" -print0 | xargs -0 -p /bin/rm"}
{"input": "Find all files/directories with '.bar' extension in maximum 2 levels down the current directory", "output": "find . -name *.bar -maxdepth 2 -print"}
{"input": "Find all the files in file system which are accessed in last 1 hour", "output": "find / -amin -60"}
{"input": "Delete the 4th tab separated column from the output of \"finger\"", "output": "finger | awk -F\"\\t\" -v 'OFS=\\t' '{ $4=\"\"; print $0}' | sed 's/\\t\\{2,\\}/\\t/'"}
{"input": "find all files without 777 permision", "output": "find / -type f ! perm 777"}
{"input": "find  symbolic link file that name match  '*sysdep.c'", "output": "find . -lname '*sysdep.c'"}
{"input": "search for the word \"nameserver\" in all the configuration files of the /etc folder", "output": "find /etc/ -type f -name \"*.conf\" -print0 | xargs -I {} -0 grep \"nameserver\" \"{}\""}
{"input": "find all executable files", "output": "find / -executable"}
{"input": "Compress and display the original filename of every file on the system that is greater than 100000 bytes and ends in \".log\"", "output": "sudo find / -xdev -type f -size +100000 -name \"*.log\" -exec gzip {} \\; -exec echo {} \\;"}
{"input": "Print the last white space separated field of every line in \"file.txt\" as a \", \" separated list", "output": "awk '{print $NF}' file.txt | paste -sd, | sed 's/,/, /g'"}
{"input": "Save absolute path of \"$path\" that must exist along with all parents to variable \"abspath\"", "output": "abspath=$(readlink -e $path)"}
{"input": "Print the lines in \"table.txt\" grouped by the first field", "output": "cat table.txt | awk '{print $1}' | sort | uniq  | xargs -i grep {} table.txt"}
{"input": "Display an infinite number of lines consisting of \"y\", until the user presses the Q key.", "output": "yes | cat | more"}
{"input": "Make directories and parent directories as needed of \"$1\" with \"\\r\" removed", "output": "mkdir -p $(echo -e $1 |sed $'s/\\r//')"}
{"input": "Prints top ten of most memory using processes in system.", "output": "ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10"}
{"input": "Recursively archive \"test/a/\" to \"test/dest\" excluding \"test/a/b/c/d\"", "output": "rsync -nvraL test/a/ test/dest --exclude=/b/c/d"}
{"input": "Find regular files modified within the last 7 days", "output": "find . -mtime -7 -type f"}
{"input": "List all files/directories under current directory ensuring white space safety", "output": "find -print0 | xargs --null"}
{"input": "change the permissions of all the directories in the current folder", "output": "chmod 751 `find ./ -type d -print`"}
{"input": "Find and print the names of all files found in the current directory and all of its sub-directories.", "output": "find . -print"}
{"input": "Move server.log to 'logs' directory with new name as the current date formatted as \"%Y%m%d%H%M\" and with '.log' extension", "output": "mv server.log logs/$(date -d \"today\" +\"%Y%m%d%H%M\").log"}
{"input": "create an archive and show a progress bar", "output": "tar -c --checkpoint=.1000 /var"}
{"input": "Change directory to the real path of the current working directory of process \"$PID\"", "output": "cd $(readlink /proc/$PID/cwd)"}
{"input": "Search the entire file hierarchy for any file that begins with zsh and exists on the ext3 file systems.", "output": "find / -fstype ext3 -name zsh*"}
{"input": "Gets IP address of 'eth0' network interface.", "output": "ifconfig eth0 | grep inet | cut -d: -f2 | cut -d' ' -f1"}
{"input": "Display compter's hostname", "output": "echo `uname -a | awk '{print $2}'`"}
{"input": "remove all the log files which have not been modified in the last 5 days", "output": "find /logs -type f -mtime +5 -exec rm {} \\;"}
{"input": "Find regular files modified within the last ten minutes under /etc", "output": "find /etc -type f -mmin -10"}
{"input": "Process all files matching pattern 'file??' and residing in the xargstest/ directory tree with script `myscript.sh'", "output": "find xargstest/ -name 'file??' | xargs myscript.sh"}
{"input": "Echo each command before running", "output": "set -x"}
{"input": "Print all '-' separated digits in file 'infile' as dot ('.') separated digits", "output": "grep -Eo '([0-9]+-){3}[0-9]+' infile | tr - ."}
{"input": "list all .c or .sh regular files.", "output": "find . -type f \\( -name \"*.c\" -o -name \"*.sh\" \\)"}
{"input": "files all files which expect directories and display count of them", "output": "find /usr/share \\! -type d wc -l"}
{"input": "Recursively copy \"old/\" to \"new/\" as a dry run skipping files that have matching checksums and output the name only", "output": "rsync -rcn --out-format=\"%n\" old/ new/"}
{"input": "Find all files in $dir directory without going into sub-directories", "output": "find \"$dir\" -maxdepth 1 -type f"}
{"input": "Search for all files with either \"sitesearch\" or \"demo\" in their path names", "output": "find . -ipath '*sitesearch*' -ipath '*demo*'"}
{"input": "List all *fink* files/directories under current directory", "output": "find . -name \"*fink*\" |xargs ls -l"}
{"input": "Display which package the command \"command\" belongs to in dpkg", "output": "dpkg -S `which command`"}
{"input": "Find files whose pathnames contain \"string\" and print these pathnames replacing 'search string' with 'new string'", "output": "find . |xargs grep search string | sed 's/search string/new string/g'"}
{"input": "Print fourth column of data from text file text.txt where columns separated by one or more whitespaces.", "output": "cat text.txt | tr -s ' ' | cut -d ' ' -f4"}
{"input": "Rename the *.so files in the current directory tree prepending their names with \"lib\"", "output": "find . -name \"*.so\" -printf \"mv '%h/%f' '%h/lib%f'\\n\" | bash"}
{"input": "change the permission of all the regular files in the folder /home to 700", "output": "find /home -type f -perm 0777 -print -exec chmod 700 {} \\;"}
{"input": "create a cpio archive of the entire contents the current directory while preserving the permissions, times, and ownership of every file and sub-directory", "output": "find . -depth -print | cpio -o -O /target/directory"}
{"input": "Resolve all symlinks in path to \"firefox\" binary if it exists in path, resulting in absolute path with no symlinks.", "output": "readlink -f $(which firefox)"}
{"input": "Lists all files in a '/home/dreftymac/' folder and subfolders without recursion.", "output": "ls /home/dreftymac/*"}
{"input": "Print differences between the sorted content of file $1 and file $2, executing 'diff' with options from \"${@:3}\" array slice", "output": "diff \"${@:3}\" <(sort \"$1\") <(sort \"$2\")"}
{"input": "Enables shell option 'nocasematch'.", "output": "shopt -s nocasematch"}
{"input": "display all the .sh scripts and perl files in the current folder", "output": "find . -type f \\( -iname \"*.sh\" -or -iname \"*.pl\" \\)"}
{"input": "Find all *.txt files/directories under current directory and execute the python script myscript.py with all their paths as arguments to the script", "output": "find . -name \"*.txt\" -exec python myscript.py {} +"}
{"input": "Calculate the total size of all *.jpg files in the directory tree", "output": "find . -type f -iname \"*.jpg\" -ls | awk 'BEGIN {print \"0\"}; {print $7, \"+\"}; END {print \"p\"}' | dc"}
{"input": "Print list of file systems currently mounted.", "output": "df -h |  awk '{print $1}'"}
{"input": "Print first column of every line in every *.txt separated by a space", "output": "paste -d':' *.txt | sed 's/ [^:]*$//;s/ [^:]*:*/ /g;s/://g'"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours ignoring paths ./es* and ./en*", "output": "find . -mtime 0 | grep -v '^\\./en' | grep -v '^\\./es'"}
{"input": "beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line", "output": "tail -n `tac biglogfile | grep -vnm1 2012 | sed 's/:.*//' | xargs expr -1 +` biglogfile"}
{"input": "Removes all files from current folder but 3 newest ones", "output": "ls -tQ | tail -n+4 | xargs rm"}
{"input": "View the contents of \"file.txt\" with line numbers in the pager \"less\"", "output": "cat -n file.txt | less"}
{"input": "Make directory \"/data/db\"", "output": "sudo mkdir /data/db"}
{"input": "Find directories in /proc and show only those that doesn't match the regex '/proc/[0-9]*($|/)'", "output": "find /proc -type d | egrep -v '/proc/[0-9]*($|/)' | less"}
{"input": "display all the normal/regular files in the current folder which are empty", "output": "find . -type f -empty"}
{"input": "set alias \"devn\" for command \"cat > /dev/null\"", "output": "alias devn='cat > /dev/null'"}
{"input": "Set permissions to ug=rwx,o= for directories inside the ./default/files tree", "output": "find ./default/files -type d -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "Clone the permissions of \"$srcdir\" to \"$dstdir\"", "output": "chown $(stat -c%u:%g \"$srcdir\") \"$dstdir\""}
{"input": "Find all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents", "output": "find /path/to/input/ -type f -exec grep -qiF spammer@spammy.com \\{\\} \\; -print"}
{"input": "Print linux group names on multiple lines instead of single line output", "output": "groups | tr \\  \\\\n"}
{"input": "Find all pdf files in current directory and grep with the regex expanded by \"$1\" in the converted text output and print the paths to the matching files", "output": "find . -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep --with-filename --label=\"{}\" --color \"$1\"' -- \"$1\" \\;"}
{"input": "Display a sorted count of all the characters in \"filename\"", "output": "fold -w1 filename | sort | uniq -c | sort -nr"}
{"input": "Continuously send \"y\" as input to \"cat\" which outputs to \"more\"", "output": "yes | cat | more"}
{"input": "Display the contents of /var/log/syslog one page at a time, pausing for user interaction between each.", "output": "more /var/log/syslog"}
{"input": "Forward port 3307 on localhost to port 3306 on 1.2.3.4 via 'user@gateway' on port 24222", "output": "ssh -f user@gateway -p 24222 -L 3307:1.2.3.4:3306 -N"}
{"input": "Print content of '1' file", "output": "$ cat 1"}
{"input": "Find all broken symlinks under current directory", "output": "find . -xtype l"}
{"input": "Log in as \"middleuser\" with key \"./middle_id.pem\" and forward port 22 on host \"middle.example.org\" to port 2222 on localhost", "output": "ssh -i ./middle_id.pem -R 22:localhost:2222 middleuser@middle.example.org"}
{"input": "Find all files under current directory with their size and paths, reverse sort them numerically, then print the 2nd field (with space as the delimiter) of the first 4 entries", "output": "find -type f -printf \"%s %p\\n\" | sort -nr | head -n 4 | awk \"{print $2}\""}
{"input": "Find all regular files that start with stat", "output": "find . -type f \u2013iname stat*"}
{"input": "Search for regular expression 'expr' in all .c and .h files from the current directory tree", "output": "find -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "Find all directories whose name is Tecmint in / directory", "output": "find / -type d -name Tecmint"}
{"input": "Creates temporary directory in '/tmp/' folder and saves path to it in 'my_tmp_dir' variable.", "output": "my_tmp_dir=$(mktemp -d --tmpdir=/tmp)"}
{"input": "delete all the files in the current folder", "output": "find . -print0 | xargs -0 rm"}
{"input": "display a long listing of all the empty files in the entire file system which are empty", "output": "find / -type f -size 0 -exec ls -l {} \\;"}
{"input": "Find all files under current directory and replace the match of the regex '^.*/S' with 'S' in every line of the output", "output": "find . -type f -print | sed 's|^.*/S|S|'"}
{"input": "Print a list of regular files from directory tree sort_test/ sorted with LC_COLLATE=en_US.utf8", "output": "find sort_test/ -type f | env -i LC_COLLATE=en_US.utf8 sort"}
{"input": "List all files and sub directories including hidden files in the current directory tree", "output": "tree -af"}
{"input": "Prints strings with MAC address configuration of each network interface in system.", "output": "ifconfig | grep HW"}
{"input": "Search for files specifying the minimum depth of the search", "output": "find -mindepth num -name query"}
{"input": "Create all directories in the path specified by variable $tempWork", "output": "mkdir -p $tempWork"}
{"input": "Find all files/directories under current directory tree that belong to the group 'compta'", "output": "find -group compta"}
{"input": "Delete all files beneath the current directory that begin with the letters 'Foo'.", "output": "find . -type f -name \"Foo*\" -exec rm {} \\;"}
{"input": "Find all files in the /myfiles directory tree following symbolic links", "output": "find -L /myfiles"}
{"input": "Create symlinks to all  /home/folder1/*.txt files with the same name in current directory", "output": "find /home/folder1/*.txt -type f -exec ln -s {} \\;"}
{"input": "Report only total size of file systems in 1T blocks.", "output": "df --total -BT | tail -n 1 | sed -E 's/total *([^ ]*).*/\\1/'"}
{"input": "Convert \"abc\" to a string of hexadecimal bytes", "output": "echo abc | od -A n -v -t x1 | tr -d ' \\n'"}
{"input": "List all empty files under the current directory", "output": "find . -maxdepth 1 -empty"}
{"input": "search in the current folder for the file with the name \"test\" ( case insensitive search )", "output": "find . -iname test"}
{"input": "Delete all the files found in the current directory tree whose names begin with \"heapdump\"", "output": "find . -name heapdump* -exec rm {} \\ ;"}
{"input": "Change the ownership to eva for all files/directories that belong to the user 'george' in the entire file system without traversing to other devices/partitions", "output": "find -x / -user george -print0 | xargs -0 chown eva"}
{"input": "List level 2 subdirectories of the current directory", "output": "find . -mindepth 2 -maxdepth 2 -type d -ls"}
{"input": "Find all read-only files", "output": "find / -perm /u=r"}
{"input": "Force create a symbolic link named \"$pdir\" to \"$pluginpath\" with verbose output", "output": "sudo ln --symbolic --verbose --force \"$pluginpath\" \"$pdir\""}
{"input": "search for the directory \"ora10\" in the entire file system", "output": "find / -type d -name \"ora10\""}
{"input": "Search all of /usr for any directory named 'My Files', for each directory found, copy it to /iscsi preserving full paths and attributes.", "output": "find /usr -type d -name My\\ Files -exec rsync -avR '{}' /iscsi \\;"}
{"input": "list all the drectories present in the current directory and do not search in the sub directories.", "output": "find -maxdepth 1 -type d"}
{"input": "Print a count of files and directories in the current directory tree", "output": "tree | tail -1"}
{"input": "Find all directories under /home/me", "output": "find /home/me -type d"}
{"input": "Print the user name of the user running sudo", "output": "who -m | awk '{print $1}'"}
{"input": "Clone the permissions of \"$srcdir\" to \"$dstdir\" on OSX", "output": "chown $(stat -f%u:%g \"$srcdir\") \"$dstdir\""}
{"input": "Search the CSS files found in the current directory tree for string \"foo\"", "output": "find . -name \\*.css -print0 | xargs -0 grep -nH foo"}
{"input": "Find files in the /var/log folder which were modified modified 2 weeks ago", "output": "find /var/log/ -mtime +7 -mtime -8"}
{"input": "Prints total count all non-empty lines in files of a current folder.", "output": "rgrep . | wc -l"}
{"input": "Compare each C header file in or below the current directory with file /tmp/master", "output": "find . -name '*.h' -execdir /bin/diff -u '{}' /tmp/master ';'"}
{"input": "List environment variables whose name matches '^\\w*X\\w*'", "output": "set | grep -oP '^\\w*X\\w*(?==)'"}
{"input": "Change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree", "output": "find /path/to/look/in/ -type d -name '.texturedata' -exec chmod 000 {} \\; -prune"}
{"input": "find all the regular/normal files in the /path folder and delete them", "output": "find /path -type f -delete"}
{"input": "Print the current directory tree with the date of last modification for each file or directory", "output": "tree -D"}
{"input": "Archive \"blanktest/\" to \"test/\" deleting any files in the destination not found in the source", "output": "rsync -a --delete blanktest/ test/"}
{"input": "Search for regular file foo ignoring case", "output": "find . -iname foo -type f"}
{"input": "Run the java archive 'start.jar' in a xterm window, immune to SIGHUP (hangup signals) sent to it. The xterm is sent to background, so control returns immediately to the prompt on the original terminal screen/window.", "output": "nohup xterm -e java -jar start.jar &"}
{"input": "find  js file which name is not  'glob-for-excluded-dir'  under current directory.", "output": "find . -name '*.js' -\\! -name 'glob-for-excluded-dir' -prune"}
{"input": "Create ssh tunnel through \"genja.org\" connecting localhost port 4444 to \"raptor.lan\" port 22", "output": "ssh -L 4444:raptor.lan:22 genja.org"}
{"input": "Find all *stat files/directories under /usr", "output": "find /usr -name *stat"}
{"input": "Convert all m4a sound files in a directory and its subdirectories to mp3 files", "output": "find . -type f -name '*.m4a' -exec bash -c 'avconv -i \"$0\" \"${0/%m4a/mp3}\"' '{}' \\;"}
{"input": "change the permissions of the directories from 777 to 755 in the folder \"/var/www/html\"", "output": "find /var/www/html -type d -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Greps DNS zone transfer info on domain localdomain.com from NS @dc1.localdomain.com, finds strings with any-cased word 'Lawler' and strips last letter from each string.", "output": "VAR=`dig axfr @dc1.localdomain.com localdomain.com | grep -i Lawler | awk '{ getline ; $1=substr($1,1,length($1)-1); print $1 ; exit }'`"}
{"input": "Parse \"file.json\" to print JSON \"title\" entries whose \"price\" are less than 10", "output": "cat file.json | python -c \"import sys, json, jsonpath; print '\\n'.join(jsonpath.jsonpath(json.load(sys.stdin), 'store.book[?(@.price < 10)].title'))\""}
{"input": "Delete all regular files with '.cache' extension that were accessed more than 30 days ago under $HOME/Library/Safari/Icons directory tree", "output": "find $HOME/Library/Safari/Icons -type f -atime +30 -name \"*.cache\" -print -delete"}
{"input": "Write \"fifo forever\" infinitely using the named pipe \"fifo\" by writing its contents to standard output and to \"fifo\"", "output": "echo \"fifo forever\" | cat - fifo | tee fifo"}
{"input": "Find all regular files in the current directory tree that are not readable by anyone", "output": "find . -type f ! -perm -444"}
{"input": "search for the word \"methodNameHere\" in all the python files in the folder \"/mycool/project/\" and display color on the matched lines in the output", "output": "find /mycool/project/ -type f -name \"*.py\" -print0 | xargs -I {} -0 grep -H --color \"methodNameHere\" \"{}\""}
{"input": "Find all files/directories under current directory with 'FooBar' in their paths and copy them to ~/foo/bar", "output": "find .|grep \"FooBar\"|xargs -I{} cp \"{}\" ~/foo/bar"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found", "output": "tar -cvf file.tar `find var/log/ -iname \"anaconda.*\"`"}
{"input": "Sort \"$file\" and output the result to \"$file\"", "output": "sort -o $file $file"}
{"input": "List files larger than 10MB under /var/log /tmp that haven't changed in a month", "output": "find /tmp /var/tmp -size +30M -mtime 31 -print0 | xargs -0 ls -l"}
{"input": "Perform syntax check on all PHP files in the current directory tree", "output": "find . -name \\*.php -type f -exec php -l {} \\;"}
{"input": "Print a space separated list of numbers from 1 to 10 with no trailing new line", "output": "seq 10 | xargs echo -n"}
{"input": "Find all directories named \"D\" in the current directory tree", "output": "find . -name \"D\" -type d"}
{"input": "Search for the regex 'pattern_to_search' in all files under '/directory/containing/files' and show the matched lines as well as the file names", "output": "find /directory/containing/files -type f -exec grep -H 'pattern_to_search' {} +"}
{"input": "Find all *.php files under current directory and change their permission to 644", "output": "find . -type f -name '*.php' -exec chmod 644 {} \\;"}
{"input": "create a md5sum for all the instances of the file MyCProgram.c in current folder", "output": "find -iname \"MyCProgram.c\" -exec md5sum {} \\;"}
{"input": "find all the .jpg files in / and copy them to the current folder.", "output": "find / -type f -name *.jpg  -exec cp {} . \\;"}
{"input": "Replace all occurrence of \"log_errors = Off\" with \"log_errors = On\" in all 'php.ini' files in the current directory tree", "output": "find . -name 'php.ini' -exec sed -i 's/log_errors = Off/log_errors = On/g' \"{}\" \\;"}
{"input": "Enable history expansion in a script", "output": "set -H"}
{"input": "Go into the directory whose name is selected in the X window system, ie. double-clicked in a terminal window.", "output": "cd \"$(xsel)\""}
{"input": "Find blabla* files under current directory", "output": "find . -depth -name \"blabla*\" -type f | xargs rm -f"}
{"input": "Copy the file foo.sh into /path/to/cotainer of the docker container", "output": "tar -c -C /path/on/local/machine . | docker cp - dvc:/path/on/container"}
{"input": "Search for files whose size is between 100 kilobytes and 500 kilobytes", "output": "find . -size +100k -a -size -500k"}
{"input": "display the contents of all the files in the current folder which start with test ( case insensitive search )", "output": "find . -iname '*test*' -exec cat {} \\;"}
{"input": "Gets string with MAC address of eth0 network interface.", "output": "ifconfig eth0 | grep HWaddr"}
{"input": "Search the current directory tree for files whose name is \".note\", case insensitive", "output": "find . -iname '.note' | sort -r"}
{"input": "search for \"specified string\" in all the php files in the current folder", "output": "find . -name \u201c*.[php|PHP]\u201d -print | xargs grep -HnT \u201cspecified string\u201d"}
{"input": "Find all .txt files in the current directory tree and edit them with `vim'", "output": "find . -name \"*.txt\" | parallel -j1 --tty vim"}
{"input": "List all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "find . -type d -execdir sh -c 'test -z \"$(find \"{}\" -mindepth 1 -type d)\" && echo $PWD/{}' \\;"}
{"input": "Search the dir_data directory and all of its sub-directories for regular files and remove the execute permission for all while adding the write permission for the user.", "output": "find ~/dir_data -type f  -exec chmod a-x,u+w {} \\;"}
{"input": "Execute `find -type f | egrep -i \"(jpg|bmp|png|gif)$\"` every 300 seconds and display without title", "output": "watch -n 300 -t `find -type f | egrep -i \"(jpg|bmp|png|gif)$\"`"}
{"input": "find all the files in home folder which have been modified in the last 24 hours", "output": "find $HOME -mtime -1"}
{"input": "Find files modified in the last 5 minutes starting from the current directory", "output": "find . -mmin -5"}
{"input": "search for a files \"cart1\" in the folder junk which is in home folder and move the folder to ~/junk/A.", "output": "find ~/junk  -name 'cart1' -exec mv {} ~/junk/A \\;"}
{"input": "Execute the `file' command on all regular files from the current directory tree and save the output as /tmp/filetypes.log", "output": "find . -type f -exec file {} \\; > /tmp/filetypes.log"}
{"input": "Lists all subdirectories in the current directory", "output": "ls -d -- */                    ### more reliable GNU ls"}
{"input": "find all the directories in the current folder excluding search in the sub directories and create these directories in another path", "output": "find . -maxdepth 1 -type d | xargs -I X mkdir '/new/directory/X'"}
{"input": "Finds all files having text \"texthere\" recursively in a current folder, and precedes found string with string number in file and file name.", "output": "find -type f -exec grep -Hn \"texthere\" {} +"}
{"input": "Find all .rb and .yml files in the /some/path directory tree and replace \"some_phrase\" with \"replacement_phrase\" in them", "output": "find /some/path -name \"*rb\" -o -name \"*yml\" | xargs grep -sl \"some_phrase\" | xargs sed -i -e 's/some_phrase/replacement_phrase/g'"}
{"input": "Creates temporary folder within TMPDIR, with name like current shell name and 10-letter suffix.", "output": "mktemp -dt \"$(basename $0).XXXXXXXXXX\""}
{"input": "Find all files on the system whose names are 'drush'", "output": "find / -name drush"}
{"input": "Calculate the md5sum of all the files with name \"MyCProgram.c\", ignoring case", "output": "find -iname \"MyCProgram.c\" -exec md5sum {} \\;"}
{"input": "Find all directories in the current directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago", "output": "find . -mmin -60 -mmin +5"}
{"input": "Display an amount of processes running with a certain name", "output": "ab=`ps -ef | grep -v grep | grep -wc processname`"}
{"input": "SSH into \"hostname\" on port 22 as user \"myName\"", "output": "ssh -p 22 myName@hostname"}
{"input": "Find all SGID files in entire file system", "output": "find / -perm +g=s"}
{"input": "find CSS files, omitting results containing \"CVS\"", "output": "find . \\! -path \"*CVS*\" -type f -name \"*.css\""}
{"input": "Find all files matching \"abc*\" in the current directory and append a column with \"OK\"", "output": "find . -name 'abc*' -exec echo {}' OK' \\; | column -t"}
{"input": "Make directories \"a\", \"b\", \"c\", \"d\", and \"e\"", "output": "mkdir a b c d e"}
{"input": "Find and remove multiple files such as *.mp3 or *.txt", "output": "find . -type f -name \"*.mp3\" -exec rm -f {} \\;"}
{"input": "Find all regular .html files in the /var/www directory tree", "output": "find /var/www -type f -name \"*.html\""}
{"input": "Print the list of all directories under the current directory and below", "output": "find ./ -type d -print"}
{"input": "Change permissions to 700 for files and directories deeper than the current directory", "output": "find . -mindepth 2 | xargs chmod 700"}
{"input": "Remove all files and directories called \"test\" from the current directory tree", "output": "find . -name test -exec rm {} \\;"}
{"input": "Set variable MYPROGRAMNAME_KERNEL_VERSION to current kernel release name, making this variable visible by subprocesses of current shell.", "output": "export MYPROGRAMNAME_KERNEL_VERSION=$(uname -r)"}
{"input": "List all files in /home/bozo/projects directory tree that were modified exactly one day ago.", "output": "find /home/bozo/projects -mtime 1"}
{"input": "Make directories \"foo/bar/baz\" as needed and do not cause an error if it exists", "output": "mkdir -p foo/bar/baz"}
{"input": "Run `command' on each file from the current directory tree", "output": "find . -exec command {} \\;"}
{"input": "create directory \".hiddendir\"", "output": "mkdir .hiddendir"}
{"input": "update the permission of all the php files in current directory and save the output to a file", "output": "find . -name '*.php' -exec chmod 755 {} \\; | tee logfile.txt"}
{"input": "Find all .gz archives in the current directory tree and check if they are valid", "output": "find \"*.gz\" -exec gunzip -vt \"{}\" +"}
{"input": "find the file \"httpd.log\" in the entire file system", "output": "find / -type f -name httpd.log"}
{"input": "copy all the files with the extension \".type\" from one folder to a target directory", "output": "find \"$sourcedir\" -type f -name \"*.type\" | xargs cp -t targetdir"}
{"input": "Save the short system host name to variable \"hostname\"", "output": "hostname=`hostname -s`"}
{"input": "Find all directories with permissions 777 under and below /var/www/html, and change their permissions to 755", "output": "find /var/www/html -type d -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Search only for regular files", "output": "find -type f"}
{"input": "display all the files in the current folder along with the modification time and display file names of the last 10 modified files", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -10 | cut -f2- -d\" \""}
{"input": "Print full path of command \"c++\"", "output": "which c++"}
{"input": "Split \"file.tar.gz\" into files of size 1024 MB with a prefix of \"file.tar.gz.part-\"", "output": "split -b 1024m \"file.tar.gz\" \"file.tar.gz.part-\""}
{"input": "Search the XML files from directories /res/values-en-rUS and /res/xml for string \"hovering_msg\"", "output": "find /res/values-en-rUS /res/xml -iname '*.xml' -print0 | xargs -0 -d '\\n' -- grep -i \"hovering_msg\" --"}
{"input": "print all readline bindings", "output": "bind -P"}
{"input": "Print a list of case insensitive duplicate filenames in the current directory", "output": "ls | sort -f | uniq -i -d"}
{"input": "search for all the Joomla's version.php files in various directories and display the latest versions of it.", "output": "find /var/www/vhosts/*/httpdocs -type f \\( -iwholename '*/libraries/joomla/version.php' -o -iwholename '*/libraries/cms/version.php' -o -iwholename '*/libraries/cms/version/version.php' \\) -print0 -exec perl -e 'while (<>) { $release = $1 if m/ \\$RELEASE\\s+= .([\\d.]+).;/; $dev = $1 if m/ \\$DEV_LEVEL\\s+= .(\\d+).;/; } print qq( = $release.$dev\\n);' {} \\;"}
{"input": "Find all user files larger than 5MB", "output": "find / -size  +5000000c 2> /dev/null"}
{"input": "Save the current time formatted according to the format string \"%Y-%m-%d %H:%M:%S\" to the variable 'CDATE'", "output": "CDATE=$(date \"+%Y-%m-%d %H:%M:%S\")"}
{"input": "Find files/directories in entire file system that were accessed in less than a day ago", "output": "find / -atime -1"}
{"input": "Find files on the system whose names begin with either x or X", "output": "find / -name \"[Xx]*\""}
{"input": "Add a line number to every line in \"infile\"", "output": "nl -ba infile"}
{"input": "find files which full path name like '*f' at current directory and print", "output": "find .  -path '*f'"}
{"input": "On host \"server_b\", connect as ssh user \"user\" and copy \"/my_folder/my_file.xml\" to directory \"/my_new_folder/\".", "output": "scp user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/"}
{"input": "Append the current user to the server access control list for X", "output": "xhost +si:localuser:`whoami`"}
{"input": "Locate all OGG files that reside in the home directory and have not been accessed in the past 30 days", "output": "find $HOME -iname '*.ogg' -atime +30"}
{"input": "Print a unique list of characters from standard input showing backslash escapes for non-displayables", "output": "od -cvAnone -w1 | sort -bu"}
{"input": "find files in current folder using name patterns and sort the display the file names in the sorted order", "output": "find . -name \"S1A*1S*SAFE\" | rev | awk -F '/' '{print $1}' | rev | sort -t _ -k 5"}
{"input": "Exclude directory from find . command", "output": "find . -type d -name proc -prune -o -name '*.js'"}
{"input": "Search for case-insensitive \"string\" in \"log.tar.gz\"", "output": "zcat log.tar.gz | grep -a -i \"string\""}
{"input": "Count the number of lines in every regular .rb file in the current directory tree", "output": "find . -name \"*.rb\" -type f -exec wc -l \\{\\} \\;"}
{"input": "Remount subtree \"/usr/bin\" on \"/path/to/chroot/jail/usr/bin\" as a bind", "output": "mount --bind /usr/bin /path/to/chroot/jail/usr/bin"}
{"input": "Find all directories under maximum 1 level down the current directory and set their permission to 700 recursively", "output": "find . -maxdepth 1 -type d -exec chmod -R 700 {} \\;"}
{"input": "change the permission of all the normal/regular files from 777 to 755 in the folder \"/home/user/demo\"", "output": "find /home/user/demo -type f -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Print the current directory name without full path", "output": "echo \"$PWD\" | sed 's!.*/!!'"}
{"input": "Print unique lines of sorted file \"b\" compared with sorted file \"a\"", "output": "comm -13 a b"}
{"input": "Dump all MySQL databases over an ssh tunnel to \"user@yoursever.com\" and use it as input to mysql", "output": "mysqldump --all-databases | ssh user@yourserver.com mysql"}
{"input": "Print current date as epoch seconds", "output": "date +%s"}
{"input": "Find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file/directory paths", "output": "find . -type d -print0 | xargs -0 -I {} sh -c ' echo \"{}: \\c\" ; find {} -maxdepth 1 -type f | wc -l ; find {} -maxdepth 1 -type f -print'"}
{"input": "Find all *.mp3 files in entire file system greater than 10MB and delete them", "output": "find / -type f -name *.mp3 -size +10M -exec rm {} \\;"}
{"input": "Find all php files under current directory and delete empty lines from the beginning in those files", "output": "find ./ -name \"*.php\" -type f | xargs sed -i '/./,$!d' 2>&1"}
{"input": "Recursively search for all files not ending in \".xml\" under the current directory, append \".xml\" to the end of each file name", "output": "find . -type f \\! -name '*.xml' -print0 | xargs -0 rename 's/$/.xml/'"}
{"input": "Find all files whose names end with \"macs\" in and below the current directory", "output": "find -name '*macs'"}
{"input": "Find all files modified on \"Mar 4\" and unzip and search their contents for \"12345\"", "output": "ls -ltr | grep 'Mar 4' | awk '{print 9}' | xargs zcat -fq | grep 12345"}
{"input": "Move all files including hidden files and excluding \"..\" in \"/path/subfolder/\" to \"/path/\"", "output": "mv /source/path/{.[!.],}* /destination/path"}
{"input": "Report file system containing /tmp disk usage in kilobytes.", "output": "df -k /tmp"}
{"input": "Prints the first N bytes of file.txt", "output": "head -c N file.txt"}
{"input": "Extract any line in \"fileA\" which does not appear as the first word of any line in \"fileB\"", "output": "comm -23 <(sort fileA) <(cut -d' ' -f1 fileB | sort -u)"}
{"input": "Print 10 space separated \"x\"s with at most 4 per line", "output": "yes x | head -10 | awk 'BEGIN { RS = \"%%%%%%%\" } { split($0,a,\"\\n\"); for (i=1; i<length(a); i+=4) print a[i], a[i+1], a[i+2], a[i+3] }'"}
{"input": "Print output of 'script -c \"./a\" /dev/null' to standard output and \"output.txt\"", "output": "script -c \"./a\" /dev/null | tee output.txt"}
{"input": "Search case insensitively for 'foo' in all the files with '.java' extension under current directory tree and show only the file names", "output": "find . -type f -name \"*.java\" -exec grep -il 'foo' {} \\;"}
{"input": "Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.pid' file, comparing human readable numbers in file strings.", "output": "cat ${TMP}/${SCRIPT_NAME}.pid|sort -rh;"}
{"input": "Search for all the directories in directories taken from the glob pattern '/path/to/folders/*' and add the extension \".mbox\" to all and create directories named 'Messages' inside them", "output": "find /path/to/folders/* -type d -exec mv {} {}.mbox \\; -exec mkdir {}.mbox/Messages \\;"}
{"input": "Print the login time and user of the first person who logged in", "output": "who | awk '{print $3 \" \" $4 \" \"$1}' | sort | head -1"}
{"input": "Split the output of \"tar [your params]\" into files of at most 500 MiB in size and use prefix \"output_prefix\"", "output": "tar [your params] |split -b 500m - output_prefix"}
{"input": "Delete all files/directories with inode number 117672808 under current directory tree", "output": "find -inum 117672808 -exec rm {} \\;"}
{"input": "Delete and count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -type -f -mtime \"+$DAYS_TO_SAVE\" -exec rm {} \\; -exec printf '.' \\; | wc -c"}
{"input": "Search for all *.conf files in entire file system", "output": "find / -type f -name \"*.conf\""}
{"input": "create a symbolic link named \"/usr/lib/jvm/default-java\" to file \"/usr/lib/jvm/java-7-oracle\"", "output": "sudo ln -s /usr/lib/jvm/java-7-oracle /usr/lib/jvm/default-java"}
{"input": "list the first line in every text file under the users home directory into report.txt", "output": "find $HOME/. -name *.txt -exec head -n 1 -v {} \\; > report.txt"}
{"input": "Print output of \"qstat\" with full job names and format as a table", "output": "qstat -xml | tr '\\n' ' ' | sed 's#<job_list[^>]*>#\\n#g' \\   | sed 's#<[^>]*>##g' | grep \" \" | column -t"}
{"input": "find all the files ending with .mp3 or .jpg", "output": "find . \\( -name '*.mp3' -o -name '*.jpg' \\) -print"}
{"input": "List all files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 | xargs -r ls -l"}
{"input": "prints full path of given file", "output": "echo $(cd $(dirname \"$1\") && pwd -P)/$(basename \"$1\")"}
{"input": "find all files and directories under the current directory and display the filesize followed by the filename, using the stat command on FreeBSD/OSX", "output": "find . -type f -exec stat -f \"%z %N\" {} \\;"}
{"input": "Gets IP address of 'en1' network interface.", "output": "my_ip=$(ifconfig en1 | grep 'inet addr' | awk '{print $2}' | cut -d: -f 2)"}
{"input": "Join lines of 'file': fields 1 and 2 of lines discarding adjascent lines ignoring first 3 fields, with fields 3 to end of line discarding adjascent lines ignoring 3 last fields.", "output": "paste <(uniq -f3 file | cut -f1,2) <(tac file | uniq -f3 | tac | cut -f3-)"}
{"input": "Search all .c files from the current directory tree for \"keyword\", ignoring the case", "output": "find . -name \"*.c\" -exec grep -i \"keyword\" {} \";\""}
{"input": "Calculate the md5sum of the executable file of command 'c++'", "output": "md5sum `which c++`"}
{"input": "Recursively compress every file in the current directory tree and keep the original file", "output": "gzip -kr ."}
{"input": "Change the owner of \"/var/www/html/mysite/images/\" to \"nobody\"", "output": "sudo chown nobody /var/www/html/mysite/images/"}
{"input": "Save the user name of the current user to variable \"me\"", "output": "me=\"$(whoami)\""}
{"input": "Print a list of most often changed files in git", "output": "git whatchanged --all | \\grep \"\\.\\.\\.\" | cut -d' ' -f5- | cut -f2- | sort | uniq -c | sort"}
{"input": "check if a named screen session already exists", "output": "screen -list | awk '{print $1}' | grep -q \"$1$\""}
{"input": "Insert \"|\" every 30 characters in file \"longline\"", "output": "fold -w30 longline | tr '\\n' '|' | sed 's/|$/\\n/'"}
{"input": "Get domain names from file '1.txt' and request TXT DNS record for each one", "output": "cat 1.txt | xargs dig TXT"}
{"input": "Run your_command_here with all the files under /target/path as arguments", "output": "find /target/path -type f -print0 | xargs -0 your_command_here"}
{"input": "Display the host's ECDSA fingerprint using the md5 hasing algorithm.", "output": "ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub"}
{"input": "Kill processes listening on port 3000", "output": "lsof -n -i:3000 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9"}
{"input": "Exit the shell immediately if an error is encountered, treat references to unset variables as errors, disable overwriting existing files, and use the first non-zero exit code of a set of piped commands as the exit code of the full set of commands", "output": "set -o errexit -o nounset -o noclobber -o pipefail"}
{"input": "Find all files and directories under current directory without crossing over to other partitions and archive them into path_to_save.cpio.gz", "output": "find . -xdev -print0 | cpio -oa0V | gzip > path_to_save.cpio.gz"}
{"input": "find all the empty in the current folder do not search in sub directories", "output": "find . -maxdepth 1 -type d -empty"}
{"input": "display the name and size of all the regular/normal files  in the var/log folder which are bigger than 100MB", "output": "find /var/log -type f -size +100000k -exec ls -lh {} \\; | awk '{ print $9 \": \" $5 }'"}
{"input": "Search the /path tree for all executables", "output": "find /path -perm /ugo+x"}
{"input": "display the list of all the files in the current directory which have been accssed in the last 500 days exluding hidden files", "output": "find . -type f \\( ! -iname \".*\" \\) -mtime +500 -exec ls {} \\;"}
{"input": "List all files in entire file system that are not newer than the ttt file and do not belong to the user wnj", "output": "find / \\! \\( -newer ttt -user wnj \\) -print"}
{"input": "exclude ./dirtoexclude, using yui compress all file under currect folder", "output": "find . -path \"./dirtoexclude\" -prune \\     -o -exec java -jar config/yuicompressor-2.4.2.jar --type js '{}' -o '{}' \\;"}
{"input": "find all the files in current folder which end with a speicifc regular expression and display their count", "output": "find ./ -type f -regex \".*\\.[JPGjpg]$\" | wc -l"}
{"input": "Find all *conf* files recursively under current directory", "output": "find . -name *conf*"}
{"input": "Search the ~/Books directory recursively for files named \"Waldo\"", "output": "find ~/Books -name Waldo"}
{"input": "force remove all the directories with the name logs in the folder /var/www", "output": "find /var/www -type d -mtime 0 -name logs -exec sudo rm -fr {} \\;"}
{"input": "Selects a job from zenity dialog list and gets it back to the foreground.", "output": "fg `jobs | tr '[]' ' \\n' | zenity  --list --column '' --column ''`"}
{"input": "List environment variables whose name contains \"X\"", "output": "set | grep -oP '^\\w*(?==)' | grep X"}
{"input": "Find all directories starting from / that have permissions 777", "output": "find / -type d -perm 0777"}
{"input": "Find all files under current directory and change their permission to 644", "output": "find . -type f -exec chmod 644 {} \\;"}
{"input": "run command 'bash --rcfile myfile' as user root", "output": "su -c 'bash --rcfile myfile'"}
{"input": "Convert the string \"$myArray\" into a bash array using \";\" delimiters", "output": "IFS=';' read -a myArray <<< \"$myArray\""}
{"input": "find all the files in the current folder which are readable", "output": "find . -readable"}
{"input": "find regular files in the current directory, without descending into sub-directories and display as a null separated list.", "output": "find -maxdepth 1 -type f -printf '%f\\000'"}
{"input": "Print a list of JPG files residing in the current directory tree", "output": "find . -name \u201c*.jpg\u201d"}
{"input": "Replace spaces with underscores in the names of all files and directories in the \"/tmp\" directory tree", "output": "find /tmp/ -depth -name \"* *\" -execdir rename 's/ /_/g' \"{}\" \\;"}
{"input": "Synchronize \"dir_a\" and \"dir_b\" to contain the latest files in both directories", "output": "rsync -ur dir_a dir_b && rsync -ur dir_b dir_a"}
{"input": "Find files that are writable by both the \u201cother\u201d and the group under the plsql directory", "output": "find plsql -type f  -perm -220 -exec ls -l {} \\; 2>/dev/null"}
{"input": "delete all the text files from the current folder after user confirmation", "output": "find . -name \"*.txt\" -ok rm {} \\;"}
{"input": "find all the html files in the current folder", "output": "find . -name \"*.html\""}
{"input": "Composes full process tree with process id numbers, and prints only those strings that contain 'git'.", "output": "pstree -p | grep git"}
{"input": "Creates temporary file in a current folder with name formatted like 'templateXXXXXX', and saves path to it in 'tempfile' variable.", "output": "tempfile=$(mktemp $(pwd)/templateXXXXXX)"}
{"input": "find all the files ending with emlx in a folder and save the output to a list file", "output": "find /path/to/folders/ -name \\*.emlx -print0 > filelist"}
{"input": "Recursively change the owner of all files in \"~/tmp\" to \"$USER\"", "output": "sudo chown -R $USER ~/tmp"}
{"input": "listing of the files starting from home dir, that have size 50k or less and have extention html.\"", "output": "find . \\( -size 100 -o -size -100 \\)  -name '*.html' \\    -exec  ls -l {} \\;  2> /dev/null"}
{"input": "display all the java script files in the current folder", "output": "find . -name \"*.js\""}
{"input": "Move all *.php~ (case insensitive) files under current directory to /mydir", "output": "find . -iname \"*.php~\" -exec mv {} /mydir \\;"}
{"input": "Display the differences between \"file1.cf\" and \"file2.cf\" side-by-side with a width of 150 characters", "output": "diff -y -W 150 file1.cf file2.cf"}
{"input": "Count the number of differing lines in \"file1\" and \"file2\" with 0 lines of unified context", "output": "diff -U 0 file1 file2 | grep -v ^@ | wc -l"}
{"input": "Print file name without extension assuming there is only one dot in the file name.", "output": "echo \"$FILE\" | cut -d'.' -f1"}
{"input": "Rename all *.html files under and below the current directory to *.var", "output": "find -name '*.html' -print0 | xargs -0 rename 's/\\.html$/.var/'"}
{"input": "Print a colon-separated list of all directories from the $root directory tree", "output": "find $root -type d | tr '\\n' ':'"}
{"input": "display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2", "output": "find . -type d -regextype posix-egrep -regex '\\./processor[0-9]*/10\\.(1|2)'"}
{"input": "display all directories in the folder \"PROD\" and do not search in the sub directories", "output": "find /PROD -maxdepth 1 -type d"}
{"input": "Make directory \"/path/to/destination\"", "output": "mkdir /path/to/destination"}
{"input": "Find all image.pdf files under ./polkadots", "output": "find ./polkadots -type f -name \"image.pdf\""}
{"input": "Change permissions to 644 for all directories under and below /path/to/someDirectory/", "output": "find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755"}
{"input": "Print file type of the executable file of command \"file\"", "output": "which file | file -f -"}
{"input": "Find all .java files under and below the current directory", "output": "find . -name '*.java'"}
{"input": "display all the files in the folder \"/Users/Me/Desktop\" which belong to the user \"popo\" and which have the permission 777", "output": "find /Users/Me/Desktop -user popo -perm 777"}
{"input": "Update the archive '2009.tar' with the files from the data/ directory tree that match pattern 'filepattern-*2009*'", "output": "find data/ -name filepattern-*2009* -print0 | xargs -0 tar uf 2009.tar"}
{"input": "Find all *.pdf.marker files under ${INPUT_LOCATION} and move them to ${OUTPUT_LOCATION} also move any *.pdf files with the same name under current directory to ${OUTPUT_LOCATION}", "output": "find ${INPUT_LOCATION}/ -name \"*.pdf.marker\" | xargs -I file mv file $(basename file .marker) ${OUTPUT_LOCATION}/."}
{"input": "Move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT_LOCATION} to ${OUTPUT_LOCATION}", "output": "find $INPUT_LOCATION -name '*.pdf.marker' | xargs -i bash -c 'mv ${0%.marker} $0 $1' {} $OUTPUT_LOCATION"}
{"input": "Prints latest modified file in a directory", "output": "ls -1t | head -1"}
{"input": "Recursively change ownership of \"~/.npm\" to the current user", "output": "sudo chown -R $(whoami) ~/.npm"}
{"input": "Print specific lines in \"File-out\" that do not match \"File-Reference\" to standard output", "output": "diff --old-line-format '%L' --new-line-format '' --unchanged-line-format ''  <(nl File-out) <(nl File-Reference)"}
{"input": "Find all files with the name \"MyProgram.c\" in the current directory and its sub-directories while ignoring the case of the file name.", "output": "find -iname \"MyCProgram.c\""}
{"input": "Get A record for domain $domain", "output": "dig -t A $domain"}
{"input": "list all regular files which path is not dir1 or dir2", "output": "find dir -not \\( -path \"dir1\" -prune \\) -not \\( -path \"dir2\" -prune \\) -type f"}
{"input": "find all instances of a file in current folder and display all errors apart from permission denied", "output": "find . -name \"my.txt\" 2>&1 | grep -v \"Permission denied\""}
{"input": "Find all *.foo files under current directory and print their contents", "output": "cat $(find . -name '*.foo')"}
{"input": "List all *.c, *.h and *.cpp files under current directory", "output": "find . -type f \\( -name '*.c' -or -name '*.h' -or -name '*.cpp' \\) -exec ls {} \\;"}
{"input": "rename file extensions for files with specific extension in the current folder", "output": "find . -name '*.andnav' -exec sh -c 'mv \"$0\" \"${0%.andnav}.tile\"' {} \\;z"}
{"input": "create an archive and show a progress bar", "output": "tar -c --checkpoint=1000 --checkpoint-action=dot /var"}
{"input": "Find all files/directories under current directory tree that belong to the user 'tom'", "output": "find ./ -user tom"}
{"input": "Search the system for directories named \"needle\" suppressing error messages", "output": "find / -type d -name \"needle\" 2>/dev/null"}
{"input": "Find all SUID files .", "output": "find /  -perm /u=s"}
{"input": "Connect via ssh to \"your.server.example.com\" and recursively copy directory \"/path/to/foo\" on this host to direcotry \"/home/user/Desktop\" on local host, using \"blowfish\" cipher algorithm.", "output": "scp -c blowfish -r user@your.server.example.com:/path/to/foo /home/user/Desktop/"}
{"input": "Find absolute path of command with PID \"$pid\"", "output": "readlink -f `ls --dereference /proc/$pid/exe`"}
{"input": "Print the contents of all file* files under current directory with white space safety in file names", "output": "find . -name \"file*\" -print0 | xargs -0 perl -ple ''"}
{"input": "Find all .txt files under the current directory and below suppressing error messages", "output": "find . -name \"*.txt\" -print 2>/dev/null"}
{"input": "Split standard input into files of at most 3400000 lines each", "output": "split -l 3400000"}
{"input": "Find all directories under /fss/fin", "output": "find /fss/fin -type d"}
{"input": "find all files in current folder which are more than 300MB", "output": "find . -size +300M"}
{"input": "display all the files in the entire file system which are bigger than 10MB", "output": "find / -size +10000k"}
{"input": "Search the current directory tree for regular files whose names match regular expression \".+-[0-9]+x[0-9]+\\.jpg\"", "output": "find . -type f -regex \".+-[0-9]+x[0-9]+\\.jpg\""}
{"input": "Archive \"/path/to/files\" to \"/path\" on host \"user@targethost\" with elevated permission on the remote host", "output": "rsync -av --rsync-path=\"sudo rsync\" /path/to/files user@targethost:/path"}
{"input": "force delete all the temp files which are of size 0 bytes and which have not been accessed in the last 10 days", "output": "find /tmp -size 0 -atime +10 -exec rm -f {} \\;"}
{"input": "Find sqlite3 databases in the current directory tree, execute query 'SELECT * FROM table WHERE column1=\"value\"' on all of them, and search the result for \"value\"", "output": "find . -name \"*.db\" -type f | while read file ; do sqlite3 $file \"SELECT * FROM table WHERE column1='value'\" | grep value ; if [ $? -eq 0 ] ; then echo $file ; fi done"}
{"input": "Search for all the files in man pages and return the manual page for grep", "output": "find /usr/share/man/ -regex .*/grep*"}
{"input": "Show the list of all files on the system whose names do not end in \".c\"", "output": "find / \\! -name \"*.c\" -print"}
{"input": "Save the number of matching executables for \"$cmd\" in $PATH to variable \"candidates\"", "output": "candidates=$(which -a $cmd | wc -l)"}
{"input": "Print 10 space padded \"x\"s to a width of 10 with at most 4 per line", "output": "printf '%-10s%-10s%-10s%s\\n' $(yes x | head -n 10)"}
{"input": "search for all the files in a directory and give the first five characters of the file", "output": "find . -type f -exec bash -c 'echo ${1:0:5}' funcname {} \\;"}
{"input": "Create a ssh key with no passphrase and store it in \"outfile\".", "output": "ssh-keygen -f outfile -N ''"}
{"input": "display all instances of the .profile file in the entire file system", "output": "find / -name .profile -print"}
{"input": "Check that the master ssh connection \"officefirewall\" is running", "output": "ssh -O check officefirewall"}
{"input": "Find files/directories under current directory that matches './projects/insanewebproject' in their paths and show the first one", "output": "find -ipath './projects/insanewebproject'| head -n1"}
{"input": "Limits the number of results from grep to 2 lines", "output": "grep -o '1.' yourfile | head -n2"}
{"input": "Print CPU usage and memory usage of all unique processes on a system", "output": "ps aux | awk '{print $4\"\\t\"$11}' | sort | uniq -c | awk '{print $2\" \"$1\" \"$3}' | sort -nr"}
{"input": "Find all files in the current directory tree, except GIT files", "output": "find -type f -name .git -prune -o -print"}
{"input": "display all the files in the home folder which are smaller than 500 bytes", "output": "find ~ -size -500b"}
{"input": "search for the file picasso in the folder /home/calvin/ (case insensitive search)", "output": "find /home/calvin/ -iname \u201cpicasso\u201d"}
{"input": "Find all regular files in the \"aaa\" directory", "output": "find aaa/ -maxdepth 1 -type f"}
{"input": "Find the passwd file under the root directory and two levels down", "output": "find / -maxdepth 3 -name passwd"}
{"input": "Execute \"ssh raptor.lan hostname\\; uptime\" on server \"genja.org\"", "output": "ssh -t genja.org 'ssh raptor.lan hostname\\; uptime'"}
{"input": "find all the files in the current directory that have the word \"lib\" in them", "output": "find . -wholename '/lib*'"}
{"input": "Delete the commands 1006 through 1008 from history", "output": "for h in $(seq 1006 1008 | tac); do history -d $h; done"}
{"input": "Prints directory where the executing script ($0) is located.", "output": "`dirname $0`"}
{"input": "find all the files starting with \"config\" in the folder Symfony ( case insensitive search)", "output": "find Symfony -iname '*config*';"}
{"input": "display all non empty directories in current folder", "output": "find . \\! -empty -type d"}
{"input": "Clear the terminal's search history", "output": "history -c"}
{"input": "View the bash manpage, starting with the view positioned at the first occurrence of the expression \"BASH_SOURCE\".", "output": "man bash | less -p BASH_SOURCE"}
{"input": "Remove all files whose names start with spam-", "output": "find . -name 'spam-*' | xargs rm"}
{"input": "search all files in the current folder which match the regular expression", "output": "find . -regex \".*/my.*p.$\" -a -not -regex \".*test.*\""}
{"input": "Copies 'src' to 'dest' preserving overwriting the existing files.", "output": "cp -n src dest"}
{"input": "Set LANG variable to 'en_US' and prints calendar for a current month.", "output": "LANG=en_US cal"}
{"input": "View contents of files matching \"/usr/share/doc/mysql-server-5.0/changelog*.gz\" in \"less\"", "output": "zcat /usr/share/doc/mysql-server-5.0/changelog*.gz | less"}
{"input": "search files in current folder using name patterns", "output": "find . -name \"$pattern\""}
{"input": "Counts sum of non-empty lines from all .php files in a current folder.", "output": "find . -name \"*.php\" | xargs grep -v -c '^$' | awk 'BEGIN {FS=\":\"} { cnt = cnt + $2} END {print cnt}'"}
{"input": "Print the average time of 4 ping requests to \"www.stackoverflow.com\"", "output": "ping -c 4 www.stackoverflow.com | sed '$!d;s|.*/\\([0-9.]*\\)/.*|\\1|'"}
{"input": "Search the current directory for HTML files whose names begin with \"a\"", "output": "find . -maxdepth 1 -name a\\*.html"}
{"input": "Get the path of running Apache", "output": "ps -ef | grep apache"}
{"input": "search for files which are writable by either their owner or their group", "output": "find . -perm /u+w,g+w"}
{"input": "Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/", "output": "find arch/x86/usr/sbin arch/x86/usr/X11R6/bin usr/sbin/ -type f | xargs chmod a+x"}
{"input": "Display a dump of standard input as floating point values of double size", "output": "od -t fD"}
{"input": "Erase user's cron jobs and add one cron job to run \"script\" every minute.", "output": "echo \"* * * * * script\" | crontab -"}
{"input": "Remount \"/dev/sda7\" partition as executable", "output": "sudo mount -o remount -o exec /dev/sda7"}
{"input": "save all aliases to the variable $oldalias", "output": "oldalias=$(alias my_command|sed \"s/^[^']*'//; s/'$//\");"}
{"input": "Get the current shell's executable name from the output of 'ps'.", "output": "ps | grep `echo $$` | awk '{ print $4 }'"}
{"input": "Removes all empty folders under '/path/to/the/folder' path.", "output": "find /path/to/the/folder -depth -type d -print0 | xargs -0 rmdir"}
{"input": "change the permissions of all the directories in the current folder, print0 is used for handling files with newlines in their file name", "output": "find . -type d -print0 | xargs -0 chmod 2775"}
{"input": "Save the latest modification time (in format \"%T@ %t\" of any file under \"./$dir\" to variable \"timestamp\"", "output": "timestamp=$(find ./$dir -type f -printf \"%T@ %t\\\\n\" | sort -nr -k 1,2 | head -n 1)"}
{"input": "find all files in the current directory with default depth size and compress them to lpicpio.1 file", "output": "find . -depth -print0 | cpio --null -o > ../lpicpio.1"}
{"input": "Remove all files in and below the current directory whose names begin with \"not\"", "output": "find . -name not\\* | tr \\\\n \\\\0 | xargs -0 rm"}
{"input": "Find all directories under current directory and run  /path/to/script.sh for each of them", "output": "find . -type d -exec /path/to/script.sh '{}' \\;"}
{"input": "display all file in the folder /dir/to/search except \".c\" files", "output": "find /dir/to/search/ -not -name \"*.c\" -print"}
{"input": "Unhide all hidden files in the current directory", "output": "find . -maxdepth 1 -type f -name '\\.*' | sed -e 's,^\\./\\.,,' | sort | xargs -iname mv .name name"}
{"input": "Check if /path/to/file exists and has a size greater than 25600KB", "output": "[[ $(find /path/to/file -type f -size +51200c 2>/dev/null) ]] && echo true || echo false"}
{"input": "Find all files whose names contain 'patch-' in the /usr/ports directory tree and count the number of lines with ^M in them", "output": "find /usr/ports/ -name '*patch-*' -exec grep `printf '\\15'` -l '{}' '+' | wc -l"}
{"input": "display all files in current folder in sorted order of depth", "output": "find folder1/ -type f -printf \"%d\\t%p\\n\" | sort -n | sed -e \"s|[0-9]*\\t||\""}
{"input": "change the group of all the files in the file system which belong to the group with the gid 999", "output": "find / -group 999 -exec chgrp NEWGROUP {} \\;"}
{"input": "Search for \"ifconfig\" in the output of \"history\" and print 5 lines that precede and follow", "output": "history | grep ifconfig -A5 -B5"}
{"input": "find files in current directory that names are game", "output": "find . -name game"}
{"input": "Show the files or directories in the current directory whose names are not \"MyCProgram.c\"", "output": "find -maxdepth 1 -not -iname \"MyCProgram.c\""}
{"input": "Recursively finds all *.dbf files from the root folder and prints list of folders with such files.", "output": "find / -name \"*.dbf\"  -exec dirname {} \\; 2> /dev/null | sort -u"}
{"input": "Write output of \"yourcommand\" to standard output and to \"output.txt\"", "output": "yourcommand | tee output.txt"}
{"input": "find files (under root file system /) that were accessed within the last 24 hours", "output": "find / -atime -1"}
{"input": "Move \"phantomjs-1.8.1-linux-x86_64.tar.bz2\" to \"/usr/local/share/\" directory", "output": "sudo mv phantomjs-1.8.1-linux-x86_64.tar.bz2 /usr/local/share/."}
{"input": "Finds all the log* files in /myDir recursively that are more than 7 days older, skipping already created .bz2 archives and compresses them.", "output": "find /myDir -name 'log*' -and -not -name '*.bz2' -ctime +7 -exec bzip2 -zv {} \\;"}
{"input": "Remove \"\\r\" at the end of each line in \"infile\" and display the result as printable characters or backslash escapes", "output": "cat infile | sed 's/\\r$//' | od -c"}
{"input": "display all the trace files (\".trc\") from the folder $DBA/$ORACLE_SID/bdump/ which have not been accessed in the last 7*24 hours", "output": "find $DBA/$ORACLE_SID/bdump/*.trc -mtime +7"}
{"input": "Change to folder where the oracle binary is.", "output": "cd $(which oracle | xargs dirname)"}
{"input": "Find recursively the files named \"file\" in the current directory ignoring all .git directories", "output": "find . -name .git  -prune -o -name file  -print"}
{"input": "Sort and compare files \"$def.out\" and \"$def-new.out\"", "output": "diff <(sort $def.out) <(sort $def-new.out)"}
{"input": "Print numbers from 1 to 30 with 0 padding to a width of 2", "output": "printf \" %02d\" $(seq 1 30)"}
{"input": "Look for SGID files and directories", "output": "find / -perm /g=s"}
{"input": "Print the names of the subdirectories of /usr/local/svn/repos/ prepending \"/usr/local/backup\" to them", "output": "find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -exec echo /usr/local/backup{} \\;"}
{"input": "Save Maven project version to variable \"version\"", "output": "version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | egrep -v '^\\[|Downloading:' | tr -d ' \\n' | sed -E 's/\\[.*\\]//g')"}
{"input": "Display all regular files under current directory tree ignoring files in './dir1' and './dir2' directories", "output": "find . -type f |sed '/.\\/dir[12]\\/[^/]*$/d'"}
{"input": "Creates temporary folder relative to directory '/path/to/dir'.", "output": "mktemp -d -p /path/to/dir"}
{"input": "Change the owner to \"root\" and group to \"specialusers\" of \"dir1\"", "output": "chown root:specialusers dir1"}
{"input": "Print the sorted unique column of usernames of users who are currently logged in without the header", "output": "finger | tail -n +2 | awk '{ print $1 }' | sort | uniq"}
{"input": "Print host name without a newline", "output": "echo -n `hostname`"}
{"input": "Saves folder path where target of symbolic link $file file is located in 'base' variable.", "output": "base=$(dirname $(readlink $file))"}
{"input": "Search for the regex \\s1$ in all files under current directory", "output": "find . -type f -exec perl -wnl -e '/\\s1$/ and print' {} +"}
{"input": "find all the files ending with \".sh\" in the folder /dir excluding those wth the names foo and bar.", "output": "find /dir \\( -name foo -prune \\) -o \\( -name bar -prune \\) -o -name \"*.sh\" -print"}
{"input": "Find files/directories that does not have write permssion for group", "output": "find /path ! -perm /g+w"}
{"input": "Find *.scm files recursively in the current directory", "output": "find . -name '*.scm'"}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them in an optimized way", "output": "find -d MyApp.app -name Headers -type d -exec rm -rf {} +"}
{"input": "search for a file \"file\" in current folder and display all instances of this file", "output": "find -name file -print"}
{"input": "Get the list of regular files in the current directory", "output": "find . -mindepth 1 -maxdepth 1 -type f -print0 | xargs -0 -I {} echo \"{}\""}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them", "output": "find MyApp.app -name Headers -type d -delete"}
{"input": "Reattach a session and if necessary detach it first", "output": "screen -dr 14313"}
{"input": "Answer \"y\" to all prompts of \"rm -rf foo\"", "output": "yes | rm -ri foo"}
{"input": "Find all .gz archives in the /path/to/dir directory tree", "output": "find /path/to/dir -name \"*.gz\" -type f"}
{"input": "Search all of /usr for any directory named 'My Files', for each directory found, copy it to /iscsi preserving full paths and attributes, then remove it.", "output": "find /usr -type d -name 'My Files' -exec rsync -avR '{}' /iscsi \\;  -exec rm -rf '{}'\\;"}
{"input": "Print revesed second from the end dot-bounded field in $i value", "output": "j=`echo $i | rev | cut -d \".\" -f2`;"}
{"input": "Archive \"src\" to \"dst\" updating files existing in \"dst\"", "output": "rsync -a -v src dst"}
{"input": "find all text files in the current folder which have been modified after the file /tmp/newerthan", "output": "find . -name \"*.txt\" -newer /tmp/newerthan"}
{"input": "archive all files in a current directory modified in the last 30 days", "output": "tar czvf mytarfile.tgz `find . -mtime -30`"}
{"input": "Running \"script\" outputs the name of a directory, go into that directory.", "output": "cd `script`"}
{"input": "find files in the current directory having name \"filename\"", "output": "find -iname \"filename\""}
{"input": "List unique series of 3 characters in file \"$1\" prefixed by the number of occurrences and sorted from most frequent to least frequent", "output": "fold -w3 \"$1\" | sort | uniq -c | sort -k1,1nr -k2"}
{"input": "Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.", "output": "basedir=$(cygpath -m \"$(dirname \"$0\")\")"}
{"input": "Remove leading and trailing spaces or tabs from \"   wordA wordB wordC   \"", "output": "echo \"   wordA wordB wordC   \" | sed -e 's/^[ \\t]*//' | sed -e 's/[ \\t]*$//'"}
{"input": "Print only common strings in content of files 'file1.sorted' and 'file2.sorted'", "output": "comm -1 -2 file1.sorted file2.sorted"}
{"input": "Search directories /opt, /usr, /var for regular file foo", "output": "find /opt /usr /var -name foo -type f"}
{"input": "Find all regular files in the current directory tree that match pattern 'btree*.c'", "output": "find . -type f -name 'btree*.c'"}
{"input": "Delete all files in the /myDir directory tree that were last modfied 7 days ago", "output": "find /myDir -mindepth 1 -mtime 7 -delete"}
{"input": "Exclude directory from find . command", "output": "find . -name '*.js' | grep -v excludeddir"}
{"input": "Case insensitive search using find command in Linux", "output": "find . \u2013iname \"error\" \u2013print ( -i is for ignore )  find . \u2013iname \"error\" \u2013print ( -i is for ignore )"}
{"input": "Run 'make' with parameter K_VERSION set to current kernel release.", "output": "make K_VERSION=`uname -r`"}
{"input": "Rename $file file, preserving only part of name before '-' symbol, and appending '.pkg' suffix to the end", "output": "mv $file $(echo $file | rev | cut -f2- -d- | rev).pkg"}
{"input": "display a long ilsting of all the files in the file system which are bigger than 1KB and which have not been modified in the last 30*24 hours", "output": "find / -size +1000 -mtime +30  -exec ls -l {} \\;"}
{"input": "Execute the first instance of \"parallel\" found in the PATH, passing it all parameters received by the script/function", "output": "`which parallel` \"$@\""}
{"input": "Findx all files having text \"texthere\" recursively in a current folder, and prints only file names with matching strings.", "output": "find -type f -exec grep -l \"texthere\" {} +"}
{"input": "List all .jpg files in the home directory tree", "output": "find . -name \"*.jpg\" -exec ls {} \\;"}
{"input": "display all the files in the current directory excluding the paths \"targert\", \"tools\", \"git\"", "output": "find . \\( ! -path \"*target*\" -a ! -path \"*tools*\" -a ! -path \"*.git*\" -print \\)"}
{"input": "create directories mnt and point", "output": "mkdir mnt point"}
{"input": "Counts non-empty lines in file fileName.", "output": "cat fileName | grep -v ^$ | wc -l"}
{"input": "Replace any blank character from standard input with a tab", "output": "tr '[:blank:]' \\\\t"}
{"input": "Copy directory tree preserving UID and GID and leaving user files alone", "output": "find . -depth -print | cpio -o -O /target/directory"}
{"input": "recursively change user of the direct /home/test/ and all files into it to user test", "output": "sudo chown -R test /home/test"}
{"input": "List all leaf directories of the current directory tree", "output": "find . -type d -links 2"}
{"input": "create a list of all files in all subdirectories", "output": "find . -type f -exec md5 {} \\;"}
{"input": "Md5sum the last 5 files in /directory1/directory2/", "output": "find /directory1/directory2/ -maxdepth 1 -type f | sort | tail -n 5 | xargs md5sum"}
{"input": "Run the specified git command, paging through the output with raw characters written to the terminal, without initializing the terminal capabilities, and automatically exiting when the end of the output is reached.", "output": "git -c color.status=always status | less -REX"}
{"input": "Find all *.rb and *.py files/directories under current directory", "output": "find . -name \"*.rb\" -or -name \"*.py\""}
{"input": "Search for 'specific string' in all files matching the name pattern '\u201c*.[txt|TXT]\u201d' under current directory tree", "output": "find . -name \u201c*.[txt|TXT]\u201d -print | xargs grep \u201cspecific string\u201d"}
{"input": "Display a long listing of all the files/directories under current directory tree that are newer than the file 'Nov' by modification time", "output": "find . -newer Nov -ls"}
{"input": "Save the network node hostname append with '-', the current date and '.txt' into variable 'filename'", "output": "filename=\"$(uname -n)-$(date +%F).txt\""}
{"input": "Print numbers from 1 to the number in variable \"$1\"", "output": "seq $1"}
{"input": "Disables shell option 'compat31'.", "output": "shopt -u compat31"}
{"input": "Write the last line of \"$file\" to standard output and remove it from \"$file\"", "output": "tail -n 1 \"$file\" | tee >(wc -c | xargs -I {} truncate \"$file\" -s -{})"}
{"input": "search for all regular/normal files in current folder and display all the files which contain 16 lines", "output": "find . -type f -print0 | xargs -0 grep -cH '.' | grep ':16$'"}
{"input": "recursively change owner of the directory /Users/xxx/Library/Developer/Xcode/Templates and all files to user xxx", "output": "sudo chown -R xxx /Users/xxx/Library/Developer/Xcode/Templates"}
{"input": "find all the files ending with \"clj\" in the current folder and search for a pattern", "output": "find . -name *.clj | xargs grep -r resources"}
{"input": "find all the files ending with \".coffee\" in the current folder and search for the first occurence of the word \"re\" in each line", "output": "find . -name '*.coffee' -exec awk '/re/ {print;exit}' {} \\;"}
{"input": "Find files modified in last 7 days", "output": "find . -mtime -7 -type f"}
{"input": "Find all files in entire file system which are larger than 20000KB", "output": "find / -type f -size +20000k"}
{"input": "Find symlinks in the current directory tree", "output": "find . -type l | xargs ls -ld"}
{"input": "Prints long listing of directories \"./my dir\" and \"./anotherdir\" sorted from oldest to newest, with appended indicators.", "output": "$ ls -Fltr \"./my dir\" \"./anotherdir\""}
{"input": "Extract two semicolon-separated fields from specified strings, output them separated by a space.", "output": "echo \"bla@some.com;john@home.com\" | awk -F';' '{print $1,$2}'"}
{"input": "Search the regular files of the current directory tree for string \"foo\"", "output": "find . -type f -exec grep \"foo\" '{}' \\;"}
{"input": "find all the instances of the file \"foo.txt\" in the current folder and move them to another folder", "output": "find . -name foo.txt 1> tmpfile && mv `cat tmpfile` path/to/some/dir && rm tmpfile"}
{"input": "Replace all sequence of 'blank' characters in file 'log' with a single occurence of such symbol and print space-separated fields of each string but first two fields", "output": "cat log | tr -s [:blank:] |cut -d' ' -f 3-"}
{"input": "Search the given $directory for files with permissions stored in $permissions", "output": "find \"$directory\" -perm \"$permissions\""}
{"input": "Mount \"/path/to/device\" on \"/path/to/mount/location\" as a vfat filesystem and a loop back device", "output": "mount /path/to/device /path/to/mount/location -o loop -t vfat"}
{"input": "Lists all subdirectories in the current directory with the trailing slash removed", "output": "ls -d1 */ | tr -d \"/\""}
{"input": "find all the text files in the current folder", "output": "find . -name \"*.txt\" -print"}
{"input": "Delete all files in directory $DIR that have not been accessed in at least 5 days", "output": "find \"$DIR\" -type f -atime +5 -exec rm {} \\;"}
{"input": "Installs package group \"MYSQL Database Client\", answering 'yes' on all questions.", "output": "yum -y groupinstall \"MYSQL Database Client\""}
{"input": "Find image files and move them to the pictures directory", "output": "find ~/Desktop -name \u201c*.jpg\u201d -o -name \u201c*.gif\u201d -o -name \u201c*.png\u201d -print0 | xargs -0 mv \u2013target-directory ~/Pictures"}
{"input": "find all the files that have not been modified in the last (24*7) hours.", "output": "find . -mtime +7"}
{"input": "find all regular/normal files which have execute permission in current folder and copy them to another folder", "output": "cp `find -perm -111 -type f` /usr/local/bin"}
{"input": "Search the /root directory recursively for the regular file named \"myfile\"", "output": "find /root/ -name myfile -type f"}
{"input": "Reverse the order of lines in \"myfile.txt\" using BSD \"tail\" command", "output": "tail -r myfile.txt"}
{"input": "search for a word in all the php files in the current folder and display the matching lines", "output": "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\;"}
{"input": "Find recursively all files that match \"pattern\" starting from the directory \"dir\"", "output": "find dir -name \"pattern\" 2>/dev/null"}
{"input": "display all jpg files in the current folder", "output": "find -iname \"*.jpg\""}
{"input": "print value of the variable $PROJ_PATH of the kenneth system user environment", "output": "su -l kenneth -c 'echo $PROJ_PATH'"}
{"input": "Find all files under current directory and print only the filenames (not paths)", "output": "find . -type f -execdir echo '{}' ';'"}
{"input": "Filter /path/to/logfile for any lines containing the specified date, paging interactively through the output.", "output": "grep 'Nov 12 2012' /path/to/logfile | less"}
{"input": "Find all files/directories named 'file' without descending into directories with the same name under current directory tree", "output": "find -name file -prune"}
{"input": "display all the files  in the current folder which have colon in their name", "output": "find . -name \"*:*\""}
{"input": "display all the files in the folder /home which have the setuid bit enabled", "output": "find /home -perm /u=s"}
{"input": "search for the directory \"uploads\" in current folder and change the permission of the folder and all the files to 755", "output": "find . -type d -name 'uploads' -print0 | xargs -0 chmod -R 755"}
{"input": "Delete all the 'test' directories from all directories under maximum 1 level down the current directory that contain directories named 'test' and 'live'", "output": "find -maxdepth 1 -type d -exec sh -c \"cd {} && [ -d test ] && [ -d live ] && rm -rvf test \" {} \\;"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree, skipping SVN directories", "output": "find . -type f -path '*/.svn*' -prune -o -print | perl -ne 'print $1 if m/\\.([^.\\/]+)$/' | sort -u"}
{"input": "Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and saves location of such files to 'directories' variable.", "output": "directories=$(diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq)"}
{"input": "Copies all files like \"*foo*\" under the current directory to the '/your/dest' directory.", "output": "find . -name \"*foo*\" | sed -e \"s/'/\\\\\\'/g\" -e 's/\"/\\\\\"/g' -e 's/ /\\\\ /g' | xargs cp /your/dest"}
{"input": "Split \"file.txt\" excluding the first line into files of at most 4 lines each and with a prefix \"split_\"", "output": "tail -n +2 file.txt | split -l 4 - split_"}
{"input": "Export full path of command \"git\" to variable \"git\"", "output": "export git=$(which git)"}
{"input": "Prints day of first Tuesday in a month.", "output": "cal | awk 'NR>2 && NF>4 {printf \"%02d\\n\",$(NF-4);exit}'"}
{"input": "Archive directory \"symdir\" to \"symdir_output\" preserving symbolic links.", "output": "rsync symdir/ symdir_output/ -a --copy-links -v"}
{"input": "find all the files in the current folder that have been modified in the last 7 days", "output": "find -mtime -7 -daystart"}
{"input": "Counts lines in each of *.php files in a current folder and subfolders and prints total count as well.", "output": "find . -name \"*.php\" | xargs wc -l"}
{"input": "display the name and size of all the regular/normal files  in the current folder which are bigger than 50MB", "output": "find . -type f -size +50000k -exec ls -lh {} \\; | awk '{ print $9 \": \" $5 }'"}
{"input": "Print common lines in file \"a\" and \"b\"", "output": "comm -12 <(sort < a) <(sort < b)"}
{"input": "Remove the first 7 characters of every line in the output of \"history\"", "output": "history | cut -c 8-"}
{"input": "Counts all files in a current folder and in subfolders one-level lower, and sort folder list by number of files within.", "output": "find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo  $(find {} | wc -l) {}' | sort -n"}
{"input": "Search all .java files residing in the current directory tree and modified at least 7 days ago for string \"swt\"", "output": "find . -name '*.java' -mtime +7 -print0 | xargs -0 grep 'swt'"}
{"input": "find all the files in the folder /work which belong to the user \"olivier\"", "output": "find /work -user olivier -print"}
{"input": "display all regular files in current folder which are atleast 1 level deep and search in the alphabetical order of the directories", "output": "find -ds . -mindepth 1 -type f -print0; printf '\\0';"}
{"input": "Recursively copies 'src' to 'dest' preserving overwriting the existing files.", "output": "cp -nr src_dir dest_dir"}
{"input": "find all readme files in a folder", "output": "find /usr/share/doc -name README"}
{"input": "Delete line 2 in numbered file \"file\" and renumber", "output": "grep -v '^2 ' file | cut -d' ' -f2- | nl -w1 -s' '"}
{"input": "find regular files under the current directory, whose name ends in .mbox, piping the output to the GNU Parallel command that will rename each file to not have a file extension.", "output": "find . -type f -wholename \\*.mbox -print0 | parallel -0 mv {} {.}"}
{"input": "Get IP address of your SSH session", "output": "who am i --ips|awk '{print $5}' #ubuntu 14"}
{"input": "split file t.txt into pieces per 30000000 lines named as \"t.NN\" with numeric suffix", "output": "split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t"}
{"input": "Prints current directory name", "output": "pwd | grep -o \"\\w*-*$\""}
{"input": "search for all html files in current folder folder and create a zip file of all these files", "output": "find . -name \"*.html\" -print | zip all-html-files.zip -@"}
{"input": "Search for the regex expaned by the variable $SEARCH in all regular files under $DIR directory tree", "output": "find \"$DIR\" -type f -exec grep \"$SEARCH\" {} \\;"}
{"input": "display all the files in the folder \"/Users/Me/Desktop\" which have read permission to them", "output": "find /Users/Me/Desktop -readable"}
{"input": "find all the files that are not modified in the last 7 days", "output": "find -daystart -mtime +7"}
{"input": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"", "output": "find . -name \\*.c -exec grep wait_event_interruptible {} +"}
{"input": "Runs `file' on every file in or below the current directory.", "output": "find . -type f -exec file '{}' \\;"}
{"input": "Find all files/directories that do not contain 'photo' in their names under current directory tree", "output": "find . ! -name \"*photo*\""}
{"input": "List the largest file prefixed by its size in bytes of all files under the current directory", "output": "find . -type f -name '*.gz' -printf '%s %p\\n'|sort -nr|head -n 1"}
{"input": "Finds $a pattern in a $b string, and returns exit code 0 if found, suppressing any visible output.", "output": "echo $b|grep -q $a"}
{"input": "Find files under [directory] that match 'pattern_to_INCLUDE' in their names without descending into directories that match 'pattern_to_exclude' and 'another_pattern_to_exclude', then search for 'pattern' in those files", "output": "find [directory] -name \"pattern_to_exclude\" -prune -o -name \"another_pattern_to_exclude\" -prune -o -name \"pattern_to_INCLUDE\" -print0 | xargs -0 -I FILENAME grep -IR \"pattern\" FILENAME"}
{"input": "display ten files in the current directory", "output": "find | head"}
{"input": "Find files readable only by the group", "output": "find . -perm g=r -type f -exec ls -l {} \\;"}
{"input": "Redirect stderr to stdout and write to the console and \"/dev/null\"", "output": "xxx |& tee /dev/null"}
{"input": "display all the regular files in the current folder that are bigger than 10KB", "output": "find . -type f -size +10k"}
{"input": "display all the files  in the current folder excluding the perl files", "output": "find . -not -name \"*.pl\""}
{"input": "replace a word in all the regular/normal files in the current folder", "output": "find /path/to/start/from/ -type f | xargs perl -pi -e 's/applicationX/applicationY/g'"}
{"input": "Find all regular files named 'Waldo' under ~/Books directory tree", "output": "find ~/Books -type f -name Waldo"}
{"input": "search for php files  in current directory and search for a word in all these files", "output": "find -name '*.php' -exec grep -iq \"fincken\" {} \\; -exec grep -iq \"TODO\" {} \\; -print"}
{"input": "Display hardware platform, ie. x86_64 even if current kernel uses 32-bit addressing.", "output": "uname -i"}
{"input": "create a tar ball of all pdf files in current folder", "output": "find . -name '*.pdf' -print0 | tar czvf pdf.tar --null -T -"}
{"input": "Find files named \"ppp.conf\" in the /etc directory tree", "output": "find /etc -name ppp.conf"}
{"input": "Find every vim undo file in the current directory tree", "output": "find -type f -iname '*.un~'"}
{"input": "Find all files named \"test2\" in the current directory", "output": "find -name test2 -prune"}
{"input": "Make directories \"3/foo\", \"3/bar\", and \"3/baz\"", "output": "mkdir 3/foo 3/bar 3/baz"}
{"input": "find all the JSON files in the directory \"PROD/140725_D0\" and send them as input to the python script \"/tmp/test.py\"", "output": "find /PROD -type d -execdir sh -c 'for f in *.json; do /tmp/test.py \"$f\"; done' \\;"}
{"input": "Find all files under current directory that were modified more than 7 days ago and delete them", "output": "find . -type f -mtime +7 -print0 | xargs    -0 rm"}
{"input": "Create a symbolic link in \"/bar/tmp/\" for each file in directory \"/foo\" that does not start with \"runscript\"", "output": "find /foo -maxdepth 1 -type f ! -name 'runscript*' -exec ln -s {} /bar/tmp/ \\;"}
{"input": "Sum the total content size of the extracted files in \"archive.tar.gz\"", "output": "tar tzvf archive.tar.gz | sed 's/ \\+/ /g' | cut -f3 -d' ' | sed '2,$s/^/+ /' | paste -sd' ' | bc"}
{"input": "Returns unsuccessful exit code on each found file like '*tests*' within current directory.", "output": "find . -name '*tests*' -print -exec false \\;"}
{"input": "find all the files that have been modified exactly 2 days ago", "output": "find -mtime 2"}
{"input": "Read a line from standard input into variable \"password\" without echoing the input", "output": "read -s password"}
{"input": "split compressed content of the file www into pieces per 1073741824 bytes named as \"backup.tar.NNN\"", "output": "tar czf - www|split -b 1073741824 - www-backup.tar."}
{"input": "Send ping requests to hostname specified by variable \"c\" for 1 second.", "output": "ping -w 1 $c"}
{"input": "display a long listing of all images with the name \"articles\" in the current folder", "output": "find . -iname \"Articles.jpg\" -exec ls -l {} \\;"}
{"input": "Finds binaries names in a list of running processes and prints containing folder of each binary.", "output": "ps aux | awk '{print $11}' | grep -x -e \"/.*\" | xargs -I file dirname \"file\""}
{"input": "Find all files and directories in the current directory with \"linkin park\" in their names and copy them to /Users/tommye/Desktop/LP, preserving path hierarchy", "output": "find . -iname \"*linkin park*\" > temp;rsync -arhv --files-from=temp  /Users/tommye/Desktop/LP;rm temp"}
{"input": "Find a file/directory named modules under current directory and exit with the number of files/directories named 'modules'  found in this path", "output": "find . -name modules -exec sh -c 'exit $(find {} -name modules|grep -n \"\"|tail -n1|cut -d: -f1)' \\;"}
{"input": "display all executable files in the folder /home", "output": "find /home -perm /a=x"}
{"input": "Find CSS files omitting results containing \"CVS\"", "output": "find . \\! -path \"*CVS*\" -type f -name \"*.css\""}
{"input": "Counts lines of /dir/file.txt file.", "output": "wc -l /dir/file.txt"}
{"input": "Replace all ocurrences of '<title>' with 'sblmtitle\\n<title>' in all the regular files with '.html' extension under current directory tree", "output": "find ./ -type f -name '*.html' | xargs sed -i 's/<title>/sblmtitle\\n<title>/g'"}
{"input": "Add executable permission to \"rr.sh\"", "output": "chmod +x rr.sh"}
{"input": "Print your/dir if it's empty", "output": "find \"your/dir\" -prune -empty"}
{"input": "Unzip all files that match \"*.gz\" in the current directory and subdirectories to stdout and search for \"test\"", "output": "find . -name \"*.gz\" -exec zcat \"{}\" + |grep \"test\""}
{"input": "Merge lines from \"file_1\" and \"file_2\" and format the output as a table with tab separators", "output": "paste file_1 file_2 | column -s $'\\t' -t"}
{"input": "Count used space on device \"/dev/sda\" in megabytes", "output": "df -h -B 1M | grep dev/sda | tr -s ' '| cut -d' ' -f3 |python -c \"import sys; print sum([int(num) for num in sys.stdin.readlines()])\""}
{"input": "Print the minimum transmission time of 10 ping requests to \"google.com\" from cygwin", "output": "ping google.com -n 10 | grep Minimum | awk '{print $3}' | sed s/,//"}
{"input": "Take a file path from standard input and remove it.", "output": "xargs -I '{}' rm '{}'"}
{"input": "delete all the mp3 files in the home folder", "output": "find /home/ -exec grep -l \u201cmp3\u201d {} \\; | xargs rm"}
{"input": "Replace \"dummyvalue\" with the system IP address in \"filename\"", "output": "sed -i s/'dummyvalue'/$(hostname -I | head -n1 | awk '{print $1;}')/g filename"}
{"input": "Use \"$BYTES\" amount of RAM showing the current and total rate of consumption", "output": "yes | tr \\\\n x | head -c $BYTES | pv | grep n"}
{"input": "Print each logged in user's full name", "output": "finger | awk 'NR>1{print $2,$3}'"}
{"input": "Find all directories named postgis-2.0.0 under / directory", "output": "sudo find / -type d -name \"postgis-2.0.0\""}
{"input": "Find all directories and for each of them, print an mv command to move it to /new/location", "output": "find . -type d   -execdir echo /bin/mv {} /new/location \\;"}
{"input": "Print all files in the current directory tree as a comma separated list", "output": "find . -type f | paste -d, -s"}
{"input": "find all symbolic links under /usr", "output": "find /usr -type l"}
{"input": "run command \"cd /home/$USERNAME/$PROJECT ; svn update\" as user named as value of the variable $USERNAME", "output": "su -c \"cd /home/$USERNAME/$PROJECT ; svn update\" -m \"$USERNAME\""}
{"input": "create a symbolic link with absolute path \"/cygdrive/c/Users/Mic/mypics\" to file \"/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/\"", "output": "ln -sf '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/' /cygdrive/c/Users/Mic/mypics"}
{"input": "Find all files/directories starting with 'app-' and ending with '.log' in their names and have been modified in the last 5 minutes", "output": "find /var/log/crashes -name app-\\*\\.log -mmin -5"}
{"input": "Revert $string value and print first 20 space-separated fields", "output": "echo $string | rev | cut -d ' ' -f -20"}
{"input": "Checks that 'monit' user is in 'www-data' group.", "output": "groups monit |grep www-data"}
{"input": "Create thumbnails from the first page of each PDF files under /path/to/dir", "output": "find /path/to/dir -name '*.pdf' -exec convert -thumbnail x80 {}[0] {}-thumb.png \\;"}
{"input": "Remove each unique item listed on standard input and do nothing if empty", "output": "sort | uniq -u | xargs -r rm"}
{"input": "Find all dir* files/directories under parent", "output": "find parent -name dir*"}
{"input": "List all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "find . -type d -links 2"}
{"input": "List all existing environment variables in the current shell.", "output": "env | awk -F= '/[a-zA-Z_][a-zA-Z_0-9]*=/ { if (!system(\"[ -n \\\"${\" $1 \"+y}\\\" ]\")) print $1 }' | sort | uniq"}
{"input": "search for the file \"file\" in current folder and save the output to the same file", "output": "find -name file -fprint file"}
{"input": "Find all directories under 'test' directory tree that match the regex '.*/course[0-9.]*' in their paths", "output": "find test -type d -regex '.*/course[0-9.]*'"}
{"input": "Recursively changes group ownership of everything in '/home/secondacc/public_html/community/' to 'fancyhomepage'.", "output": "chgrp -R fancyhomepage /home/secondacc/public_html/community/"}
{"input": "Find all files which have 211028 inode number in current directory then Locating and renaming unprintable directories", "output": "find . -inum 211028 -exec mv {} newname.dir \\;"}
{"input": "Find all *.srt files under directory named 'working' and show the first one found", "output": "find working -type f -name \"*.srt\" | head -1"}
{"input": "Read a line from standard input", "output": "read"}
{"input": "Search the current directory tree for filenames matching the pattern '[mM][yY][fF][iI][lL][eE]*'", "output": "find . -name '[mM][yY][fF][iI][lL][eE]*'"}
{"input": "Search the path given as the $absolute_dir_path variable for regular files", "output": "find \"$absolute_dir_path\" -type f -print0"}
{"input": "find all the text files in the home folder and display the first lines. Save the output to the file report.txt", "output": "find $HOME/. -name *.txt -exec head -n 1 -v {} \\; > report.txt"}
{"input": "Find all files/directories under current directory with a Depth-First search", "output": "find dir -depth"}
{"input": "display long listing of all the regular hidden files in the folder Musica", "output": "find M\u00fasica/* -type f -name \".*\" -exec ls -l {} \\;"}
{"input": "Kill a running screen session", "output": "screen -X -S SCREENID kill"}
{"input": "Display a garbled ascii-art of a cow saying \"hello\" backwards", "output": "cowsay \"hello\" | rev"}
{"input": "ssh into localhost on port 10022", "output": "ssh -p 10022 localhost"}
{"input": "find file end with  '.txt' in current directory.", "output": "find . -name \"*.txt\""}
{"input": "Installs 'firefox' package.", "output": "yum install firefox"}
{"input": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "output": "find data/ -name filepattern-*2009* -exec tar uf 2009.tar {} ;"}
{"input": "Removes all empty folders under current folder.", "output": "find . -type d -empty -exec rmdir \"{}\" \\;"}
{"input": "Find all *.xml files under current directory", "output": "find -name *.xml"}
{"input": "Search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file.", "output": "find / -fstype ext3 -name zsh -ls"}
{"input": "Verbosely compresses all files on third and fourth depth level keeping original files in place.", "output": "bzip2 -kv */*/*/*"}
{"input": "List the current directory recursively ignoring the \"dir1\" subdirectory", "output": "find . -path ./dir1  -prune -o -print"}
{"input": "Change to folder where the oracle binary is.", "output": "cd $(dirname $(which oracle))"}
{"input": "Find SGID files", "output": "find / -perm +2000"}
{"input": "find all the files in the folder Musica and display them in a single line null separated", "output": "find M\u00fasica/* | egrep -Z \\/\\\\. | xargs -0 echo"}
{"input": "display a long list of all the directories which have files ending with \".todo\"", "output": "find \"$STORAGEFOLDER\" -name .todo -printf '%h\\n' | xargs ls -l"}
{"input": "grep only regular files smaller than 10KB with the regex '\\bsomeknowncontent\\b'", "output": "find / -type f -size -10k 2>/dev/null -print0 | xargs -0 egrep '\\bsomeknowncontent\\b'"}
{"input": "Counts lines in each *.php file.", "output": "find . -name '*.php' -type f | xargs wc -l"}
{"input": "search for a function in all python files in the current folder", "output": "find . -name '*.py' | xargs grep some_function"}
{"input": "display a long listing of all the files in the current folder which have been modified in the last 24 hours", "output": "find . -mtime -1 | xargs ls -ld"}
{"input": "Search the current directory recursively for regular files last modified more than 2 days ago", "output": "find . type -f -mtime +2"}
{"input": "Copy the directory hierarchy of the current directory to \"destdir\"", "output": "find . -type d | cpio -pdvm destdir"}
{"input": "display all the regular/normal files in the home folder that have been modified in the last 1 day (from the start of day ie, from 00:00 )", "output": "find ~/ -daystart -type f -mtime 1"}
{"input": "recursively change owner of the directory /usr/lib/node_modules/ to the current user", "output": "sudo chown -R $(whoami) /usr/lib/node_modules/"}
{"input": "Search the current directory tree for regular files last changed more than 14 days ago", "output": "find -type f -ctime +14"}
{"input": "Find all files and directories last modified less than a day ago and copy to \"../changeset\" creating directories as needed", "output": "find * -mtime -1 -daystart -print0 | cpio -pd0 ../changeset"}
{"input": "Display only mimetype of myfile.txt, without the filename.", "output": "file -bi myfile.txt"}
{"input": "search for MP3 files in the current folder and subfolders except in dir1 subfolder.", "output": "find ! -path \"dir1\" -iname \"*.mp3\""}
{"input": "List each unique case insensitive character in \"file\" prefixed by number of occurrences and sorted from most frequent to least frequent", "output": "grep -o . filename | tr '[:upper:]' '[:lower:]' | sort | uniq -c | sort -nr"}
{"input": "Prints directory where the executing script ($0) is located.", "output": "$(dirname $0)"}
{"input": "Locate file \"file1\"", "output": "find -name file1"}
{"input": "Find all *.txt files/directories under current directory", "output": "find . -name \"*.txt\""}
{"input": "Immediately terminate all processes whose command or arguments match \"myProcessName\"", "output": "ps -ef | grep myProcessName | grep -v grep | awk '{print $2}' | xargs kill -9"}
{"input": "Delete all lines matching \"pattern to match\" in \"./infile\" and make a backup with suffix \".bak\"", "output": "sed -i.bak '/pattern to match/d' ./infile"}
{"input": "Find files/directories named 'file.txt' in the path '/usr/lib/important/'", "output": "find / -path /usr/lib/important/*/file.txt"}
{"input": "Search the current directory tree for *bash* files printing them on a single line", "output": "find . -name \"*bash*\" | xargs"}
{"input": "Remove .DS_Store from the repository you happen to stage by mistake", "output": "find . -name .DS_Store -exec git rm --ignore-unmatch --cached {} +"}
{"input": "Remove all characters except \";\" and digits from standard input", "output": "tr -cd \";0-9\""}
{"input": "Change permissions of all files ending in \".php\" under the current directory to 755 and print a count of modified files", "output": "find . -name \"*.php\" -exec chmod 755 {} \\; -exec /bin/echo {} \\; | wc -l"}
{"input": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"arguments\"", "output": "gzip -d --stdout file.gz | bash /dev/stdin \"arguments\""}
{"input": "Search directory tree `foo' for files named `Headers'", "output": "find foo -name Headers"}
{"input": "Running javascript program \"app\" with node outputs the name of a directory, go into that directory.", "output": "cd \"$(node app)\""}
{"input": "Prints random line from file $FILE.", "output": "sort --random-sort $FILE | head -n 1"}
{"input": "Save the absolute path of the directory of the current script to variable \"DIR\"", "output": "DIR=$(dirname \"$(readlink -f \\\"$0\\\")\")"}
{"input": "find all the \".flac\" files in the current folder and create a sub shell and convert these to mp3 with 128k bit rate", "output": "find -name \"*.flac\" -exec bash -c 'ffmpeg -i \"{}\" -y -acodec libmp3lame -ab 128k \"${0/.flac}.mp3\"' {} \\;"}
{"input": "display long listing of all files in the current directory whose size is 24 or 25 bytes.", "output": "find . -size -26c -size +23c -ls"}
{"input": "Check if the contents of file \"subset\" is a subset of file \"set\"", "output": "comm -23 <(sort subset | uniq) <(sort set | uniq) | head -1"}
{"input": "Display 798 backwards", "output": "echo 798|rev"}
{"input": "count all the html files having a specifc word in a folder.", "output": "find /usr/src -name \"*.html\" -exec grep -l foo '{}' ';' | wc -l"}
{"input": "Print IP addresses of the host name", "output": "hostname  -i"}
{"input": "Find recursively all empty directories in the current directory", "output": "find -type d -empty"}
{"input": "Recursively set all permissions under \"/folder\" to 755", "output": "chmod 755 /folder -R"}
{"input": "Calculate the total disk usage for each \".jpg\" file on the system and prepend the system host name to the output", "output": "find \"$PWD\" / -iname '*.jpg' -exec du -s {} + | sed \"s/^/$(hostname): /\""}
{"input": "Copy the entire \"/lib\" and \"/usr\" directory including symlinks from \"pi@192.168.1.PI\" to \"$HOME/raspberrypi/rootfs\" and delete files after the transfer", "output": "rsync -rl --delete-after --safe-links pi@192.168.1.PI:/{lib,usr} $HOME/raspberrypi/rootfs"}
{"input": "Find all broken symlinks under current directory", "output": "find . -type l -xtype l"}
{"input": "Copy the owner and group of \"originalfile\" to \"newfile\"", "output": "chown `stat -c %U originalfile`:`stat -c %G originalfile` newfile"}
{"input": "Print the list of files in the current directory tree ignoring .svn, .git, and other hidden directories", "output": "find . -type f -not -path '*/\\.*'"}
{"input": "Find all files matching shell pattern \"foo/bar\" in the foo directory tree", "output": "find foo -path foo/bar -print"}
{"input": "change the permission of all php files in current folder", "output": "find . -name \"*.php\" -exec chmod 755 {} \\;"}
{"input": "display all the php files in the current folder which do not have the permission 644", "output": "find . -type f -name \"*.php\" ! -perm 644"}
{"input": "List all files/directories in entire file system", "output": "find / -print"}
{"input": "move all files in the current folder another folder and do not move the files in the sub folder", "output": "find . -name \"*\" -maxdepth 1 -exec sh -c 'mv \"$@\" \"$0\"' /home/foo2/bulk2 {} +"}
{"input": "Save in QUEUE_PIDS variable only pid numbers that stored in $NEW_PIDS variable", "output": "QUEUE_PIDS=$(comm -23 <(echo \"$NEW_PIDS\" | sort -u) <(echo \"$LIMITED_PIDS\" | sort -u) | grep -v '^$')"}
{"input": "Prints last modified file in a current folder with modification time.", "output": "find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\\n'| sort -n | tail -n1"}
{"input": "Find all directories under ~/code without descending into hidden directories and print them appended with : (colon)", "output": "find ~/code -name '.*' -prune -o -type d -printf ':%p'"}
{"input": "find all the jpg files in a directory.", "output": "find /home -name '*.jpg"}
{"input": "Search all the .c and .h files in the current directory tree for \"expr\"", "output": "find -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "Delete all files with inode number 804180", "output": "find -inum 804180 -exec rm {} \\"}
{"input": "Recursively counts non-blank lines in all files in a current folder, that match regex '\\.php|\\.as|\\.sql|\\.css|\\.js', but skip folders './pma', './blog', './punbb', './js/3rdparty' and files like '*.svn'.", "output": "find . -path './pma' -prune -o -path './blog' -prune -o -path './punbb' -prune -o -path './js/3rdparty' -prune -o -print | egrep '\\.php|\\.as|\\.sql|\\.css|\\.js' | grep -v '\\.svn' | xargs cat | sed '/^\\s*$/d' | wc -l"}
{"input": "Find directories owned by user news with permissions 775", "output": "find / -user news -type d -perm 775 -print"}
{"input": "find all the normal/regular files in the current folder which have been modified two days ago and display a long listing of them", "output": "find . -type f -mtime 2 -mtime -3 -daystart -exec ls -l {} \\;"}
{"input": "search for all the files in the current folder which have not been modified in the last 7 days and save the output to a file", "output": "find -mtime +7 -print > found.lst"}
{"input": "Copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names", "output": "find /source_path -name \\*.data  | while read -r filename; do cp \"${filename}\" \"$(printf \"%s\\n\" \"${filename}\" | sed \"s/^.*[/]\\(category[^/]*\\)[/]\\(.*[.]data\\)$/\\/target_path\\/\\1_\\2/\")\"; done"}
{"input": "Move *wp-admin/index.php files under /var/www/  to ./index_disabled", "output": "find /var/www/ -path '*wp-admin/index.php' -exec mv {} $(dirname {})/index_disabled"}
{"input": "display long listing of first 10 directories in the current folder", "output": "find . -type d -ls | head"}
{"input": "Find all * * regular files under current directory", "output": "find .  -type f -name \"* *\""}
{"input": "Find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions", "output": "find / -maxdepth 1 -xdev -type f -exec grep -Zli \"stringtofind\" {} +"}
{"input": "change the owner and group of all the directories in the current folder and /home/admin/data/ to admin & admin", "output": "find . /home/admin/data/ -type d -exec chown admin.admin {} \\;"}
{"input": "Find all files under and below /dir that were accessed less than 60 minutes ago", "output": "find /dir -amin -60"}
{"input": "List the entire cron job list of user \"apache\".", "output": "crontab -u apache -l"}
{"input": "Find only files under /etc with the size of 100k-150k", "output": "find /etc -size +100k -size -150k"}
{"input": "Search the /home/www directory tree for regular files", "output": "find /home/www -type f"}
{"input": "List the unique second \"/\" delimited field of every line from standard input prefixed by the number of occurrences", "output": "cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c"}
{"input": "search for the files \"foo.txt\" in the current folder", "output": "find . -name foo.txt"}
{"input": "Executes 'cd /' in a subshell created by a pipeline of built-in function 'true'.", "output": "true | cd /"}
{"input": "Extract, sort and print only group names from /etc/group.", "output": "cut -d: -f1 /etc/group | sort"}
{"input": "Remove any file containing string \"GUI\"", "output": "find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f"}
{"input": "Make directory \"subdirectory\"", "output": "mkdir subdirectory"}
{"input": "List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin", "output": "find . -name bin -prune -o -name src -prune -o -type f -print | xargs egrep -il '^From:.*unique sender'"}
{"input": "search for \"some_function\" in all the python files in the current directory", "output": "find . -name \\*.py | xargs grep some_function"}
{"input": "search for a word in all the regular files in the current folder without traversing the sub directories .", "output": "find -maxdepth 1 -type f | xargs grep -F 'example'"}
{"input": "Find files under /some/path that are not executable", "output": "find /some/path -type f ! -perm -111 -ls"}
{"input": "Create a full path symbolic link \"$newlink\" from a relative path symbolic link \"$origlink\"", "output": "ln -s $(readlink -f $origlink) $newlink"}
{"input": "Print out the contents of all *.txt files in the home directory", "output": "find ~/ -name '*.txt' -exec cat {} ;"}
{"input": "Delete all empty files in the current directory tree", "output": "find . -type f -empty -delete"}
{"input": "Continuously write \"UUUUUUUUUUUUUUUUU\" without newlines to \"/dev/to/overwrite\"", "output": "yes 'UUUUUUUUUUUUUUUUU' | tr -d '\\n' > /dev/to/overwrite"}
{"input": "Execute script /path/to/filecopy.sh passing all JPG files found under the \"$SOURCE\" directory and below as arguments", "output": "find \"$SOURCE\" -type f -iname '*.jpg' -exec /path/to/filecopy.sh {} +"}
{"input": "Show manual of the find utility", "output": "man find"}
{"input": "Print IP addresses of the host name", "output": "hostname -I"}
{"input": "Report all files in /mydir1 and /mydir2 larger than 2000 blocks and accessed in over 30 days", "output": "find /mydir1 /mydir2 -size +2000 -atime +30 -print"}
{"input": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.", "output": "ls -hal /root/ > /root/test.out"}
{"input": "Find all files/directories with '.txt' extension under '/home' directory tree that are greater than 100KB in size", "output": "find /home -name \"*.txt\" -size +100k"}
{"input": "List all files without descending into subdirectories", "output": "find * -type f -print -o -type d -prune"}
{"input": "Print all directories under $root appending a : (colon) at the end of each path without descending into directories matching the pattern .[a-z]*", "output": "find \"$root\" -name \".[a-z]*\" -prune -o -type d -printf '%p:'"}
{"input": "Exclude directory from find . command", "output": "find ./ -path ./beta/* -prune -o -iname example.com -print"}
{"input": "Find all file.ext files/directories under /home/kibab directory and print . for each of them", "output": "find /home/kibab -name file.ext -exec echo . ';'"}
{"input": "Find files that are writable by both the \u201cother\u201d and the group", "output": "find plsql -type f  -perm -220 -exec ls -l {} \\; 2>/dev/null"}
{"input": "find all the files in current directory of size greater than 10MB and less than 20 MB.", "output": "find . -size +10M -size -20M"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -print0|xargs -0 ls -drt|tail -n 1"}
{"input": "Find \"*prefs copy\" files in the /mnt/zip directory tree and remove them with prompting", "output": "find /mnt/zip -name \"*prefs copy\" -print0 | xargs -p rm"}
{"input": "display all files in the boot directory prepending each filename with STDERR, STDOUT accordingly", "output": "(find /boot | sed s'/^/STDOUT:/' ) 3>&1 1>&2 2>&3 | sed 's/^/STDERR:/'"}
{"input": "find all files that have been used more than two days since their status was last changed", "output": "find -used +2"}
{"input": "Find every file under the directory /var/spool that was modified more than 60 days ago.", "output": "find /var/spool -mtime +60"}
{"input": "list all links from / that point to nothing", "output": "find / -type l -print | perl -nle '-e || print';"}
{"input": "set alias \"cd-\" for command 'cd $(history -p !!:1)'", "output": "alias cd-='cd $(history -p !!:1)'"}
{"input": "Rename \"new\" to \"old\" and backup to \"old.old\" if \"old\" exists", "output": "mv new old -b -S .old"}
{"input": "Run vi with all btree*.c files under current directory", "output": "vi $(find . -type f -name 'btree*.c')"}
{"input": "Find the passwd file under root and two levels down", "output": "find / -maxdepth 3 -name passwd"}
{"input": "Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree", "output": "find /var/log -group adm -name \"*.log\""}
{"input": "Connect to host \"$USER_AT_HOST\" in master mode in the background without executing any commands and set the ControlPath to \"$SSHSOCKET\"", "output": "ssh -M -f -N -o ControlPath=\"$SSHSOCKET\" \"$USER_AT_HOST\""}
{"input": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script", "output": "find $1 -name \"$2\" | grep -v '/proc' | xargs grep -Hn \"$3\" {} \\;"}
{"input": "Save number of strings with $expression pattern in 'foo.txt' to 'big_lines' variable.", "output": "big_lines=`cat foo.txt | grep -c \"$expression\"`"}
{"input": "Recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, ignoring binary files.", "output": "find / -type f -exec grep -l \"text-to-find-here\" {} \\;"}
{"input": "Convert all .txt files under and below the current directory from the DOS format to Unix", "output": "find . -name *.txt | xargs dos2unix"}
{"input": "Set up a local SSH tunnel from port 80 to port 3000", "output": "sudo ssh $USERNAME@localhost -L 80:localhost:3000 -N"}
{"input": "Synchronize via ssh \"user@source-server:/somedirA/\" to \"somedirB/\" with compressed data during transmission and display progress", "output": "rsync -avz -e ssh --progress user@source-server:/somedirA/ somedirB/"}
{"input": "Returns exit status 0.", "output": "foo=$(false)$(true)"}
{"input": "Find all files in the home directory with open permissions", "output": "find ~ -perm 777"}
{"input": "find all normal/regular files in the folder \"//path/to/source/Directory\" and calculate the md5sum of them and save the output to  file Output.txt", "output": "find //path/to/source/Directory -type f -exec md5sum {} + | awk '{print $0}' > Output.txt"}
{"input": "Delete all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents", "output": "find /path/to/input/ -type f -exec grep -qiF spammer@spammy.com \\{\\} \\; -delete"}
{"input": "find all the regular/normal files in the current folder and do not search in the sub directories", "output": "find . -maxdepth 1 -type f"}
{"input": "list *.pdf files under the /home/user/Desktop directory.", "output": "find /home/user/Desktop -name '*.pdf'"}
{"input": "Print only alphanumeric values from \"/dev/urandom\"", "output": "cat /dev/urandom | tr -dc 'a-zA-Z0-9'"}
{"input": "List all *.txt files/directories under current directory", "output": "find . -name \"*.txt\" -print"}
{"input": "find all the html files in the current folder and replace the end of each line with a pattern", "output": "find ./ -type f -name '*.html' | xargs sed -i '$s/$/<\\/description>/'"}
{"input": "display the contents of all the regular files in the current folder and save the output to out.txt", "output": "cat `find . -type f` > out.txt"}
{"input": "Lists all directories in a current folder.", "output": "ls -d */"}
{"input": "List all files/directories under current directory", "output": "find . -ls"}
{"input": "Find all *.txt files under /foo and delete them", "output": "find /foo -name \"*.txt\" -delete"}
{"input": "Print whether the unique contents of \"set1\" and \"set2\" differ", "output": "diff -q <(sort set1 | uniq) <(sort set2 | uniq)"}
{"input": "Rename all *.jpg files to *_MED.jpg files under temp/medium directory", "output": "find temp/medium -iname \"*.jpg\" -printf 'mv %p %p\\n' | sed 's/\\.jpg$/_MED\\.jpg/' | while read l; do eval $l; done"}
{"input": "Search directory tree $DIR for *.txt files", "output": "find \"${DIR}\" -name \"*.txt\""}
{"input": "Change the owner of all files in the directory tree \"dir_to_start\" excluding directory \"dir_to_exclude\" to \"owner\"", "output": "find dir_to_start -name dir_to_exclude -prune -o -print0 | xargs -0 chown owner"}
{"input": "Execute script do1.sh on each regular file from the /etc directory tree", "output": "find /etc -type f |  xargs --max-lines=1  -r --max-procs=20  ./do1.sh"}
{"input": "Send SIGKILL signal to processes ID 18581, 18582, and 18583, killing them instantly.", "output": "kill -9 18581 18582 18583"}
{"input": "find all the text files in current folder and change the extension of these files and move them to another folder", "output": "find . -name \"*.txt\" | parallel 'ext=\"{/}\" ; mv -- {} foo/{/.}.bar.${ext##*.}'"}
{"input": "Print the cp commands that would be required to copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names", "output": "find /source_path -name \\*.data  | while read -r filename; do printf \"print version: cp %s %s\\n\" \"${filename}\" \"$(printf \"%s\\n\" \"${filename}\" | sed \"s/^.*[/]\\(category[^/]*\\)[/]\\(.*[.]data\\)$/\\/target_path\\/\\1_\\2/\")\"; done"}
{"input": "Convert all DOS files under and below the current directory to the Unix format", "output": "find . -type f -exec dos2unix {} \\;"}
{"input": "List all files in the /var directory tree whose size is greater than 10 megabytes", "output": "find /var/ -size +10M -exec ls -lh {} \\;"}
{"input": "Allow ssh from 127.0.0.1 on port \"someport\" through \"proxy.host\" to \"host.in.the.remote.net\" on port 22", "output": "ssh -fL 127.0.0.1:someport:host.in.the.remote.net:22 proxy.host"}
{"input": "Identify CMS version/releases accross all your Wordpress websites", "output": "find /var/www/vhosts/*/httpdocs/ -type f -iwholename \"*/wp-includes/version.php\" -exec grep -H \"\\$wp_version =\" {} \\;"}
{"input": "Represent the UTC date given in time string \"1970.01.01-$string1\" as number of seconds since the epoch and save it in 't1' variable", "output": "t1=$(date -u -d \"1970.01.01-$string1\" +\"%s\")"}
{"input": "create a symbolic link named \"-pdf-kundendienst\" to \"local--pdf-kundendienst\" file", "output": "ln -s -- ./local--pdf-kundendienst -pdf-kundendienst"}
{"input": "Find all *.mp4 files under /foo/bar and move them to /some/path", "output": "find /foot/bar/ -name '*.mp4' -exec mv -t /some/path {} +"}
{"input": "Search for all files newer than file /tmp/t1 but not newer than file /tmp/t2", "output": "find / -newer /tmp/t1 -and -not -newer /tmp/t2"}
{"input": "Find all files named \"file.ext\" in the current directory tree and print the path names of the directories they are in", "output": "find `pwd` -name file.ext |xargs -l1 dirname"}
{"input": "Format file \"list-of-entries.txt\" as new-line separated columns", "output": "column -t -s $'\\n' list-of-entries.txt"}
{"input": "Find all files in ~/clang+llvm-3.3/bin/ and print 'basename /file/path' for each file", "output": "find ~/clang+llvm-3.3/bin/ -type f -exec echo basename {} \\;"}
{"input": "Find all *.txt files that reside under and below /home/wsuNID/", "output": "find /home/wsuNID/ -name \"*.txt\""}
{"input": "Find any hidden regular files in the current directory and its sub-directories that were modified after .cshrc was last modified.", "output": "find . -type f -name \".*\" -newer .cshrc -print"}
{"input": "Prints hierarchical process tree.", "output": "pstree"}
{"input": "Search the /path directory tree for regular files", "output": "find /path -type f"}
{"input": "Print git branch currently checked out in a working directory.", "output": "git status | head -1 | cut -d ' ' -f 3"}
{"input": "Delete files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -delete"}
{"input": "Calculate the md5 sum of all *.py files in the current directory", "output": "cat *.py | md5sum"}
{"input": "Time stamp every ping request to 8.8.8.8 in Unix epoch format", "output": "ping -D -n -O -i1 -W1 8.8.8.8"}
{"input": "Recursively removes all files like '*.xyz' in a current folder.", "output": "find . -name \\*.xyz -exec rm {} \\;"}
{"input": "Replace all occurrences of edx (case insensitive) with gurukul in all *.css (case insensitive) files under ./cms/djangoapps/contentstore/views directory", "output": "find ./cms/djangoapps/contentstore/views -iname *.css | xargs sed -i s/[Ee][Dd][Xx]/gurukul/g"}
{"input": "Print the empty directories and files under current directory", "output": "find -empty"}
{"input": "Print numbers from 1 to 10 with 2 values per line", "output": "seq 10 | awk 'NR%2{printf(\"%s \", $0); next}1'"}
{"input": "list all aliases", "output": "alias"}
{"input": "Find all files/directories under current directory with 'foobar' (case insensitive) in their names and copy them to ~/foo/bar", "output": "find . -iname \"*foobar*\" -exec cp \"{}\" ~/foo/bar \\;"}
{"input": "find all the regular/normal files ending with \".mod\" in a folder and send them as input to the remodup command", "output": "find $DIR -name \"*.mod\" -type f -exec remodup {} \\;"}
{"input": "List all files in entire file system that are newer than the file $newerthan and older than the file $olderthan and sort them according to file modification time", "output": "find / -type f -name \"*\" -newermt \"$newerthan\" ! -newermt \"$olderthan\"  -printf '%T@ %p\\n' | sort -k 1 -n | sed 's/^[^ ]* //'"}
{"input": "Find all 777 permission files/directories under current directory tree", "output": "find -perm 777"}
{"input": "Find all files/directories in entire file system with 644 permission", "output": "find / -perm 644"}
{"input": "Prints calendar of $month, $year, and redirects all output to the awk script 'cal.awk', with predefined variable 'day=$day'.", "output": "cal $month $year | awk -v day=$day -f cal.awk"}
{"input": "Find disk usage of all files inside the directory", "output": "du -a"}
{"input": "Compare \"current.log\" and \"previous.log\" line by line and print lines containing regex pattern \">\\|<\"", "output": "diff current.log previous.log | grep \">\\|<\" #comparring users lists"}
{"input": "Remove files under current directory that contains white space in their name", "output": "find . -name \"* *\" -exec rm -f {} \\;"}
{"input": "find all the files in the current folder which have the name net or comm in them", "output": "find . -regex '.*\\(net\\|comm\\).*'"}
{"input": "Delete all empty directories and directories that contain only empty directories under current directory", "output": "find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +"}
{"input": "Counts all *.mod files in a /boot/grub/ folder.", "output": "ls -l /boot/grub/*.mod | wc -l"}
{"input": "Replace all occurrence of \"subdomainA.example.com\" with \"subdomainB.example.com\" in all files under the current directory and below", "output": "find . -type f -print0 |   xargs -0 perl -i.bak -pe 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "Find all *.so files under current directory and search for mysymbol in their symbol tables", "output": "find . -type f -name \"*.so\" -exec sh -c \"echo {} && readelf -s {} | grep mysymbol\" \\;"}
{"input": "Find all files under current directory and write the paths without the leading ./ in the file outputfile", "output": "find . -type f -printf '%P\\n' > outputfile"}
{"input": "Find all pdf files excluding *_signed.pdf files under /some/dir with null character as the delimiter", "output": "find /some/dir -name \"*.pdf\" ! -name \"*_signed.pdf\" -print0"}
{"input": "Request SSH to run \"echo foo; sleep 5; echo bar\" in the background", "output": "ssh -f user@host \"echo foo; sleep 5; echo bar\""}
{"input": "Find all files on the system that are world writable", "output": "find / -wholename  '/proc' -prune  -o  -type f -perm -0002 -exec ls -l {} \\;"}
{"input": "Execute \"du -s path\" every 300 seconds", "output": "watch -n 300 du -s path"}
{"input": "Remove the \"123_\" prefix from all filenames of .txt files in current directory.", "output": "rename 's/^123_//' *.txt"}
{"input": "find all the files that have been modified in the last 4 days ( daystart is used to check files according to date i.e, all files modified from currentDay-4 00:00:00 to current day) and copy them to folder.", "output": "find . -mtime 4 -daystart -exec cp -a {} /home/devnet/fileshare\\$ on\\ X.X.X.X/RECOVER/ \\;"}
{"input": "Display a binary file as a sequence of hex codes", "output": "od -t x1 file|cut -c8-"}
{"input": "remove all the \"core\" files in the current folder which have not been changed in the last 4 days.", "output": "find . -name core -ctime +4 -exec /bin/rm -f {} \\;"}
{"input": "Print all files in the current directory as a comma separated list", "output": "ls -1 | paste -sd \",\" -"}
{"input": "Archive \"/path/to/copy\" on host \"remote\" as user \"user\" to \"/local/path\" via ssh on port \"$portNumber\"", "output": "rsync -avz -e \"ssh -p $portNumber\" user@remote.host:/path/to/copy /local/path"}
{"input": "Prints a random line from $FILE", "output": "sort --random-sort $FILE | head -n 1"}
{"input": "Print the pathnames of all files from the /tmp/dir1 directory tree", "output": "find /tmp/dir1 -exec echo {} \\;"}
{"input": "Display inputfile all on one line (replace newlines by spaces)", "output": "awk '{printf \"%s \", $0}' inputfile"}
{"input": "Find files/directories under '/usr' directory tree that are newer than /tmp/stamp$$ by modification time", "output": "find /usr -newer /tmp/stamp$$"}
{"input": "Print the last 10 lines of \"great-big-file.log\"", "output": "tail great-big-file.log"}
{"input": "Calculate the SHA1 sum for the contents of the path/to/folder directory tree, including permissions", "output": "find path/to/folder -type f -print0  | sort -z | xargs -0 sha1sum; find path/to/folder \\( -type f -o -type d \\) -print0 | sort -z | xargs -0 stat -c '%n %a' | sha1sum"}
{"input": "list all files under the current directory, writing the output to the file files_and_folders, suppressing all error messages", "output": "find . 2>/dev/null >files_and_folders"}
{"input": "Find files/directories that are owned by the user 'syslog' in entire filesystem", "output": "find / -user syslog"}
{"input": "Export variable \"JAVA_HOME\" as symlink resolved absolute path of the 2nd parent directory name of \"java\"", "output": "export JAVA_HOME=$(readlink -f $(dirname $(readlink -f $(which java) ))/../)"}
{"input": "Find all files named 'file' in 1 level down the current directory whose status were changed more than 1 day ago", "output": "find . -maxdepth 1 -ctime +1 -name file"}
{"input": "Saves exit statuses of piped commands in a system variable PIPESTATUS='([0]=\"0\" [1]=\"1\" [2]=\"0\")'", "output": "true | false | true"}
{"input": "find all the files  in the folder /opt which have been changed in the last 120 minutes", "output": "find /opt -cmin -120"}
{"input": "Set the host name to the contents of \"/etc/hostname\"", "output": "hostname $(cat /etc/hostname)"}
{"input": "display the content of all the instances of the file \"lilo.conf\" in the file system and discard any errors in encountered during the search and display) and save the output to the file \"lilo.txt\"", "output": "find / -type f -name lilo.conf 2>/dev/null -exec cat {} \\; >lilo.txt"}
{"input": "Find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding *.js files/directories under /home/jul/here/exclude/* paths", "output": "find /home/jul/here -type f -iname \"*.php\" -o -iname \"*.js\" ! -path \"/home/jul/here/exclude/*\""}
{"input": "Print the output of history without line numbers", "output": "history | sed 's/^[ ]*[0-9]\\+[ ]*//'"}
{"input": "Remove all *.mp3 files in tmp directory but not in it's subdirectories", "output": "rm `find tmp -maxdepth 1 -name '*.mp3'`"}
{"input": "Find files in the current directory recursively that are not readable by all", "output": "find -type f ! -perm -444"}
{"input": "display all the files in the file system which belong to the user \"wnj\" or which are modified after the file \"ttt\"", "output": "find / \\( -newer ttt -or -user wnj \\) -print"}
{"input": "Get only the latest version of the file 'filename' under current directory", "output": "find . -name 'filename' | xargs -r ls -tc | head -n1"}
{"input": "Print the second space separated fields from standard input", "output": "tr -s ' ' | cut -d ' ' -f 2"}
{"input": "Find all regular files in minimum 1 level down the $dir directory", "output": "find \"$dir\" -mindepth 1 -type f"}
{"input": "Lists all manual pages.", "output": "apropos -r '.*'"}
{"input": "Delete every second line from output of \"seq 10\"", "output": "seq 10 | sed '0~2d'"}
{"input": "Sleep until tomorrow at 21:30", "output": "sleep $(($(date -f - +%s- <<< $'tomorrow 21:30\\nnow')0))"}
{"input": "Find all files/directories under current directory without descending into './bookshop/mediaimg', '*/CVS*', './files', './images/cms', './internal', './limesurvey171plus_build5638' and './gallery2' paths, then run cvs command with 'status' and each path as arguments and redirect the output to output.txt fle", "output": "for i in `find .  -not \\( -name \"*\\.jpg\" \\) -path './bookshop/mediaimg' -prune -o -path '*/CVS*' -prune -o  -path './files' -prune  -o -path './images/cms' -prune -o -path './internal' -prune -o -path './limesurvey171plus_build5638' -prune  -o -path './gallery2' -prune -o  -print  `; do cvs status  \"$i\" |grep Status ; done &>~/output.txt"}
{"input": "Force create a symbolic link to \"$f\" in \"~/my-existing-links/\" with name the basename of \"$f\"", "output": "ln -sf \"$f\" \"~/my-existing-links/$(basename $f)\""}
{"input": "set alias \"git-root\" for command \"if [ \"`git rev-parse --show-cdup`\" != \"\" ]; then cd `git rev-parse --show-cdup`; fi\"", "output": "alias git-root='if [ \"`git rev-parse --show-cdup`\" != \"\" ]; then cd `git rev-parse --show-cdup`; fi'"}
{"input": "Print the date formatted with \"%a %x %X\" followed by the host name", "output": "echo `date +\"%a %x %X\"` `hostname`"}
{"input": "Find all files under trunk directory and upload them to https://PATH_TO_NEXUS/trunk/", "output": "find trunk -type f -exec curl --user user:pass --ftp-create-dirs -T {} https://PATH_TO_NEXUS/{} \\;"}
{"input": "search for the file \"foobar.txt\" in the folder \"/home/mywebsite\"", "output": "find /home/mywebsite -type f -name \"foobar.txt\""}
{"input": "Interactively display all lines containing 'word' in all files whose name ends with .properties in the current directory, waiting for user input after each page.", "output": "grep -R 'word' *.properties | more"}
{"input": "Find all files under /path and calculate their md5sum", "output": "find /path -type f -print0 | xargs -0 md5sum"}
{"input": "Print git branch currently checked out in a working directory.", "output": "git branch  --no-color  | grep -E '^\\*' | cut -d ' ' -f 2"}
{"input": "Find all files/directories in the paths expanded by the glob pattern '.*'", "output": "find .*"}
{"input": "Find string \"STRING\" in files residing in the current directory tree, case insensitive", "output": "find . -type f -print | xargs grep -ni \"STRING\""}
{"input": "Write output of \"command\" to standard output and to \"/path/to/logfile\"", "output": "command | tee /path/to/logfile"}
{"input": "Print '-exec is an action so an implicit -print is not applied' for every file/directory found by the name 'file' under current directory tree", "output": "find -name file -exec echo '-exec is an action so an implicit -print is not applied' \\;"}
{"input": "display all the files in the current directory excluding those that are in the 'secret' directory", "output": "find . -name 'secret' -prune -o -print"}
{"input": "Print the first line and lines with \"f\" as the third \",\" separated field in \"input\" and format the result as a \",\" delimited table", "output": "awk -F, '{ if (NR == 1)print}{if($3 == \"f\")print}' input | column -t -s,"}
{"input": "Find all files/directories with space in their names under current directory and rename them by replacing all spaces with _", "output": "find . -depth -name '* *' | while IFS= read -r f ; do mv -i \"$f\" \"$(dirname \"$f\")/$(basename \"$f\"|tr ' ' _)\" ; done"}
{"input": "create directory aaa", "output": "mkdir aaa"}
{"input": "Get the total sizes of all files under current directory", "output": "find . -type f -printf '%p %s\\n' | perl -n -a -e '$sum+=$F[1]; print \"$sum\\n\"' | tail -n 1"}
{"input": "Continuously write \"Hidden\" separated by spaces over the entire \"/dev/sdb\" disk", "output": "yes \"Hidden\" | paste -d' ' -s - | dd of=/dev/sdb"}
{"input": "Sort tab separated file \"file\" using a version sort for field 6 and a numeric sort for field 7", "output": "sort -t$'\\t' -k6V -k7n file"}
{"input": "Print every two lines in \"file\" on a single line separated by a space", "output": "cat file | paste -d\\ - - -"}
{"input": "Delete all files named 'sample' (case insensitive) under '/home/user/Series' directory tree with superuser privilege", "output": "sudo find /home/user/Series/ -iname sample -exec rm {} \\;"}
{"input": "Read a line from standard input into the variable \"yn\" with the prompt \"Do you wish to install this program?\"", "output": "read -p \"Do you wish to install this program?\" yn"}
{"input": "Remount root filesystem \"/\"", "output": "mount -oremount /"}
{"input": "Copy a comlex directory tree from one machine o another while preserving copy permissions and ownership", "output": "find . -depth -print | cpio -o -O /target/directory"}
{"input": "Add executable permission to \"java_ee_sdk-6u2-jdk-linux-x64.sh\"", "output": "sudo chmod +x java_ee_sdk-6u2-jdk-linux-x64.sh"}
{"input": "Recursively change all permissions under \"theDirectory/\" to 777(read,write,execute for all users)", "output": "sudo chmod -R 777 theDirectory/"}
{"input": "Check if your/dir is empty or not", "output": "[ $(find your/dir -prune -empty) = your/dir ]"}
{"input": "Print \"new.txt\" with line numbers prepended and line 2 or any line containing \"2\" deleted", "output": "cat new.txt  | nl | sed  \"/2/d\""}
{"input": "Format tab separated fields in \"FILE\" as a table", "output": "column -t -s $'\\t' FILE"}
{"input": "Find all of the character devices on the system", "output": "find / -type c"}
{"input": "Interpret all lines containing an equal sign in myfile (usually, grab all variables from myfile into current shell)", "output": "grep \"=\" myfile | source /dev/stdin"}
{"input": "Display infinite scroll of random ASCII art", "output": "yes 'c=(\u2571 \u2572);printf ${c[RANDOM%2]}'|bash"}
{"input": "find all the files that have been modified in the last 12 hours", "output": "find ./ -mtime -0.5"}
{"input": "Compress .log files in /var and below", "output": "find /var -iname \\*.log | xargs bzip -"}
{"input": "Move all files/directories under current directory to ~/play", "output": "find . | xargs -I'{}' mv '{}' ~/play/"}
{"input": "Display a detailed listing of the current directory, pausing for user input after each page.", "output": "ls -l | more"}
{"input": "Read a line from standard input with prompt \"Are you sure you wish to continue?\"", "output": "read -p \"Are you sure you wish to continue?\""}
{"input": "display all the regular/normal files in current folder", "output": "find . -type f -print0"}
{"input": "find all the files in the current folder that have been modified in the last 24*3 hours", "output": "find ./ -mtime -3"}
{"input": "Creates temporary folder within a $mnt_dir folder and saves path to it in a 'rsync_src' variable.", "output": "rsync_src=`mktemp -d -p $mnt_dir`"}
{"input": "For each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file.", "output": "join -j 2  -o 1.1 1.2 2.1 <(sort -k2 1) <(sort -k2 2)"}
{"input": "Find all regular files under $DIR directory tree whose paths match the regex \".*\\.${TYPES_RE}\" where ${TYPES_RE} expands as a variable", "output": "find ${DIR} -type f -regex \".*\\.${TYPES_RE}\""}
{"input": "Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%Tm %p\\n'", "output": "find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%Tm %p\\n'"}
{"input": "list all the files in the file system excluding proc folder and excluding symbolic links which have write permission for the user", "output": "find / -path /proc -prune -o -perm -2 ! -type l -ls"}
{"input": "Find files that are writable by the user, the group, or both under the plsql directory", "output": "find plsql -type f  -perm /220 -exec ls -l {} \\; 2>/dev/null"}
{"input": "Unzip \"myDB.sql.gz\" to standard output as input to \"pg_restore ...\"", "output": "gzip -cd myDB.sql.gz | pg_restore ..."}
{"input": "find all the files in the current folder and display those that are not present in the list \"file.lst\"", "output": "find . | grep -vf file.lst"}
{"input": "Search directory foo for files containing \"/tmp/foo/bar\" in their full names", "output": "find foo -path /tmp/foo/bar -print"}
{"input": "display all sqlite files in the current directory along with their timestamp", "output": "find ./ -name \"*.sqlite\" -printf '%Tc %p\\n'"}
{"input": "Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.", "output": "grep -v \"#\" -R  /var/spool/cron/tabs"}
{"input": "Page through the output of 'some_command' positioning the view at the first occurrence of regular expression 'regex'.", "output": "some_command | less -p regex"}
{"input": "Replace all instances of \"STRING_TO_REPLACE\" with \"STRING_TO_REPLACE_IT\" in \"index.html\" and write the output to standard output and \"index.html\"", "output": "sed s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html | tee index.html"}
{"input": "display the manual page of find", "output": "man find"}
{"input": "Search for all *.ogg (case insensitive) files in the $HOME directory that have an access time of greater than 30 days", "output": "find $HOME -iname '*.ogg' -atime +30"}
{"input": "Locates 'gcc' executable file, strips last two parts of the full path, adds '/lib' to the end and saves result in 'libdir' variable.", "output": "libdir=$(dirname $(dirname $(which gcc)))/lib"}
{"input": "Search the /root directory recursively for the regular file named \"myfile\" ignoring /root/work/", "output": "find /root/ -path '/root/work' -prune -o -name myfile -type f -print"}
{"input": "set alias \"logspace\" for command 'find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \\; |  awk '\\''{print $5, $9 }'\\'''", "output": "alias logspace='find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \\; |  awk '\\''{print $5, $9 }'\\'''"}
{"input": "display all the empty files in current folder", "output": "find . -empty"}
{"input": "Find file size in blocks", "output": "du -s <file>"}
{"input": "find all the video files in the folder /home/<user>", "output": "find /home/<user> -type f -exec file {} + | grep -E \"MPEG v4|EBML|Microsoft ASF|Macromedia Flash Video|WebM|Apple QuickTime movie|AVI\""}
{"input": "Find all files/directories in current directory and execute multiple ANDed commands (cmd1 and cmd2) for each file", "output": "find . -exec cmd1 \\; -exec cmd2 \\;"}
{"input": "Print the last line of \"$file1\" to the console and append to \"$file2\"", "output": "tail -1 $file1 | tee -a $file2"}
{"input": "display all the html files in the folder /var/www", "output": "find /var/www -type f -name \"*.html\""}
{"input": "Copy all regular files from the current directory tree to /tmp/", "output": "find . -type f -exec sh -c 'cp \"$@\" /tmp' {} +"}
{"input": "Find all files in the level 6 subdirecotries of /usr/src and below, ignoring CVS files", "output": "find /usr/src -name CVS -prune -o -mindepth +6 -print"}
{"input": "Compress in parallel regular files in the current directory tree that were last modified more than 7 days ago", "output": "find . -type f  -mtime +7 | tee compressedP.list | xargs -I{} -P10 compress {} &"}
{"input": "create directory new_dir", "output": "mkdir new_dir"}
{"input": "Search the current user's home directory and below for all .png files and copy those files in the directory imagesdir.", "output": "find ~/ -name *.png -exec cp {} imagesdir \\;"}
{"input": "Prints week day of a 31 day in a current month.", "output": "cal | awk -v date=31 -v FIELDWIDTHS=\"3 3 3 3 3 3 3 3\" 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print a[i]}'"}
{"input": "Find all files/directories under current directory that were modified later than /reference/file", "output": "find . -newer /reference/file"}
{"input": "find files which have all permissions to all the users in the current directory", "output": "find . -type f -perm 0777 -print"}
{"input": "Output the system host name and date to the console", "output": "echo Hostname=$(hostname) LastChecked=$(date)"}
{"input": "Print file name without the last two extensions assuming the file name doesn't contain any other dots.", "output": "echo \"$FILE\"|rev|cut -d\".\" -f3-|rev"}
{"input": "list all files", "output": "find ."}
{"input": "Display the content of YourFile.txt, waiting for user input at each page.", "output": "cat YourFile.txt | more"}
{"input": "Print the line with most consecutive repeats prefixed with its count from standard input", "output": "uniq -c | sort -n | tail -n1"}
{"input": "Search the home directory tree for files modified less than a day ago", "output": "find $HOME -mtime -1"}
{"input": "Move all files from the `sourceDir' directory to the `destDir' directory", "output": "find sourceDir -mindepth 1 -maxdepth 1 -exec mv --target-directory=destDir '{}' +"}
{"input": "find all files and directories under the current directory and display the blocksize and the quoted filename, using the stat command", "output": "find . -type f -exec stat -c \"%s %N\" {} \\;"}
{"input": "Search the regular files of the current directory tree for string \"whatever\"", "output": "find . -type f | xargs -L 100 grep whatever"}
{"input": "Copies defined file to the target folder without overwriting existing files.", "output": "cp -n"}
{"input": "search for the word error in all the xml files in the current folder", "output": "find . -name \"*.xml\" -exec grep \"ERROR\" /dev/null '{}' \\+"}
{"input": "Print the contents of \"somefile\" as input to \"splitter 16224-16482\"", "output": "cat somefile | splitter 16224-16482"}
{"input": "Reattach to a named screen session", "output": "screen -r foo"}
{"input": "find all the files in the folder \"/usr/app/etl/01/OTH/log/tra\" which have been modified  in the last 240 hours  excluding hidden files and those with the name \"/usr/app/etl/01/CLE/par/files_to_skip.par\"", "output": "find /usr/app/etl/01/OTH/log/tra -type f ! -name \".*\" -mtime -10 | egrep -vf /usr/app/etl/01/CLE/par/files_to_skip.par"}
{"input": "Print the given file name's extensions.", "output": "echo \"$NAME\" | cut -d'.' -f2-"}
{"input": "Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script", "output": "find $1 -name \"$2\" -exec grep -Hn \"$3\" {} \\;"}
{"input": "On host \"server_b\", connect as ssh user \"user\" and copy \"/my_folder/my_file.xml\" to directory \"/my_new_folder/\", with all transfer data relayed through local host.", "output": "scp -3 user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/"}
{"input": "Repeat \"image.png\" 10 times on a single line", "output": "echo $(yes image.png | head -n10)"}
{"input": "search for the file \"process.txt\" in the entire file system (case insensitive search)", "output": "find / -iname 'process.txt' -print"}
{"input": "Search the /home/pankaj directory for regular files whose status has changed within the last 5 minutes", "output": "find /home/pankaj -maxdepth 1 -cmin -5 -type f"}
{"input": "Write \"some output\" to standard output and to \"/some/path/some_file\" as user \"some_user\"", "output": "echo \"some output\" | sudo -u some_user tee /some/path/some_file"}
{"input": "Installs packages 'mysql' and 'mysql-server'.", "output": "yum install mysql mysql-server"}
{"input": "List all regular files in the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 -type f -exec ls -l {} +"}
{"input": "Rename .jpg files to .jpeg in all subdirectories of the current directory", "output": "find . -maxdepth 2 -mindepth 2 -name '*.jpg' -exec sh -c 'echo mv -- \"$0\" \"${0%%.jpg}.jpeg\"' {} \\;"}
{"input": "Search the current directory tree for regular files named `doc.txt' and print \"found\" for each of them", "output": "find ./ -type f -name doc.txt -printf \"found\\n\""}
{"input": "Delete all files in the TBD directory that were modified more than 1 day ago", "output": "find /TBD/* -mtime +1 | xargs rm -rf"}
{"input": "Search /path/to/your/directory for *.avi and *.flv files", "output": "find /path/to/your/directory -regex '.*\\.\\(avi\\|flv\\)'"}
{"input": "find all the files in the current folder which do not belong to any user", "output": "find . -nouser -ls"}
{"input": "Find empty files in the test directory", "output": "find test -empty"}
{"input": "Sort all directories under current directory placing the file with least modification time at first", "output": "find -type d -printf '%T+ %p\\n' | sort"}
{"input": "Search the current directory tree for *.c and *.sh files", "output": "find . -type f \\( -name \"*.c\" -o -name \"*.sh\" \\)"}
{"input": "Find all regular files with 755 permission under current directory tree and change their permission to 644", "output": "find . -type f -perm 755 -exec chmod 644 {} \\;"}
{"input": "create an archive using pbzip2 as a compress program", "output": "tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 /DIR_TO_ZIP/"}
{"input": "Bind mount \"/dev/random\" on \"/tmp/fakerandom\"", "output": "mount --bind /tmp/fakerandom /dev/random"}
{"input": "Copy directory hierarchy from \"./<SOURCE_DIR>/\" to \"<DEST_DIR>\"", "output": "find ./<SOURCE_DIR>/ -type d | sed 's/\\.\\/<SOURCE_DIR>//g' | xargs -I {} mkdir -p <DEST_DIR>\"/{}\""}
{"input": "Search the /media/shared directory recursively for MP3 and OGG files", "output": "find /media/shared \\( -iname \"*.mp3\" -o -iname \"*.ogg\" \\)"}
{"input": "Search for 'string-to-find' in all HTML files under current directory tree and show the matched lines with their filenames", "output": "find . -name \\*.html -exec grep -H string-to-find {} \\;"}
{"input": "display all the regular files in the current folder and do not search in sub folders", "output": "find \"$dir\" -maxdepth 1 -type f"}
{"input": "find the type & description of all the regular/normal files in the home folder", "output": "find /home -type f -print0 | xargs -0 file"}
{"input": "Print unique lines in sorted \"file1\" compared to sorted file \"file2\"", "output": "comm -23 file1 file2"}
{"input": "Remove what follows the forth occurrence of the character \":\" in any field which contains it", "output": "sed -r 's/((:[^: \\t]*){3}):[^ \\t]*/\\1/g' file | column -t"}
{"input": "Search the current directory tree for files whose names match regular expression '.*packet.*', ignoring the case", "output": "find . -iregex \".*packet.*\""}
{"input": "Find all .svn directories under current directory and delete them", "output": "find . -type d -name \".svn\" -print | parallel rm -rf"}
{"input": "Print first 11 characters from $line, print a tab, print the md5 sum of the file specified by the 13th and onward characters from $line and print a null character at end without a trailing new line", "output": "echo -en \"${line:0:11}\" \"\\t\" $(md5sum \"${line:12}\") \"\\0\""}
{"input": "Print the unique lines from standard input preserving the order they appear", "output": "nl -n ln | sort -u -k 2| sort -k 1n | cut -f 2-"}
{"input": "display all the files having spaces in the current folder", "output": "find . -name \"filename including space\""}
{"input": "Display all files in the current directory tree that match \"*foo\"", "output": "tree -P \"*foo\""}
{"input": "Find all *.txt files/directories under current directory and execute the python script hello.py with all their paths as arguments", "output": "python hello.py `find . -name \"*.txt\"`"}
{"input": "Copies 'libgtest_main.so' and 'libgtest.so' to '/usr/lib/', preserving all attributes, and copying symlinks as symlinks, without following in source files.", "output": "sudo cp -a libgtest_main.so libgtest.so /usr/lib/"}
{"input": "Find all files in /home/kos and below whose names end in \".tmp\"", "output": "find /home/kos -name *.tmp -print"}
{"input": "Print the ping time of a single request to \"8.8.8.8\"", "output": "ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }'"}
{"input": "Find regular files under / that contain \"string\" and clear out their contents, including newlines", "output": "find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.*\\n//g'"}
{"input": "Automatically log into \"SOME_SITE.COM\" on port 2400 as user \"YOUR_USERNAME\" using password \"YOUR_PASSWORD\"", "output": "sshpass -p \"YOUR_PASSWORD\" ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM:2400"}
{"input": "Find all directories named \"0\" in the current directory tree and create a single tar archive of their RS* subdirectories", "output": "find . -type d -name \"0\" -execdir tar -cvf ~/home/directoryForTransfer/filename.tar RS* \\;"}
{"input": "Recursively changes group ownership of everything within '/git/our_repos' to 'shared_group'.", "output": "chgrp -R shared_group /git/our_repos"}
{"input": "List all regular files under current directory ensuring white space safety", "output": "find . -type f -print0 | xargs -0 -n 1"}
{"input": "find all the files in the entire file system that were modified in the last 10 minutes", "output": "find / -mmin -10"}
{"input": "Print login information of all users except the first two and replace all instances of \" \" with \", \"", "output": "who | awk '{ if (NR!=1 && NR!=2) {print} }' | sed -e 's/ /, /g'"}
{"input": "set alias \"X2\" for command \"| cut -d' ' -f2\"", "output": "alias -g X2=\"| cut -d' ' -f2\""}
{"input": "Search for 'Processed Files' in all $srch* (case insensitive) files under current directory", "output": "find . -iname \"$srch*\" -exec grep \"Processed Files\" {} \\; -print"}
{"input": "Do not mark variables and function which are modified or created for export to the environment of subsequent commands", "output": "set +a"}
{"input": "Find all directories under current directory and replace all null delimiters with : in the output then remove the last :", "output": "find -type d -print0 | sed -e \"y/\\d0/:/;s/:$//;\""}
{"input": "Find regular files larger than 500MB in the current directory tree", "output": "find . -type f -size +500M"}
{"input": "Write the shell's input to standard error as it is read", "output": "set -v"}
{"input": "display the sum of disk used by all the access.log files in /var/www folder", "output": "find /var/www/ -type f -name \u00abaccess.log*\u00bb -exec du -k {} \\;|awk '{s+=$1}END{print s}'"}
{"input": "Display \"infile\" as printable characters or backslash escapes", "output": "cat infile | od -c"}
{"input": "find all the xml files in the current folder which are present in the pattern text file", "output": "find . -name \"*.xml\" -exec grep -HFf <(find . -name \"*.txt\" -printf \"%f\\n\") {} \\;"}
{"input": "Replace the spaces after line number in the output of history with \"..\"", "output": "history | sed 's/^\\( *[0-9]*\\) */\\1../'"}
{"input": "Prefix all files and directories in the current directory with \"Unix_\" if the files contain no whitespace or subdirectories", "output": "for FILENAME in *; do mv $FILENAME Unix_$FILENAME; done"}
{"input": "Prompt user to type a list of cron jobs directly at the terminal, then use these replacing previously existing cron jobs.", "output": "crontab"}
{"input": "Find all 400 permission files under /data directory", "output": "find /data -type f -perm 400 -print"}
{"input": "find all the files which have the write permission to the group and remove the write permission.", "output": "find . -perm -20 -exec chmod g-w {} ;"}
{"input": "Find all directories under current directory and set read & execute permission for group and other for these files", "output": "find . -type d -print0 | xargs -0 chmod go+rx"}
{"input": "Get the base filename from variable 'path', similar to using the basename command.", "output": "echo \"$path\" | rev | cut -d\"/\" -f1 | rev"}
{"input": "Find all files/directories under 'my key phrase' directory and redirect the output to mylist.txt", "output": "find 'my key phrase' > mylist.txt"}
{"input": "find all the text files in the folder /tmp/1 and display only those files which have spaces in their names", "output": "find \"/tmp/1/\" -iname \"*.txt\" | sed 's/[0-9A-Za-z]*\\.txt//g"}
{"input": "Calculates process depth of process with id $processid, and stores it in a 'depth' variable.", "output": "depth=$(pstree -sA $processid | head -n1 | sed -e 's#-+-.*#---foobar#' -e 's#---*#\\n#g' -eq | wc -l)"}
{"input": "Unzip and untar \"4.56_release.tar.gz\" to standard output", "output": "gunzip -c 4.56_release.tar.gz | tar xvf -"}
{"input": "Close the master SSH control socket \"my-ctrl-socket\" to \"jm@sampledomain.com\"", "output": "ssh -S my-ctrl-socket -O exit jm@sampledomain.com"}
{"input": "Remove the \"123_\" prefix from all filenames of .txt files in current directory.", "output": "find -name \"123*.txt\" -exec rename 's/^123_//' {} \";\""}
{"input": "Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones", "output": "comm <(sort f1.txt) <(sort f2.txt)"}
{"input": "Remove junk files modified more than 31 days ago recursively", "output": "find /path/to/junk/files -type f -mtime +31 -exec rm -f {} \\;"}
{"input": "run script /PATH/TO/MY_APP as user USER_FOOBAR in background", "output": "su - USER_FOOBAR -c /PATH/TO/MY_APP &"}
{"input": "Search appended data in \"logfile.log\" for \"something\" with a timeout of 3 seconds", "output": "tail -f logfile.log | grep --line-buffered \"something\" | read -t 3"}
{"input": "Rename file \"edited_blah.tmp\" to \"/etc/blah\"", "output": "sudo mv edited_blah.tmp /etc/blah"}
{"input": "Find all files in \"/home/\" which contain \"string1\", \"string2\" or the host name in its filename", "output": "find /home/ -type f -regextype posix-extended -regex \".*(string1|string2|$(hostname)).*\""}
{"input": "Find all files/directories under current directory and put the output into full_backup_dir variable", "output": "full_backup_dir=\"`find . -depth -print0`\""}
{"input": "Create a symbolic link named \"/usr/bin/my-editor\" to \"/usr/share/my-editor/my-editor-executable\" and attemp to hard link directories", "output": "ln -sF /usr/share/my-editor/my-editor-executable   /usr/bin/my-editor"}
{"input": "Remount \"yaffs2\" filesystem \"/dev/block/mtdblk4\" to \"/system\" as read only", "output": "mount -o ro,remount -t yaffs2 /dev/block/mtdblk4 /system"}
{"input": "Find all the regular files in $DIR directory tree which have not been modified in the last 15 days and delete them", "output": "find \"$DIR\" -type f -mtime +15 -exec rm {} \\;"}
{"input": "find all files  that names are 'apt'", "output": "find  / -name \"apt\""}
{"input": "find all the directories in the current folder that are empty(size 0 bytes)", "output": "find -type d -empty"}
{"input": "Mount a partition in \"$IMAGE\" with offset \"$OFFSET\" to \"media/$DEST\" as read only using a loop device", "output": "mount -o ro,loop,offset=$OFFSET -t auto $IMAGE /media/$DEST"}
{"input": "Mount remote \"smbfs\" filesystem \"//username@server/share\" on \"/users/username/smb/share\" as soft", "output": "mount -t smbfs -o soft //username@server/share /users/username/smb/share"}
{"input": "Interpret /etc/bashrc in the current shell, ignoring lines that contain \"mesg\".", "output": "source <(grep -v \"mesg\" /etc/bashrc)"}
{"input": "run bash shell as user root", "output": "su -c 'bash --rcfile myfile'"}
{"input": "find all the non compressed files in the current directory and compress them.", "output": "find . \\! -name \"*.Z\" -exec compress -f {} \\;"}
{"input": "download contents of a website \"https://get.scoop.sh\"", "output": "curl -L https://get.scoop.sh"}
{"input": "Find all *.txt files/directories under current directory and execute the python code 'import sys; print sys.argv[1:]' with the file paths as arguments", "output": "find . -name \"*.txt\" | xargs python -c 'import sys; print sys.argv[1:]'"}
{"input": "Search regular files from the /path/to/dir directory tree for lines that contain \"_START\" and are enclosed in lines \"@GROUP\" and \"@END_GROUP\"", "output": "find /path/to/dir -type f -exec sed '/@GROUP/,/@END_GROUP/!d' {} + | grep '_START'"}
{"input": "Print appended data in \"file\" and search for \"my_pattern\" without buffering", "output": "tail -f file | stdbuf -o0 grep my_pattern"}
{"input": "Find all files under the current directory whose filenames are not \"file.txt\", ignoring the case", "output": "find . -maxdepth 1 -not -iname file.txt"}
{"input": "create directories bravo_dir and alpha_dir", "output": "mkdir bravo_dir alpha_dir"}
{"input": "Print current UTC date in ISO format with precision to seconds", "output": "date -u -Iseconds"}
{"input": "Get virtual private memory use of process", "output": "top -l 1 -s 0 -stats mem -pid PID"}
{"input": "Move all files and directories in the current directory to \"$TARGET\" excluding files matching \"$EXCLUDE\"", "output": "ls -1 | grep -v ^$EXCLUDE | xargs -I{} mv {} $TARGET"}
{"input": "Recursively change the owner and group of all files in the current directory to \"apache\"", "output": "ls | xargs chown -R apache:apache"}
{"input": "Archive \"_vim/\" to \"~/.vim\" suppressing non-error messages and compressing data during transmission", "output": "rsync -aqz _vim/ ~/.vim"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -depth -name .svn -exec rm -fr {} \\;"}
{"input": "List PIDs of children processes", "output": "ps -o pid --no-headers --ppid $PARENT_PID"}
{"input": "find all the files in the home folder which are less than 300Bytes", "output": "find ~ -size -300b"}
{"input": "Print the content of file", "output": "sed 's/\\n//' file"}
{"input": "Search the system for the file \u201ctestfile.txt\u201d", "output": "find / -name \"testfile.txt\""}
{"input": "Calculate the md5 sum of the file \"filename\" and print only the hash", "output": "md5sum filename |cut -f 1 -d \" \""}
{"input": "Find *.c and *.sh files", "output": "find . -type f \\( -name \"*.c\" -o -name \"*.sh\" \\)"}
{"input": "run command './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch' as user elasticsearch", "output": "sudo su elasticsearch -c './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch'"}
{"input": "Run 'somecommand' in an environment without the FOO variable.", "output": "env -u FOO somecommand"}
{"input": "Prints calendar of April of 2012, and redirects output to 't' file and 'more' pager tool.", "output": "cal April 2012 | tee t | more"}
{"input": "display all the html files in the current folder that have been modified exactly 7*24 hours ago", "output": "find . -mtime 7 -name \"*.html\" -print"}
{"input": "Finds all strings with parent folder of path '$path' in 'file', and saves result in 'x' variable.", "output": "x=$(grep \"$(dirname \"$path\")\" file)"}
{"input": "Sort and remove duplicate lines in the output of \"finger\"", "output": "finger | sort -u"}
{"input": "Find all the *.txt files in the current directory older than 48 hours", "output": "find . -maxdepth 1 -name '*.txt' -mtime +2"}
{"input": "Run 'join' with the number-sorted output of file1 and file2, without modifying file1 or file2: for each line with a common first field in file1 and file2, output the common field followed by the extra fields in both files.", "output": "join <(sort -n file1) <(sort -n file2)"}
{"input": "Check the environment variables generated by switching to the root account.", "output": "sudo env"}
{"input": "Create an empty file in each directory named \"mydir\" under current directory.", "output": "find . -type d -name \"mydir\" -print |  sed 's/$/\\/abc.txt/g' | xargs touch"}
{"input": "Find all files under current directory and show their file information", "output": "find . -type f -exec file {} \\;"}
{"input": "find md5sum of content from \"www.google.com\"", "output": "curl -s www.google.com | md5"}
{"input": "Search the current directory recursively for text files containing at least one character", "output": "find -type f -exec grep -Iq . {} \\; -and -print"}
{"input": "Find all files/directories with '.what_to_find' extension under current directory tree and show the list by excluding paths that contain 'excludeddir1' and 'excludeddir2'", "output": "find . -name '*.what_to_find' | grep -v exludeddir1 | grep -v excludeddir2"}
{"input": "Output all lines from file1 except those present in file2, assuming both files are sorted.", "output": "diff file2 file1 | grep '^>' | sed 's/^>\\ //'"}
{"input": "Search for files containing string \"PENDWIDTH\" and view the result using the more command", "output": "find . -exec grep PENWIDTH {} \\; | more"}
{"input": "find directory names starts with 'bar'", "output": "find . -path './bar*' -print"}
{"input": "find  case-insensitive StringBuffer in all *.java files", "output": "find . -type f -name \"*.java\" -exec grep -il string {} \\;"}
{"input": "create symbolic links in current directory to all files located in \"bar1\" directory that are not directory and do not have \".cc\" filename extension", "output": "cd bar1 find . -maxdepth 1 -name '*foo*' -not -name '*.cc'  -exec echo ln -s $PWD/{} ../bar2"}
{"input": "Find all files under current directory whose status was changed less than 3 days ago, sort them and show last 5 lines of output with only their paths", "output": "find . -type f -ctime -3 -printf \"%C@ %p\\n\" | sort | tail -n 5 | sed 's/[^ ]* \\(.*\\)/\\1/'"}
{"input": "Rename all *company* files/directories under current directory to *nemcompany* files/directories", "output": "for f in `find -name '*company*'` ; do mv \"$f\" \"`echo $f | sed s/company/nemcompany/`\" ; done"}
{"input": "Hunting down files with at least one banana", "output": "find . -type f -print0| xargs -0 grep -c banana| grep -v \":0$\""}
{"input": "find and image in current folder (case insensitive search)", "output": "find . -iname \"Articles.jpg\""}
{"input": "Find all .txt files in the current directory tree and edit them with `vim'", "output": "find . -name \"*.txt\" | parallel -Xj1 --tty vim"}
{"input": "Find recursively all files in the \".\" directory tree whose names end with \".class\" and delete them", "output": "find . -type f -name \"*.class\" -exec rm -vf {} \\;"}
{"input": "find all the files ending with .ini in the current directory.", "output": "find . -name *.ini"}
{"input": "find the top 25 files in the current directory and its subdirectories", "output": "find . -type f -exec ls -al {} \\; | sort -nr -k5 | head -n 25"}
{"input": "Remount subtree \"/outside\" to \"/inside\" as a bind", "output": "mount /outside /inside -o bind"}
{"input": "display all the files in the folder /mp3-collection which are bigger than 10MB or which start with the name \"Metallica\"", "output": "find /mp3-collection -name 'Metallica*' -or -size +10000k"}
{"input": "split the first 100 lines of the file \"datafile\" per lines with size 1700 bytes", "output": "sed 100q datafile | split -C 1700 -"}
{"input": "Prints file descriptor of executed built-in 'true'.", "output": "echo <(true)"}
{"input": "Copy a large sparse file \"sparse-1\" to \"sparse-1-copy\"", "output": "rsync --sparse sparse-1 sparse-1-copy"}
{"input": "Find symbolic links in directory /etc and below", "output": "find /etc -type l"}
{"input": "Print list of missing files in a Subversion repository.", "output": "svn status |  grep '\\!' | cut -d\\  -f2-"}
{"input": "Remove all *~ files under dir", "output": "find dir -name \\*~ | xargs echo rm | ksh -s"}
{"input": "Search user1's home directory tree for *.bin files", "output": "find /home/user1 -name \\*.bin"}
{"input": "Reports count of characters in the value of ${FOO_NO_WHITESPACE} variable as follows: \"length(FOO_NO_WHITESPACE)==<counted number of characters>\"", "output": "echo -e \"length(FOO_NO_WHITESPACE)==$(echo -ne \"${FOO_NO_WHITESPACE}\" | wc -m)\""}
{"input": "Make directory \"~/temp\"", "output": "mkdir ~/temp"}
{"input": "Change the ownership of \"/home/bob\" to \"root\"", "output": "sudo chown root /home/bob"}
{"input": "Creates full path with parents, that matches to folder path extracted from $f variable.", "output": "mkdir -p -- \"$(dirname -- \"$f\")\""}
{"input": "create directory testExpress", "output": "mkdir testExpress"}
{"input": "Copy \"src\" to \"dest\" if \"src\" is newer than \"dest\"", "output": "rsync -u src dest"}
{"input": "find all the files in the current directory which have been modified in the  last 6 days.", "output": "find . -atime +6"}
{"input": "Find all the files in entire file system  which are modified 50 days back.", "output": "find / -mtime 50"}
{"input": "Find all directories under '/var/www' directory tree excluding '/var/www/web-release-data' and '/var/www/web-development-data' directories and their sub-directories", "output": "find /var/www -type d \\( ! -wholename \"/var/www/web-release-data/*\"  ! -wholename \"/var/www/web-development-data/*\" \\)"}
{"input": "find all \"tar.gz\" files in a folder and sort them according to the name and display the first 2 files", "output": "(find $DIR/tmp/daily/ -name *.tar.gz | sort -n | head -2"}
{"input": "Unzip all \".gz\" files in the current directory tree to their respective directories", "output": "find . -name \"*.gz\" -execdir gunzip '{}' \\;"}
{"input": "Look for files with wide open permissions", "output": "find . -type f  -perm a=rwx -exec ls -l {} \\;"}
{"input": "find all the text files in the current folder starting with \"somefiles-\"  and prepend the first line", "output": "find . -name \"somefiles-*-.txt\" -type f -exec sed -i 'iText that gets prepended (dont remove the i)' -- '{}' \\;"}
{"input": "Find all files named \"something\" in the current folder and below and run them through the ls -l command in a one batch.", "output": "find . -name something | xargs -0 ls"}
{"input": "Search for files/directories with a case insensitive .txt extension in entire file system", "output": "find / -iname '*.txt'"}
{"input": "Find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 20480 blocks in size.", "output": "echo find . -atime +7 -o -size +`expr 10 \\* 1024 \\* 2` -print"}
{"input": "Search the current directory tree for *.conf and *.txt files", "output": "find . -type f \\( -name \"*.conf\" -or -name \"*.txt\" \\) -print"}
{"input": "Gets MAC address of eth0 network interface.", "output": "ifconfig eth0 | grep -Eoi [:0-9A-F:]{2}\\(\\:[:0-9A-F:]{2}\\){5}"}
{"input": "List all *.txt files/directories under current directory ensuring white space safety", "output": "find . -name '*.txt' -print0|xargs -0 -n 1 echo"}
{"input": "Recursively removes all folders named '.svn' in a current folder.", "output": "find . -type d -name .svn -print0|xargs -0 rm -rf"}
{"input": "Executes command 'cd ~/server' in an opened tmux session 'cf'.", "output": "tmux send-keys -t cf 'cd ~/server' C-m"}
{"input": "Recursively finds all '*.pdf' files in a current folder and removes them.", "output": "find . -name '*.pdf' -exec rm {} +"}
{"input": "find file named foo.txt under root / directory.", "output": "find / -name foo.txt"}
{"input": "Find all read only files in  /home directory", "output": "find /home -type f -perm /u=r"}
{"input": "Search appended data in \"logfile.log\" for \"something\" with a timeout of 3 seconds", "output": "read -t 3 variable < <( tail -f logfile.log | grep \"something\" )"}
{"input": "Recursively move all files in \"/path/to/srcdir\" to \"dest/\"", "output": "find /path/to/srcdir -type f -print0 | xargs -0 -i% mv % dest/"}
{"input": "find all the xml files in the current folder except those that are present in the workspace folder and create a tarball of these files", "output": "find . -name \\*.xml | grep -v /workspace/ | tr '\\n' '\\0' | xargs -0 tar -cf xml.tar"}
{"input": "Find all files on the system that have been modified in the last 10 minutes", "output": "find / -mmin -10"}
{"input": "display a long list of all the files that are bigger than 10KB in current folder", "output": "find . -size +10k -exec ls -l {} \\;"}
{"input": "Remove all directories called \"test\" from the current directory tree", "output": "find -name \"test\" -type d -delete"}
{"input": "search for all the log files in the folder \"/var/log\" and create a tar ball and compress it to bz2.", "output": "find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2"}
{"input": "Sets shell options 'globstar' and 'nullglob'.", "output": "shopt -s globstar nullglob"}
{"input": "Generate the obsolete 29 character Spanish alphabet and number each character", "output": "echo -e {{a..c},ch,{d..l},ll,{m,n},\u00f1,{o..z}}\"\\n\" | nl"}
{"input": "Find all .txt files in the /home/user directory tree and copy them to /home/backup", "output": "find /home/user -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents"}
{"input": "simulate a full login of user root", "output": "su -"}
{"input": "list all samba files in /var/l* directory ( /var/lib or /var/log )", "output": "find  /var -path */l??/samba*"}
{"input": "Globally sets the maximum number of lines to held in window history as 10000.", "output": "tmux set-option -g history-limit 10000"}
{"input": "Find all regular files on the system whose size is greater than 20000k", "output": "find / -type f -size +20000k"}
{"input": "Display the biggest file sizes only", "output": "find -type f -exec du -Sh {} + | sort -rh | head -n 5"}
{"input": "Remove leading and trailing space from lines in file 'in.txt', interactively page through a hexdump of the result.", "output": "awk '{gsub(/^[ \\t]+|[ \\t]+$/,\"\"); print;}' in.txt | hexdump -C | less"}
{"input": "List all files in the current directory tree that were last modified more than 60 minutes ago", "output": "find -mmin +60"}
{"input": "Log into \"ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com\" using identity file \"~/path/mykeypair.pem\"", "output": "ssh -i ~/path/mykeypair.pem ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com"}
{"input": "Count md5sum of all '*.py' files in a current folder with subfolders.", "output": "find /path/to/dir/ -type f -name \"*.py\" -exec md5sum {} + | awk '{print $1}' | sort | md5sum"}
{"input": "Immediately kill all processes listening on TCP port 3000.", "output": "lsof -n -i:3000 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9"}
{"input": "Delete all directories under <directory_name> that contain directories named 'test' and 'live'", "output": "find <directory_name> -type d -exec sh -c \"cd {} && [ -d live ] && [ -d test ] && cd ../ && echo \\\"Deleting {}\\\" && rm -rvi {} \" {} \\;"}
{"input": "Save absolute path of \"/home/nohsib/dvc/../bop\" in variable \"absolute_path\"", "output": "absolute_path=$(readlink -m /home/nohsib/dvc/../bop)"}
{"input": "find all files with pattern` '*song*abc2009*.jpg' and replace \"abc2009\" with \"def2010\"", "output": "find . -name '*song*abc2009*.jpg' | sed 's/\\(^.*song.*\\)abc2009\\(.*.jpg\\)$/mv \"&\" \"\\1def2010\\2\"/' | sh"}
{"input": "Set the read bit for \"other\" on all *rc.conf files in the current directory tree", "output": "find . -name \"*rc.conf\" -exec chmod o+r '{}' \\;"}
{"input": "Get a recursive file list of directory $dir", "output": "find $dir -type f"}
{"input": "Find all regular files under '/home/john/scripts' directory tree excluding files with '.ksh' extension", "output": "find /home/john/scripts -type f -not -name \"*.ksh\" -print"}
{"input": "Find recursively the latest modified .zip file in the current directory", "output": "find . -name \"*zip\" -type f | xargs ls -ltr | tail -1"}
{"input": "Find all hidden regular files under /tmp and below", "output": "find /tmp -type f -name \".*\""}
{"input": "Search decompressed \"filename.gz\" for case-insensitive \"user-user\"", "output": "zcat filename.gz | grep -i user-user"}
{"input": "Find files and directories that are at least seven levels of nesting in the directory /usr/src", "output": "find /usr/src -name CVS -prune -o -mindepth 7 -print"}
{"input": "compresses all the files in the current folder with default depth", "output": "find . -depth -print | cpio -dump /backup"}
{"input": "Find all regular files under /home/www and replace every occurrences of 'subdomainA' with 'subdomainB' in those files (may produce 'agument too long' error)", "output": "sed -i '' -e 's/subdomainA/subdomainB/g' $(find /home/www/ -type f)"}
{"input": "find md5sum of 401", "output": "yosemite$ echo -n 401 | md5"}
{"input": "ssh into \"hostname\" as user \"buck\"", "output": "ssh buck@hostname"}
{"input": "Recursively copies everything from '/zzz/zzz/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.", "output": "yes | cp -rf /zzz/zzz/* /xxx/xxx"}
{"input": "Find all regular files under  $somedir directory and print each of their paths after a string literal 'Found unexpected file '", "output": "find \"$somedir\" -type f -exec echo Found unexpected file {} \\;"}
{"input": "display a long listing of all the regular/normal files in the current folder along with their md5sum", "output": "find . -type f -exec sh -c 'printf \"%s %s \\n\" \"$(ls -l $1)\" \"$(md5sum  $1)\"' '' '{}' '{}' \\; | awk '{$8=\"\"; print $0}'"}
{"input": "display all symbolic links in the folder \"myfiles\" and follow them", "output": "find -L /myfiles"}
{"input": "Find files/directories under current directory and force xargs to print them one by one", "output": "find . | xargs -n 1 echo"}
{"input": "Recursively find the latest modified file in the current directory", "output": "find . -type f -print0|xargs -0 ls -drt|tail -n 1"}
{"input": "List all files and directories (including hidden) in the current working directory in a long list format sorted by the oldest modification time", "output": "ls -alrt `pwd`/*"}
{"input": "find all directories in the current directory which have the name foo and do not have the extension \"bar\"", "output": "find . -name '*foo*' ! -name '*.bar' -type d -print"}
{"input": "Display the number of sub-directories for all directories under current directory tree, sort them according to the decreasing order of the number and show only the first 10 of them", "output": "find . -type d -ls | awk '{print $4 - 2, $NF}' | sort -rn | head"}
{"input": "search normal files called ' banckup '  from /usr directory downward and print them.", "output": "find /usr -type f -name backup -print"}
{"input": "Find all regular files that reside in the current directory tree and were last modified more than 7 days ago", "output": "find . -type f -mtime +7"}
{"input": "Print the input \"hello world\" to the console followed by a swap of the first two awk fields", "output": "echo hello world | tee /dev/tty | awk '{print $2, $1}'"}
{"input": "Delete all MP3 files under /tmp", "output": "find /tmp -iname '*.mp3' -print0 | xargs -0 rm"}
{"input": "Finds recursively and following symlinks from root folder all files that contain \"text-to-find-here\" and prints files names.", "output": "grep -Ril \"text-to-find-here\" /"}
{"input": "Run ipython nbconvert with all the file/directory paths under current directory as arguments", "output": "find | xargs ipython nbconvert"}
{"input": "find all the files that are modified in the last 1 day", "output": "find  -mtime -1"}
{"input": "Output the string 'yes' continously until killed", "output": "yes"}
{"input": "Generate UUIDs for the files from the current directory tree", "output": "find -printf \"%P\\n\"| sort | xargs -I '{}' bash -c 'echo $(uuid) {}'"}
{"input": "Find all .txt files in the current directory tree and edit them with `vim'", "output": "find . -name \"*.txt\" | xargs vim"}
{"input": "find all empty files in the current directory ( empty file = size 0 bytes )", "output": "find . -size 0"}
{"input": "Change all cron jobs running \"anm.sh\" to be run every 10 minutes instead of 5 minutes.", "output": "crontab -l | sed '/anm\\.sh/s#\\/5#\\/10#' | crontab -"}
{"input": "List common files in directories \"1\" and \"2\"", "output": "cat <(ls 1 | sort -u) <(ls 2 | sort -u) | uniq -d"}
{"input": "search for text files in the current folder which have write access to others", "output": "find . -type f \\( -iname \"*.txt\" -and -perm -o=w \\)"}
{"input": "Recursively search for all files with names ending with \"_test.rb\", renaming them to end with \"_spec.rb\".", "output": "find . -name \"*_test.rb\" | xargs rename s/_test/_spec/"}
{"input": "Calculate md5 sum of files $source_file and $dest_file", "output": "md5sum \"$source_file\" \"$dest_file\""}
{"input": "Updates all packages with 'rpmfusion' in name.", "output": "find-repos-of-install | grep rpmfusion | xargs yum update"}
{"input": "Copy \"/path/to/source\" to '/path/to/dest' in remote \"username@computer\"", "output": "rsync -r /path/to/source username@computer:/path/to/dest"}
{"input": "Calculate md5 sums for each files matching 'main.cpp*'", "output": "md5sum main.cpp*"}
{"input": "Display 12345 backwards", "output": "echo 12345 | rev"}
{"input": "find the MyCProgram.c (case insensitive find) under the current directory and run the md5sum command against it", "output": "find -iname \"MyCProgram.c\" -exec md5sum {} \\;"}
{"input": "Find regular files named core under /tmp and delete them", "output": "find /tmp -name core -type f -print | xargs /bin/rm -f"}
{"input": "Move *wp-admin/index.php files to *wp-admin/index_disabled under /var/www/", "output": "find /var/www/ -path '*wp-admin/index.php' | xargs -i sh -c 'mv {} $(dirname {})/index_disabled'"}
{"input": "change the permissions of all the directories in the folder root_dir to 555", "output": "find root_dir -type d -exec chmod 555 {} \\;"}
{"input": "Find all files under /somefolder matching the extended case insensitive regex '\\./(.*\\.error.*|second.*log|.*FFPC\\.log)$' in their paths", "output": "find -E /somefolder -type f -iregex '\\./(.*\\.error.*|second.*log|.*FFPC\\.log)$'"}
{"input": "Recursively removes all files with name like \"*.war\" in  /home/ubuntu/wars folder.", "output": "find /home/ubuntu/wars -type f -name \"*.war\" -exec rm {} \\\\;"}
{"input": "Forcibly removes all files like '*.bak' and '*~'", "output": "rm -f *.bak *~"}
{"input": "delete all the text files in the current folder", "output": "find . -type f -name \"*.txt\" -delete"}
{"input": "Find all files modified on the 7th of June, 2007, starting from the current directory", "output": "find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08"}
{"input": "Displays details about package 'zsh'.", "output": "yum info zsh"}
{"input": "Make directories and parents as needed to \"${raw_folder}\" and \"${split_folder}\"", "output": "mkdir -p ${raw_folder} ${split_folder}"}
{"input": "Find all directories matching pattern \"*log*\" in the current directory tree and print the last 2 lines of their 'ls' listing", "output": "find . -type d -name \"*log*\" | xargs -I {} sh -c \"echo {};ls -la {} | tail -2\""}
{"input": "Display \"/tmp/file\" as a table of width 30 with columns filled before rows", "output": "column -x -c 30 /tmp/file"}
{"input": "Find files whose pathnames end in \"f\"", "output": "find .  -path '*f'"}
{"input": "List the names of the directories in current directory without going into sub-directories", "output": "find . -mindepth 1 -maxdepth 1 -type d -printf \"%P\\n\""}
{"input": "check find version", "output": "find --version"}
{"input": "Send one ping request to host whose name or IP address is specified by variable \"remote_machine\".", "output": "ping -c 1 $remote_machine"}
{"input": "Print full date of yesterday", "output": "echo `date -v-1d +%F`"}
{"input": "Search the current directory tree for all regular non-hidden files except *.o", "output": "find ./ -type f -name \"*\" -not -name \"*.o\""}
{"input": "search for a word in all the files with the extension \"ch\" in the current folder", "output": "find -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "Remove all regular files under $DIR directory tree that were accessed more than 5 days ago", "output": "find \"$DIR\" -type f -atime +5 -exec rm {} \\;"}
{"input": "Test if the tar file in \"file.tar.gz\" is corrupt", "output": "gunzip -c file.tar.gz | tar t > /dev/null"}
{"input": "Convert the contents of 'var1' variable to lowercase", "output": "var1=`echo $var1 | tr '[A-Z]' '[a-z]'`"}
{"input": "Remove files that are greater than 1MB in size under current directory", "output": "find . -type f -size +1M -exec rm {} +"}
{"input": "Search the current directory tree for files and directories whose names do not end in \"exe\" and \"dll\"", "output": "find . | grep -v '(dll|exe)$'"}
{"input": "Print a listing of the `other' directory", "output": "find other -maxdepth 1 -printf \"%P\\n\""}
{"input": "Move all hidden files in \"/path/subfolder/\" to \"/path/\"", "output": "mv /path/subfolder/.* /path/"}
{"input": "display all the regular files in the folder \"$(FOLDER)\" which are modified in the last $(RETENTION)*24 hours and excluding hidden files", "output": "find ${FOLDER} -type f ! -name \\\".*\\\" -mtime -${RETENTION}"}
{"input": "Update the archive '2009.tar' with the files from the data/ directory tree that match pattern 'filepattern-*2009*'", "output": "find data/ -name \"filepattern-*2009*\" | cpio -ov --format=ustar > 2009.tar"}
{"input": "Search for regular files of the grooup 'users' in the file system", "output": "find /  -type f -group users"}
{"input": "Find files patching \"pattern\"", "output": "find . -name \"pattern\" -print"}
{"input": "Find the first file/directory in ... directory and quit", "output": "find ... -print -quit"}
{"input": "display all normal/regular files in current directory", "output": "find . -type f"}
{"input": "List files and directories recursively", "output": "find . -print | xargs ls -gilds"}
{"input": "Find all broken symlinks under current directory", "output": "find . -type l -exec sh -c \"file -b {} | grep -q ^broken\" \\; -print"}
{"input": "Prints local machine's LAN IP address", "output": "ifconfig $(netstat -rn | grep -E \"^default|^0.0.0.0\" | head -1 | awk '{print $NF}') | grep 'inet ' | awk '{print $2}' | grep -Eo '([0-9]*\\.){3}[0-9]*'"}
{"input": "display a long listing of all regular files  in current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60 -type f | xargs ls -l"}
{"input": "Print a tab separated table in \"table.txt\" with cell borders", "output": "sed -e 's/\\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print \"-----------------------------------------------------------------------\";}'"}
{"input": "when using vi-insert keymap bind command \"\\C-v{}\\ei\" to key \"{\"", "output": "bind -m vi-insert '\"{\" \"\\C-v{}\\ei\"'"}
{"input": "display all the regular/normal files in the folder /path/ which have not been modified today ( from day start ie, 00:00 )", "output": "find /path/ -type f -daystart -mtime +0"}
{"input": "Find all *.log files under path/", "output": "find path/ -name \"*.log\""}
{"input": "search for all the files in current folder and display all the file names separated by space", "output": "find . | paste -sd \" \""}
{"input": "Replace all spaces with underscores in directory paths under current directory.", "output": "find -name \"* *\" -type d | rename 's/ /_/g'"}
{"input": "Find all files under current directory whose status was changed less than 3 days ago and show last 5 lines of output", "output": "find . -type f -ctime -3 | tail -n 5"}
{"input": "Split \"infile\" into 2 files of about equal size", "output": "split -n2 infile"}
{"input": "display the version of find", "output": "find --version"}
{"input": "use regex with find command", "output": "find . -regextype sed -regex \".*/[a-f0-9\\-]\\{36\\}\\.jpg\""}
{"input": "file all the Sticky Bit set files whose permission are 551", "output": "find / -perm 1551"}
{"input": "Display system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type.", "output": "uname -a"}
{"input": "Find and remove all .core files", "output": "find / -name \"*.core\" -print -exec rm {} \\;"}
{"input": "Remove all files and directories called \"test\" from the current directory tree", "output": "find . -name test -delete"}
{"input": "search for all the files with the name \"dummy\" in the current folder", "output": "find -type f -name dummy"}
{"input": "Display each line in file.txt backwards", "output": "rev file.txt"}
{"input": "display all files in the current folder along with their last access timestamps", "output": "find . -printf \"%h/%f : dernier acc\u00e8s le %Ac\\n\""}
{"input": "Print \"$1\" or default 10 random lines from standard input", "output": "nl | sort -R | cut -f2 | head -\"${1:-10}\""}
{"input": "Delete all hidden files under $some_directory", "output": "find \"$some_directory\" -type f -name '.*' | xargs rm"}
{"input": "print apparent size rather than disk usage", "output": "du -B1 --apparent-size /tmp/foo.txt"}
{"input": "Remove all subdirectories of the current directory, except for \"bar\", \"foo\", \"a\", and \"b\"", "output": "find . -maxdepth 1 -type d \\( ! -name \"bar\" -a ! -name \"foo\" -a ! -name \"a\" -a ! -name \"b\" \\) -delete"}
{"input": "Test if files named 'something' were found in Dir/", "output": "[[ ! -z `find 'Dir/' -name 'something'` ]] && echo \"found\" || echo \"not found\""}
{"input": "Locate all files named 'restore.php' in the current directory and 3 levels below", "output": "find . -maxdepth 4 -name 'restore.php'"}
{"input": "Change string \"searc\" to \"replace\" in all files in directory hierarchy", "output": "find . -type f -exec sed -i 's/searc/replace/g' {} \\;"}
{"input": "Archive \"src\" to \"dest\" via ssh with permissions set to 755", "output": "rsync -avz --chmod=ug=rwx --chmod=o=rx -e ssh src dest"}
{"input": "Search the current directory tree for directories", "output": "find $PWD -type d"}
{"input": "Find all files in the current directory tree that are not newer than some_file", "output": "find . ! -newer some_file"}
{"input": "Print login name and full name of all users currently logged in and delete instances of \"of group.*\"", "output": "finger -l | awk '/^Login/' | sed 's/of group.*//g'"}
{"input": "Find all regular files under current directory tree that contain 'some text' in their names excluding paths that contain dot files/directories", "output": "find . -not -path '*/\\.*' -type f -name '*some text*'"}
{"input": "Display file type description of 'file-name' based on contents.", "output": "file file-name"}
{"input": "Find all files and directories containing \"disc\" in their names", "output": "find . -name *disc*"}
{"input": "find all the files in the entire file system that have been changed exactly  60 days  and display ten files", "output": "find / -cmin -60 | head"}
{"input": "change the permission of all php files in current folder", "output": "find . -name \"*.php\" -print0 -fprint >(pv --line-mode) | xargs -0 chmod 755"}
{"input": "find all the text files in the current folder expect those which are in the path \"sk\"", "output": "find . -path \"./sk\" -prune -o -name \"*.txt\" -print"}
{"input": "find all the files that have been modified since the last time we checked", "output": "find /etc -newer /var/log/backup.timestamp -print"}
{"input": "Report file systems inode usage.", "output": "df -i"}
{"input": "Run .makeall.sh in an empty environment.", "output": "env -i ./makeall.sh"}
{"input": "Find all *-* files under current directory", "output": "find . -type f -name '*-*'"}
{"input": "find all the text files in the current folder", "output": "find . -type f -name '*.txt' -print"}
{"input": "Search the current directory tree for file `teste.tex'", "output": "find -name teste.tex"}
{"input": "display a long listing of the files all non emoty files in current folder which have been modified 60 minutes ago", "output": "find . -mmin 60 -print0 | xargs -0r ls -l"}
{"input": "Run a shell with all environment variables specified in the file 'cronenv' in the user's home directory.", "output": "env - `cat ~/cronenv` /bin/sh"}
{"input": "set value of the variable \"cmdstr\" to the value of the alias  \"$aliascmd\"", "output": "cmdstr=$(alias $aliascmd | cut -d\"'\" -f2 | xargs)"}
{"input": "Print lines of 'file' reverted order, and reverted characterwise", "output": "tac file | rev"}
{"input": "Remove the last two alphanumeric file extensions from \"mpc-1.0.1.tar.gz\"", "output": "echo \"mpc-1.0.1.tar.gz\" | sed -r 's/\\.[[:alnum:]]+\\.[[:alnum:]]+$//'"}
{"input": "See all pages in section 3.", "output": "apropos -s 3 ."}
{"input": "search for the directory \"config\" in the current folder and change directory to the first instance of the search", "output": "cd $(find . -name config -type d | sed 1q)"}
{"input": "Unsets shell functions 'ls' and '/bin/ls'.", "output": "unset -f ls /bin/ls"}
{"input": "find the path of a specfic video file in the current directory", "output": "find ./ -name \"foo.mp4\" -printf \"%h\\n\""}
{"input": "Move the directory named \"some-dir\" and residing under the current one to x/", "output": "find ./ -maxdepth 1 -name \"some-dir\" -type d -print0 | xargs -0r mv -t x/"}
{"input": "search for all the links in a folder and display all the broken links", "output": "find -L /target -type l | while read -r file; do echo $file is orphaned; done"}
{"input": "Print the names and sizes of regular files residing in the \"tmp\" directory tree", "output": "find tmp -type f -printf \"%s %p\\n\" | awk '{sub(/^[^ ]+/,sprintf(\"f %10d\",$1))}1'"}
{"input": "Merge each line of standard input into a single comma separated line", "output": "paste -s -d\",\""}
{"input": "SSH into host \"$1\" using key file \"/path/to/ssh/secret/key\" and execute command \"$2\"", "output": "ssh -i /path/to/ssh/secret/key $1 $2"}
{"input": "Print ls output for all non-empty files under under current directory", "output": "find . -type f ! -size 0 -exec ls -l '{}' \\;"}
{"input": "Decompress and extract 'archive.tar.gz' into '/destination'", "output": "gzip -dc archive.tar.gz | tar -xf - -C /destination"}
{"input": "add read permission to others for the files in the current folder having the name \"rc.conf\" in their name.", "output": "find . -name \"*rc.conf\" -exec chmod o+r '{}' \\;"}
{"input": "get all files in a current directory modified in the last day", "output": "find . -mtime -1 | xargs tar --no-recursion -czf myfile.tgz"}
{"input": "Find files under /usr that are the same age or older than file `FirstFile'", "output": "find /usr ! -newer /FirstFile -print"}
{"input": "prune all the files in the current directory, only current directory (.) is the output", "output": "find . -prune"}
{"input": "List the users having <groupname> as their secondary group.", "output": "getent group <groupname> | cut -d: -f4 |  tr ',' '\\n'"}
{"input": "Shows MAC address of network interface eth0.", "output": "ifconfig eth0 | grep HWaddr |cut -dH -f2|cut -d\\  -f2"}
{"input": "Find files in the /var/log folder which were modified between 60 minutes and 10 minutes ago", "output": "find /var/log/ -mmin -60 -mmin +10"}
{"input": "Write the output of \"proc1\" to standard output and to all commands from \"proc2\" to \"procN\"", "output": "proc1 | tee >(proc2) ... >(procN-1) | procN"}
{"input": "ssh into \"hostname\" as user \"buck\"", "output": "ssh -l buck hostname"}
{"input": "Remove all files with '.js' extension from the 'js' directory tree", "output": "find ./js/ -type f -name \"*.js\" | xargs rm -f"}
{"input": "Find List of directories  with non-zero sub-folder count:", "output": "find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find \"$dir\" -type d | wc -l); let n--; if [ $n -gt 0 ]; then printf \"%4d : %s\\n\" $n \"$dir\"; fi; done"}
{"input": "Write the output of \"false\" to standard output and to \"/dev/null\"", "output": "false | tee /dev/null"}
{"input": "Prints only unique lines of './yourscript.ksh' output.", "output": "./yourscript.ksh | sort | uniq"}
{"input": "Change owner to \"$FUID\" and group to \"$FGID\" of \"$FILE2\"", "output": "chown $FUID:$FGID \"$FILE2\""}
{"input": "Print summary of new/missing files, and which files differ between folder1 and folder2, excluding those matching pattern \"node_modules\".", "output": "diff -rqyl folder1 folder2 --exclude=node_modules"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \" | sed 's/.*/\"&\"/' | xargs ls -l"}
{"input": "display all file in the home folder except \".c\" files", "output": "find $HOME -not -iname \"*.c\" -print"}
{"input": "List all *fink* files/directories in entire file system", "output": "find / \\( -type f -or -type d \\) -name \\*fink\\* -ls"}
{"input": "Save the list of directories modified a fortnight ago to `deploy.txt' removing the leading ./ from the file names", "output": "find . -type d -mtime 14 -printf \"%P\\n\" > deploy.txt"}
{"input": "Report all files starting in the directories /mydir1 and /mydir2 larger than 2,000 blocks that have not been accessed in over 30 days", "output": "find /mydir1 /mydir2 -size +2000 -atime +30 -print"}
{"input": "find all the configuration files in the file system", "output": "find / -name \"*.conf\""}
{"input": "Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found", "output": "cd $(find . -name Subscription.java -printf '%h\\n')"}
{"input": "search for all the files in the current folder which are bigger than 10KB and display them biggest file", "output": "find . -size +10k -exec ls -ls {} \\+ | sort -n | tail -1"}
{"input": "Create symbolic links in the current directory for all files excluding \"CONFIGFILE\" located in \"/your/project\"", "output": "find /your/project -maxdepth 1 ! -name \"CONFIGFILE\" -exec ln -s \\{\\} ./ \\;"}
{"input": "Enables shell options 'extglob' and 'progcomp'", "output": "shopt -s extglob progcomp"}
{"input": "find all the files in the home folder which have been modified in 1 year or more ( which are not modified in the last 1 year ).", "output": "find $HOME -mtime +365"}
{"input": "search for all Scala files under the current directory that contain the string null", "output": "find . -type f -name \"*.scala\" -exec grep -B5 -A10 'null' {} \\;"}
{"input": "If first command fails, exits from script with exit code of failed command.", "output": "make || exit $?"}
{"input": "find all files ending with \".fq\" and give is as input to the fastQC command", "output": "find . -name \"*.fq\" | xargs -n 1 fastqc"}
{"input": "Filters out all comment lines(lines beginning with a '#') from /etc/launchd.conf and pipes the output to launchctl.", "output": "egrep -v '^\\s*#' /etc/launchd.conf | launchctl"}
{"input": "Search the current directory tree for PHP files changed less than 14 days ago", "output": "find . -name *.php -ctime -14"}
{"input": "find all the regular/normal files in the current folder which belong to the group \"flossblog\"", "output": "find . -group flossblog -type f"}
{"input": "remove all text files from the current folder. Print0 is used to handle files whose names have only spaces or those files which have newlines in their names", "output": "find -name \"*.txt\" -print0 | xargs -0 rm"}
{"input": "Send each byte in \"/home/cscape/Desktop/file\" to awk script \"x.awk\"", "output": "fold -1 /home/cscape/Desktop/file  | awk -f x.awk"}
{"input": "Dump \"input_file\" as a 2 byte hexadecimal, character, and octal value and view the contents in \"less\"", "output": "od -xcb input_file_name | less"}
{"input": "Find files in the current directory tree that match pattern \"*sub*\"", "output": "find ./ -name \"*sub*\""}
{"input": "Export variable \"JAVA_HOME\" as symlink resolved absolute path of \"/usr/bin/javac\" with \"/bin/javac\" removed", "output": "export JAVA_HOME=$(readlink -f /usr/bin/javac | sed \"s:/bin/javac::\")"}
{"input": "Set the group to \"username\" for all files with GID=1000 in the current directory tree", "output": "find -gid 1000 -exec chown -h :username {} \\;"}
{"input": "create directories a b c d e", "output": "mkdir a b c d e"}
{"input": "convert all the normal files in the current folder from dos format to unix format (remove extra characters at the end etc.)", "output": "find . -type f -exec dos2unix {} \\;"}
{"input": "Replace all newlines from standard input except the last with spaces", "output": "sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/ /g'"}
{"input": "Find all files/directories under current directory that were accessed less than 1 day ago", "output": "find . -atime -1 -print"}
{"input": "List the names of all files under current directory", "output": "find . -type f -exec basename {} \\;"}
{"input": "Remove all tmp/*.mp3 files", "output": "find tmp -maxdepth 1 -name *.mp3 -print0 | xargs -0 rm"}
{"input": "Remove all text files in the home directory with confirmation", "output": "find $HOME/. -name *.txt -ok rm {} \\;"}
{"input": "Recursively removes all files in a 'path' folder but 'EXPR' files.", "output": "find [path] -type f -not -name 'EXPR' | xargs rm"}
{"input": "Find all files under current directory whose file type description contains \"image\", display the paths to files and file type descriptions.", "output": "find . -name '*' -exec file {} \\; | grep -o -P '^.+: \\w+ image'"}
{"input": "Find all *.ogg files on the system ignoring the case", "output": "find / -iname '*.ogg'"}
{"input": "Find all *.m4a files/directories under /home/family/Music directory", "output": "find /home/family/Music -name '*.m4a' -print0"}
{"input": "List all processes with detailed information", "output": "ps -ef"}
{"input": "Sort lines in \"set1\" and \"set2\" to standard output preserving only unique lines", "output": "sort -u set1 set2"}
{"input": "Recursively add read and execute permissions to all files and folders in \"directory\"", "output": "chmod -R +xr directory"}
{"input": "find all the backup files in the current folder and delete them after user confirmation", "output": "find . -type f -name \"*.bak\" -exec rm -i {} \\;"}
{"input": "Search for a line starting with 'use strict' in all files with '.pl' extension under current directory tree and show the unmatched files only", "output": "find . -name '*.pl' | xargs grep -L '^use strict'"}
{"input": "Search for xception in all *auth*application* files under current directory and count the number of matches", "output": "zegrep \"xception\" `find . -name '*auth*application*'` | wc -l"}
{"input": "find all the files in the entire file system whose size is greater than 20MB", "output": "find / -type f -size +20000k"}
{"input": "Find all files/directories named 'articles.jpg' under '/home/username/public_html/images' directory tree", "output": "find /home/username/public_html/images -name \"articles.jpg\""}
{"input": "Lists content of the current folder.", "output": "$ ls"}
{"input": "Delete empty regular files", "output": "find . -type f -empty -delete"}
{"input": "Find all files/directories named orm.properties under  /eserver6/share/system/config/cluster directory", "output": "find /eserver6/share/system/config/cluster -name \"orm.properties\""}
{"input": "Recursively finds files like '*.js', and filters out files with 'excludeddir' in path.", "output": "find . -name '*.js' | grep -v excludeddir"}
{"input": "Search the ~ and `Music' directory trees for .mp3 files", "output": "find ~ Music -name '*.mp3'"}
{"input": "Print onlt last slash-separated field from $PATH value", "output": "echo \"$PATH\" | rev | cut -d\"/\" -f1 | rev"}
{"input": "Save the physical current working directory to variable \"END_ABS\"", "output": "END_ABS=`pwd -P`"}
{"input": "Assign the alias rmc to a find command that deletes all core dump files in the currenty directory and below.", "output": "alias rmc=\"find . -iname core -exec rm {} \\;\""}
{"input": "list all the files in the current directory which are of size 0 bytes.", "output": "find . -empty"}
{"input": "Print 10 \"#\" characters in a row", "output": "yes '#' | head -n 10 | tr -d '\\n'"}
{"input": "Displays information about grc formula.", "output": "brew info grc"}
{"input": "Search the /tmp/ directory recursively for regular files", "output": "find /tmp -type f"}
{"input": "find all c, cpp files in current folder", "output": "find -regex '.*\\.\\(c\\|cpp\\)'"}
{"input": "List all regular files in the current directory tree", "output": "find . -type f -print0 | xargs -0 ls -l"}
{"input": "find all the \".sh\" files in the current folder ( case insensitive search)", "output": "find -iname *.SH"}
{"input": "Find all files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago", "output": "find . -maxdepth 1 -cmin +60 -name file"}
{"input": "Find all the files whose name is FindCommandExamples.txt in the current working directory", "output": "find /root -name FindCommandExamples.txt"}
{"input": "Perform white space safe deletion of files named core under /tmp", "output": "find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f"}
{"input": "Print 'Empty dir' if $some_dir is empty", "output": "if find \"`echo \"$some_dir\"`\" -maxdepth 0 -empty | read v; then echo \"Empty dir\"; fi"}
{"input": "Find all regular files under ${path} without following symlinks", "output": "find ${path} -P -type f"}
{"input": "Check the bit width of static library \"libsomefile.a\"", "output": "readelf -a -W libsomefile.a | grep Class: | sort | uniq"}
{"input": "Remount the root file system with read and write permission", "output": "mount -o rw,remount -t rootfs /"}
{"input": "Find all files/directories owned by user 'joebob' under '/some/directory' directory tree", "output": "find /some/directory -user joebob -print"}
{"input": "create a sub shell and search for regular/normal file with the name \"myfile\" in the entire file system and discard all the errors", "output": "sh -c \"find / -name myfile -type f -print 2> /dev/null\""}
{"input": "delete all the \"wmv\" \"wma\" files in the currnet folder,", "output": "find . \\( -name '*.wmv' -o -name '*.wma' \\) -exec rm {} \\;"}
{"input": "Find all files in current directory and search for 'searchName' in those files", "output": "find ./ -name \"*\" | xargs grep \"searchName\""}
{"input": "Determine if /full/path exists on a mounted file system.", "output": "df /full/path | grep -q /full/path"}
{"input": "Create a symbolic link named \"wh\" to \"$wh\"", "output": "ln -s \"$wh\" wh"}
{"input": "Remove all regular files from the current directory tree that were modified a day ago", "output": "find . -type f -mtime 1 -exec rm {} +"}
{"input": "Search the xargstest/ directory recursively for files matching pattern 'file??'", "output": "find xargstest/ -name 'file??'"}
{"input": "Check all .txt files whose names may contain spaces whether they contain \"needle\"", "output": "find . -type f -iname \"*.txt\" -print0 | xargs -0 grep \"needle\""}
{"input": "Count the total number of lines in all \"*.gz\" files in the current directory tree after decompression", "output": "find . -type f -name '*.gz' | xargs zcat | wc -l"}
{"input": "Read a line from standard input with prompt \"Are you sure? [Y/n]\" and save response in variable \"response\"", "output": "read -r -p \"Are you sure? [Y/n]\" response"}
{"input": "Find recursively all files under current directory tree that contain a colon in the filename", "output": "find . -name \\*\\:\\*"}
{"input": "Find all TXT files in the current directory and copy them to directory \"$HOME/newdir\"", "output": "find \"$HOME\" -name '*.txt' -type f -print0 | xargs -0 cp -ut \"$HOME/newdir\""}
{"input": "search for text files in the current folder which do not have write access to others", "output": "find . -type f \\( -iname \"*.txt\" ! -perm -o=w \\)"}
{"input": "Find files in entire file system that are writable by group or other", "output": "find / -perm /g=w,o=w"}
{"input": "Search /tmp/ for files smaller than 100 bytes", "output": "find /tmp -size -100c"}
{"input": "Split the contents of \"file1 file2 ... file40000\" into 1445 files in a round robin fashion with prefix \"outputprefix\" and numeric suffixes", "output": "cat file1 file2 ... file40000 | split -n r/1445 -d - outputprefix"}
{"input": "List the directory paths of all file.ext files under present working directory", "output": "find `pwd` -name \"file.ext\" -exec dirname {} \\;"}
{"input": "Search the current directory tree for regular files whose names end in \"log\"", "output": "find `pwd` -name \"*log\" -type f"}
{"input": "recursively copy files by file extension, preserving directory structure", "output": "find -type f -name \\*.txt -exec install -D {} /dest/path/{} \\;"}
{"input": "Update the timestamp of 'filename', or create an empty file if it doesn't exist.", "output": "touch filename"}
{"input": "Show the list of files that are owned by user wnj or are newer than file `ttt'", "output": "find / \\( -newer ttt -or -user wnj \\) -print"}
{"input": "list all files under $dir directory except path $dir/prune_me directory", "output": "find \"$dir\" -path \"$dir/prune_me\" -prune -o -exec bash -c 'echo \"$0\"'  {} \\;"}
{"input": "Enables shell options 'expand_aliases', 'extglob', 'xpg_echo'.", "output": "shopt -s expand_aliases extglob xpg_echo"}
{"input": "display all the regular files in current folder that belong to the user \"tom\"", "output": "find . -type f -user tom"}
{"input": "Prints long recursive listing of all content of a root folder, appending output to 'output.file'.", "output": "ls -lR / | tee -a output.file"}
{"input": "set alias \"clean\" for command 'rm -rf \"#\"* \".\"*~ *~ *.bak *.dvi *.aux *.log'", "output": "alias clean='rm -rf \"#\"* \".\"*~ *~ *.bak *.dvi *.aux *.log'"}
{"input": "Compare the contents of \"/bin\" and \"/usr/bin\" line by line", "output": "diff <(ls /bin) <(ls /usr/bin)"}
{"input": "Locate all files \"needle.txt\"", "output": "find . -name \"needle.txt\""}
{"input": "Search the current directory tree for files whose names do not end in \".exe\" and \".dll\"", "output": "find . -not -name \"*.exe\" -not -name \"*.dll\" -type f"}
{"input": "list all files in the current directory recursively", "output": "find ."}
{"input": "find all files in the file system whose size is bigger than 3GB", "output": "find / -size +3G"}
{"input": "change the ownership of all regular/normal files in the current directory", "output": "find . -type f | xargs chown username"}
{"input": "SSH in server 'server' as user 'user' with X11 forwarding disabled", "output": "ssh -x user@server"}
{"input": "Archive the entire file system into tarfile.tar.bz2", "output": "find / -print0 | xargs -0 tar cjf tarfile.tar.bz2"}
{"input": "List each subdirectory name composing the current working directory", "output": "pwd | cut -b2- | tr '/' '\\n'"}
{"input": "List all files in the current directory tree that were modified 60 minutes ago", "output": "find . -mmin 60 | xargs '-rd\\n' ls -l"}
{"input": "find all the files in the current folder which have been modified after the file disk.log", "output": "find . -newer disk.log -print"}
{"input": "Get second line from text contained in variable $data.", "output": "echo \"$data\" | cut -f2 -d$'\\n'"}
{"input": "Calculate the md5 sum of \"a\"", "output": "echo \"a\" | md5sum"}
{"input": "Add execute permission to all files ending in \".sh\"", "output": "chmod +x *.sh"}
{"input": "Convert all *.ps files under $STARTDIR directory to *.pdf files", "output": "find $STARTDIR -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf '{}.ps' '{}.pdf'"}
{"input": "Compare each .xml file under the current directory with a file of the same name in \"/destination/dir/2\"", "output": "find . -name *.xml -exec diff {} /destination/dir/2/{} \\;"}
{"input": "Print lines 347340107 through 347340206 in \"filename\"", "output": "tail -n +347340107 filename | head -n 100"}
{"input": "Find files that were accessed in less than a day ago", "output": "find / -atime -1"}
{"input": "search for files named \"WSFY321.c\" in a case-insensitive manner", "output": "find . -iname \"WSFY321.c\""}
{"input": "Recursively changes group ownership on everything in the 'public_html' folder to 'website' group.", "output": "chgrp --recursive website public_html"}
{"input": "find all the hidden files in the temp folder", "output": "find /tmp -type f -name \".*\""}
{"input": "Make directories for each line in \"folder_list.txt\"", "output": "cat folder_list.txt | xargs mkdir"}
{"input": "Counts the number of lines in each file in a git repository.", "output": "git ls-files | xargs -d '\\n' wc -l"}
{"input": "Delete files in the DIR directory tree whose names begin with \"2015\" and contain \"album\" or \"picture\"", "output": "find DIR \\( -name 2015\\* -a \\( -name \\*album\\* -o -name \\*picture\\* \\) \\) -delete"}
{"input": "Write \"127.0.0.1 ad.doubleclick.net\" to the console and append to \"/etc/hosts\" as root", "output": "echo 127.0.0.1 ad.doubleclick.net | sudo tee -a /etc/hosts"}
{"input": "Find all 50MB files", "output": "find / -size 50M"}
{"input": "Calculate md5 sum of empty string", "output": "echo -n | md5sum"}
{"input": "Print all unique file paths under \"dir1\" compared to \"dir2\"", "output": "comm -23 <(find dir1 | sed 's/dir1/\\//'| sort) <(find dir2 | sed 's/dir2/\\//'| sort) | sed 's/^\\//dir1/'"}
{"input": "Puts working directory into clipboard, stripping newlines", "output": "pwd | tr -d '\\n' | pbcopy"}
{"input": "Displays the count of of each unique line read from standard input", "output": "sort | uniq -c"}
{"input": "Copy all files ending in \".a\" in directory trees matching \"folder*\" to \"/path/to/dest\" preserving directory hierarchy", "output": "find folder* -name '*.a' -print | cpio -pvd /path/to/dest"}
{"input": "display all the files in the current folder which have been accessed in the last 60 minutes", "output": "find . -amin -60"}
{"input": "Find all .sh files in or below the current directory and move them to folder ~/back.scripts", "output": "find . -name \"*.sh\" -print0 | xargs -0 -I {} mv {} ~/back.scripts"}
{"input": "recursively change owner of the directory /tmp to the current user", "output": "sudo chown -R $USER ~/tmp"}
{"input": "Count the *.html files residing in the /usr/src directory tree and containing string \"foo\"", "output": "find /usr/src -name \"*.html\" | xargs grep -l foo | wc -l"}
{"input": "display all the pdf files in a folder which start with a specific word along with their timestamp in sorted order of time and save output to a in remote server", "output": "find \"/path/to/pdfs/\" -type f -name \"$1*.pdf\" -printf \"%TY/%Tm/%Td %TH:%TM %p\\n\"      | sort -n -k1.1,1.2 -k1.3,1.4 -k1.6,1.7 -k1.9,1.10 -k2.1,2.2 -k2.4,2.5 -k3  > remoteuser@remoteserver:/u/tmp/CustTmp/zzz_pdfs.txt"}
{"input": "Return the files that are newer than file `myfile'", "output": "find / -newer myfile"}
{"input": "Run script `deslash.sh' on all thumb.png files in the current directory tree", "output": "find -type f -name thumb.png -exec ./deslash.sh {} \";\""}
{"input": "Find all files/directories under '/home/user/' directory tree whose status was changed exactly 10 minitues ago", "output": "find /home/user/ -cmin 10 -print"}
{"input": "find all the config(.conf files) files in the folder /home/pat", "output": "find /home/pat -iname \"*.conf\""}
{"input": "display the content of the files in the file system with the name \"lilo.conf\" and save the output to the file lilo.txt", "output": "find / -type f -name lilo.conf 2>/dev/null -exec cat {} \\; >lilo.txt"}
{"input": "Find files in the current directory tree which are larger than 5 MB in size", "output": "find . -size +5000k -type f"}
{"input": "find all '*.c' files under $HOME directory which context contains sprintf", "output": "find $HOME -name '*.c' -print | xargs grep -l sprintf"}
{"input": "Print help on 'cat' command usage", "output": "cat --help"}
{"input": "Move all files and directories not starting with \"l\" in \"/mnt/usbdisk\" to \"/home/user/stuff/.\"", "output": "mv /mnt/usbdisk/[^l]* /home/user/stuff/."}
{"input": "search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them in MB", "output": "find ~/tmp -type f -mtime 0 -exec du -ks {} \\; | cut -f1 | awk '{total=total+$1}END{print total/1024}'"}
{"input": "Find all filename.* files/directories under /root/directory/to/search", "output": "find /root/directory/to/search -name 'filename.*'"}
{"input": "List each subdirectory name composing the current working directory", "output": "pwd | cut -f 1- -d\\/ --output-delimiter=$'\\n'"}
{"input": "Synchronize \"xxx-files\" to \"different-stuff/xxx-files\" recursively preserving metadata with a bandwidth limit of 2000 KiB/s", "output": "rsync -pogtEtvr --progress --bwlimit=2000 xxx-files different-stuff"}
{"input": "search for the file, filename.txt in the folder /home", "output": "find /home -name filename.txt"}
{"input": "Search for first match of the regex 're' in all *.coffee files under current directory and print the file names", "output": "find . -name \\*.coffee -exec awk '/re/ {print FILENAME \":\" $0;exit}' {} \\;"}
{"input": "Recursively find strings in all files under current directory, that matching with comma-separated patterns list in file 'searches-txt'", "output": "cat searches.txt| xargs -I {} -d, -n 1 grep  -r {}"}
{"input": "Saves logged in users names in 'tmp' variable.", "output": "tmp=$(w | awk '{print $1}')"}
{"input": "Runs programs and prints formatted summary of system resource usage.", "output": "command time -f \"%E real,%U user,%s sys\" ls -Fs"}
{"input": "Execute 'tail -f -n 50 mylogfile.txt | ccze' every 5 seconds and display with color support", "output": "watch -n 5 -c 'tail -f -n 50 mylogfile.txt | ccze'"}
{"input": "Create a bzip2 archive of all .txt files from the \"dir\" directory tree", "output": "find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2"}
{"input": "Find all files owned by group `root' in the current directory tree and change their user to `temp'", "output": "find . -group root -print | xargs chown temp"}
{"input": "Search the current directory recursively for regular files last modified less than 2 days ago", "output": "find . type -f -mtime -2"}
{"input": "Replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree and modify them in-place", "output": "find /myprojects -type f -name *.cpp -print0 | xargs -0 sed -i 's/previousword/newword/g'"}
{"input": "Change the ownership of all files in the current directory tree from root to www-data", "output": "find -user root -exec chown www-data {} \\;"}
{"input": "display long listing of all regular/normal files whose size is less than 50 bytes.", "output": "find /usr/bin -type f -size -50c -exec ls -l '{}' ';'"}
{"input": "Attempt to connect as root to localhost and copy /home/reportuser/dailyReport.doc to directory /root/dailyReports/20150105/ - this will normally fail because ssh won't accept root connections by default.", "output": "scp -p /home/reportuser/dailyReport.doc root@localhost:/root/dailyReports/20150105/"}
{"input": "list symbolic links under the directory \"$directory\" using contents of the $IFS variable between output of each one", "output": "find $directory -type l -printf \"%p$IFS\""}
{"input": "display the amount of disk space used by all the log files in the folder /usr/local/apache/logs/", "output": "find /usr/local/apache/logs/ -type f -name \"*_log\"|xargs du -csh"}
{"input": "Find all *.txt files under / and print their sizes and paths", "output": "find / -name '*.txt' -exec du -hc {} \\;"}
{"input": "Print numbers from 1 to 10 using up to 4 processes", "output": "seq 10 | xargs -P4 -I'{}' echo '{}'"}
{"input": "Find files/directories under current directory that matches the regex /path/to/something[^/]*$  in their paths", "output": "find . -exec sh -c 'echo {} | grep -qi /path/to/something[^/]*$' \\; -print"}
{"input": "Overwrites file 'filename' with random content 35 times, finally writes it with zeros, truncates and deletes.", "output": "shred -uzn 35 filename"}
{"input": "Print each line that is found only once in \"file1\" and \"file2\" combined", "output": "sort file1 file2 | uniq -u"}
{"input": "Uncompress and unarchive \"data.tar.gz\"", "output": "gzip -dc data.tar.gz | tar -xvf -"}
{"input": "Archive \"src\" to \"dst\" without overwriting existing files in \"dst\"", "output": "rsync -a -v --ignore-existing src dst"}
{"input": "Search the current working directory tree for files whose names start with \"fileA_\" or \"fileB_\"", "output": "find . -name 'fileA_*' -o -name 'fileB_*'"}
{"input": "Find all files/directories named 'photo?.jpg' under current directory tree", "output": "find . -name photo\\?.jpg"}
{"input": "Find files that have a modification time of a day ago", "output": "find / -mtime 1"}
{"input": "Find all directories under htdocs directory and set their permission to 775", "output": "find htdocs -type d -exec chmod 775 {} +"}
{"input": "Show ls's detailed output for all files named \"something\"", "output": "find . -name something -exec ls -l {} \\;"}
{"input": "Find files and directories modified in last 7 days", "output": "find . -mtime -7"}
{"input": "Find writable regular files omitting those that contain sites/default/files in their names", "output": "find . -type f -writable | grep -v sites/default/files"}
{"input": "Removes empty folder 'symlink'.", "output": "rm -d symlink"}
{"input": "Insert \"|\" every 30 characters in file \"longline\"", "output": "fold -w30 longline | pr -20ts'|'"}
{"input": "Prints lines count in each *.c file of a current folder and total count.", "output": "wc -l *.c"}
{"input": "Delete all broken symbolic links under '/usr/ports/packages' directory tree", "output": "find -L /usr/ports/packages -type l -exec rm -- {}\t+"}
{"input": "Locate all *.txt files in the current directory tree", "output": "find . -name \"*.txt\""}
{"input": "Search for 'magic' in all regular files under current directory tree", "output": "find . -type f | xargs grep \"magic\""}
{"input": "Calculate the sum of the numbers in '/file/with/numbers'", "output": "cat /file/with/numbers | php -r '$s = 0; while (true) { $e = fgets(STDIN); if (false === $e) break; $s += $e; } echo $s;'"}
{"input": "ssh into desired vagrant host \"HOST\" without running \"vagrant ssh\"", "output": "ssh $(vagrant ssh-config HOST | sed '/^[[:space:]]*$/d' |  awk 'NR>1 {print \" -o \"$1\"=\"$2}') localhost"}
{"input": "find all files in the file system whose size is exactly 2KB", "output": "find / -size 2048c"}
{"input": "find all the cpp files in current folder", "output": "find -name \"*.cpp\""}
{"input": "Find all lines matching \"$USER\" in \"file\" and number the output", "output": "grep  $USER file |nl"}
{"input": "Measure the disk space taken up by all *.txt files in the current directory tree", "output": "find . -name \"*.txt\" -print0 |xargs -0 du -ch"}
{"input": "search for a word in all the php files in the current folder and display the count of all matching lines.", "output": "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\; | wc -l"}
{"input": "find all regex \"./[a-f0-9\\-]\\{36\\}\\.jpg\" files", "output": "find . -regex \"./[a-f0-9\\-]\\{36\\}\\.jpg\""}
{"input": "display all text files in the current folder", "output": "find . -type f -name \"*.txt\""}
{"input": "Search the current directory tree for files and directories whose names do not end in \".exe\" and \".dll\"", "output": "find . ! \\( -name \"*.exe\" -o -name \"*.dll\" \\)"}
{"input": "force delete all the files which have not been accessed in the last 240 hours in the temp folder", "output": "find /tmp/* -atime +10 -exec rm -f {} \\;"}
{"input": "Merge already sorted files \"*.txt\" and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix \"output\"", "output": "sort -m *.txt | split -d -l 1000000 - output"}
{"input": "Find all *.cgi (case insensitive) files/directories under current directory and change their permission to 755", "output": "find . -iname '*.cgi' | xargs chmod 755"}
{"input": "Run /bin/true with 1 to 99999 as arguments", "output": "/bin/sh -c \"/bin/true $(seq 1 99999)\""}
{"input": "Uses the time utility to report only real execution time of 'ls' command.", "output": "/usr/bin/time -f%e ls >/dev/null"}
{"input": "Find all files named 'text.txt' under current directory tree and display their contents", "output": "find . -name 'text.txt' -print -exec cat {} \\;"}
{"input": "Create a symbolc link named \"public_html\" to \"current/app/webroot\" under the current working directory", "output": "ln -s `pwd`/current/app/webroot public_html"}
{"input": "Find all *.txt (case insensitive) files of user root under / directory and show a few lines of output from the beginning", "output": "find / -user root -iname \"*.txt\" | head"}
{"input": "search for a word in all the java files in the current directory", "output": "find . -name \"*.java\" | xargs grep \"Stock\"  find . -name \"*.java\" | xargs grep \"Stock\"  find . -name \"*.java\" | xargs grep \"Stock\"  find . -name \"*.java\" | xargs grep \"Stock\"  find . -name \"*.java\" | xargs grep \"Stock\"   find . -name \"*.java\" | xargs grep \"Stock"}
{"input": "Check if RBENV is defined in the current tmux session environment", "output": "tmux show-environment | grep RBENV"}
{"input": "Find all files under and below the current working directory with the word California in the file (case insensitive), and count the number of lines in the output", "output": "find . -type f -exec grep -i California {} \\; -print | wc -l"}
{"input": "Recursively changes group ownership of everything in 'files' to 'my_group'.", "output": "chgrp -R my_group files"}
{"input": "List all directories starting from root that have sticky bit set", "output": "find / -type d  -perm -1000  -exec ls -ld {} \\; 2> /dev/null"}
{"input": "Find all 400 permission files under /data directory and print 'Modifying ' appended with file path for each of them", "output": "find /data -type f -perm 400 -exec echo Modifying {} \\;"}
{"input": "Search the /storage/sdcard0/tencent/MicroMsg/ directory tree for JPG files", "output": "find  /storage/sdcard0/tencent/MicroMsg/ -type f  -iname '*.jpg' -print0"}
{"input": "find all the java script files in a folder and save the list to a file", "output": "find src/js -type f -name \"*.js\" > list.txt"}
{"input": "delete all empty files in the current directory ( empty file = size 0 bytes )", "output": "find . -empty -exec rm '{}' \\;"}
{"input": "display list of all the hidden directories in the directory \"/dir/to/search/\"", "output": "find /dir/to/search -path '*/.*' -ls"}
{"input": "Make directory \"dir1\"", "output": "mkdir dir1"}
{"input": "find all the word press configuration php files in the folder /var/www", "output": "find /var/www/ -name wp-config.php"}
{"input": "Archive \"/my/dir\" on host \"server\" as user \"user\" to the current local directory excluding files ending in \".svn\"", "output": "rsync -av --exclude '*.svn' user@server:/my/dir ."}
{"input": "Set permissions to 600 for regular files under var/", "output": "find var/ -type f -exec chmod 600 {} \\;"}
{"input": "Creates path as current folder path and folder that contains $0 file, and saves result in 'script_dir' variable.", "output": "set script_dir = `pwd`/`dirname $0`"}
{"input": "Rename \"original.filename\" to \"new.original.filename\"", "output": "mv original.filename new.original.filename"}
{"input": "find all the files in the current folder which have execute permission to all the users", "output": "find . -perm /u=x,g=x,o=x"}
{"input": "List all regular files residing in the current directory tree and containing string \"/bin/ksh\"", "output": "find . -type f -exec grep -li '/bin/ksh' {} \\;"}
{"input": "Find all files/directories under mnt/naspath that were modified in last 24 hours, calculate the total size and redirect the result to /tmp/size.log file", "output": "find /mnt/naspath -mtime 0 -print0 | du --files0-from=- -hc | tail -n1 >> /tmp/size.log"}
{"input": "search for jpg images in folders in the path \"cam2/2013\" and convert these files to the video Cam2-2013-30fps-19crf.mp4", "output": "find Cam2/2013* -name \"*.jpg\" -print0 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 \"Cam2-2013-30fps-19crf.mp4\""}
{"input": "Gets list of IP addresses of all network interfaces.", "output": "/sbin/ifconfig  | sed -ne $'/127.0.0.1/ ! { s/^[ \\t]*inet[ \\t]\\\\{1,99\\\\}\\\\(addr:\\\\)\\\\{0,1\\\\}\\\\([0-9.]*\\\\)[ \\t\\/].*$/\\\\2/p; }'"}
{"input": "Read a line from standard input into variable \"dir\"", "output": "read dir"}
{"input": "Find all files under foldername directory and set their permission to 644", "output": "sudo find foldername -type f -exec chmod 644 {} \";\""}
{"input": "Find files in the current directory tree whose size is greater than 24000 bytes", "output": "find . -size +24000c"}
{"input": "display all the html files in the current folder that have not been modified in the last 7*24 horus", "output": "find . -mtime +7 -name \"*.html\" -print"}
{"input": "Synchronize \"/home/user1/\" to \"wobgalaxy02:/home/user1/\" including hidden files", "output": "rsync -av /home/user1/ wobgalaxy02:/home/user1/"}
{"input": "Calculate md5 sum of file $ecriv", "output": "md5sum \"$ecriv\""}
{"input": "Find all the .mp3 files in the music folder and pass to the ls command, -print0 is required if any filenames contain whitespace", "output": "find ./music -name \"*.mp3\" -print0 | xargs -0 ls"}
{"input": "Find all directories recursively starting from / and skipping the contents of /proc/, and count them", "output": "find / -path /proc -prune -o -type d | wc -l"}
{"input": "Find all files named \"filename\" in the current directory tree, not descending into \"FOLDER1\" directories", "output": "find . -name FOLDER1 -prune -o -name filename"}
{"input": "Opens gcc info manual and selects \"option index\" menu entry.", "output": "info gcc \"option index\""}
{"input": "Report file system containing path-to-file disk usage human-readable.", "output": "df -h path-to-file"}
{"input": "Compresses all files in the directory 'PATH_TO_FOLDER' without recursion and keeps uncompressed files from deletion.", "output": "find PATH_TO_FOLDER -maxdepth 1 -type f -exec bzip2 -zk {} \\;"}
{"input": "Archive the directory structure under current directory into /somewhereelse/whatever-dirsonly.tar", "output": "find . -type d |xargs tar rf /somewhereelse/whatever-dirsonly.tar --no-recursion"}
{"input": "Find the first file/directory named 'something' under current directory and quit", "output": "find . -name something -print -quit"}
{"input": "Creates temporary file and saves path to it in 'content_dir2' variable.", "output": "content_dir2=$(mktemp)"}
{"input": "Gets string with MAC addess of network interface eth0.", "output": "ifconfig eth0 | grep HWaddr"}
{"input": "Find all files which belong to user lal and change their ownership to ravi", "output": "find / -user lal -exec chown ravi {} \\;"}
{"input": "Delete all files not owned by valid users", "output": "find / -nouser | xargs -0 rm"}
{"input": "Save the current user name and inode number of \"/home\" into bash array variable \"var\"", "output": "var=( $(whoami && stat -c %i \"/home\") )"}
{"input": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them", "output": "find ~/code -type d | sed '/\\/\\\\./d' | tr '\\n' ':' | sed 's/:$//'"}
{"input": "Remove all files with names like \"vmware-*.log\" from the current directory tree", "output": "find . -name vmware-*.log -print0 | xargs -0 rm"}
{"input": "display long listing of all the files in the folder \"/myfiles\"", "output": "find /myfiles -exec ls -l {} ;"}
{"input": "Find all files/directories named 'fprintf.c' under '/usr/src' directory tree", "output": "find /usr/src -name fprintf.c"}
{"input": "List all files under current directory", "output": "find . -type f | xargs ls"}
{"input": "search the file myfile.txt in the current folder", "output": "find . -name myfile.txt -print"}
{"input": "Print the number of packets sent, received, and the percentage lost for each ping request to \"google.com\"", "output": "ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { printf \"sent:%d received:%d loss:%d%%\\n\", sent, received, loss }'"}
{"input": "Output all lines that have a common first colon-separated field in files 'selection2.txt' and 'selection1.txt' by displaying the common (first) field of each line, followed by the extra fields in both lines.", "output": "join -t: selection2.txt selection1.txt"}
{"input": "Rename \"new\" to \"old\" and make a backup if \"old\" exists", "output": "mv new old -b"}
{"input": "Display a count of regular files in each directory at the current level.", "output": "find -P . -type f | rev | cut -d/ -f2- | rev | cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c"}
{"input": "Gets IP addresses of all active network interfaces.", "output": "ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'"}
{"input": "Find all 777 permission directories under current directory and  set permissions to 755", "output": "find . -type d -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Prints path to the target of symbolic link 'relative/path/to/file'", "output": "dirname `readlink -e relative/path/to/file`"}
{"input": "Split \"$1\" into files of at most \"$2\" or default 10000 using a numeric suffix of length 6", "output": "split -l ${2:-10000} -d -a 6 \"$1\""}
{"input": "Prints long recursive listing of all content of a root folder, saving output to 'output.file'.", "output": "ls -lR / | tee output.file"}
{"input": "Rename all files in current directory with names starting with \"fgh\" so they start with \"jkl\" instead", "output": "rename 's/^fgh/jkl/' fgh*"}
{"input": "Print only lines from 'file1.txt' that not present in 'file2.txt' and beginning with 'Q'", "output": "cat file1.txt | grep -Fvf file2.txt | grep '^Q'"}
{"input": "print number of jobs", "output": "n_jobs=$( jobs -p | awk '{print NR}' )"}
{"input": "Replace all instances of \"STRING_TO_REPLACE\" with \"STRING_TO_REPLACE_IT\" in file \"index.html\" and make a backup with suffix \"bak\" on OSX", "output": "sed -i bak -e s/STRING_TO_REPLACE/REPLACE_WITH/g index.html"}
{"input": "Find all regular files under current directory (excluding hidden directories) and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files", "output": "find . \\( ! -regex '.*/\\..*' \\) -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'"}
{"input": "Find all 664 permission files/drectories under current directory tree", "output": "find . -perm -664"}
{"input": "find all the files in the current folder which are bigger than 10MB and less than 50MB", "output": "find . -size +10M -size -50M -print"}
{"input": "Recursively removes all files like '._*' from current folder.", "output": "find . -name \"._*\" -print0 | xargs -0 rm -rf"}
{"input": "Display a list of files with sizes in decreasing order of size of all the regular files under '/your/dir' directory tree that are bigger than 5 MB in size", "output": "find /your/dir -type f -size +5M -print0 | xargs -0 ls -1Ssh"}
{"input": "Save the directory name of the canonical path to the current script in variable \"MY_DIR\"", "output": "MY_DIR=$(dirname $(readlink -f $0))"}
{"input": "Exits from screen session.", "output": "exit"}
{"input": "Find regular files in the current directory tree that have executable bits set for the user and group but not for the other", "output": "find -L . -type f -perm -u=x,g=x  \\! -perm -o=x"}
{"input": "Print nothing because B.txt is compared with itself.", "output": "comm -2 -3 <(sort -n B.txt) <(sort -n B.txt)"}
{"input": "find all the directories in the $LOGDIR folder which have been modified in the last 24 hours and compress them", "output": "find $LOGDIR -type d -mtime +0 -exec compress -r {} \\;"}
{"input": "extract 'archive.tar.gz' to /destination", "output": "gzip -dc archive.tar.gz | tar -xf - -C /destination"}
{"input": "Run 'make -e' with an environment variable 'HOSTNAME' set to the system hostname", "output": "HOSTNAME=$(hostname) make -e"}
{"input": "Find only permission field & file name from long listing with find command .", "output": "find -type f -iname \"*.txt\" -exec ls -lrt {} \\;|awk -F' ' '{print $1  $9}'"}
{"input": "Unzip every \".gz\" file in the current directory tree", "output": "find . -name '*.gz' -exec gunzip '{}' \\;"}
{"input": "Suffix all files and folders in the current directory with \"_SUF\"", "output": "ls | xargs -I {} mv {} {}_SUF"}
{"input": "search for a word in all the files in the current directory", "output": "find . -type f -exec grep 'needle' {} \\;"}
{"input": "search  in root  ( / ) directory downwards all files which have less than 2 links.", "output": "find / -links -2 -print"}
{"input": "Clean up all zombie processes by instantly killing their parent process with SIGKILL signal.", "output": "kill -9 $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }')"}
{"input": "set alias \"s\" for command 'it=$($(history | tail -2 | head -1 | cut -d\" \" -f4-))'", "output": "alias s='it=$($(history | tail -2 | head -1 | cut -d\" \" -f4-))'"}
{"input": "Print space separated numbers from 1 to 5", "output": "seq 5 | perl -ne 'chomp; print \"$_ \"; END{print \"\\n\"}'"}
{"input": "Create intermediate directories ~/foo/bar/ as required and directories baz, bif, bang", "output": "mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang"}
{"input": "Find all files/directories newer than ttt or owned by user 'wn' in entire file system", "output": "find / \\( -newer ttt -or -user wnj \\) -print"}
{"input": "Archive showing progress \"sourcefolder\" to \"/destinationfolder\" excluding \"thefoldertoexclude\"", "output": "rsync -av --progress sourcefolder /destinationfolder --exclude thefoldertoexclude"}
{"input": "Find all filenames ending with .c in the current directory tree, case insensitive", "output": "find -iname \"*.c\""}
{"input": "Change permissions of directory \"/home/sshtunnel/\" to 555", "output": "chmod 555 /home/sshtunnel/"}
{"input": "Compress all files in the \"$FILE\" directory tree that were last modified 30 days ago", "output": "find $FILE -type f -mtime 30 -exec gzip {} \\;"}
{"input": "List all environment variables (name and value) whose name either equals PATH or starts with GOBIN", "output": "env | grep '^\\(GOBIN\\|PATH=\\)'"}
{"input": "Display the total count of all the files/directories with '.old' extension under current directory tree", "output": "find . -name \u201c*.old\u201d -print | wc -l"}
{"input": "Identify CMS version/releases accross all your Drupal websites", "output": "find /var/www/vhosts/*/httpdocs/ -type f -iwholename \"*/modules/system/system.info\" -exec grep -H \"version = \\\"\" {} \\;"}
{"input": "resize all the jpg images in the current folder to the size 300x300", "output": "find . -iname '*.jpg' -print0 | xargs -I{} -0 -r convert -resize 300x300 {} $outdir/{}"}
{"input": "Find all regular files named 'Waldo' under 'Books' directory tree that is located in user's home directory", "output": "find ~/Books -type f -name Waldo"}
{"input": "Save only the digits in \"$filename\" to variable \"number\"", "output": "number=$(echo $filename | tr -cd '[[:digit:]]')"}
{"input": "find files in /usr directory which are modified after February 1 of the current year", "output": "find /usr -newermt \"Feb 1\""}
{"input": "SSH into host \"server\" as user \"user\"", "output": "ssh user@server"}
{"input": "View lines 116 through 120 of history", "output": "history | head -n 120 | tail -n 5"}
{"input": "Save the FQDN host name of the system in variable \"hnd\"", "output": "hnd=$(hostname -f)"}
{"input": "Start a VLC process with a dummy (headless) interface in the background, immune to SIGHUP (hangup) signals, to play all media files in mp3_directory from the user's home directory.", "output": "nohup vlc -I dummy --quiet ~/mp3_directory/* &"}
{"input": "set alias \"restart_rails\" for command 'kill -9 `cat tmp/pids/server.pid`; rails server -d'", "output": "alias restart_rails='kill -9 `cat tmp/pids/server.pid`; rails server -d'"}
{"input": "Enables shell option 'lastpipe'.", "output": "shopt -s lastpipe"}
{"input": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them", "output": "find ~/code -name '.*' -prune -o -type d -printf ':%p'"}
{"input": "Dump \"filename\" as 2 byte wide hexadecimal and printable characters", "output": "od -xc filename"}
{"input": "Find files named \"needle\" ignoring the case", "output": "find . -iname \"needle\""}
{"input": "Print a welcome message with the current user's user name", "output": "echo \"Welcome `whoami`!\""}
{"input": "Execute \"bash -c 'python -m unittest discover |& pyrg'\" in a shell with color support every second", "output": "watch -n 1 --color --exec bash -c 'python -m unittest discover |& pyrg'"}
{"input": "Interactively page through the color-coded output of 'ls'.", "output": "ls --color | less -r"}
{"input": "Page through the contents of yourFile, adding a $ at the end of each line.", "output": "cat -e yourFile | less"}
{"input": "display the number of lines in all the header files in the current folder", "output": "find . -name \"*.h\" -print | xargs wc -l"}
{"input": "List the full path of each directory in the current working directory", "output": "tree -dfi -L 1 \"$(pwd)\""}
{"input": "Search the current directory tree for files whose names do not end in \"1\" and \"2\"", "output": "find . -type f ! -name \"*1\" ! -name \"*2\" -print"}
{"input": "find all the png files in the current folder which begin with the word image", "output": "find . -name \"image*.png\""}
{"input": "Find all files in the current directory tree except .html, ignoring .svn directories", "output": "find . \\( -type d -name '.svn' -o -type f -name '*.html' \\) -prune -o -print0"}
{"input": "Create symlinks to all  /home/folder1/*.txt files and 'folder1_' directory with the same name in a target directory named '+'", "output": "find /home/folder1/*.txt -type f -exec ln -s {} \"folder1_\" +\\;"}
{"input": "Print sorted list of all group names known to the system.", "output": "getent group | cut -d: -f1 | sort"}
{"input": "Delete all *.zip files under current directory that are older than 2 days", "output": "find . -name \"*.zip\" -mtime +2 orint0 | xargs -0 rm"}
{"input": "List the files in \"archive.tar.gz\"", "output": "gzip -l archive.tar.gz"}
{"input": "Unzip and untar \"file.tar.gz\"", "output": "zcat file.tar.gz |tar x"}
{"input": "Show manual of the find command", "output": "man find"}
{"input": "search for *.log files starting from / (root) and only in the current file system", "output": "find / -xdev -name \"*.log\""}
{"input": "Create directory dir2", "output": "mkdir dir2"}
{"input": "Use the output of \"ping google.com\" as input to awk script \"packet_loss.awk\"", "output": "ping google.com | awk -f packet_loss.awk"}
{"input": "Rename \"blah2\" to \"blah2-new\"", "output": "mv blah2 blah2-new"}
{"input": "search for the file \"foo.txt\" in the entire file system", "output": "find / -name foo.txt"}
{"input": "Change directory to the directory containing the current script", "output": "cd $(dirname $(which $0) )"}
{"input": "Print characters in variable \"$a\" that exist in variable \"$b\"", "output": "echo \"$(comm -12 <(echo \"$a\" | fold -w1 | sort | uniq) <(echo \"$b\" | fold -w1 | sort | uniq) | tr -d '\\n')\""}
{"input": "Archive \"source\" to \"root@remote_server_name:/opt/backups\" via ssh on port 3382 and compress data during transmission", "output": "rsync -avz --rsh='ssh -p3382' source root@remote_server_name:/opt/backups"}
{"input": "Save the md5 sum hash of \"${my_iso_file}\" to variable \"md5\"", "output": "md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`"}
{"input": "Display PHP info one page at a time, pausing for user interaction after each page.", "output": "php -i | more"}
{"input": "Recursively changes group ownership of the $PATH_TO_OUTPUT_FOLDER directory to $GROUP group.", "output": "chgrp -R $GROUP $PATH_TO_OUTPUT_FOLDER"}
{"input": "Display a dump of \"file\" as floating point values of double size", "output": "od -t fD file"}
{"input": "Counts lines in each of *.php files in a current folder and subfolders and prints total count.", "output": "find . -name '*.php' | awk '{gsub(\" \",\"\\\\ \", $0);print $0}' |xargs wc -l"}
{"input": "Delete all filename* files under /dir directory", "output": "find /dir -name \"filename*\" -type f -print | xargs rm"}
{"input": "Change the ownership of \"file.sh\" to \"root\"", "output": "sudo chown root file.sh"}
{"input": "Force delete all the regular/normal files in the current folder and do not search in the sub folders", "output": "find . -maxdepth 1 -type f -exec rm -f {} \\;"}
{"input": "Prints name of temporary file but doesn`t create nothing.", "output": "mktemp -u"}
{"input": "Gets domain name from dig reverse lookup.", "output": "dig -x 8.8.8.8 | awk '/PTR[[:space:]]/{print $NF}'"}
{"input": "find and delete all the empty directories in the current folder and all its sub directories too", "output": "find . -depth -empty -type d -delete"}
{"input": "Recursively removes all files like '*.pyc' in a current folder.", "output": "find . -name \"*.pyc\" -exec rm -rf {} \\;"}
{"input": "Open all .java files in the current directory tree in the vim editor", "output": "find . -name '*.java' -exec vim {} +"}
{"input": "Prints days since epoch", "output": "echo $(($(date +%s) / 60 / 60 / 24))"}
{"input": "Recursively change the owner and group of \"/workspace\" and \"775\" to \"your_user_name\"", "output": "chown -R your_user_name.your_user_name 775 /workspace"}
{"input": "Print the column count of compressed file \"$file\"", "output": "zcat \"$file\" | awk '{print NF}' | head"}
{"input": "Find all .txt files in the user's home directory and below.", "output": "find ~/ -name '*.txt'"}
{"input": "Send email in \"mail.tmp\" from \"noreply@hostname\" with subject \"Config done!\"", "output": "cat mail.tmp | mail -r \"noreply@$(hostname)\" -s \"Config done!\" \"${MAIL}\""}
{"input": "display a long list of all the files in the directory \"/mydir\" which have not been modified in the last 20*24 hours or which have not been accessed in the last 40*24 hours", "output": "find /mydir \\(-mtime +20 -o -atime +40\\) -exec ls -l {} \\;"}
{"input": "Find all directories at level 3 of directory tree $from_dir", "output": "find $from_dir -mindepth 3 -maxdepth 3 -type d"}
{"input": "extract \"passwd.tar.gz\" with verbose output", "output": "tar -xvzf passwd.tar.gz"}
{"input": "display all files in the current folder expect text files", "output": "find . -name \"*.txt\" -prune -o -print"}
{"input": "list all files under the current directory, redirecting error messages to the output, filtering out lines containing the text \"permission denied\" and writing the output to a file called files_and_folders", "output": "find . 2>&1 | grep -v 'permission denied' > files_and_folders"}
{"input": "Find all regular files that reside in the current directory tree and were last modified 1 day ago", "output": "find . -type f -mtime 0"}
{"input": "Print linker search path using ld formatted on new lines", "output": "ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\\\012"}
{"input": "Print each character in \"orange\" on a new line", "output": "echo orange | fold -w 1"}
{"input": "Find all .java files whose name contains \"Message\"", "output": "find . -print | grep '.*Message.*\\.java'"}
{"input": "Print the list of files in the current directory tree skipping Git files", "output": "find . -path './.git' -prune -o -type f"}
{"input": "From a script, output the name of the script itself, without containing directories.", "output": "basename $0"}
{"input": "Get the actual find exectuable path", "output": "which find"}
{"input": "Find files and directories newer than CompareFile under current directory", "output": "find . -newer CompareFile -print"}
{"input": "prints first line of $bigfile", "output": "head -n1 $bigfile"}
{"input": "Saves list of logged in users in system together with 'USER' header in the 'b' variable.", "output": "b=`w|cut -d' ' -f1`;"}
{"input": "Find all regular files under test directory", "output": "find test -type f"}
{"input": "Go to directory named \"~\" (not home directory)", "output": "cd `echo -n \"~\"`"}
{"input": "Calculate the md5 sum of all files in the current directory with the filename printed first", "output": "ls -p | grep -v / | xargs md5sum | awk '{print $2,$1}'"}
{"input": "Removes all empty folders under path '/thepath', printing info message on each operation.", "output": "find /thepath -type d -empty -print0 | xargs -0 rmdir -v"}
{"input": "Find all files/directories with user id 120 under current directory tree", "output": "find . -uid 120 -print"}
{"input": "searches through the root filesystem (\"/\") for the file named Chapter1, and prints the location", "output": "find / -name Chapter1 -type f"}
{"input": "Print the file sizes along with their paths for all *.txt (case insensitive) files/directories under current directory tree", "output": "find . -name \"*.txt\" -print0 |xargs -0 du -ch"}
{"input": "Find files/directories containing 'test' in their names and display the directory contents before the directories themselves", "output": "find -name \"*test*\" -depth"}
{"input": "Find all *.txt files in directory tree /mnt/msdos suppressing error messages", "output": "find /mnt/msdos  -name \"*.txt\" 2> /dev/null"}
{"input": "Print the IP addresses for the current host name", "output": "hostname  -I | awk -F\" \" '{print $1}'"}
{"input": "Print \"/tmp/myfile\" starting at line 11", "output": "tail -n +11 /tmp/myfile"}
{"input": "Count all the lines of all '*.c' files in current directory recursively", "output": "find . -name \"*.c\" -print0 | xargs -0 cat | wc -l"}
{"input": "Find all *FooBar* files/directories under current directory and copy them to ~/foo/bar", "output": "find . -name '*FooBar*' -exec cp -t ~/foobar -- {} +"}
{"input": "Find and remove multiple files such as *.mp3 or *.txt under current directory", "output": "find . -type f -name \"*.mp3\" -exec rm -f {} \\;"}
{"input": "Find all *.txt files/directories under current directory discarding 'Permission denied' errors", "output": "find . -name \"*.txt\" -print | grep -v 'Permission denied'"}
{"input": "find all the file which name (name can contains space) end with c or h and content contain 'thing'", "output": "find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing"}
{"input": "Find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique parent directory paths", "output": "find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90 -printf \"%h\\n\" | sort | uniq"}
{"input": "find all the regular files in current folder, that have been changed in the last 3 days and display last 5 files", "output": "find . -type f -ctime -3 | tail -n 5"}
{"input": "Make directory \"dir\" and do not cause an error if it exists", "output": "mkdir -p dir"}
{"input": "Set variable PING to 1 if it's possible to ping host ADDRESS, to 0 otherwise.", "output": "PING=$(ping ADDRESS -c 1 | grep -E -o '[0-9]+ received' | cut -f1 -d' ')"}
{"input": "Print out the names of broken symlinks in the current directory", "output": "for l in $(find . -type l); do cd $(dirname $l); if [ ! -e \"$(readlink $(basename $l))\" ]; then echo $l; fi; cd - > /dev/null; done"}
{"input": "find from / a file called \"expect\", suppressing any error messages", "output": "find / -name expect 2>/dev/null"}
{"input": "display all the files in the current folder excluding search in the paths containing the folder having the word \"mmm\"", "output": "find . ! -path *mmm*"}
{"input": "Find files/directories named 'TEST_3' under current directory tree", "output": "find -name TEST_3"}
{"input": "find files in the current directory and sub-directories, that were accessed within last hour", "output": "find -amin -60"}
{"input": "Find regular files readable by the world", "output": "find . -perm -g=r -type f -exec ls -l {} \\;"}
{"input": "Creates temporary directory with name formatted like .daemonXXXXXXX in /tmp/ folder, and saves path to it in 'TMPDIR' variable.", "output": "TMPDIR=$(mktemp -p /tmp -d .daemonXXXXXXX)"}
{"input": "Process each file beginning with \"file\" in the current directory as an argument to \"bash script.sh\"", "output": "find -type f -maxdepth 1 -name 'file*' -print0 | sort -z | xargs -0 bash script.sh"}
{"input": "find all the video files which are bigger than 10 MB which have not been modified in the last 60 days but have been changed in the last 100 days in /tmp and /var/tmp folder home folders", "output": "find /tmp /var/tmp ~ -type f -size +10M -mtime +60 -ctime -100 -exec file -N -i -- {} + | sed -n 's!: video/[^:]*$!!p'"}
{"input": "Updates 'openssl' package, skipping packages with broken dependencies.", "output": "sudo yum update openssl --skip-broken"}
{"input": "Searches the manual page names and descriptions", "output": "apropos"}
{"input": "Search the .java files from the current directory tree for TODO lines", "output": "find . -name \"*.java\" -exec grep -i -n TODO {}  \\;"}
{"input": "search for the word \"mysql\" in all the files in the current containing the word \"notes\" in their name", "output": "find . -iname \"*notes*\" | xargs grep -i mysql"}
{"input": "Print all lines of \"seq 1 10\" except the last 3", "output": "seq 1 10 | perl -e'@x=<>;print@x[0..$#x-3]'"}
{"input": "find all the files that are modified exactly one day ago", "output": "find -daystart -mtime 1"}
{"input": "Change directory to the directory containing file path \"$1\"", "output": "cd \"$(dirname \"$1\")\""}
{"input": "Remove files matching pattern '*-*x*.*' from the current directory tree", "output": "find  -name '*-*x*.*' | xargs rm -f"}
{"input": "Compress in parallel regular files in the current directory tree that were last modified more than 7 days ago", "output": "find . -type f  -mtime +7 | tee compressedP.list | parallel compress"}
{"input": "Send a single ping request with a TTL of 1 to \"192.168.1.1\"", "output": "ping -c 1 -t 1 192.168.1.1"}
{"input": "Find all php files in a directory", "output": "find . -type f -name \"*.php\""}
{"input": "Search for non-empty files", "output": "find . ! -size 0k"}
{"input": "Gets IP address of 'eth0' network interface.", "output": "ifconfig eth0 | grep -oP '(?<= inet addr:)[^ ]+'"}
{"input": "Find all *.txt files/directories under current directory and execute process_one for each of them", "output": "find . -name \"*.txt\" -print0 | xargs -0 -n 1 process_one"}
{"input": "Set the 'xtrace' shell option", "output": "set -o xtrace"}
{"input": "Delete all hidden files under $some_directory", "output": "find \"$some_directory\" -type f -name '.*' -exec rm '{}' \\;"}
{"input": "Truncates file $file, removing last line from it.", "output": "tail -n 1 \"$file\" | wc -c | xargs -I {} truncate \"$file\" -s -{}"}
{"input": "find all the configuration files which have been accessed in the last 30 minutes.", "output": "find /etc/sysconfig -amin -30"}
{"input": "Display unique names of logged in users", "output": "finger | sed 's/\\t/ /' | sed 's/pts\\/[0-9]* *[0-9]*//' | awk '{print $2\"\\t(\"$1\")\\t\"$3\" \"$4\" \"$5}' | sort | uniq"}
{"input": "Print the directories that are taken by the glob pattern $SrvDir*", "output": "find $SrvDir* -maxdepth 0 -type d"}
{"input": "Search in the current directory and all sub-directories except ./D for the file named hi.dat.", "output": "find . \\( -name D -prune \\) -o -name hi.dat"}
{"input": "find all text files in the folder \"FFF\" and find the md5sum for them", "output": "find FFF -name \"*.txt\" -exec md5sum '{}' \\;"}
{"input": "Remove trailing spaces and tabs from all *.java files under current directory", "output": "find . -type f -name \"*.java\" -exec perl -p -i -e \"s/[ \\t]$//g\" {} \\;"}
{"input": "Locate logo.gif in the /var/www directory tree", "output": "find /var/www -name logo.gif"}
{"input": "Print file extension assuming there is only one dot in the file name.", "output": "echo \"$FILE\" | cut -d'.' -f2"}
{"input": "Find all directories under current directory and run  /path/to/script.sh for each of them", "output": "find . -type d -exec /path/to/script.sh \\{} \\;"}
{"input": "Moves (change order) window from 4 place to 3.", "output": "tmux movew -s 4 -t 3"}
{"input": "Lists all files in a current folder, separating names with 'some_delimiter'.", "output": "ls -1 | perl -pe 's/\\n$/some_delimiter/'"}
{"input": "Find all files/directories under /usr/tom which matches the extended regex '*.pl| *.pm'  in their names", "output": "find /usr/tom | egrep '*.pl| *.pm'"}
{"input": "Find all directories that start with stat", "output": "find . -type d \u2013iname stat*"}
{"input": "Find all files under current directory and print them by removing the leading ./ in their paths", "output": "find . -type f -exec bash -c 'f=\"{}\"; echo \"${f:2}\"' \\;"}
{"input": "List all regular files under the current directory and below it", "output": "find . -type f -print0 | xargs -0 ls -l"}
{"input": "Print every 4th line from 10 lines of \"y\" with line numbers", "output": "yes | cat -n | head -10 | awk 'NR % 4 == 1'"}
{"input": "Add \"Line of text here\" on top of each *.py files under current directory", "output": "find . -name \\*.py | xargs sed -i '1a Line of text here'"}
{"input": "Find UTF-8 files with BOM", "output": "find . -type f -print0 | xargs -0 awk '/^\\xEF\\xBB\\xBF/ {print FILENAME} {nextfile}'"}
{"input": "Concatenate with a space every other line in \"input.txt\"", "output": "paste -s -d' \\n' input.txt"}
{"input": "Fint all *.txt files/directories under /mnt/msdos and without error reporting", "output": "find /mnt/msdos  -name \"*.txt\" 2> /dev/null"}
{"input": "display all the files in the current folder that have been modified in the last 24 hours", "output": "find  -mtime -1"}
{"input": "Counts lines of /etc/fstab file.", "output": "cat /etc/fstab | wc -l"}
{"input": "Print information of the root mount point", "output": "mount -v | grep \" on / \""}
{"input": "Finds strings with text \"searched-string\" recursively in all files of current folder and prints names of files with matched strings.", "output": "grep -r -l \"foo\" ."}
{"input": "Find all directories under and below directory \"folder_name\", and change their permissions to 775", "output": "find folder_name -type d -exec chmod 775 \u2018{}\u2019 \\;"}
{"input": "Instantly kill all processes whose command is 'myprocess'.", "output": "kill -9 \\`pgrep myprocess\\`"}
{"input": "find  files which  full path name is /tmp/foo/bar under foo directory and print", "output": "find foo -path /tmp/foo/bar -print"}
{"input": "Make directory \"mybuild\"", "output": "mkdir mybuild"}
{"input": "Print a list of symbolic links reachable from the current directory that do not resolve to accessible files", "output": "find -L. -type l"}
{"input": "display all the html files in the current folder", "output": "find . -name \"*.html\" -print"}
{"input": "Find all regular files in the current director and set their permissions to '644'.", "output": "find ./ -type f -exec chmod 644 {} \\;"}
{"input": "Print /some/dir/ if it's empty", "output": "find /some/dir/ -maxdepth 0 -empty"}
{"input": "display all the files in the home folder which have read permission to the user", "output": "find /home -perm /u=r"}
{"input": "Rename all 2.jpg files under ../D44203 by appending present working directory name at the beginning of their names", "output": "find ../D44203 -iname '2.jpg' | while read fn; do name=$(basename \"$fn\") ; dir=$(dirname \"$fn\") ; mv \"$fn\" \"$dir/$(basename $(pwd))-$name\" ;done"}
{"input": "find foo, Foo, FOo, FOO, etc., but only files", "output": "find . -iname foo -type f"}
{"input": "Find all files with the SUID bit set, starting from /", "output": "find / -perm -u+s"}
{"input": "Find all \".gz\" files in directory tree \"files/\" and use a count and the filename as arguments to \"...\"", "output": "find files/ -name \"*.gz\" | nl -n rz | sed -e 's/\\t/\\n/' | xargs --max-args 2 ..."}
{"input": "display all the regular/normal files in the folder \"/home/user/demo\" which have the permission 777.", "output": "find /home/user/demo -type f -perm 777 -print"}
{"input": "run script  \"runProgram.sh\" as user jetty", "output": "su - jetty sh ./runprogram.sh"}
{"input": "Show all previously typed shell commands, waiting for user interaction after each page of output.", "output": "history | more"}
{"input": "Unsets shell function 'z'.", "output": "unset -f z"}
{"input": "search for a word in all the .C files( those having the extension \"c\") in current directory", "output": "find . -type f \\( -iname \u201c*.c\u201d \\) |grep -i -r \u201ckeyword\u201d"}
{"input": "Set permissions of command \"node\" to 755", "output": "sudo chmod 755 $(which node)"}
{"input": "Display hostname.", "output": "uname -n"}
{"input": "prints last part of a logfile since timestamp 423", "output": "tac file.log | awk '{ if ($1 >= 423) print; else exit; }' | tac"}
{"input": "set alias \"ls\" for command \"ls -lrta\"", "output": "alias ls='ls -lrta'"}
{"input": "display all the hidden files in the folder /home", "output": "find /home -name \".*\""}
{"input": "find all files under the /etc directory and display any IP address patterns in them", "output": "find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;"}
{"input": "Change to directory 'foo' and print to terminal all received on standard input", "output": "cd foo | cat"}
{"input": "List all files under the current working directory with name \".htaccess\"", "output": "find `pwd` -name .htaccess"}
{"input": "Add read and execute permission to command \"node\"", "output": "sudo chmod +rx $(which node)"}
{"input": "Print working directory separated by newlines instead of forward slashes", "output": "pwd | tr '/' '\\n'"}
{"input": "Find .java files in the current directory tree that contain 'TODO', and print their names", "output": "find . -name \"*.java\" -exec grep -Hin TODO {} + | basename `cut -d \":\" -f 1`"}
{"input": "display all the files in the file system which are changed a minute ago", "output": "find / -newerct '1 minute ago' -print"}
{"input": "Print the name of \"file1\" if this file is newer than \"file2\"", "output": "find file1 -prune -newer file2"}
{"input": "find all the files in the file system which have read permission to the user and display the ten files", "output": "find / -perm /u=r | head"}
{"input": "Find all files in current directory and execute multiple commands for each file", "output": "find . -type f -exec sh -c 'echo first; true' \\; -exec echo second \\;"}
{"input": "Add newline before all 2nd and consequent occurrences of '3d3d' in file 'temp' and write each line from the output to files with prefix 'temp' and numeric suffixes", "output": "sed 's/3d3d/\\n&/2g' temp | split -dl1 - temp"}
{"input": "display all the files in the current folder which have been modified in the last 5*24 hours", "output": "find . -mtime -5"}
{"input": "force remove all the c files in the current folder", "output": "find . -name \"*.c\" | xargs rm -rf"}
{"input": "Find all *shp* files/directories under current directory and move them to ../shp_all/", "output": "find . -name \"*shp*\" -exec mv {} ../shp_all/ \\;"}
{"input": "Calculate the SHA1 sum for the contents of the regular files in the path/to/folder directory tree", "output": "find path/to/folder -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum"}
{"input": "Find files/directories under current directory that matches 'projects/insanewebproject' in their paths", "output": "find -ipath 'projects/insanewebproject'"}
{"input": "Change directory to \"$dir1\" and resolve any symlinks in the resulting path", "output": "cd -P \"$dir1\""}
{"input": "change permissions for directories in the entire file system", "output": "chmod 751 `find ./ -type d -print`"}
{"input": "Dynamically defines tmux session name to attach to.", "output": "tmux attach -t \"$(echo stuff)\""}
{"input": "Delete all lines in \"file\" that contain \"pattern\", using \"temp\" as temporary working file (ie. shouldn't exist).", "output": "grep -v \"pattern\" file > temp && mv temp file"}
{"input": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.", "output": "sudo ls -hal /root/ | sudo dd of=/root/test.out"}
{"input": "display all php,xml and phtml files in current folder", "output": "find . -name '*.php' -o -name '*.xml' -o -name '*.phtml'"}
{"input": "Search the .java files from the /Applications/ directory tree for TODO lines", "output": "find /Applications/ -name \"*.java\" -exec grep -i TODO {} +"}
{"input": "Exit the shell immediately if an error is encountered", "output": "set -e"}
{"input": "Copy all files and directories under the current directory into \"../new\" preserving relative paths", "output": "find -print0 | sort -z | cpio -pdv0 ../new"}
{"input": "Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths", "output": "find /path/* -maxdepth 0 -type d -exec sudo tar -zcpvf {}.tar.gz {} \\;"}
{"input": "Send uncompressed contents of \"input.gz\" to \"./myscript.pl\"", "output": "zcat input.gz | ./myscript.pl"}
{"input": "Find all .txt files except README.txt", "output": "find . -type f -name \"*.txt\" ! -name README.txt -print"}
{"input": "Find all regular files in the current directory tree whose names end with \".DS_Store\" and delete them", "output": "find . -type f -name '*.DS_Store' -ls -delete"}
{"input": "Print the /proc directory tree, ignoring the PID-process things", "output": "find /proc -type d | egrep -v '/proc/[0-9]*($|/)' | less"}
{"input": "Remove files that are less than 1MB in size under current directory", "output": "find . -type f -size -1M -exec rm {} +"}
{"input": "Move all files and directories in the current directory to \"/foo\"", "output": "mv `ls` /foo"}
{"input": "display the names without extensions of all the data files in current folder and do not search in sub folders and which have not been changed in the last 60 mins", "output": "find . -maxdepth 1 -name '*.dat' -type f -cmin +60 -exec basename {} \\;"}
{"input": "Set permissions of all files under \"/opt/lampp/htdocs\" to 644", "output": "find /opt/lampp/htdocs -type f -exec chmod 644 {} \\;"}
{"input": "Search directories called ' backup ' from /usr directory downwards and print them.", "output": "find /usr -type d -name backup -print"}
{"input": "Copy the directory hierarchy from \"original\" to \"new\"", "output": "find original -type d -exec mkdir new/{} \\;"}
{"input": "Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE_SUBDIR.*\\.\\./.*authors'", "output": "find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE_SUBDIR.*\\.\\./.*authors' '{}' '+' | wc -l"}
{"input": "Search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches", "output": "find . -name '*.txt'|xargs grep -m1 -ri 'oyss'"}
{"input": "Report file systems inodes usage.", "output": "df -i"}
{"input": "Print lines in \"foo.txt\" that are found only once", "output": "sort foo.txt | uniq"}
{"input": "list all processes with its PIDs", "output": "jobs -l"}
{"input": "Print full path of command \"python2.7\"", "output": "which python2.7"}
{"input": "Search the current directory tree for files containing \"needle\" in their names", "output": "find . -iname \"*needle*\""}
{"input": "Delete all files named \"filename\" in the current directory tree, except those with paths ending in \"/myfolder/filename\"", "output": "find . -name \"filename\" -and -not -path \"*/myfolder/filename\" -delete"}
{"input": "Measure the execution time of the command: find /usr/src -name \"*.html\" | xargs grep -l \"foo\" | wc -l", "output": "time find /usr/src -name \"*.html\" | xargs grep -l \"foo\" | wc -l"}
{"input": "create directory public_html into home directory", "output": "mkdir ~/public_html"}
{"input": "Copy current working directory to clipboard", "output": "pwd | xsel -i"}
{"input": "Remove all files 'a.out' and *.o in the home directory tree that were accessed more than 7 days ago", "output": "find $HOME \\( -name a.out -o -name '*.o' \\) -atime +7 -exec rm {} \\;"}
{"input": "Search the home directory tree for regular files modified yesterday", "output": "find ~ -daystart -type f -mtime 1"}
{"input": "display all the files in the entire file system", "output": "find / -type f -exec echo {} \\;"}
{"input": "Prints process tree of the current command process.", "output": "pstree -p $$"}
{"input": "Find all directories under $root and replace all newlines with : (colon) in the output", "output": "find $root -type d | tr '\\n' ':'"}
{"input": "Recursively copy all \".txt\" files to \"user@remote.machine:/tmp/newdir/\"", "output": "rsync -rvv *.txt user@remote.machine:/tmp/newdir/"}
{"input": "print number of jobs", "output": "n_jobs=`expr $(jobs | wc -l)`"}
{"input": "Find all regular files starting from level 3 of directory tree ~/container and move them one level up", "output": "find ~/container  -mindepth 3 -type f | xargs -i bash -c 'mv \"{}\" $(dirname \"{}\")/..'"}
{"input": "Search the files under and below /directory/containing/files for \"text to search\"", "output": "find /directory/containing/files -type f -print0 | xargs -0 grep \"text to search\""}
{"input": "Search directory /tmp/foo for files containing \"/tmp/foo/bar\" in their full names", "output": "find /tmp/foo -path /tmp/foo/bar -print"}
{"input": "Delete orphan vim undo files in the current directory tree", "output": "find . -type f -iname '*.un~' | while read UNDOFILE ; do FILE=$( echo \"$UNDOFILE\" | sed -r -e 's/.un~$//' -e 's&/\\.([^/]*)&/\\1&' ) ; [[ -e \"$FILE\" ]] || rm \"$UNDOFILE\" ; done"}
{"input": "List all files/directories under current directory using comma (,) as the delimiter for different fields in the output", "output": "find . -ls|awk 'BEGIN{OFS=\",\"}$1=$1'"}
{"input": "Print A record for domain 'domain.' from 'some.other.ip.address' nameserver", "output": "dig @some.other.ip.address domain. a"}
{"input": "Continuously write \"Hidden\" over the entire \"/dev/sdb\" disk", "output": "yes \"Hidden\" | dd of=/dev/sdb"}
{"input": "Unset (delete) all environment variables.", "output": "unset `env | awk -F= '/^\\w/ {print $1}' | xargs`"}
{"input": "Silently and recursively change the ownership of all files in the current directory to \"www-data\"", "output": "sudo chown -Rf www-data *"}
{"input": "Save 'echo whatever you \"want your\" command to be' in history", "output": "history -s 'echo whatever you \"want your\" command to be'"}
{"input": "List files in \"dir1\" that are not in \"dir2\"", "output": "comm -23 <(ls dir1 |sort) <(ls dir2|sort)"}
{"input": "Find files under current directory with name (or glob pattern) expanded by $1 and save the list to /tmp/safe_del.lst", "output": "find . -name \"$1\" > /tmp/safe_del.lst"}
{"input": "Find all files under /path/to/Dir and set their permission to 644", "output": "sudo find /path/to/Dir -type f -print0 | xargs -0 sudo chmod 644"}
{"input": "Print the newest *.txt file under current directory with timestamp and path", "output": "find . -name \"*.txt\" -printf \"%T@ %p\\n\" | sort | tail -1"}
{"input": "Print source of the file system containing current working directory.", "output": "df . | tail -1 | awk '{print $1}'"}
{"input": "Find all files/directories under whatever and ... directory and copy them to /var/tmp", "output": "find whatever ... | xargs -d \"\\n\" cp -t /var/tmp"}
{"input": "Installs 'php-mssql' package with enabling repository 'remi'.", "output": "yum --enablerepo=remi php-mssql"}
{"input": "Print new line separated numbers from \"001\" to \"100\"", "output": "yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6"}
{"input": "Search for 'some string' in all *.axvw files under current directory and show the matched lines with line numbers", "output": "find . -name '*.axvw' -print0 | xargs -0 grep -n 'some string'"}
{"input": "Make directories \"es/LC_MESSAGES\" as needed and do not error if it exists", "output": "mkdir -p es/LC_MESSAGES"}
{"input": "Read a single character from standard input with prompt \"Is this a good question (y/n)?\" and save the response to variable \"answer\"", "output": "read -n 1 -p \"Is this a good question (y/n)? \" answer"}
{"input": "Read the first 10 characters from standard input in an interactive shell into variable \"VAR\"", "output": "read -n10 -e VAR"}
{"input": "search in the current directory for any file named Chapter1.txt", "output": "find . -name Chapter1 -type f"}
{"input": "change owner of the file /home/bob to user root", "output": "sudo chown root /home/bob"}
{"input": "display all the files in the current folder which are bigger than 100MB and save the output list to the file /root/big.txt", "output": "find \\( -size +100M -fprintf /root/big.txt %-10s %p\\n \\)"}
{"input": "Find all directories under current directory", "output": "find -type d"}
{"input": "sort and display top 11 files along with the last access date for all the files in the file system ( sort based on the timestamp )", "output": "find / -type f -printf \"\\n%AD %AT %p\" | head -n 11 | sort -k1.8n -k1.1nr -k1"}
{"input": "Find all files whose permission are 777", "output": "find / -type f -perm 777"}
{"input": "forcible create a symbolic link named \"/etc/file.conf\" to file \"/etc/configuration/file.conf\"", "output": "ln -fs /etc/configuration/file.conf /etc/file.conf"}
{"input": "Silently read $char number of symbols from file descriptor 4, without backslash escaping, and store received input in 'line' variable", "output": "read -u 4 -N $char -r -s line"}
{"input": "Print the contents of \"foo.txt\" starting with line 2", "output": "tail -n +2 foo.txt"}
{"input": "Find all or single file called FindCommandExamples.txt under / directory of owner root", "output": "find / -user root -name FindCommandExamples.txt"}
{"input": "Find all .mp3 files starting from the current directory", "output": "find . -type f -iname *.mp3"}
{"input": "Tunnel VNC port 5900 over compressed SSH and X11 forwarded session to \"remotehost\"", "output": "ssh -X -C -L 5900:localhost:5900 remotehost x11vnc -localhost -display :0"}
{"input": "Print an octal dump of \"file\" with named characters, no addresses, and no suppressed duplicate lines with sections starting with \"esc\", \"fs\", \"gs\", or \"us\"", "output": "od -a -An -v file | perl -0777ne 's/\\n//g,print \"$_\\n \" for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs'"}
{"input": "Print all user names and terminals of users who are logged in", "output": "who | cut -d \" \" -f1,2"}
{"input": "Removes 5 oldest files in the current folder.", "output": "ls -t *.log | tail -$tailCount | xargs rm -f"}
{"input": "Find all $1 files/directories under current directory and enter into the parent directory of the first one found", "output": "cd $(dirname $(find . -name $1 | sed 1q))"}
{"input": "replace the word foo to bar in all the regular/normal files in the current folder (does not update the file)", "output": "find . -type f -exec sed -i 's/foo/bar/g' {} +"}
{"input": "Execute \"myfile\" on all regular files from the current directory tree", "output": "find . -type f -exec bash -c 'myfile \"{}\"'  \\;"}
{"input": "Installs package group \"Development Tools\" answering 'yes' on all questions.", "output": "yum -y groupinstall \"Development Tools\""}
{"input": "Locating large files (> 100 MB) in /home/ for 'cleaning'", "output": "find /home -type f -size +100M -delete"}
{"input": "Measure the disk space taken up by all *.txt files in directory trees folder1 and folder2", "output": "find folder1 folder2 -iname '*.txt' -print0 | du --files0-from - -c -s | tail -1"}
{"input": "Find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the literal '%p' and '%f' as the path and name respectively for each file", "output": "find . -iname \"*.mov\" -exec ffmpeg -i \"%p\" -f flv \"%f\" \\;"}
{"input": "Search the home directory tree for files last modified more than a year ago", "output": "find $HOME -mtime +365"}
{"input": "Print the content of the file 'file' deleting the last four lines", "output": "nl -b a file | sort -k1,1nr | sed '1, 4 d' | sort -k1,1n | sed 's/^ *[0-9]*\\t//'"}
{"input": "Print concatenated content of all files ending with '.foo' under the current folder", "output": "cat `find . -name '*.foo' -print`"}
{"input": "Find all files/directories with '.c' or '.h' extension under current directory tree and search for the regex provided by first positional argument and show the output by paging through one screenful at a time", "output": "find . -name '*.[ch]' | xargs grep $1 | less"}
{"input": "Find .jpg files owned by user daniel in the current directory and its sub-directories but ignore any file beginning with \"autumn\".", "output": "find . -user daniel -type f -name *.jpg ! -name autumn*"}
{"input": "search for the word \"slrn\" in all the files in the folder $HOME/html/andrews-corner", "output": "find $HOME/html/andrews-corner -exec grep -q 'slrn' '{}' \\; -print"}
{"input": "Creates temporary folder like '/tmp/tardir-XXXXXX' with 6-letter suffix and saves its path in 'tmpdir' variable.", "output": "tmpdir=$(mktemp -d /tmp/tardir-XXXXXX)"}
{"input": "excute script makeallsizes with all '*.jpg' file under originals directory.", "output": "find originals -name '*.jpg' | xargs -1 makeallsizes"}
{"input": "display a list of all the files in the file system which do not belong to any group and search only in jfs and jfs2 file systems", "output": "find / -nogroup \\( -fstype jfs -o -fstype jfs2 \\) -ls"}
{"input": "Make directories as needed in \"dest\" for every directory found under \"src/\"", "output": "find src/ -type d -exec mkdir -p dest/{} \\;"}
{"input": "Repeat \"image.png\" 10 times on a single line", "output": "yes image.png | head -n10 | xargs echo"}
{"input": "Delete all lines matching \"pattern\" in \"filename\"", "output": "sed -i '/pattern/d' filename"}
{"input": "Counts all files in a current folder and in subfolders one-level lower and sorts result by number of files within.", "output": "find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo -e $(find \"{}\" -printf \"\\n\" | wc -l) \"{}\"' | sort -n"}
{"input": "find all \".flac\" files starting with \"cmn-\" and search for files having CJK characters using unicodes", "output": "find . -name 'cmn-*\\.flac' -print | grep -P './cmn-[\\x4e00-\\x9fa5]\\.flac'"}
{"input": "run command 'ls -hal /root/ > /root/test.out' as user root", "output": "sudo su -c 'ls -hal /root/ > /root/test.out'"}
{"input": "Find files that are 100k", "output": "find -size 100k"}
{"input": "Find all files under /myfiles with read-write access for others", "output": "find /myfiles -type f -perm -o+rw"}
{"input": "display all the tex files in the current folder", "output": "find . -name \\*.tex"}
{"input": "List each file or directory in the current directory prefixed by its filesize in bytes and sorted from smallest to largest", "output": "du -a --max-depth=1 | sort -n"}
{"input": "Gets IP address of 'en0' selected network interface.", "output": "ifconfig en0 | awk '/inet addr/ {gsub(\"addr:\", \"\", $2); print $2}'"}
{"input": "Search /var/tmp for files larger than 30 MB modified 31 days ago", "output": "find /tmp /var/tmp -size +30M -mtime 31 -ls"}
{"input": "Print file system disk space usage of the current directory's file system", "output": "df ."}
{"input": "Copy the entire directory tree under t1 to t2, do not create a containing t1 directory in t2.", "output": "cp -R t1/ t2"}
{"input": "Recursively removes all empty folders from the X folder.", "output": "find X -depth -type d -exec rmdir {} \\;"}
{"input": "List all aliencoders.[0-9]+ files/directories under /home/jassi/ directory", "output": "find /home/jassi/ -name \"aliencoders.[0-9]+\" | xargs ls -lrt | awk print '$9'"}
{"input": "Find all files under path_to_dir", "output": "find path_to_dir -type f"}
{"input": "find all the text files in the home directory", "output": "find ~/ -name '*.txt'"}
{"input": "Report file system inodes usage in human readable format", "output": "df -ih"}
{"input": "Print common lines in files \"set1\" and \"set2\"", "output": "comm -12 <(sort set1) <(sort set2)"}
{"input": "search for all the text files and display the long listing of these files from that directory", "output": "find . -name \"*.txt\" -execdir ls -la {} \";\""}
{"input": "Find all *shp* directories under current directory and move their contents to ../shp_all/", "output": "mv $(find . -name \"*shp*\" -printf \"%h\\n\" | uniq)/* ../shp_all/"}
{"input": "Print pathnames of all files in the current directory and below skipping directories named SCCS and files in them", "output": "find . -name SCCS -prune -o -print"}
{"input": "find all the files in the file system which have been modified in the last 10 minutes", "output": "find / -mmin -10"}
{"input": "List all files in the current directory tree that were last modified between \"mar 03, 2010 09:00\" and \"mar 11, 2010\"", "output": "find -newermt \"mar 03, 2010 09:00\" -not -newermt \"mar 11, 2010\" -ls"}
{"input": "Find file names *blast* in specfied directory, case insensitive", "output": "find /usr/local -iname \"*blast*\""}
{"input": "Remove trailing white spaces and replace CRLF with LF in all files under current directory ignoring .git and .svn directories", "output": "find . -not \\( -name .svn -prune -o -name .git -prune \\) -type f -exec sed -i 's/[:space:]+$//' \\{} \\;  -exec sed -i 's/\\r\\n$/\\n/' \\{} \\;"}
{"input": "Decompress \"path/to/test/file.gz\" to standard output and save all lines matching \"my regex\" and not matching \"other regex\" to files with a 1000000 line limit", "output": "gzip -dc path/to/test/file.gz | grep -P 'my regex' | grep -vP 'other regex' | split -dl1000000 - file"}
{"input": "Unzip \"daily_backup.sql.gz\" and search for lines matching \"'x'|/x/\"", "output": "zcat daily_backup.sql.gz| grep -E \"'x'|/x/\""}
{"input": "Print the first line of each file under the home directory", "output": "find $HOME/. -name *.txt -exec head -n 1 -v {} \\;"}
{"input": "find all files in the home folder which have been modified between 72 and 96 hours before", "output": "find ~ -mtime 2 -mtime -4 -daystart"}
{"input": "Print days between date $A and $B", "output": "echo \"( `date -d $B +%s` - `date -d $A +%s`) / (24*3600)\" | bc -l"}
{"input": "Print each logged in user's full name", "output": "finger -l | grep \"Name:\" | cut -d \":\" -f 3 | cut -c 2- | sort | uniq"}
{"input": "search for all \"tif\" images in the entire file system", "output": "find / -name '*.tif ' \u2013print"}
{"input": "Find all files/directories with 'my key phrase' in their names under current directory", "output": "find . -name '*my key phrase*'"}
{"input": "Show the list of user wnj's files that are newer than file `ttt'", "output": "find / -newer ttt -user wnj -print"}
{"input": "Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files invoking perl as few times as possible and also keep backups with .bak extension.", "output": "find /home/www/ -type f -exec perl -i.bak -pe 's/subdomainA\\.example\\.com/subdomainB.example.com/g' {} +"}
{"input": "Write output of \"command\" to standard output and append to \"/path/to/logfile\"", "output": "command | tee -a /path/to/logfile"}
{"input": "run a somebashstatement with the filename as argument, inside a for loop that iterates over a number of filenames found recursively in /path that match 'pattern'", "output": "find /path -name 'pattern' -exec bash -c 'for file; do somebashstatement \"$file\"; done' -- {} +"}
{"input": "Finds IP addresses of all network interfaces.", "output": "ifconfig | sed -n 's/.*inet addr:\\([0-9.]\\+\\)\\s.*/\\1/p'"}
{"input": "Print position number of day '9' in fourth line of calendar output for September, 2009.", "output": "cal 09 2009 | awk 'NR==4{day=\"9\"; col=index($0,day); print col }'"}
{"input": "Find symbolic links in /usr/sbin and /usr/bin to files whose pathnames end in \"*/systemctl\"", "output": "find /usr/sbin /usr/bin -lname \"*/systemctl\""}
{"input": "Query NSS entries for current hostname.", "output": "getent `uname -n`"}
{"input": "Delete all empty directories and directories that contain only empty directories under current directory", "output": "find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} `;`"}
{"input": "Find files in the current directory tree of size between 700k and 1000k", "output": "find . \\( -size +700k -and -size -1000k \\)"}
{"input": "search for a regular/normal file \"myfile\" in the entire file system excluding the folder in excluded_path", "output": "find / -path excluded_path -prune -o -type f -name myfile -print"}
{"input": "Print the first word followed by the rest of the line formatted to fit in 100 characters for every line in \"input\"", "output": "sed 's/\\([^ ]*\\) /\\1\\n/' input | fold -w 100"}
{"input": "reverse both words and lines in file", "output": "tac filename | awk '{for (i=NF; i>1; i--) printf(\"%s \",$i); printf(\"%s\\n\",$1)}'"}
{"input": "display the count of number of files in the current folder", "output": "find | wc -l"}
{"input": "List first 5 files named 'something' that are found under current directory", "output": "find . -name something -print | head -n 5"}
{"input": "display a long list of all the jpg files in the home folder(plus at the end is used to give bulk data as input)", "output": "find ~ -iname '*.jpg' -exec ls {} +"}
{"input": "Find all *.txt files of user Tecmint under /home directory", "output": "find /home -user tecmint -iname \"*.txt\""}
{"input": "list all files under the current directory, writing the output to the file some_file, suppressing all error messages", "output": "find . 2>/dev/null > some_file"}
{"input": "Find directories named 'work' under '/usr/ports/' directory tree and remove them", "output": "find /usr/ports/ -name work -type d -print -exec rm -rf {} \\;"}
{"input": "Find \".c\" and \".h\" files in the current directory tree and print lines containing \"#include\"", "output": "tree -if | grep \\\\.[ch]\\\\b | xargs -n 1 grep -H \"#include\""}
{"input": "List the unique parent directories of all .class files found under \"/root_path\"", "output": "find /root_path -type f -iname \"*.class\" -printf \"%h\\n\" | sort -u"}
{"input": "Remove from the current directory tree all the regular files which have a dot in their names and contain string \"<img-name>-<width:integer>x<height:integer>.<file-ext> syntax\"", "output": "find . -name \"*.*\" -type f -exec grep -l '<img-name>-<width:integer>x<height:integer>.<file-ext> syntax' {} \\; | xargs rm -f"}
{"input": "display all the directories in the folder /var and do not go beyond 2 levels during search", "output": "find /var -maxdepth 2 -type d;"}
{"input": "Recursively removes all files in a current folder but '*txt' files.", "output": "find . -type f -not -name '*txt' | xargs rm"}
{"input": "search all undo files(ending with .undo) in the current folder and calculate the total size of them", "output": "find -name '*.undo' -exec wc -c {} + | tail -n 1"}
{"input": "find all the links in the directory students and print them. Do not display any errors.", "output": "find /students -type l -print 2> /dev/null"}
{"input": "Print unique lines of sorted file \"second.txt\" compared to sorted file \"first.txt\"", "output": "comm -13 first.txt second.txt"}
{"input": "Exit the shell immediately if an error is encountered", "output": "set -o errexit"}
{"input": "Find *.txt files in the current directory tree, ignoring paths ./Movies/*, ./Downloads/*, and ./Music/*", "output": "find . -type f -name \"*.txt\" ! -path \"./Movies/*\" ! -path \"./Downloads/*\" ! -path \"./Music/*\""}
{"input": "Find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format", "output": "find -type f -name \"*.htm\" | awk -F'[/]' 'BEGIN{OFS=\"-\"}{ gsub(/^\\.\\//,\"\") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }'"}
{"input": "Change the permission to 0644 for all files under current directory", "output": "find . -type f -exec chmod 0644 {} \\;"}
{"input": "Print lines in file 'file' that do not match any word specified in file 'blacklist' (one word per line)", "output": "grep -w -v -f blacklist file"}
{"input": "Search for 'stuff' in all *,txt files under current directory", "output": "find . -name \"*.txt\" -print0 | xargs -0 egrep 'stuff'"}
{"input": "Remove all *.mp3 files in tmp directory but not in it's subdirectories", "output": "find tmp -maxdepth 1 -name *.mp3 -print0 | xargs    -0 rm"}
{"input": "display a long listing of all the regular/normal files in the current folder", "output": "find . -type f -ls"}
{"input": "Print the sorted and unique parent directory paths appended with : of all the files that are executable by owner under ~/code directory without descending into hidden directories", "output": "find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\\n' | sort | uniq | tr -d '\\n'"}
{"input": "Find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified more than 30 days ago", "output": "find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime +30 -print"}
{"input": "display all the c files and the header files in the path /some/dir and do not search in sub directories", "output": "find /some/dir -maxdepth 1 \\( -name '*.c' -o -name '*.h' \\) -print"}
{"input": "Show global windows options.", "output": "tmux show-options -g"}
{"input": "Search the current directory tree for executable files", "output": "find . -type f -executable -print"}
{"input": "Print content of all files found regarding seach options '[whatever]'", "output": "find [whatever] -exec cat {} \\;"}
{"input": "Count all the lines of all php files in current directory recursively", "output": "find -name '*.php' | xargs cat | wc -l"}
{"input": "Change permissions to u=rw,g=r,o= for all files in the current directory tree", "output": "find . -type f -exec chmod u=rw,g=r,o= '{}' \\;"}
{"input": "Delete all __temp__* files/directories under current directory tree", "output": "find . -depth -name '__temp__*' -exec rm -rf '{}' \\;"}
{"input": "display list of all the hidden regular/normal files in the directory \"/dir/to/search/\"", "output": "find /dir/to/search/ -type f -iname \".*\" -ls"}
{"input": "Find files that match the executable bit for owner or group", "output": "find -type f -perm /110"}
{"input": "Counts the number of lines in each *.swift or *.mm file in a git repository, escaping any space in filename.", "output": "git ls-files | sed 's/ /\\\\ /g' | grep -E \"\\.*(swift$|mm$)\" | xargs wc -l"}
{"input": "Prints long listing of the current directory and top-level directories within, sorted from oldest to newest, with appended indicators.", "output": "$ ls -Fltr *"}
{"input": "find all regular/normal files in current folder and display the filename and size", "output": "find $(pwd)/* -type f -exec stat -c \"f%15s %n\" {} +"}
{"input": "Find all files on the system that are larger than 600 MB", "output": "find / -size +600M -print"}
{"input": "Display human-readable file type description of ascii.txt", "output": "file ascii.txt"}
{"input": "Make directory \"/tmp/imaginary/\" on remote host before archiving \"file\" to \"user@remote:/tmp/imaginary/\"", "output": "rsync -aq --rsync-path='mkdir -p /tmp/imaginary/ && rsync' file user@remote:/tmp/imaginary/"}
{"input": "Report file systems disk usage human-readable using POSIX output format.", "output": "df -Ph"}
{"input": "Mount \"/dev/shm\" using /etc/fstab entry", "output": "mount /dev/shm"}
{"input": "Find recursively all empty directories in the current directory", "output": "find . -type d -empty"}
{"input": "Show the list of directories in the /mnt/raid directory tree", "output": "find /mnt/raid -type d -print"}
{"input": "move all the files in the current folder  to temp folder and search atleast in one subfolder", "output": "find . -mindepth 1 -exec mv -t /tmp {} +"}
{"input": "Display differences between directories dir1 and dir2, treating absent files as empty.", "output": "diff -Naur dir1/ dir2/"}
{"input": "find all files in the file system which have no user and no group", "output": "find / -nouser -nogroup"}
{"input": "Disable wildcard expansion and name globbing", "output": "set -f"}
{"input": "find all gif files in the file system", "output": "find / -name \"*gif\" -print"}
{"input": "Print file type of the executable file of command \"foo\"", "output": "file $(which foo)"}
{"input": "Find all /home/folder1/*.txt files and create symlinks appending '_CUSTOM_TEXT.txt' in their names", "output": "find /home/folder1/*.txt -type f | awk -F '.txt' '{printf \"ln -s %s %s_CUSTOM_TEXT.txt\\n\", $0, $1}' | sh"}
{"input": "display all the files in the current folder", "output": "find . | awk '{ print \"FILE:\" $0 }'"}
{"input": "Find all *.txt files under current directory with their timestamps and paths, sort them and print the last entry only", "output": "find . -name \"*.txt\" -printf \"%T+ %p\\n\" | sort | tail -1"}
{"input": "Save the list of directories modified a fortnight ago to `deploy.txt' removing the leading ./ from the file names", "output": "find . -type d -mtime 14 | sed -e 's,^\\./,,' > deploy.txt"}
{"input": "Find all files/directories named file in 2 and 3 levels down the current directory", "output": "find -mindepth 2 -maxdepth 3 -name file"}
{"input": "Find all image.pdf files/directories under ./polkadots with null character as the delimiter", "output": "find ./polkadots -name \"image.pdf\" -print0"}
{"input": "Put the absolute directory path to the current script to MY_DIR variable", "output": "MY_DIR=$(dirname $(readlink -f $0))"}
{"input": "Numerically sort standard input by the second word of each line and output from greatest value to least value", "output": "sort -nrk 2,2"}
{"input": "Send 4 ping requests to host \"google.comz\", displaying only the summary info after the last request completed.", "output": "ping -c 4 -q google.comz"}
{"input": "Find files named 'fileName.txt' under '/path/to/folder' directory tree ignoring 'ignored_directory'", "output": "find /path/to/folder -name fileName.txt -not -path \"*/ignored_directory/*\""}
{"input": "display all the files in the current folder which have been modified between two dates", "output": "find . -newermt \u201cSep 1 2006\u201d -and \\! -newermt \u201cSep 10 2006\u201d"}
{"input": "Find recursively all files in /path that end in \"txt\" and copy them to /tmp/", "output": "find /path -type f -name \"*txt\" -printf \"cp '%p' '/tmp/test_%f'\\n\" | bash"}
{"input": "Gets domain name from dig reverse lookup.", "output": "dig -x 8.8.8.8 | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5"}
{"input": "Execute \"ls -l\" every 2 seconds", "output": "watch 'ls -l'"}
{"input": "Read a line from standard input into variable \"foobar\" and suppress showing user input", "output": "read -s foobar"}
{"input": "Print git branch currently checked out in a working directory.", "output": "git symbolic-ref HEAD 2>/dev/null | cut -d\"/\" -f 3"}
{"input": "delete all the core files in the folder /prog which are bigger than 1KB", "output": "find /prog -type f -size +1000 -print -name core -exec rm {} \\;"}
{"input": "display list of all the regular/normal files in the home folder which are bigger than 512 kb", "output": "find /home/ -type f -size +512k -exec ls -lh {} \\;"}
{"input": "Print space separated list of numbers from \"$start\" to \"$end\"", "output": "echo `seq $start $end`"}
{"input": "Find all files/directories under ./var/log directory", "output": "find ./var/log"}
{"input": "Find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding /home/jul/here/exclude/* paths", "output": "find /home/jul/here -type f -iname \"*.php\" ! -path \"/home/jul/here/exclude/*\" -o -iname \"*.js\" ! -path \"/home/jul/here/exclude/*\""}
{"input": "find all files in current folder which are bigger than 1 MB and move them to another folder", "output": "find . -size +1M -print0 | xargs -0 -I '{}' mv '{}' files"}
{"input": "print all PIDs of stopped processes", "output": "jobs -sl | awk '{print $2}'"}
{"input": "Remove the last 2 tab-separated fields of each line in file pointed to by filename", "output": "cat $filename | rev | cut -c 3- | rev"}
{"input": "Find strings with 'Features' in /var/run/dmesg.boot' file", "output": "cat /var/run/dmesg.boot | grep Features"}
{"input": "Find directories in the current directory tree whose names are 33 characters in length", "output": "find . -type d -name \"?????????????????????????????????\""}
{"input": "display list of all the hidden files in the directory \"/dir/to/search/\"", "output": "find /dir/to/search/ -name \".*\" -ls"}
{"input": "Get domain name with 'google' from address $1", "output": "dig -x \"$1\" | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5"}
{"input": "Make directorie(s) 'es_MX.utf8/LC_MESSAGES' as needed in the current directory", "output": "mkdir --parents ./es_MX.utf8/LC_MESSAGES"}
{"input": "Strips last section from the path $pathname, and prints basename of the rest part.", "output": "echo $(basename $(dirname $pathname))"}
{"input": "Create intermediate directories \"tmp\" as required and directories real_dir1 and real_dir2", "output": "mkdir -p tmp/real_dir1 tmp/real_dir2"}
{"input": "Find all files/directories with permission $permissions under $directory directory tree", "output": "find \"$directory\" -perm \"$permissions\""}
{"input": "Search the \"data\" directory tree for files matching pattern 'filepattern-*2009*' and save the result as 'filesOfInterest.txt'", "output": "find data/ -name filepattern-*2009* -print > filesOfInterest.txt"}
{"input": "Duplicate directory tree under /mnt/usr/lib to /usr but creating symlinks to files instead of copying them.", "output": "cp -rs /mnt/usr/lib /usr/"}
{"input": "Print the first 5 decompressed lines of compressed file \"$line\"", "output": "zcat \"$line\" | head -n5"}
{"input": "Search through the /usr directory for all files that begin with the letters Chapter, followed by anything else.", "output": "find /usr -name \"Chapter*\" -type f"}
{"input": "run ksh shell as user apache", "output": "su apache -s /bin/ksh"}
{"input": "Find all *.ogg (case insensitive) files/directories under your home directory that are greater than 100MB in size", "output": "find $HOME -iname '*.ogg' -size +100M"}
{"input": "Find all regular files under '/home/john' directory tree that start with 'landof' in their names", "output": "find /home/john -name \"landof*\" -type f -print"}
{"input": "Delete all \".DS_Store\" files/directories under test directory", "output": "find test -name \".DS_Store\" -delete"}
{"input": "Prints all business days in a current month.", "output": "cal -h | cut -c 4-17"}
{"input": "Count the number of differing lines in \"file1\" and \"file2\"", "output": "diff file1 file2 | grep ^[\\>\\<] | wc -l"}
{"input": "force delete all the files in the current folder expect xml files", "output": "find . | grep -v xml | xargs rm -rf {}"}
{"input": "Go into the directory whose name is selected in the X window system, ie. double-clicked in a terminal window.", "output": "cd \"`xsel`\""}
{"input": "Reports time consumed by command 'sleep 1'.", "output": "time sleep 1"}
{"input": "Remove all files in the /myfiles directory tree that were accessed at least 30 days ago", "output": "find /myfiles -atime +30 -exec rm {} ;"}
{"input": "Save first one of space separated parts of each line in $LOCKFILE file to the 'CURRENT_PID_FROM_LOCKFILE' variable", "output": "CURRENT_PID_FROM_LOCKFILE=`cat $LOCKFILE | cut -f 1 -d \" \"`"}
{"input": "Recursively finds files like 'example.com', ignoring case differences, and filters out files with 'beta' in path.", "output": "find -iname example.com | grep -v beta"}
{"input": "split the file \"/path/to/large/file\" into pieces per 50000 lines named as /path/to/output/file/prefixNNN", "output": "split --lines=50000 /path/to/large/file /path/to/output/file/prefix"}
{"input": "Locates Erlang distribution, and prints release number from 'RELEASES' file.", "output": "awk -F, 'NR==1 {gsub(/\"/,\"\",$3);print $3}' \"$(dirname $(readlink -f $(which erl)))/../releases/RELEASES\""}
{"input": "List current user's crontab.", "output": "crontab -l"}
{"input": "Rename \"/usr/bin/php\" to \"/usr/bin/~php\"", "output": "sudo mv /usr/bin/php /usr/bin/~php"}
{"input": "forcibly change owner to all files and directories in current directory to user www-data", "output": "sudo chown -Rf www-data *"}
{"input": "Show the subdirectories of the current directory", "output": "find . -maxdepth 1 -type d -print | xargs -I {} echo Directory: {}"}
{"input": "Concatenate all files under the current directory and below that contain \"test\" in their names", "output": "find . -iname '*test*' -exec cat {} \\;"}
{"input": "display all the \".sh\" files in the current folder", "output": "find -name *.sh"}
{"input": "Print 'This should print the filename twice if an implicit -print is applied: ' appended with file paths for all files named 'file' under current directory tree", "output": "find -name file -exec echo 'This should print the filename twice if an implicit -print is applied: ' {} +"}
{"input": "Overwrite a file 'my-existing-file' with random data to hide its content", "output": "shred my-existing-file"}
{"input": "Print git branch currently checked out in a working directory.", "output": "git status | grep \"On branch\" | cut -c 11-"}
{"input": "Continuously write \"Hidden\" separated by null terminators over the entire \"/dev/sdb\" disk", "output": "yes \"Hidden\" | tr '\\n' '\\0' | dd of=/dev/sdb"}
{"input": "Report file system mounted at $path_in_question disk usage if canonical path $path_in_question is a mount point.", "output": "df $path_in_question | grep \" $path_in_question$\""}
{"input": "Read a line from standard input with prompt \"Continue (y/n)?\" and save response in variable \"CONT\"", "output": "read -p \"Continue (y/n)?\" CONT"}
{"input": "Make a list of regular files from the current directory tree that have more than 1 link and view it with the \"less\" pager", "output": "find . -type f -noleaf -links +1 -printf \"%n %i %f\\t%h\\n\" | sort | less"}
{"input": "Saves state of shell option 'nullglob' in an 'old_nullglob' variable.", "output": "local old_nullglob=$(shopt -p nullglob)"}
{"input": "Extract five digits sequence from a filename with x number of alphanumeric characters followed by the five digit sequence surrounded by a single underscore on either side then another set of x number of alphanumeric characters.", "output": "echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2"}
{"input": "Check if a drive is mounted to nfs", "output": "mount |grep nfs"}
{"input": "Display differences between /destination/dir/1 and /destination/dir/2 excluding files that match any pattern in file \"exclude.pats\".", "output": "diff /destination/dir/1 /destination/dir/2 -r -X exclude.pats"}
{"input": "Remove all .tmp files in and below /tmp", "output": "find /tmp -name \"*.tmp\" -print0 | xargs -0 rm"}
{"input": "List all broken symlinks including cyclic links under current directory", "output": "find . -type l -exec test ! -e {} \\; -printf '%Y %p\\n'"}
{"input": "find all the files in the current folder which have been accessed in the last 60 minutes", "output": "find . -amin -60"}
{"input": "Delete all .bam files in the current directory tree", "output": "find . -name \"*.bam\" | xargs rm"}
{"input": "Print the full real path of \"/dev/disk/by-uuid/$1\" followed by \"is mounted\"", "output": "echo $(readlink -f /dev/disk/by-uuid/$1) is mounted"}
{"input": "find the biggest files only (but not directories)", "output": "find . -type f -exec du -Sh {} + | sort -rh | head -n 15"}
{"input": "Search for files in your home directory which have been modified in the last twenty-four hours.", "output": "find $HOME  -mtime 0"}
{"input": "Remove all regular files from the current directory tree whose names do not end with \"ignore1\" or \"ignore2\"", "output": "find . -type f -not -name '*ignore1' -o -not -name '*ignore2' | xargs rm"}
{"input": "Create the directory '.npm-global' in the user's home directory(~).", "output": "mkdir ~/.npm-global"}
{"input": "Reattach a session and if necessary detach or  even  create first", "output": "screen -d -R -S test"}
{"input": "Display who is logged on and what they are doing", "output": "w"}
{"input": "Remove what follows the forth occurrence of the character \":\" in any field which contains it", "output": "perl -pe 's/((:\\S*){3}):\\S*/$1/g' file | column -t"}
{"input": "Search all non-hidden files in the current directory and all non-hidden sub-directories for the file hi.dat.", "output": "find *-name hi.dat"}
{"input": "Find all *company* files/directories under /root/of/where/files/are directory", "output": "find /root/of/where/files/are -name *company*"}
{"input": "List all directories in maximum 1 level down the current directory", "output": "find . -maxdepth 1 -type d -exec ls -dlrt {} \\;"}
{"input": "Find `string' in all *.java files ignoring the case of that string", "output": "find . -type f -name \"*.java\" -exec grep -il string {} \\;"}
{"input": "find all the files in the file system that start with \"win\" and searched only in the mounted file systems", "output": "find / -mount -name 'win*'"}
{"input": "Make directory \"dirname\" with permissions set to 777", "output": "mkdir -m 777 dirname"}
{"input": "Recursively removes 'classes' folder, prompting user on each deletion.", "output": "rm -r classes"}
{"input": "Search /var/log for logs larger than 10 megabytes", "output": "find /var/log -size +10M -ls"}
{"input": "Prints process tree for each process owned by user 'username'.", "output": "ps -aux |  awk '/^username/{print $2}' | xargs pstree"}
{"input": "Read a line from standard input with prompt \"Are you alright? (y/n) \" and save the response to variable \"RESP\"", "output": "read -p \"Are you alright? (y/n) \" RESP"}
{"input": "Search the current directory tree for *.c and *.asm files, ignoring the case", "output": "find . -type f \\( -iname \"*.c\" -or -iname \"*.asm\" \\)"}
{"input": "Replace all occurrences of \"foo_fn\" with \"bar_fn\" in the files named \"foo_fn\" from the current directory tree", "output": "find . -name foo_fn exec sed -i s/foo_fn/bar_fn/g '{}' \\;"}
{"input": "Print unique lines of sorted file \"f1\" compared to sorted file \"f2\"", "output": "comm -2 -3 f1 f2"}
{"input": "run command \"$WEB --quiet\" in backgrounf as user  named as the value of the variable $USER", "output": "su $USER -c \"$WEB --quiet\" &"}
{"input": "Uses GNU tool 'time' to estimate time consumed by command 'command' and redirects output to file", "output": "\\time -o time.log command"}
{"input": "Copy file linked to by \"bar.pdf\" to \"bar.pdf\"", "output": "cp --remove-destination `readlink bar.pdf` bar.pdf"}
{"input": "Print the file 'text1;text2;text3' replacing each space(\" \") with a newline", "output": "cat \"text1;text2;text3\" | sed -e 's/ /\\n/g'"}
{"input": "Find all *.java files under current directory containing the string 'String'", "output": "find . -name \"*.java\" -exec grep \"String\" {} \\;"}
{"input": "set alias \"j7\" for command 'JAVA_HOME=`/usr/libexec/java_home -v 1.7`'", "output": "alias j7='JAVA_HOME=`/usr/libexec/java_home -v 1.7`'"}
{"input": "Find all directories under minimum 1 level down the  $GIVEN_DIR directory with null character as the delimiter", "output": "find \"$GIVEN_DIR\" -type d -mindepth 1 -print0"}
{"input": "search for all the perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified 8-10 days ago.", "output": "find /nas/projects/mgmt/scripts/perl -mtime 8 -mtime -10 -daystart -iname \"*.pl\""}
{"input": "Execute `echo' for each file found", "output": "find . | xargs -n 1 echo"}
{"input": "Mathematically sum each line in \"infile\"", "output": "paste -s -d+ infile | bc"}
{"input": "display all the files in the folder \"/home/mywebsite\" which have been changed in the last 7*24 horus", "output": "find /home/mywebsite -type f -ctime -7"}
{"input": "Find all files in current directory excluding hidden files and put the output into full_backup_dir variable", "output": "full_backup_dir=$(find . -depth '(' -wholename './.*' ')' -prune -o -print)"}
{"input": "Change permissions of all regular files in the ~/dir_data directory tree in accordance with mode `a-x,u+w'", "output": "find ~/dir_data -type f -exec chmod a-x,u+w {} \\;"}
{"input": "bind key \"\\x61\" to insert itself", "output": "bind $'\"\\x61\"':self-insert"}
{"input": "search for the file \"name_to_find\" in the home folder", "output": "find ~ -name \"name_to_find\""}
{"input": "find all files in the current folder which have not been accessed in the last 7 days or which are bigger than 20KB", "output": "find . -atime +7 -o -size +20480 -print"}
{"input": "Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and other for those directories", "output": "find . -type d -exec chmod u=rwx,g=rx,o=rx {} \\;"}
{"input": "change owner and group of the file \"/path/to/yourapp\" to root", "output": "chown -v root:root /path/to/yourapp"}
{"input": "Print the contents of \"file\" with \" | \" appended to each line", "output": "echo `sed -e 's/$/\\ |\\ /g' file`"}
{"input": "Find all files/directories under current directory with 'FooBar' in their paths and copy them to ~/foo/bar", "output": "find . | grep FooBar | xargs -I{} cp {} ~/foo/bar"}
{"input": "find files which modification time is  7 days ago", "output": "find . -mtime -7"}
{"input": "Find all files in current directory and execute command1 and command2 for each file", "output": "find . -type f \\( -exec command1 \\; -false -o -exec command2 \\; \\)"}
{"input": "find files in $HOME ending in \"txt\" or \"html\" and case insensitive search for the word \"vpn\"", "output": "find $HOME \\( -name \\*txt -o -name \\*html \\) -print0 | xargs -0 grep -li vpn"}
{"input": "Print the first line of \"seq 1 10000\"", "output": "seq 1 10000 | head -1"}
{"input": "list all files under the current directory, writing the output to the file files_and_folders", "output": "find . > files_and_folders"}
{"input": "List all directories in current directory, works even if they have weird names or names starting with a dash.", "output": "find -maxdepth 1 -type d | awk -F\"./\" '{print $2}'"}
{"input": "Read a line of standard input with prompt \"Enter the path to the file: \" and suggestion \"/usr/local/etc/\" and save the response to variable \"FILEPATH\"", "output": "read -e -p \"Enter the path to the file: \" -i \"/usr/local/etc/\" FILEPATH"}
{"input": "Prints message info about filename and location of the current script", "output": "echo \"The script you are running has basename `basename $0`, dirname `dirname $0`\""}
{"input": "Search the files from the current directory tree for \"foo\"", "output": "find . -exec grep -l foo {} +"}
{"input": "Find all files/directories that are bigger than 100 bytes under '/home/apache' directory tree", "output": "find /home/apache -size 100c -print"}
{"input": "Merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from both files, replace missing fields with \"no-match\", and output the second field from standard input and the second and third field from file1.txt", "output": "join -t, -o 1.2,2.2,2.3 -a 1 -a 2 -e 'no-match' - <(sort file1.txt)"}
{"input": "find all the files that have not been modified in the last 24 hours", "output": "find /tmp/test/* -mtime +1"}
{"input": "Print all distinct characters in input \"He likes cats, really?\"", "output": "echo \"He likes cats, really?\" | fold -w1 | sort -u"}
{"input": "List all leaf directories of the current directory tree", "output": "find -depth -type d |sed 'h; :b; $b; N; /^\\(.*\\)\\/.*\\n\\1$/ { g; bb }; $ {x; b}; P; D'"}
{"input": "Get domain name with 'google' from dig reverse lookup.", "output": "dig -x 8.8.8.8| awk '/PTR[[:space:]]/ && /google/ {print $NF}'"}
{"input": "List all files that have not been read in thirty days or more", "output": "find . -type f -atime +30 -print"}
{"input": "Recursively changes group ownership of everything within a current folder and having group 'X_GNAME' to 'Y_GNAME'.", "output": "find . -group X_GNAME -exec chgrp Y_GNAME {} +"}
{"input": "Find all files/directores that are newer than /etc/motd and conain the string 'top' at the beginning of their names under user's home directory tree", "output": "find ~ -name 'top*' -newer /etc/motd"}
{"input": "Find .cpp files that differs in subdirectories PATH1 and PATH2.", "output": "diff -rqx \"*.a\" -x \"*.o\" -x \"*.d\" ./PATH1 ./PATH2 | grep \"\\.cpp \" | grep \"^Files\""}
{"input": "Remove files from the home directory tree that were last accessed more than 100 days ago", "output": "find ~ -atime +100 -delete"}
{"input": "Print the directory of the full path to the current script", "output": "echo $(dirname $(readlink -m $BASH_SOURCE))"}
{"input": "display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names and discard all the errors", "output": "find /var/log -name \"*.log\" -print0 2>/dev/null"}
{"input": "Copy all regular files from the current directory tree to /tmp", "output": "find . -type f -exec sh -c 'cp \"$@\" /tmp' {} +"}
{"input": "find all the mp3 files in the home folder which have been modified today", "output": "find ~ -type f -mtime 0 -iname '*.mp3'"}
{"input": "Counts lines in each *.cpp, *.c, *.h file.", "output": "wc -l `find . -type f \\( -name \"*.cpp\" -o -name \"*.c\" -o -name \"*.h\" \\) -print`"}
{"input": "Print how many files are inside each directory under the current one", "output": "find */ | cut -d/ -f1 | uniq -c"}
{"input": "Display file status for all regular files in the current directory tree", "output": "find . -type f -exec stat {} + > /dev/null"}
{"input": "Print file information of command \"bash\"", "output": "echo $(ls -l $(which bash))"}
{"input": "Find all files in the current directory tree whose names are \"YourProgram\", change to the directories they are in, and execute them", "output": "find $(pwd) -name YourProgram -exec dirname {} \\; | while read d; do cd \"$d\" && ./YourPrgram; done"}
{"input": "find the file \"httpd.log\" in the folder /home/web-server/", "output": "find /home/web-server/ -type f -name httpd.log"}
{"input": "Search the current directory tree for regular files that were accessed $FTIME days ago", "output": "find . -type f -atime $FTIME"}
{"input": "Rename all files under current directory by formatting the filenames with the sed scripts '\\''s/^([^-]*)-\\s*([^\\.]*)/\\L\\1\\E-\\2/'\\'', '\\''s/ /_/g'\\'' and '\\''s/_-/-/g'\\''", "output": "find ./ -type f -exec bash -c 'mv \"$1\" \"$(echo \"$1\" | sed -re '\\''s/^([^-]*)-\\s*([^\\.]*)/\\L\\1\\E-\\2/'\\'' -e '\\''s/ /_/g'\\'' -e '\\''s/_-/-/g'\\'')\"' - {} \\;"}
{"input": "search for the folder .dummy and remove it from the folder \"Test folder\"", "output": "find \"Test Folder\" -type d -name '.dummy' -delete"}
{"input": "Forward all connections to client localhost 3309 via the SSH tunnel to \"mysql_access_server\" and then connect to host \"sqlmaster.example.com\" on port 3306", "output": "ssh -f mysql_access_server -L 3309:sqlmaster.example.com:3306 -N"}
{"input": "Extract tar.gz archive and go into the directory that would normally be created by extracting it.", "output": "tar xvf \"$myarchive\" && cd \"${myarchive%.tar.gz}\""}
{"input": "Get the total size of all files under dir1 directory", "output": "find dir1 ! -type d |xargs wc -c |tail -1"}
{"input": "print all files in the current directory and all subdirectories", "output": "find ."}
{"input": "Find files and directories modified within the last 7 days", "output": "find . -mtime -7"}
{"input": "find all the files in the current directory and search for the word \"pw0\" in them.", "output": "find . -exec grep -i \"pw0\" {} \\;"}
{"input": "List all files under and below the directory given as variable $FULFILLMENT", "output": "find $FULFILLMENT -ls"}
{"input": "split $SOURCE_FILE\" into pieces per 100 lines", "output": "split -l 100 \"$SOURCE_FILE\""}
{"input": "Add a cron job to existing list, without removing existing ones, ro tun \"scripty.sh\" at 2:01 am, 3rd day of april (4th month), if that day happens to be a friday (5th day of the week starting with sunday=0).", "output": "cat <(crontab -l) <(echo \"1 2 3 4 5 scripty.sh\") | crontab -"}
{"input": "find all the files which have been changed after the modification of a file.", "output": "find -cnewer /etc/fstab"}
{"input": "Find files modified at least 5 days in the future", "output": "find . -newermt \"5 days\""}
{"input": "Saves path to the $SCRIPT file in the SCRIPTPATH variable.", "output": "set SCRIPTPATH=`dirname \"$SCRIPT\"`"}
{"input": "Print the file sizes for all files under current directory", "output": "find . -type f -printf '%p %s\\n' | perl -n -a -e '$sum+=$S[1]; print \"$sum\\n\"'"}
{"input": "Print all filenames under /proc and below", "output": "find /proc -print0 | xargs -0"}
{"input": "Page through the contents of yourFile, adding a $ at the end of each line and replacing tab characters by ^I.", "output": "cat -vet file | less"}
{"input": "find all case-insensitive php or pthml files, which whole path does not contain /some/directory case-insensitivily , and excute xgettext which whole name as   parameter", "output": "find /project/directory -iname '*.php' -or -iname '*.phtml' | grep -iv '/some/directory' | xargs xgettext"}
{"input": "Replace all occurrences of foo (case insensitive) with bar in all *.css (case insensitive) files under %s directory", "output": "find %s -iname *.css | xargs sed -i s/[Ff][Oo][Oo]/bar/g"}
{"input": "display all the files in the current folder which have been modified in one hour ago", "output": "find .  -newermt \"1 hour ago\""}
{"input": "Find all regular files in the current directory tree whose names are \"YourProgramName\", change to the directories they are in, and execute them with parameter \"YourParameterFile\"", "output": "find . -type f -name YourProgramName -execdir ./YourProgramName YourParameterFile \\;"}
{"input": "find the oldest normal file in the current directory and display with its timestamp", "output": "find ! -type d -printf \"%T@ %p\\n\" | sort -n | head -n1"}
{"input": "Compress all \".txt\" files in all sub directories with gzip", "output": "gzip */*.txt"}
{"input": "set variable \"uname_m\" to machine architecture, ie. x86_64", "output": "uname_m=`uname -m`"}
{"input": "Print numbers from 1 to 100", "output": "seq 1 100"}
{"input": "search for the pattern in all the regular/normal files in the entire file system", "output": "find / -type f -print0 | xargs -0 grep -i pattern"}
{"input": "Search for files/directories which are writable by either their owner or their group", "output": "find . -perm /u=w,g=w"}
{"input": "Format and print the time string @133986838 according to the default time format", "output": "date --date @120024000"}
{"input": "Updates all software in a system, skipping packages that have a failed dependencies.", "output": "sudo yum update --skip-broken"}
{"input": "Find all catalina* files/directories under current directory", "output": "find -name 'catalina*'"}
{"input": "display ten files in the tmp directory", "output": "find /tmp  | head"}
{"input": "search for files with the name \"temp\" in the /usr folder", "output": "find /usr -name temp -print"}
{"input": "Change permissions to 644 for all files in the current directory tree", "output": "find . -type f | xargs chmod -v 644"}
{"input": "Find all regular files under current directory", "output": "find . -depth -type f -print"}
{"input": "search for all the \".c\" files in the folder \"/home/david\" which have been modified in the last 10 minutes", "output": "find /home/david -mmin -10 -name '*.c'"}
{"input": "Execute zcat on every file matching \"*20120805.gz\" in the current directory and subdirectories", "output": "find . -name *20120805.gz -exec zcat {} \\;"}
{"input": "Set the shell option 'errexit'  causing bash to exit immediately if one of the commands in a multi-command statement fails.", "output": "set -e"}
{"input": "Print the icmp sequence number and ping time of each request to \"127.0.0.1\"", "output": "ping -c 2 -n 127.0.0.1 | awk -F'[ =]' -v OFS='\\t' 'NR>1 { print $6, $10 }'"}
{"input": "Move all files not matching \"Tux.png\" in \"~/Linux/Old\" to \"~/Linux/New/\" using zsh with \"EXTENDED_GLOB\"", "output": "mv ~/Linux/Old/^Tux.png ~/Linux/New/"}
{"input": "Move all *.data files/directories in $S directory to $S/data/ directory", "output": "find \"${S}\" -name '*.data' -exec mv '{}' \"${S}/data/\" \\;"}
{"input": "Write the standard output and error of \"someCommand\" to the console and append it to \"someFile\"", "output": "someCommand 2>&1 | tee -a someFile"}
{"input": "Find all xml files under current directory and archive them to .bz2 archives", "output": "find -name \\*.xml -print0 | xargs -0 -n 1 -P 3 bzip2"}
{"input": "Save absolute path of the script filename in variable \"SCRIPT\"", "output": "SCRIPT=$( readlink -m $( type -p $0 ))"}
{"input": "find all the \"passwd\" files in the entire file system", "output": "find / -iname passwd"}
{"input": "Find all files/directories not with the name 'query_to_avoid' under current directory", "output": "find -not -name \"query_to_avoid\""}
{"input": "show all the directories in the current folder", "output": "find . -type d"}
{"input": "Find all *.epub, *.mobi, *.chm, *.rtf, *.lit and *.djvu files/directories under current directory", "output": "find ./ -name '*.epub' -o -name '*.mobi' -o -name '*.chm' -o -name '*.rtf' -o -name '*.lit' -o -name '*.djvu'"}
{"input": "Set variable \"filename\" to only the name of document specified by URL, in this case \"pic.jpg\"", "output": "filename=\"`basename \"http://pics.sitename.com/images/191211/pic.jpg\"`\""}
{"input": "Find mysong.ogg anywhere under the home directory", "output": "find $HOME -name 'mysong.ogg'"}
{"input": "Find a file \"foo.bar\" without showing \"Permission Denied\" messages", "output": "find / -name foo.bar -print 2>/dev/null"}
{"input": "Write \"ee\" to standard output and as input to command \"foo\"", "output": "echo 'ee' | tee >(foo)"}
{"input": "display all scala files in the directory \"src/main\"", "output": "find . -type f -regex \".*src/main.*\\.scala$\""}
{"input": "Find all TXT files on the system and copy them to /tmp/txt", "output": "find / -iname '*.txt' | xargs --replace=@ cp @ /tmp/txt"}
{"input": "Remove all files and directories under '/home/foo' directory tree that match with one of the name patterns '.DS_Store', '._.DS_Store' , '._*', '.TemporaryItems' or '.apdisk'", "output": "find /home/foo \\( -name '.DS_Store' -or -name '._.DS_Store' -or -name '._*' -or -name '.TemporaryItems' -or -name '.apdisk' \\) -exec rm -rf {} \\;"}
{"input": "search for all the symbolic links in a folder and display all the broken/non-existent links", "output": "find /target/dir -type l ! -exec test -e {} \\; -print"}
{"input": "Remove file with inode number 31246", "output": "find . -inum 31246 -exec rm [] ';'"}
{"input": "Find all files/directories under current directory which have read-write permission for owner and only read permission for group and others", "output": "find -perm -644"}
{"input": "display all the text files in current folder", "output": "find . -name \"*.txt\""}
{"input": "Find all files/directories with 777 permission under current directory tree", "output": "find . -perm 777 -print"}
{"input": "Counts lines in each of *.php files in a current folder and subfolders ignoring 'tests' folder and prints total count as well.", "output": "find . -name tests -prune -o -type f -name '*.php' | xargs wc -l"}
{"input": "search  in root ( / ) directory downwards all files which  have exactly 2 links.", "output": "find /  -links 2 -print"}
{"input": "Displays a tree of all process alongside their command line arguments.", "output": "pstree -a"}
{"input": "Look for *log files in directories at least three levels down the directory tree", "output": "find / -mindepth 3  -name \"*log\""}
{"input": "Create a symbolic link named \"foo\" to \"/var/cache/apt/archives/bash_4.3-14ubuntu1_amd64.deb\"", "output": "ln -s   /var/cache/apt/archives/bash_4.3-14ubuntu1_amd64.deb foo"}
{"input": "Print all files/directories with their sizes under $WHATEVER directory tree", "output": "find $WHATEVER -printf \"%s %p\\n\""}
{"input": "Write every two lines in \"infile\" on a single line separated by a space", "output": "cat infile | paste -sd '  \\n'"}
{"input": "Write output and error of \"ant\" to the console and to \"build.log\"", "output": "ant 2>&1|tee build.log"}
{"input": "Search the current directory tree for files executable by at least someone", "output": "find . -type f \\( -perm -u=x -o -perm -g=x -o -perm -o=x \\) -exec test -x {} \\; -print"}
{"input": "display long listing of all the files in the root folder which are bigger than 3KB", "output": "find / -dev -size +3000 -exec ls -l {} ;"}
{"input": "Finds all the log* files recursively in /myDir that are more than 7 days older and compresses them.", "output": "find /myDir -name \"log*\" -ctime +7 -exec bzip2 -zv {} \\;"}
{"input": "Copy \"/Users/username/path/on/machine/\" to \"username@server.ip.address.here:/home/username/path/on/server/\" and convert encoding from UTF-8-MAC to UTF-8", "output": "rsync --iconv=UTF-8-MAC,UTF-8 /Users/username/path/on/machine/ 'username@server.ip.address.here:/home/username/path/on/server/'"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory", "output": "find /home -type f -name \"*.ext\" -exec sed -i -e \"s/\\x0D$//g\" {} \\;"}
{"input": "Replace \"foo\" with \"bar\" in all PHP files in the current directory tree", "output": "find . -name \"*.php\" -print | xargs sed -i 's/foo/bar/g'"}
{"input": "Recursively change owner to \"amzadm\" and group to \"root\" of all files in \"/usr/lib/python2.6/site-packages/awscli/\"", "output": "chown amzadm.root -R /usr/lib/python2.6/site-packages/awscli/"}
{"input": "copy all the mp3 files from current folder to another folder", "output": "find . -name '*.mp3' -exec cp -a {} /path/to/copy/stuff/to \\;"}
{"input": "find regular files in the \"mail\" folder under the user's home directory, displaying filenames and lines that contain the text \"Linux\"", "output": "find ~/mail -type f | xargs grep \"Linux\""}
{"input": "Infinitely print \"no\" to the screen", "output": "yes no"}
{"input": "find al the tmp directories in the current directory and create a dump of it", "output": "find . -type d -name tmp -prune -o -print | cpio -dump /backup"}
{"input": "set alias \"ls\" for command 'ls -a -l'", "output": "alias la='ls -a -l'"}
{"input": "search for all empty directories in the folder /home", "output": "find /home -type d -empty"}
{"input": "find all the php files in current folder and search for multiple patterns in these files and display the file names", "output": "find -name '*.php' -exec grep -in \"fincken\" {} + | grep TODO | cut -d: -f1 | uniq"}
{"input": "exclude vendor and app/cache dir, and search name which suffixed with php", "output": "find . -name *.php -or -path \"./vendor\" -prune -or -path \"./app/cache\" -prune"}
{"input": "Compose filepath as folder path where file $f is located, and lowercase filename of $f file, and save it in 'g' variable", "output": "g=`dirname \"$f\"`/`basename \"$f\" | tr '[A-Z]' '[a-z]'`"}
{"input": "get a PID of a process", "output": "jobs -x echo %1"}
{"input": "Output the file name \"file.txt' from the path \"some/unknown/amount/of/sub/folder/file.txt\"", "output": "basename \"some/unknown/amount/of/sub/folder/file.txt\""}
{"input": "Find all your jsp's, map them to your localhost webserver, and invoke a wget (fetch) on them", "output": "find -name \\*.jsp | sed 's/^/http:\\/\\/127.0.0.1/server/g' | xargs -n 1 wget"}
{"input": "Connect as ssh user specified by variable USER to host whose IP address or host name is specified by HOST, and copy remote file specified by variable SRC to location on local host specified by variable DEST, disabling progress info but enabling debug info.", "output": "scp -qv $USER@$HOST:$SRC $DEST"}
{"input": "Gets MAC addresses of all active network interfaces.", "output": "ifconfig | awk '$0 ~ /HWaddr/ { print $5 }'"}
{"input": "Find files in the /travelphotos that are greater than 200k in size but do not have \"2015\" anywhere in the file name", "output": "find /travelphotos -type f -size +200k -not -iname \"*2015*\""}
{"input": "Find all OGG files in the home directory that are at most 20 megabytes in size", "output": "find $HOME -iname '*.ogg' ! -size +20M"}
{"input": "Search for environmental variables with \"HIST\" in their name or contents", "output": "set | grep HIST"}
{"input": "run ls command on files found", "output": "find . -name \"*.pl\" -exec ls -ld {} \\;"}
{"input": "find all the html files in the current folder and rename them to .var files", "output": "find -name '*.html' -print0 | xargs -0 rename 's/\\.html$/.var/'"}
{"input": "Search the first 300 commands in history containing \"scp\" and ending in \"important\"", "output": "history 300 | grep scp | grep important$"}
{"input": "Find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them and put the output into the variable file_changed", "output": "file_changed=$(find . -depth \\( -wholename \\./\\.\\* \\) -prune -o -mtime -1 -print | cpio -oav)"}
{"input": "run command \"sh runProgram.sh\" as user jetty", "output": "su - jetty -c sh runProgram.sh"}
{"input": "Find all files on the system whose names are 'composer.json'", "output": "find / -name composer.json"}
{"input": "find all regular/normal files in the current folder whose name has the word photo or picture and which have been modified in the last 30 minutes", "output": "find . \\( -iname \"*photo*\" -or -name \"*picture*\" \\) -and ! -type d -and -mmin -30"}
{"input": "Print the full path directory name of each \"file.ext\" found under the current directory", "output": "find . -name \"file.ext\" -execdir pwd ';'"}
{"input": "display all files in current folder with NULL separating each file", "output": "find . -print0"}
{"input": "Create intermediate directories \"full\", \"path\" as required and directory \"to\"", "output": "mkdir -p `dirname /full/path/to/file.txt`"}
{"input": "Add executable permission to \"pretty-print\"", "output": "chmod +x pretty-print"}
{"input": "Find all directories in /path/to/dir/ without going into sub-directories", "output": "find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d"}
{"input": "Set permission of \"file\" to read only for the owner", "output": "chmod 600 file"}
{"input": "Print line number of each line in /etc/passwd file, where current user name is found", "output": "cat /etc/passwd -n | grep `whoami` | cut -f1"}
{"input": "find all files under the /etc/sysconfig directory that were accessed in the last 30 minutes", "output": "find /etc/sysconfig -amin -30"}
{"input": "Log in using key file \"./device_id.pem\" as user \"deviceuser\" on host \"middle.example.org\" and port 2222", "output": "ssh -i ./device_id.pem -p 2222 deviceuser@middle.example.org"}
{"input": "Recursively rename all files under /your/target/path replacing 'special' with 'regular' - all file/diretory names may not include spaces, and directory names containing such files may not contain the word 'special' in their name.", "output": "find /your/target/path/ -type f -exec rename 's/special/regular/' '{}' \\;"}
{"input": "Remove all *.mp3 files in tmp directory but not in it's subdirectories", "output": "find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    rm"}
{"input": "Find SQL files with text `expression'", "output": "find . -name \"*.sql\" -print0 -type f | xargs -0 grep \"expression\""}
{"input": "Find directories modified in last 7 days", "output": "find . -mtime -7 -type d"}
{"input": "Search for the regex $greppattern in all files with '.c' or '.h' extension under $searchpath with name pattern $filepat and show the matched line numbers, file names and matched lines", "output": "find \"$searchpath\" -name \"$filepat.[ch]\" -exec grep --color -aHn \"$greppattern\" {} \\;"}
{"input": "remove all subdirectories named \"CVS\" under current dir", "output": "find . -type d -name CVS -exec rm -r {} \\;"}
{"input": "Run \"myprogram\" in the current directory, pausing for user input at each page.", "output": "./myprogram | more"}
{"input": "Find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir", "output": "find . -type d -mtime 0 -exec mv {} /path/to/target-dir \\;"}
{"input": "Find all directories named essbase under /fss/fin", "output": "find /fss/fin -type d -name  \"essbase\" -print"}
{"input": "Delete recursively empty files named 'bad'", "output": "find . -name bad -empty -delete"}
{"input": "Show all lines in file2 that don't contain the first field of any line in file1.", "output": "awk '{print $1}' file2 | comm -1 -3 file1 - | join file2 -"}
{"input": "Print all lines from the last occurrence of the regex 'pattern' to the end of the file 'file'", "output": "tac file | awk '/pattern/{print;exit}1' | tac"}
{"input": "Force create a symbolic link without dereferencing named \"$SYMLINK_PATH\" to \"$lastModified\"", "output": "ln -nsf $lastModified $SYMLINK_PATH"}
{"input": "Copy all directories recursively from \"source/\" to \"destination/\" excluding all files", "output": "rsync -a --include='*/' --exclude='*' source/ destination/"}
{"input": "Use \"vagrant-ssh\" as the config file and ssh into \"default\" host", "output": "ssh -F vagrant-ssh default"}
{"input": "List all files under the current working directory tree", "output": "find $(pwd)/ -type f"}
{"input": "display all the files in the current folder", "output": "find . -print"}
{"input": "Change directory to the \"lib\" directory located two parent directories above the path to command \"perl\"", "output": "cd $(dirname $(dirname $(which perl)))/lib"}
{"input": "Archive all files/directories under data/ into archive.tar", "output": "find data/ -print0 | tar --null -T - --create -f archive.tar"}
{"input": "Search the current directory tree for files and directories called \"test\"", "output": "find . -name test -print"}
{"input": "display all the files and directories with the name \"CVS\"  from /usr/src folder that are at least seven levels deep and do not descend onto the folders", "output": "find /usr/src -name CVS -prune -o -depth +6 -print"}
{"input": "Find all regular files in /usr/bin accessed more than 20 days ago", "output": "find /usr/bin -type f -atime +20"}
{"input": "Resolve symbolic link of file \"FILE\" even if the file does not exist", "output": "readlink -m FILE"}
{"input": "sort all the regular files in the \"$DiskName\" directory which have been modified in the last 3*24 hours and which are bigger than 5Kb based on their size and save the output to the \"$TMPFILE\"(discard all the errors during search)", "output": "find $DiskName -type f -mtime -3 -size +5000 -exec ls -ld {} \\; 2>/dev/null | sort -n -k 5.1,5 >> $TMPFILE"}
{"input": "Recursively change the group ownership to \"laravel\" in \"./bootstrap/cache\"", "output": "sudo chown -R :laravel ./bootstrap/cache"}
{"input": "find case-insentive example.com file, and whole dose not contain beta", "output": "find -iname example.com | grep -v beta"}
{"input": "Delete all regular files that have not been modified in the last 31 days under '/path/to/junk/files' directory tree", "output": "find /path/to/junk/files -type f -mtime +31 -exec rm -f {} \\;"}
{"input": "Find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/medium/* paths and run `mogrify -resize 428x270\">\" -quality 80 -compress JPEG -monitor -strip` with the file paths as arguments", "output": "find temp/medium/* -maxdepth 2 -iname \"*.jpg\" -print0 | xargs -0 mogrify -resize 428x270\">\" -quality 80 -compress JPEG -monitor -strip"}
{"input": "display all normal/regular files in the folder \"$ORIG_DIR\"", "output": "find \"$ORIG_DIR\" -name \"*\" -type f"}
{"input": "find all the \".jpg\" files in current folder and display their count", "output": "find ./ -name '*.jpg' -type f | wc -l"}
{"input": "Find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command", "output": "find . -maxdepth 1 -name '*.sql' -exec \"sed -e 's/ , );/1,1);/g' '{}' | /usr/bin/mysql -D ootp\" \\;"}
{"input": "Find files on the system modified more than 90 minutes ago", "output": "find / -mmin +90"}
{"input": "Search the files from the current directory tree for \"chrome\"", "output": "find . | xargs grep 'chrome' -ls"}
{"input": "Save the first line of \"foo.txt\" to variable \"bar\"", "output": "bar=$(cat foo.txt | { read bat;echo $bat;})"}
{"input": "Ensure all 5 of UEDP0{1..5}_20120821.csv files exist, creating empty files for any missing ones (updates the file's timestamps)", "output": "touch -a UEDP0{1..5}_20120821.csv"}
{"input": "Trim leading and trailing whitespace from variable 'var'.", "output": "var=`echo $var | awk '{gsub(/^ +| +$/,\"\")}1'`"}
{"input": "Copy all *.mp3 files under the current directory to /tmp/MusicFiles/", "output": "find . -type f -name \"*.mp3\" -exec cp {} /tmp/MusicFiles \\;"}
{"input": "Get the disk space used by all *.txt (case insensitive) files under /home/d directory", "output": "find /home/d -type f -name \"*.txt\" -printf \"%s\\n\" | awk '{s+=$0}END{print \"total: \"s\" bytes\"}'"}
{"input": "Print file system disk space usage and grand total for the root file system with sizes in powers of 1000", "output": "df -H --total /"}
{"input": "search for all the directories in the current folder and run the print command in the searched folder", "output": "find . -type d -execdir sh -c 'printf \"%s/%s\\n\" \"$PWD\" \"$0\"' {} \\;"}
{"input": "Display name and value of 'variable' if it exists.", "output": "env | grep '^variable='"}
{"input": "Removes 'latest' folder if empty.", "output": "rmdir latest"}
{"input": "find all pdf files in the current folder", "output": "find . -name \u201c*.pdf\u201d -print"}
{"input": "Find all directories that do not contain \"main.cpp\"", "output": "diff <(find . -exec readlink -f {} \\; | sed 's/\\(.*\\)\\/.*$/\\1/' | sort | uniq) <(find . -name main.cpp  -exec readlink -f {} \\; | sed 's/\\(.*\\)\\/.*$/\\1/' | sort | uniq) | sed -n 's/< \\(.*\\)/\\1/p'"}
{"input": "Unsets all environment variables.", "output": "unset `env | awk -F= '/^\\w/ {print $1}' | xargs`"}
{"input": "Execute 'echo -e \"\\tHello World\"' every 2 seconds", "output": "watch 'echo -e \"\\tHello World\"'"}
{"input": "find all the direcories in the current folder", "output": "find -type d"}
{"input": "Find all files in entire file system which are larger than 20000KB and show file name/path followed by its size", "output": "find / -type f -size +20000k -exec ls -lh {} \\; | awk '{ print $8 \": \" $5 }'"}
{"input": "Change the owner and group of \"it\" to \"root\"", "output": "chown root:root it"}
{"input": "display all files in the current folder while discarding the errors save the output to a file", "output": "find . 2>/dev/null >files_and_folders"}
{"input": "Find files with name `aaa.txt' under the current directory", "output": "find . -name aaa.txt"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree matching pattern '*.???'", "output": "find . -type f -name \"*.???\" | awk -F. '{print $NF}' | sort -u"}
{"input": "Remove all *.log files from the current directory tree", "output": "find ./ -name '*.log' -print0 | xargs -0 rm"}
{"input": "search for all png files in a folder and copy them to another folder", "output": "find /home/mine -iname \"*.png\" -exec sh -c 'cp $0 /home/mine/pngcoppies/copy/$0' {} \\;"}
{"input": "search for all the c files in the current folder", "output": "find . -name \\*.c -print"}
{"input": "Edit current user's cron job list with editor specified by EDITOR environment variable, or default /usr/bin/editor if EDITOR is not set.", "output": "crontab -e"}
{"input": "Find files/directories named 'somename.txt' under current directory tree", "output": "find ./ -name \"somename.txt\""}
{"input": "Save system information appended with the current date in 'filename' variable", "output": "filename=\"$(uname -a)$(date)\""}
{"input": "display the contents of all the files ending with \".fq\" and perform a control check on this raw sequence of data and display the output to the screen", "output": "find . -name \"*.fq\"  -exec cat '{}' ';' | fastqc  /dev/stdin"}
{"input": "Save the system host name in variable \"HOSTNAME\"", "output": "HOSTNAME=$(hostname)"}
{"input": "set alias \"psgrep\" for command \"ps -ef | grep\"", "output": "alias psgrep=\"ps -ef | grep\""}
{"input": "Change directory to the download directory specified in the current user's user-dirs.dirs file", "output": "cd \"$(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d \"=\" | tr \"\\\"\" \"\\n\" | tr -d \"\\n\")\""}
{"input": "Count the number of lines in each .java file in the current directory tree", "output": "find . -name \"*.java\" -exec wc -l {} \\;"}
{"input": "find all the mp3 files in the entire file system whose size is bigger than 10MB", "output": "find / -type f -name *.mp3 -size +10M -exec rm {} \\;"}
{"input": "Archive \"_vimrc\" to \"~/.vimrc\" suppressing non-error messages and compressing data during transmission", "output": "rsync -aqz _vimrc ~/.vimrc"}
{"input": "find all the files in the entire file system whose size is between 50Mb to 100MB", "output": "find / -size +50M -size -100M"}
{"input": "change the group to \"new_group\" and permissions to 770 for all the files in the current folder", "output": "find . -name \"*\" -exec chgrp -v new_group '{}' \\; -exec chmod -v 770 '{}' \\;"}
{"input": "Show all of the .conf files in Pat's user folder and subdirectories using the less pager", "output": "find /home/pat -iname \"*.conf\" | less"}
{"input": "Exit the shell on the first error encountered", "output": "set -e"}
{"input": "Copy default SSH public key to \"somehost\" as user \"myname\"", "output": "ssh-copy-id myname@somehost"}
{"input": "display a list of all the files  in the home folder which have been modified today", "output": "find ~ -type f -mtime 0 -ls"}
{"input": "Run two processes, cmd1 whose output is fed as input to cmd2: cmd1 is immune to all SIGHUP (hangup) signals sent to it, but cmd2 is not.", "output": "nohup cmd1 | cmd2 &"}
{"input": "delete all the empty files(files with size 0 bytes) in the current folder", "output": "find . -empty -delete -print"}
{"input": "Delete all shared memory and semaphores for the current user on sun", "output": "ipcs | nawk -v u=`whoami` '/Shared/,/^$/{ if($6==0&&$3==u) print \"ipcrm shm\",$2,\";\"}/Semaphore/,/^$/{ if($3==u) print \"ipcrm sem\",$2,\";\"}' | /bin/sh"}
{"input": "Find all files starting from the current directory that contain '.java' in their pathnames", "output": "find . -print | grep '\\.java'"}
{"input": "Print out every command that is executed in the script", "output": "set -x"}
{"input": "find all the files in the current folder and display adding quotations to each file and replace spaces with new line", "output": "find $PWD | sed -e 's/^/\"/g' -e 's/$/\"/g' | tr '\\n' ' '"}
{"input": "Find only directories", "output": "find . -type d"}
{"input": "Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'etc/rc.d/'", "output": "find /usr/ports/ -name pkg-plist\\* -exec grep -l etc/rc.d/ '{}' '+' | wc -l"}
{"input": "display all directories in the current folder", "output": "find -type d"}
{"input": "find all the files that have been modified exactly 1 day ago", "output": "find -mtime 1"}
{"input": "delete all the files ending with \"~\" in current folder", "output": "find . -name \"*~\" -print | xargs rm"}
{"input": "prints absolute file paths for files in current directory", "output": "find `pwd` -maxdepth 1"}
{"input": "Find all *.pdf files under ./polkadots", "output": "find ./polkadots -type f -name \"*.pdf\""}
{"input": "Print numbers from 1 to 10 using up to 4 processes", "output": "seq 10 | parallel -j4  echo '{}'"}
{"input": "Copy /my/configfile to all empty directories of the $somedir directory tree", "output": "find \"$somedir\" -type d -empty -exec cp /my/configfile {} \\;"}
{"input": "Print every 16 bytes of standard input in groups of two followed by a space", "output": "fold -b16 | sed 's/../& /g'"}
{"input": "Clear the in-memory history", "output": "history -c"}
{"input": "Find all files that have the SUID bit set", "output": "find / -perm -u+s -print"}
{"input": "Search the current directory for regular files whose names start with my", "output": "find . -name 'my*' -type f"}
{"input": "Delete all the 'test' directories from all directories under <directory_name> that contain directories named 'test' and 'live'", "output": "find <directory_name> -type d -exec sh -c \"cd {} && [ -d live ] && [ -d test ] && echo \\\"Deleting test from {}\\\" && rm -rvi test \" {} \\;"}
{"input": "Print the contents of \"n\"", "output": "cat n"}
{"input": "Run svn checkout in every directory named 'needed_dir' under repository_dir/$f", "output": "find repository_dir/$f -type d -name needed_dir | xargs -r svn checkout"}
{"input": "display all the regular/normal files in current folder which have been modified exactly 60 minutes before", "output": "find . -mmin 60 -type f"}
{"input": "Create a symbolic link named \"~/bin/subl\" to \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\"", "output": "ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl"}
{"input": "Find all files matching pattern '.#*' in the current directory tree and execute \"foobar\" for each of them with the file name as an argument", "output": "find . -iname '.#*' -print0 | while read -r -d '' i; do foobar \"$i\"; done"}
{"input": "Page through the contents of BIG_FILE.txt, letting the user move around with the arrow keys, the Q key quits.", "output": "cat BIG_FILE.txt | less"}
{"input": "split the file hugefile.txt into pieces per 100000 lines named as partNNN with digital prefixes", "output": "split -a4 -d -l100000 hugefile.txt part."}
{"input": "Answer \"y\" to all \"Are you sure?\" prompts from command \"cp * /tmp\"", "output": "yes | cp * /tmp"}
{"input": "Print the input \"hello world\" followed by a swap of the first two awk fields", "output": "echo hello world | tee  >(awk '{print $2, $1}')"}
{"input": "ERROR - will overwrite the executable if it's not a symlink.", "output": "sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`"}
{"input": "Find all the files which are changed in last 1 hour", "output": "find / -cmin -60"}
{"input": "find all the \".JPG\" files in current folder and display their count", "output": "find ./ -name '*.JPG' -type f | wc -l"}
{"input": "Search the system for regular files whose names are \"filename\" ignoring the case", "output": "find / -type f -iname \"filename\""}
{"input": "Find all empty folders in the current directory and below", "output": "find . -type d -empty"}
{"input": "read all history lines not already read from the history file", "output": "history -n"}
{"input": "excute script makeallsizes with all '*.jpg' file under originals directory in 2 processes parallelly", "output": "find originals -name '*.jpg' | xargs -1 -P 2 makeallsizes"}
{"input": "Remove all .tmp files in and below /tmp", "output": "find /tmp -name \"*.tmp\" | xargs rm"}
{"input": "find all the text files which are present in the current directory excludinghidden files.", "output": "find . -type f \\( -iname \"*.txt\" ! -iname \".*\" \\)"}
{"input": "Use the uncompressed contents of \"blah.gz\" as input to \"some_command\"", "output": "cat blah.gz | gunzip | some_command"}
{"input": "find all files in the current folder which have not been modified today and whose file name is of length 1", "output": "find . -name \\? -mtime +0"}
{"input": "Show all values (without the names) of variables whose name or value contains \"VARIABLE_NAME\"", "output": "set | grep VARIABLE_NAME | sed 's/^.*=//'"}
{"input": "Use awk command 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 \";\" array[$1,$2] }' on compressed files \"input1.vcf.gz\" and \"input2.vcf.gz\"", "output": "gzip -dc input1.vcf.gz input2.vcf.gz | awk 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 \";\" array[$1,$2] }'"}
{"input": "Read the raw input of \"/dev/input/mice\" as hexadecimal bytes with 3 bytes per line", "output": "cat /dev/input/mice | od -t x1 -w3"}
{"input": "Recursively finds all folders in a current folder that contain files like '.git'.", "output": "find . -name '.git' | xargs dirname"}
{"input": "display long list of all the perl files in the current folder", "output": "find . -name \"*.pl\" -ls"}
{"input": "create a backup of all the files in the home folder on a partition and save the log to a file", "output": "find /home -depth -print | cpio -ov -0 /dev/rmt0 | tee -a tape.log"}
{"input": "Get current directory name without full path, ie. the part after the last /", "output": "pwd | awk -F / '{print $NF}'"}
{"input": "Copies file 'index.html' to each top-level directory in the current directory.", "output": "find . -mindepth 1 -maxdepth 1 -type d| xargs -n 1 cp -i index.html"}
{"input": "Save a unique list of the currently logged in usernames to variable \"line\"", "output": "line=$(who | cut -d' ' -f1 | sort -u)"}
{"input": "Find all SUID files in entire file system", "output": "find / -perm +u=s"}
{"input": "Generate a random 32 ASCII character password from /dev/urandom and save it to variable 'pass'", "output": "pass=$(LC_CTYPE=C < /dev/urandom tr -cd [:graph:] | tr -d '\\n' | fold -w 32 | head -n 1)"}
{"input": "Find all files/directories containing 'farm' in their names under '/usr/share' directory tree", "output": "find /usr/share -name '*farm*'"}
{"input": "search for bash and rsync files in the entire file system excluding search in /usr folder and discard all the errors", "output": "find / -path /usr -prune -o \\( -name rsync -o -name bash \\) -print 2>/dev/null"}
{"input": "find all normal/regular files in current folder which end with \"~\" or which begin and end with \"#\" and and move them to  temp folder", "output": "find . -maxdepth 1 -type f  -name '*~' -exec mv {} /tmp/ \\;  -or  -name '#*#' -exec mv {} /tmp/ \\;"}
{"input": "display a long listing of all regular/normal files in current directory which have been changed in the last 7 days and save the output to new.files", "output": "find ./ -type f -ctime -7 -exec ls {} \\; > new.files"}
{"input": "Remove all empty sub-directories under current directory", "output": "find . -type d | tac | xargs rmdir 2>/dev/null"}
{"input": "list all running jobs", "output": "jobs"}
{"input": "Set the setup connection timeout to 10 seconds for connecting to \"<hostName>\" via ssh", "output": "ssh -o ConnectTimeout=10  <hostName>"}
{"input": "Find all files under $dir", "output": "find $dir -type f"}
{"input": "Save the contents of \"~/.bashrc\" to the clipboard on OSX", "output": "cat ~/.bashrc | pbcopy"}
{"input": "Add execute permission to \"ComputeDate\", \"col\", and \"printdirections\" for all users", "output": "chmod a+x ComputeDate col printdirections"}
{"input": "Read the first line in \"$1\" and save each word in the bash array variable \"to_sort\"", "output": "read -a to_sort <<< \"$1\""}
{"input": "Locate all *.csv files under the current directory tree", "output": "find . -name \"*.csv\" -print"}
{"input": "Remove trailing spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths", "output": "find . -type f -not -iwholename '*.git*' -print0 | xargs -0 perl -pi -e 's/ +$//'"}
{"input": "Delete all files with '.old' extension under current directory tree", "output": "find . -name \u201c*.old\u201d -print | xargs rm"}
{"input": "Expands `whoami` as current user name, and adds resulted path to the directory stack.", "output": "pushd /home/`whoami`/Pictures"}
{"input": "Find all files/directories under current directory that match the case insensitive extended regex .*/(EA|FS)_.*", "output": "find -E . -iregex '.*/(EA|FS)_.*'"}
{"input": "find all the files in the current folder which which have been modified yesterday and day before yesterday and whose name is of length 1", "output": "find . -name \\? -daystart -mtime +0 -mtime -3"}
{"input": "Numerically sort each line in file \"out\" and print the result to console", "output": "sort -n out"}
{"input": "prevents curl from returning error (23) Failed writing body when grepping for foo", "output": "curl \"url\" | tac | tac | grep -qs foo"}
{"input": "find all the directories in the home folder and make create the directory junk. If any errors (like permission denied) occur discard them.", "output": "find ~ -type d -exec mkdir junk {} \\; 2> /dev/null"}
{"input": "generates a list of all files beneath the current directory whose filename DOES NOT end in .html, so it matches files like *.txt, *.jpg, and so on.", "output": "find . -type f -not -name \"*.html\""}
{"input": "search all the files in the current folder using regex excluding those that are present in the folder test", "output": "find . -name test -prune -o -regex \".*/my.*p.$\""}
{"input": "searches through the root filesystem (\"/\") for the file named Chapter1.", "output": "find / -name Chapter1 -type f"}
{"input": "Alias \"cd $(history -p !!:1)\" as \"cd-\"", "output": "alias cd-='cd $(history -p !!:1)'"}
{"input": "Remove trailing spaces from all files under current directory", "output": "find . -type f -print0 | xargs -0 perl -pi -e 's/ +$//'"}
{"input": "display all files in the folder /usr and its sub directory(do not search beyond the sub directory)", "output": "find /usr -maxdepth 1 -print"}
{"input": "Prints calendar for a current month without first day of a week.", "output": "cal | sed -e 's/^.\\{3\\}//' -e 's/^\\(.\\{15\\}\\).\\{3\\}$/\\1/'"}
{"input": "sort each file in the bills directory, leaving the output in that file name with .sorted appended", "output": "find bills -type f | xargs -I XX sort -o XX.sorted XX"}
{"input": "Fetches the newest version of Homebrew and all formulae from GitHub and perform any necessary migrations.", "output": "brew update"}
{"input": "Pipe the output of \"program1\" to both \"program2\" and \"program3\"", "output": "program1 | tee >(program2) >(program3)"}
{"input": "Search the /etc directory tree for files accessed within the last 24 hours", "output": "find /etc -atime -1"}
{"input": "Delete all files/directories named 'FILE-TO-FIND' under current directory tree", "output": "find . -name \"FILE-TO-FIND\" -exec rm -rf {} \\;"}
{"input": "display the count of total number of empty files in the current folder", "output": "find . -type f -empty | wc -l"}
{"input": "set alias \"mkcd\" for command '_(){ mkdir $1; cd $1; }; _'", "output": "alias mkcd='_(){ mkdir $1; cd $1; }; _'"}
{"input": "Report file system containing path to /some/dir disk usage in kilobytes.", "output": "df -k /some/dir"}
{"input": "Prints process tree for the current process with ASCII line drawing characters.", "output": "pstree -A -s $$"}
{"input": "Make a list of all files in the current directory tree, except *.png and *.class, and view it in the vim editor", "output": "find . | grep -E -v '\\.png$|\\.class$' | vim -"}
{"input": "Search the system for a file by its content limiting the search to regular files smaller than 10KB", "output": "find / -type f -size -10k 2>/dev/null -print0 | xargs -0 egrep '\\bsomeknowncontent\\b'"}
{"input": "Prints days since epoch", "output": "echo `date +%s`/86400 | bc"}
{"input": "find all the xml files in a directory and pass it as an argument to a jar (parallel is used to achieve parallel processing)", "output": "find /dump -type f -name '*.xml' | parallel -j8 java -jar ProcessFile.jar {}"}
{"input": "Print the grand total file system disk space usage with block sizes in units of TiB", "output": "df --total -BT | tail -n 1"}
{"input": "Display only first and second dot-separated numbers of kernel version, ie. 4.4", "output": "uname -r | sed 's/\\([0-9]\\+\\.[0-9]\\+\\)\\..*/\\1/'"}
{"input": "Find all regular files under ${S} directory", "output": "find \"${S}\" -type f"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f -print0 | xargs -0 ls -ltr | tail -n 1"}
{"input": "Find all regular files in current directory and /home/www directory", "output": "find * /home/www -type f"}
{"input": "Delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions", "output": "find / -maxdepth 1 -xdev -type f -exec grep -i \"stringtofind\" -l {} \\; -exec sed -i '/./d' {} \\;"}
{"input": "find all the text files in the current folder and display their Permissions and size along with their name", "output": "find . -name \"*.txt\" -printf \"%M %f \\t %s bytes \\t%y\\n\""}
{"input": "find files which full path name is /tmp/foo/bar under foo directory and print", "output": "find /tmp/foo -path /tmp/foo/bar -print"}
{"input": "find all the files ending with undo in the current folder and calculate the total size of these files", "output": "find -name *.undo -exec stat -c%s {} \\; | awk '{total += $1} END {print total}'"}
{"input": "Change all files in \"~\" which are owned by the group \"vboxusers\" to be owned by the user group \"kent\"", "output": "find ~ -group vboxusers -exec chown kent:kent {} \\;"}
{"input": "List all files under current directory matching the regex '.*\\.\\(c\\|h\\|cpp\\)'", "output": "find . -type f -regex '.*\\.\\(c\\|h\\|cpp\\)' -exec ls {} \\;"}
{"input": "Search for the string 'git' in all the files under current directory tree without traversing into '.git' folder and excluding files that have 'git' in their names", "output": "find . -path ./.git -prune -o -not -name '*git*' -print |grep git"}
{"input": "Read a line from standard input with prompt \"Continue (y/n)?\" and save response in variable \"choice\"", "output": "read -p \"Continue (y/n)?\" choice"}
{"input": "List files larger than 10MB under /var/log /tmp that haven't changed in a month", "output": "find /tmp /var/tmp -size +30M -mtime 31 -ls"}
{"input": "display list of all the files in the current directory (print0 handles file names with newlines or spaces)", "output": "find -print0 | xargs -0 ls"}
{"input": "Run the command 'true' with an empty environment variable doFirst", "output": "doFirst=\"\" true"}
{"input": "Execute command \"tssh MYBOXES N\" where N ranges from 0 to 20", "output": "seq 0 20 | xargs -n1 tssh MYBOXES"}
{"input": "search for a word in all files in a directory", "output": "find /directory/containing/files -type f -print0 | xargs -0 grep \"test to search\""}
{"input": "Find all directories named $1 under $HOME directory tree and remove them", "output": "find $HOME -type d -name $1 -exec echo {} ';'  -exec rm -rf {} ';'"}
{"input": "Search the /myfiles directory tree for regular files with read and write permissions set for `others'", "output": "find /myfiles -type f -perm -o+rw"}
{"input": "force delete all the core files in the home folder", "output": "find $HOME -name core -exec rm -f {} \\;"}
{"input": "Find all files under current directory that were modified in the last 24 hours", "output": "find -mtime 0"}
{"input": "Append the parent directory name with a space in all 'text.txt' files in all sub directories of current directory", "output": "find . -name text.txt | sed 's|.*/\\(.*\\)/.*|sed -i \"s@^@\\1 @\" & |' | sh"}
{"input": "forcibly create a symbolic link named \"linkname\" to file \"new_destination\"", "output": "ln -sf new_destination linkname"}
{"input": "display a list of all regular/normal files in the current folder", "output": "find . -type f -ls"}
{"input": "search for files having python in filename", "output": "find / -name '*python*'"}
{"input": "Search the files from the current directory tree for \"chrome\"", "output": "find . | xargs grep 'chrome'"}
{"input": "find all the normal/regular files in the current folder which are present in the pattern file \"file_list.txt\"", "output": "find . type f -print | fgrep -f file_list.txt"}
{"input": "Replace all instances of \"STRING_TO_REPLACE\" with \"STRING_TO_REPLACE_IT\" in \"index.html\"", "output": "sed -i 's/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g' index.html"}
{"input": "Find all python files under current directory tree, save the list to 'output.txt' and search for 'something' in those files", "output": "find . -name '*.py' | tee output.txt | xargs grep 'something'"}
{"input": "Highlights current day in a month calendar with color.", "output": "cal -h | sed \"s/$(date +%d)/\"$'\\033\\[94m&\\033\\[0m/g'"}
{"input": "Find all TXT files that belong to user root", "output": "find / -user root -iname \"*.txt\""}
{"input": "Read and execute file 'lib/B' that located in the same directory as the current script, will fail if currently running script is not in PATH.", "output": "source \"$( dirname \"$( which \"$0\" )\" )/lib/B\""}
{"input": "Find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories", "output": "find $1 -perm -u+w -exec chmod g+w {} \\;"}
{"input": "Verbosely compresses all files on seventh and eighth depth level keeping original files in place.", "output": "bzip2 -kv */*/*/*/*/*/*/*"}
{"input": "Save IP addresses of the host name in variable \"ip\"", "output": "ip=$(hostname -I | awk '{print $1}')"}
{"input": "Search the /myfiles directory tree for files that are 5 512 byte blocks in size", "output": "find /myfiles -size 5"}
{"input": "Sets prompt to \"username@host:pwd\"", "output": "export PS1=\"\\[\\033]0;\\u $(host $(hostname))\\007\\]\\u@\\h:\\w\\$ \""}
{"input": "Apply script rename.sh to all files from the current directory tree whose names match regular expression \"xxx-xxx_[a-zA-Z]+_[0-9]+_[0-9]+\\.jpg$\"", "output": "find . -regex \"xxx-xxx_[a-zA-Z]+_[0-9]+_[0-9]+\\.jpg$\" -exec ./rename.sh \"{}\" \";\""}
{"input": "Change the owner of the directory name of \"$JBOSS_PIDFILE\" to \"${JBOSS_USER}\" and always return successfully", "output": "chown ${JBOSS_USER}: $(dirname $JBOSS_PIDFILE) || true"}
{"input": "Report all C language source code files under the current directory", "output": "find . -name \\*.c -print"}
{"input": "Set variable \"fname\" to the basename of path specified in variable \"f\", that is remove everything up to the last slash if present.", "output": "fname=`basename $f`"}
{"input": "Copy local file \"$1\" to host \"$2\" into host directory \"$3\"", "output": "cat $1 | ssh $2 \"mkdir $3;cat >> $3/$1\""}
{"input": "find all the normal/regular files in current directory and display file names with new line as delimiter", "output": "find . -type f -exec printf '%.0sbla\\n' {} +"}
{"input": "find all files with pattern` '*.mp3' and send output into nameoffiletoprintto file", "output": "find / -name *.mp3 -fprint nameoffiletoprintto"}
{"input": "recursively look for files ending in either .py or .py.server", "output": "find . \\( -name \"*.py\" -o -name \"*.py.server\" \\)"}
{"input": "Print 'file' content, formatting output as 29-symbol wide column, regarding space symbol as a word separator", "output": "cat file | fold -s -w29"}
{"input": "Delete all files/directories taken by the glob pattern * except the ones with the name 'b'", "output": "find * -maxdepth 0 -name 'b' -prune -o -exec rm -rf {} \\;"}
{"input": "Recursively change ownership of \"/usr/local/lib/node_modules\" to the current user", "output": "sudo chown -R `whoami` /usr/local/lib/node_modules"}
{"input": "Parse output from \"script.sh\" in the current directory which is expected to generate \"variable: value\" formatted data, and add the resulting variables to the current shell's environment.", "output": "source <(./script.sh | sed -rn '/volume/{s#/dev/([^[:space:]]+)[[:space:]]+#\\1=#;p}')"}
{"input": "Find all the files in file system which are modified in last 1 hour", "output": "find / -mmin -60"}
{"input": "Find all files/directories named 'query' under current directory", "output": "find -name \"query\""}
{"input": "Print the list of regular files from the current directory tree that were modified less than 2 days ago", "output": "find . -type f -mtime -2 -exec echo {} +"}
{"input": "display all the files in current folder which have been accessed in the last 15 days", "output": "find . -atime -15"}
{"input": "Save the list of files containing string `ExtJSLogin' to files.txt excluding change-app-name.sh", "output": "find . -type f -exec grep -l 'ExtJSLogin' {} \\; | grep -v 'change-app-name.sh' > files.txt"}
{"input": "display all files in the folder /usr/src excluding those ending with \",v\"", "output": "find /usr/src ! \\( -name '*,v' -o -name '.*,v' \\) '{}' \\; -print"}
{"input": "Unsets array member with index 2.", "output": "unset array[2]"}
{"input": "Search the /usr/local/doc directory tree for .texi files", "output": "find /usr/local/doc -name '*.texi'"}
{"input": "Find symlinks under and below the \"test\" directory and replace them with the content of the linked files", "output": "find test -type l -exec cp {} {}.tmp$$ \\; -exec mv {}.tmp$$ {} \\;"}
{"input": "Count the number of files named 'job.history' under '/data/SpoolIn' directory tree that match 'FAIL' in their contents", "output": "find /data/SpoolIn -name job.history | xargs grep -l FAIL | wc -l"}
{"input": "Set permissions to 755 for every subdirectory of the current directory", "output": "find  . -type d -mindepth 1 -print -exec chmod 755 {}/* \\;"}
{"input": "Write \"ee\" to standard output of the current terminal and as input to command \"foo\"", "output": "t=$(tty) echo ee | tee $t | foo"}
{"input": "Find all files/directories with '.tar.gz' extension under $DIR/tmp/daily/ directory tree, sort them numerically and show the last 3 of them", "output": "find $DIR/tmp/daily/ -name '*.tar.gz' | sort -n | tail -3"}
{"input": "Show the subdirectories of the current directory", "output": "find . -maxdepth 1 -type d -print | parallel -X echo Directories:"}
{"input": "Delete all files/directories older than 48 hours in /path/to/files* paths", "output": "find /path/to/files* -mtime +2 -delete"}
{"input": "display a long listing of all the regular/normal files in the current folder along with their md5sum", "output": "find . -type f -exec sh -c 'printf \"%s %s \\n\" \"$(ls -l $1)\" \"$(md5sum $1)\"' '' '{}' '{}' \\;"}
{"input": "Find all index.* files/directories under current directory", "output": "find -name 'index.*'"}
{"input": "Execute \"2\" and write output to standard output and file \"${LOG_FILE}\"", "output": "exec 2 | tee ${LOG_FILE}"}
{"input": "Print the absolute path of \"$path\"", "output": "readlink -f \"$path\""}
{"input": "Remove all files that are not newer than Jul 01 by modification time", "output": "find /file/path ! -newermt \"Jul 01\" -type f -print0 | xargs -0 rm"}
{"input": "Print all files/directories under ... directory by terminating their paths with a null character", "output": "find ... -print0"}
{"input": "display all the java, xml and action scripts (.as) files in a directory", "output": "find dir1 -type f -a \\( -name \"*.java\" -o -name \"*.as\" -o -name \"*.xml\" \\)"}
{"input": "Search all .pdf files  from directory tree ~/.personal/tips for \"hot\"", "output": "find ~/.personal/tips -type f -iname \"*.pdf\"  -exec pdftotext '{}' - ';'  | grep hot"}
{"input": "Look for files that have SUID or SGID set", "output": "find / -perm +6000 -type f"}
{"input": "Assign the alias rm100m to a find command that removes any .tar file larger than 100M.", "output": "alias rm100m=\"find / -type f -name *.tar -size +100M -exec rm -i {} \\;\""}
{"input": "Find files in two different directories (esofthub and esoft) having the \"test\" string and list them", "output": "find esofthub esoft -name \"*test*\" -type f -ls"}
{"input": "Look up IP address of the current host", "output": "/usr/sbin/host `hostname`"}
{"input": "Find files/directories under current directory matching the posix-egrep type regex \".+\\.(c|cpp|h)$\" in their names", "output": "find . -regextype posix-egrep -regex \".+\\.(c|cpp|h)$\""}
{"input": "Lists the pids of all processes that have process '1782' as their parent.", "output": "pstree -p 1782 | sed 's/-/\\n/g' | sed -n -e 's/.*(\\([0-9]\\+\\)).*/\\1/p'"}
{"input": "Search for all files in the current directory recursively whose names end with \"Linkin Park\"", "output": "find . -name \"*Linkin Park\""}
{"input": "Prints first found folder that contains 'ssh' file and has 'bin' in path.", "output": "dirname `find / -name ssh | grep bin | head -1`"}
{"input": "Terminate amarok immediately.", "output": "kill -9 $(pgrep amarok)"}
{"input": "Add content of \"filename\" to the existing cron jobs of user \"user\", without removing the previously existing cron jobs.", "output": "crontab -l -u user | cat - filename | crontab -u user -"}
{"input": "display all the regular/normal files in a folder", "output": "find ./subdirectory/ -type f"}
{"input": "Print a hex dump byte to byte of the output of \"echo Aa\"", "output": "echo Aa | od -t x1"}
{"input": "change user and group of the file /usr/bin/aws to user amzadm and group root", "output": "chown amzadm.root  /usr/bin/aws"}
{"input": "Remove the first 13 characters of each \".txt\" filename in the \"/tmp\" directory tree and number the output", "output": "find /tmp -type f \\( -name '*.txt' \\) |cut -c14- | nl"}
{"input": "Removes all files from current folder but 5 newest ones, filtering out directories from initial search.", "output": "ls -tp | grep -v '/$' | tail -n +6 | xargs -d '\\n' rm --"}
{"input": "Run an awk program on every TXT file found in the current directory tree", "output": "find . -name \"*.txt\" -print -exec awk '$9 != \"\" {print; if(NR > 9) exit; }' {} \\;"}
{"input": "Find all regular files named postgis-2.0.0 under your home directory", "output": "find ~/ -type f -name \"postgis-2.0.0\""}
{"input": "List all files matching regular expression '*foo*' in a human-readable form", "output": "find . -name '*foo*' -exec ls -lah {} \\;"}
{"input": "Remove empty directories from the current directory tree", "output": "find . -depth -empty -type d -delete"}
{"input": "Print equal lines in compressed files \"number.txt\" and \"xxx.txt\"", "output": "comm -12 <(zcat number.txt.gz) <(zcat xxx.txt.gz)"}
{"input": "Raise an error if there is a reference to a non-existent environment variable and exit the shell immediately if there is any error", "output": "set -eu"}
{"input": "Change permissions for all PHP files under the current directory tree to 755 and print the number of files changed", "output": "find . -name \"*.php\" -exec chmod 755 {} \\; -exec /bin/echo {} \\; | wc -l"}
{"input": "find files in the current directory with pattern` '*.[ch]' which are contain \u2018thing\u2019 string and print file names which can contain spaces", "output": "find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing"}
{"input": "find all files in home folder which have been modified exactly 1 day before", "output": "find ~ -mtime 1 -daystart"}
{"input": "List all non-hidden files in ~/junk", "output": "find ~/junk   -name \"*\" -exec ls -l {} \\;"}
{"input": "list all CSS files under the current directory", "output": "find . -type f -name \"*.css\""}
{"input": "Find all JPG files under the \"$SOURCE\" directory and below", "output": "find \"$SOURCE\" -type f -iname '*.jpg'"}
{"input": "Changes group ownership of '/etc/btsync/[prefered conf name].conf' to 'btsync'.", "output": "chgrp btsync /etc/btsync/[prefered conf name].conf"}
{"input": "Find every file/directory under /var/spool that was modified more than 60 days ago.", "output": "find /var/spool -mtime +60"}
{"input": "remote copy all text files from one location to another", "output": "find .  -name '*.txt' -exec rsync -R {} path/to/dext \\;"}
{"input": "Finds all user session in system, and shows sorted user names with number of sessions of each user.", "output": "w | sed '1,2d' | cut -f1 -d' ' | sort | uniq -c"}
{"input": "Print a welcome message with the current user's user name", "output": "echo -ne \"Welcome $(whoami)!\\n\""}
{"input": "Send SIGHUP (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.", "output": "kill -HUP $( cat /var/run/nginx.pid )"}
{"input": "Find all files under current directory, calculate their md5sum", "output": "find . -type f -print0 | parallel -0 -X md5sum"}
{"input": "Prints +-10 lines around $LINENUM in filename", "output": "head -<$LINENUM + 10> filename | tail -20"}
{"input": "Write output and error of \"update-client\" to standard output and to \"my.log\"", "output": "update-client 2>&1 | tee my.log"}
{"input": "find all regex  \".*/[a-f0-9\\-]\\{36\\}\\.jpg\" files", "output": "find . -regextype sed -regex \".*/[a-f0-9\\-]\\{36\\}\\.jpg\""}
{"input": "forcibly and verbosely create a symbolic link named \"target\" to file \"source\"", "output": "ln -sfvn source target"}
{"input": "find all files in the current folder that are not modified in the last 10 minutes", "output": "find . -mmin +10 -print"}
{"input": "Print first word of lines unique for 'file1' file", "output": "grep -o '^\\S\\+' <(comm file1 file2)"}
{"input": "Display all available header information for the executable file of command \"tail\"", "output": "objdump -x `which tail`"}
{"input": "count lines of C or C++ or Obj-C or Java code under the current directory", "output": "find . \\( -name \"*.c\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.m\" -or -name '*.java' \\) -print0 | xargs -0 wc"}
{"input": "Find all files/directories under $dir directory", "output": "find \"$dir\""}
{"input": "find all CSS files that do something with your HTML ID #content", "output": "find . -name \"*.css\" -exec grep -l \"#content\" {} \\;"}
{"input": "find all the regular/normal files in the current direcoty which have not been accessed in the last 30 days.", "output": "find . -type f -atime +30 -print"}
{"input": "Replace all the mathes to regex '<script type=\"text\\/javascript\" charset=\"utf-8\" src=\"file.js\"><\\/script>.*' with '<script type=\"text\\/javascript\" charset=\"utf-8\" src=\"file2.js\"><\\/script>' in all HTML files under $DIR directory tree modifying the files in-place", "output": "find $DIR -type f -name '*.html' -exec sed -i 's/.*<script type=\"text\\/javascript\" charset=\"utf-8\" src=\"file.js\"><\\/script>.*/<script type=\"text\\/javascript\" charset=\"utf-8\" src=\"file2.js\"><\\/script>/g' {} \\;"}
{"input": "Search for files/directories which are writable by both their owner and their group", "output": "find . -perm -220"}
{"input": "Save \"1 4 6 9 11 17 22\" as a bash array \"arr\"", "output": "read -a arr <<< \"1 4 6 9 11 17 22\""}
{"input": "run command \"exec > >( logger -t $PRG ) 2>&1 ; cd $WKD; { $BIN $ARG & }; echo \\$! > $PID \" as user $USR", "output": "su -l $USR -s /bin/bash -c \"exec > >( logger -t $PRG ) 2>&1 ; cd $WKD; { $BIN $ARG & }; echo \\$! > $PID \""}
{"input": "perform a case insensitive search", "output": "find  / -type d -iname \"apt\" -ls"}
{"input": "Remove trailing white spaces from all files under dir directory", "output": "find dir -type f -exec sed -i 's/ *$//' '{}' ';'"}
{"input": "Find all the .c files in the current directory tree that contain the string \u2018stdlib.h\u2019", "output": "find . -name '*.c' | xargs grep 'stdlib.h'"}
{"input": "Removes all empty folders with modification time more that 10 minutes ago from $homeDirData folder.", "output": "find $homeDirData -type d -mmin +10 -print0 | xargs -0 rmdir"}
{"input": "Sort standard input in alphabetical order", "output": "sort"}
{"input": "change the permissions of all regular/normal files in the current directory", "output": "find . -type f | xargs chmod 664"}
{"input": "Recursively copy directory or file /something on host \"myServer\" to current directory on local host, connecting as ssh user matching username on local host.", "output": "scp -r myServer:/something"}
{"input": "Get domain \"$domain\" IP address", "output": "dig +short \"$domain\""}
{"input": "Find target.txt files in the /base/path/of/proj/d\u200c\u200bata directory tree and pass them as arguments to simpleGrepScript.sh, saving the output as overallenergy.out", "output": "find /base/path/of/proj/d\u200c\u200bata -name target.txt | xargs simpleGrepScript.sh > overallenergy.out"}
{"input": "find the file \"httpd.log\" in the folder /home/web-server/ ( case insensitive search )", "output": "find /home/web-server/ -type f -iname httpd.log"}
{"input": "Print the most repeated line in \"list2.txt\" that exists in \"list1.txt\" prefixed by the number of occurrences", "output": "grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1"}
{"input": "display all regular/normal files in the current folder that were accessed exactly 7*24 hours back", "output": "find . -type f -atime 7"}
{"input": "Find List directory  with sub-folder count .", "output": "find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find \"$dir\" -type d | wc -l); let n--; printf \"%4d : %s\\n\" $n \"$dir\"; done"}
{"input": "Copy file or folder linked to by \"file\" to \"file\"", "output": "cp -rf --remove-destination `readlink file` file"}
{"input": "Print file name without the last two extensions assuming the file name doesn't contain any other dots.", "output": "echo \"$FILE\" | cut -d'.' --complement -f2-"}
{"input": "Search for files/directories named 'fileName.txt' under current directory tree without traversing into './ignored_directory'", "output": "find . -path ./ignored_directory -prune -o -name fileName.txt -print"}
{"input": "Set the 'pipefail' shell variable causing bash to return true only if all commands in a pipeline return true.", "output": "set -o pipefail"}
{"input": "Search the current directory tree for *cache, *xml, and *html files", "output": "find . -type f \\( -name \"*cache\" -o -name \"*xml\" -o -name \"*html\" \\)"}
{"input": "Return the depth of the current directory tree", "output": "find . -type d -printf '%d:%p\\n' | sort -n | tail -1"}
{"input": "Search the current directory for PHP files", "output": "find . -type f -name \"*.php\""}
{"input": "Identify CMS version/releases accross all your PHPBB installations", "output": "find /var/www/vhosts/*/httpdocs/ -type f -wholename *includes/constants.php -exec grep -H \"PHPBB_VERSION\" {} \\;"}
{"input": "Find the directory with least access time under current directory and assign it to $filename", "output": "{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\\0' | sort -z -r -n)"}
{"input": "Copy %PATH% variable on Windows to clipboard", "output": "set %PATH% | clip"}
{"input": "Output all lines from file1 except those present in file2.", "output": "diff --new-line-format=\"\" --unchanged-line-format=\"\" <(sort file1) <(sort file2)"}
{"input": "Find the largest files in a particular location", "output": "find /home/tecmint/Downloads/ -type f -printf \"%s %p\\n\" | sort -rn | head -n 5"}
{"input": "Print A record for domain 'domain.' from 'ns1.newnameserver' nameserver", "output": "dig @ns1.newnameserver domain. a"}
{"input": "Find all files/directories under current directory and run ipython nbconvert for each of them with the file/directory path as a argument by changing into the parent directory", "output": "find -execdir ipython nbconvert {} \\;"}
{"input": "Remove all files with names like \"vmware-*.log\" from the current directory tree", "output": "find . -name vmware-*.log | xargs -i rm -rf {}"}
{"input": "delete all normal/regular files in the current folder which are empty", "output": "find . -type f -empty -delete"}
{"input": "Returns the single most recent file in a directory", "output": "ls -t | head -n1"}
{"input": "Will run checksums recursively from the current directory, and give back grouped filenames of all identical checksum results.", "output": "find ./ -type f -print0 | xargs -0 -n1 md5sum | sort -k 1,32 | uniq -w 32 -d --all-repeated=separate | sed -e 's/^[0-9a-f]*\\ *//;'"}
{"input": "delete all the log files in the current folder", "output": "find ./ -name '*.log' -print0 | xargs -0 rm"}
{"input": "Find all directories under 'test' directory tree that match the regex '[course*]' in their paths", "output": "find test -regex \"[course*]\" -type d"}
{"input": "change html files to mode 644", "output": "find /usr/local -name \"*.html\" -type f -exec chmod 644 {} \\;"}
{"input": "Copy all *.data files under jcho directory to files whose names are constructed by replacing the first '0' to '2' in their names", "output": "find jcho -name *.data -exec sh -c 'f=\"${0}\"; d=$(echo ${f} | sed -re 's/0/2/' ); cp ${f} ${d} ' {} \\;"}
{"input": "search  in current directory downwards all files which were accessed exactly 7 days back", "output": "find . -atime 7 -print"}
{"input": "Print each line in \"file1.txt\" that is not found in \"file2.txt\"", "output": "sort file1.txt file2.txt file2.txt | uniq -u"}
{"input": "Print a list of unique users who are logged in", "output": "who | cut -d' ' -f1 | sort | uniq"}
{"input": "Setup a local SSH tunnel from port 1234 to \"remote2\" port 22 via connection to \"remote1\" as \"user1\" on port 45678", "output": "ssh -L 1234:remote2:22 -p 45678 user1@remote1"}
{"input": "find all the files ending with \".coffee\" in the current folder and search for the words \"re\" in each line", "output": "find . -name \\*.coffee -exec grep -m1 -i 're' {} \\;"}
{"input": "Search for files that are at least 100MB", "output": "find / -size +100M"}
{"input": "List all files in the current directory tree except for those in the ./src/emacs directory", "output": "find . -path './src/emacs' -prune -o -print"}
{"input": "Find files in the current directory and below that are newer than /bin/sh", "output": "find . -newer /bin/sh"}
{"input": "long list all the files in the curent folder starting with \"Tes\"", "output": "find . -type f -name \"Tes*\" -exec ls -l {} \\;"}
{"input": "Execute the SSH command and kill it after 5 seconds", "output": "timeout 5 ssh user@ip"}
{"input": "Unset IFS and read standard input into variable \"file\" until a null character is found without allowing backslashes to escape characters", "output": "IFS= read -d $'\\0' -r file"}
{"input": "Pipe the output of ls into \"read var\" in its separate process", "output": "ls | read var"}
{"input": "find all the links in the current folder which are broken", "output": "find /target -type l -xtype l"}
{"input": "search for all non empty regular/normal files in the current folder and empty them ie., delete the content not the file", "output": "find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i cp /dev/null {}"}
{"input": "run a script in 1000 seconds", "output": "./hw | sleep 1000"}
{"input": "Print the list of all files except files named BBB", "output": "find . \\! -name BBB -print"}
{"input": "Remove all files from the current directory tree whose names do not match regular expression \"excluded files criteria\"", "output": "find . | grep -v \"excluded files criteria\" | xargs rm"}
{"input": "Delete all but the most recent X files in bash", "output": "(ls -t|head -n X;ls)|sort|uniq -u|xargs rm"}
{"input": "Compress all files under current directory tree with gzip", "output": "find . -type f -print0 | xargs -0r gzip"}
{"input": "Search all .c and .h files in the current directory tree for string \"e\"", "output": "find . -name \"*.[ch]\" -exec grep --color -aHn \"e\" {} \\;"}
{"input": "Print position number of day '9' in fourth line of calendar output for September, 2009.", "output": "cal 09 2009 | awk 'BEGIN{day=\"9\"}; NR==4 {col=index($0,day); print col }'"}
{"input": "Split \"/path/to/large/file\" into files with at most 50000 lines and use prefix \"/path/to/output/file/prefix\"", "output": "split --lines=50000 /path/to/large/file /path/to/output/file/prefix"}
{"input": "Find regular files named 'findme.txt' under '/usr' and '/home' directory tree", "output": "find /usr /home -name findme.txt -type f -print"}
{"input": "move all the files in the current folder  to temp folder and search atleast in one subfolder", "output": "find . -mindepth 1 -print0|xargs -0 -I, mv , /tmp"}
{"input": "find regular files under the current directory and execute an md5sum command on each one", "output": "find -type f -exec md5sum {} +"}
{"input": "Search the ~/Books directory recursively for regular files named \"Waldo\"", "output": "find ~/Books -type f -name Waldo"}
{"input": "display all the directories in the folder /path/to/dest except tmp and cache directories", "output": "find /path/to/dest -type d \\( ! -name tmp \\) -o \\( ! -name cache \\) -print"}
{"input": "Take first text field from file 'file.txt' as a domain name and get short A record for this one.", "output": "cut -d' ' -f1 file.txt | xargs dig +short"}
{"input": "Perform a dry run to recursively copy \"test/a\" to \"test/dest\" excluding \"test/a/b/c/d\"", "output": "rsync -nvraL test/a test/dest --exclude=a/b/c/d"}
{"input": "Search for \"1234567890\" in every gzip file modified between 8:00 and 9:00 on 2014-04-30", "output": "find . -newermt '2014-04-30 08:00:00' -not -newermt '2014-04-30 09:00:00' |xargs gunzip -c | grep 1234567890"}
{"input": "Find all .php files starting from the root directory /", "output": "find / -name \"*.php\""}
{"input": "List unique MD5 digests of all files in the current directory ending in .txt", "output": "md5sum *.txt | cut -d ' ' -f 1 | sort -u"}
{"input": "Send the SIGTERM signal to all processes whose command matches \"bad_process\" and which have used more than 100 seconds of total CPU time.", "output": "ps -o pid,bsdtime --no-header -p $(pgrep renoise) | awk 'function mmss2s(s) {if (s !~ /^[0-9][0-9][0-9]:[0-9][0-9]$/) return -1; return ((60*substr(s,1,2))+substr(s,4,2))} { if (mmss2s($2) > 100) { print $1; }}'"}
{"input": "List all files in a current folder, separating names with comma", "output": "ls -1 | tr '\\n' ','"}
{"input": "delete all the files ending with \"~\" in current folder", "output": "find -name '*~' -delete"}
{"input": "Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits", "output": "find . -perm -664"}
{"input": "Recursively change the owner and group of \"/opt/antoniod/\" to \"antoniod\"", "output": "chown -R antoniod:antoniod /opt/antoniod/"}
{"input": "Recursively copy /path/to/foo on host \"your.server.example.com\" to local directory \"/home/user/Desktop\", connecting as ssh username \"user\".", "output": "scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/"}
{"input": "Split the output of \"my_program\" into files of at most 100000 bytes each and use numeric suffixes", "output": "my_program | split -d -b 100000 -"}
{"input": "Find files/directories named 'foo' under current directory tree without descending into directories named 'foo'", "output": "find . -name foo -type d -prune -o -name foo -print"}
{"input": "Prints line count of each file within current directory.", "output": "find . -type f -print0 | xargs -0L1 wc -l"}
{"input": "Display a long listing of all files/directories that are bigger than 10MB under '/var/' directory tree", "output": "find /var/ -size +10M -ls"}
{"input": "find all files & dircetiry in current directory which  have .tmp extension and delete them .", "output": "find . -type f -name \"*.tmp\"  -exec rm -rf {} \\;"}
{"input": "redirect output inside screen session", "output": "screen /bin/bash -c 'java Foo > foo.txt'"}
{"input": "Find recursively all regular files in the current directory whose names contain \".\"", "output": "find . -type f -a -name '*.*'"}
{"input": "Mathematically sum all lines in \"filename\"", "output": "cat filename | python -c\"from fileinput import input; print sum(map(int, input()))\""}
{"input": "Change the timestamp of symbolic link \"somesymlink\" to current date/time", "output": "touch -h somesymlink"}
{"input": "Print \"Mounted\" if /mnt/myUSBdisk exists on a mounted file system or print \"Not mounted\" otherwise.", "output": "df /mnt/myUSBdisk | grep -q /mnt/myUSBdisk && echo \"Mounted\" || echo \"Not mounted\""}
{"input": "Print the drive and mount point of the last mounted drive", "output": "mount | tail -1 | sed 's/^.* on \\(.*\\) ([^)]*)$/\\1/'"}
{"input": "recursively change owner of the directory /usr/local/lib/node_modules/ to the current user", "output": "sudo chown -R $USER /usr/local/lib/node_modules"}
{"input": "Uninstalls and then installs git formula.", "output": "brew reinstall git"}
{"input": "set alias \"current\" for command 'cd $(cur -g)'", "output": "alias current='cd $(cur -g)'"}
{"input": "Allocate a pseudo-terminal and execute \"screen -r -X ls\" which executes \"ls\" within the screen session on host \"example.com\"", "output": "ssh -t example.com \"screen -r -X ls\""}
{"input": "list files in /u/bill that were last read from 2 to 6 minutes ago", "output": "find /u/bill -amin +2 -amin -6"}
{"input": "Find 10 most recently changed files in the current directory tree", "output": "find . -type f -printf \"%C@ %p\\n\" | sort -rn | head -n 10"}
{"input": "display the contents of all the text files in the current folder and save the output to all.txt.", "output": "find . -type f -name \"*.txt\" -exec cat {} \\;> all.txt"}
{"input": "Find all files/directories with '.err' extension under '/home/username' directory tree", "output": "find /home/username/ -name \"*.err\""}
{"input": "Find directories in /home/vmail that match pathname \"*/*/Maildir/.LearnAsHam/cur\", and move them to folder .Inbox/cur", "output": "find /home/vmail/ -type d -path \"*/*/Maildir/.LearnAsHam/cur\" -exec sh -c '(cd {} && mv ./* ../../.Inbox/cur)' ';'"}
{"input": "Find all *.txt files/directories under current directory", "output": "find -name \\*.txt"}
{"input": "find all the files that are modified in the last 7 days", "output": "find -daystart -mtime -7"}
{"input": "find all the files in the file system which have been accessed in the last 1 day", "output": "find / -atime -1"}
{"input": "Check md5sum of directory /path against the checksum saved in file 'file'", "output": "du -csxb /path | md5sum -c file"}
{"input": "Search the /path/to/dir directory tree for .c files", "output": "find /path/to/dir -name \\*.c"}
{"input": "find all directories that names are 'apt' and display details", "output": "find  / -type d -name \"apt\" -ls"}
{"input": "only get md5sum of a file", "output": "md5 -q file"}
{"input": "search for a word in all the php files in the current folder and display the matching lines. PLus at the end takes multilple files as input", "output": "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\+"}
{"input": "display all files in the current folder which end with extension \"myfile\" followed by one digit or two digits", "output": "find . -\\( -name \"myfile[0-9][0-9]\" -o -name \"myfile[0-9]\" \\)"}
{"input": "Copy \"*.cc\", \"*.h\", and \"SConstruct\" to \"rsync://localhost:40001/bledge_ce\" using blocking IO", "output": "rsync --blocking-io *.cc *.h SConstruct rsync://localhost:40001/bledge_ce"}
{"input": "Print the list of the current directory's subdirectories", "output": "find -maxdepth 1 -type d"}
{"input": "Recursively find the latest modified file in the current directory", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \""}
{"input": "Send every 130 characters of \"file\" as input to \"...\"", "output": "fold -w130 file | ..."}
{"input": "display the count of all the directories present in a folder", "output": "find /mount/point -type d | wc -l"}
{"input": "List all files bigger than 10000 blocks", "output": "find . -type f -size +10000 -exec ls -al {} \\;"}
{"input": "Find all files named 'new' under current directory tree and display their contents", "output": "find . -name new -print -exec cat {} \\;"}
{"input": "Recursively prints paths to all text file in folder (ignores binary files).", "output": "grep -RIl \"\" ."}
{"input": "display a long listing of all the java files in the current folder in sorted order", "output": "find . -type f -name '*.java' -ls | sort -k +7 -r"}
{"input": "Compare files \"A1\" and \"A2\" with 3 lines of unified context and print lines beginning with \"+\"", "output": "diff -u A1 A2 | grep -E \"^\\+\""}
{"input": "Copies '[MacVim_source_folder]/src/MacVim/mvim' to the  '/usr/local/bin', printing info message on each operation.", "output": "cp -v [MacVim_source_folder]/src/MacVim/mvim /usr/local/bin"}
{"input": "Find all SUID set files", "output": "find / -perm /u=s"}
{"input": "Delete all __temp__* files/directories under current directory tree", "output": "find . -name __temp__* -exec rm -rf '{}' \\;"}
{"input": "Output the variable \"filename\" without the last dot-separated section.", "output": "echo ${filename%.*}"}
{"input": "Change directory to the directory containing the executable file of command \"oracle\"", "output": "cd $(which oracle | xargs dirname)"}
{"input": "Read the first line of \"$sh_lock_file\" into variable \"sh_lock_lastPID\"", "output": "read sh_lock_lastPID < $sh_lock_file"}
{"input": "Counts lines with all-cased word 'null' in file 'myfile.txt'.", "output": "grep -n -i null myfile.txt | wc -l"}
{"input": "Create a compressed archive named 'my_directory.tar.gz' with files inside directory 'my_directory' without including the directory entry 'my_directory' itself", "output": "tar -czvf my_directory.tar.gz -C my_directory ."}
{"input": "Find all *.txt file (case insensitive) in the entire system and copy them to /tmp/txt", "output": "find / -iname '*.txt' | xargs --replace=@ cp @ /tmp/txt"}
{"input": "find files with pattern` '*.h' and print comparison between file and /tmp/master directory", "output": "find . -name '*.h' -execdir diff -u '{}' /tmp/master ';'"}
{"input": "Give all directories in the /path/to/base/dir tree read and execute privileges", "output": "find /path/to/base/dir -type d -exec chmod 755 {} +"}
{"input": "Find all files under the current directory that are not the same file as \"/home/nez/file.txt\"", "output": "find . -maxdepth 1 -not -samefile /home/nez/file.txt"}
{"input": "Remove files cart4, cart5, cart6 in directory ~/junk", "output": "find ~/junk  -name 'cart[4-6]' -exec rm {}  \\;"}
{"input": "Print only common file names in sorted listings of directory 'dir1' and 'dir2'", "output": "comm -1 -2 <(ls /dir1 | sort) <(ls /dir2 | sort)"}
{"input": "Remove all directories called \"test\" from the current directory tree", "output": "find -path \"*/test\" -type d -delete"}
{"input": "search for the file \"process.txt\" in the current folder (case insensitive search)", "output": "find . -iname 'process.txt' -print"}
{"input": "change the permission of all php files in current folder. Plus symbol at the end is used to give multiple files as input to the chmod command", "output": "find . -name \"*.php\" -exec chmod 755 {} +"}
{"input": "Display the named characters in \"Test\\rTesting\\r\\nTester\\rTested\"", "output": "echo -e \"Test\\rTesting\\r\\nTester\\rTested\" | awk '{ print $0; }' | od -a"}
{"input": "List the commands in /usr/bin, pausing for user input after each page.", "output": "ls /usr/bin | more"}
{"input": "Set the host name to \"myServersHostname\"", "output": "hostname myServersHostname"}
{"input": "Find files in the current directory tree whose names begin with \"file\" and whose size is 0, and remove them", "output": "find . -name 'file*' -size 0 -print0 | xargs -0 rm"}
{"input": "find all .pm, .pl files in /users/tom and search for multiple pattern in same files and display the matched file names", "output": "find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(' {} + | xargs grep -l '#hyphenate'"}
{"input": "Print content of /etc/passwd and /etc/group files", "output": "cat /etc/passwd /etc/group"}
{"input": "find all the database files in the folder /var/named", "output": "find /var/named -type f -name *.db"}
{"input": "display the number of lines in all the files in the current folder", "output": "find . -name '*' | xargs wc -l"}
{"input": "Find all directories under current directory and set their permission to 775", "output": "find -type d exec chmod 775 {} +"}
{"input": "Gets MAC address of 'eth0' network interface.", "output": "ifconfig eth0 | grep -Eo ..\\(\\:..\\){5}"}
{"input": "Installs package 'mysql'.", "output": "yum install mysql"}
{"input": "Request IP address for each domain name received on the command input", "output": "dig +short -f - | uniq"}
{"input": "search for a word in all the files in the current directory", "output": "find . | xargs grep 'chrome'"}
{"input": "Report total disk usage info on root file system, printing all sizes as power of 1000", "output": "df -H --total /"}
{"input": "find all the files in the entire filesystem which belong to the user root and display the ten files.", "output": "find / -user root | head"}
{"input": "Create intermediate directoriy path2 as required and directories a..z", "output": "mkdir -p path2/{a..z}"}
{"input": "Correct permissions for files in the web directory", "output": "find /your/webdir -type f | xargs chmod 644"}
{"input": "Recursively change the owner and group of \"subdir1\" to \"user1\"", "output": "chown user1:user1 -R subdir1"}
{"input": "List the largest file in long list format of all the files under the current directory", "output": "find . -type f -ls | sort -nrk7 | head -1 #unformatted"}
{"input": "find all files in current folder which are bigger than 1 MB and move them to another folder after user confirmation", "output": "find . -size +1M -ok mv {} files \\+"}
{"input": "Execute \"./my_script.sh\" every 3 seconds and highlight the differences in successive runs", "output": "watch -n 3 -d ./my_script.sh"}
{"input": "Creates temporary folder and saves path to it in 'other' variable.", "output": "other=\"$(mktemp --directory)\""}
{"input": "Prints current directory name", "output": "pwd | sed 's#.*/##'"}
{"input": "Replace all occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in all regular files under '/home/www' directory tree", "output": "find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'"}
{"input": "Login to \"host\" using identity file \"id_rsa\"", "output": "ssh -i id_rsa host"}
{"input": "Find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string \"debug (\"", "output": "find /srv/www/*/htdocs/system/application/ -name \"*.php\" -print0 | xargs -0 grep -H \"debug (\""}
{"input": "Save the number of modified files in a git repository in variable \"MYVAR\"", "output": "MYVAR=`git ls-files -m|wc -l|tr -d ' '`"}
{"input": "Generate UUIDs for the files from the current directory tree", "output": "find . -printf \"%P\\n\" | sort | while IFS= read -r f; do echo \"$(uuid) $f\"; done"}
{"input": "List all active cron jobs, displaying only the command.", "output": "crontab -l | grep -v \"^#\" | awk '{print $6}'"}
{"input": "Find all files/directories in current directory and execute myscript with minimal invocation for those files/directories", "output": "find . -exec myscript {} +"}
{"input": "sleep until a specific date", "output": "sleep $(expr `date -d \"03/21/2014 12:30\" +%s` - `date +%s`)"}
{"input": "Find all regular files with '.r' and '.c' in their names under current directory tree", "output": "find ./ -type f \\( -name '*.r*' -o -name '*.c*' \\) -print"}
{"input": "display all the files in the current folder which have been modified after the files \"/bin/sh\"", "output": "find . -newer /bin/sh"}
{"input": "Removes all listed folders with content in sudo mode.", "output": "sudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules"}
{"input": "Calculate the md5sum of the executable file of command \"gcc\"", "output": "md5sum $(which gcc)"}
{"input": "find all the files ending with \".sh\" in the folder /dir excluding those wth the name node_modules and search for a pattern in these files", "output": "find /dir \\( -name node_modules -prune \\) -o -name \"*.sh\" -exec grep --color -Hn \"your text to find\" {} 2>/dev/null \\;"}
{"input": "Find all files under current directory, calculate their md5sum and print the output to MD5SUMS", "output": "find . -type f -exec md5sum {} \\; > MD5SUMS"}
{"input": "Delete files under $LOCATION that match $REQUIRED_FILES in their names and were modified more than 360 minutes ago", "output": "find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete"}
{"input": "Calculate the crc32 of \"testring\"", "output": "echo -n teststring | gzip -1 | pigz -lv"}
{"input": "Find all empty files under /tmp", "output": "find /tmp -type f -empty"}
{"input": "Find all files/directories under '/etc' directory tree that are greater than 5MB and print their sizes and names", "output": "find /etc -size +5M -exec ls -sh {} +"}
{"input": "Find the total size of *.jpg files within the current directory tree", "output": "find . -iname '*.jpg' -type f -printf '%b\\t%D:%i\\n' |   sort -u | cut -f1 | paste -sd+ - | bc"}
{"input": "Exclude directory from find . command", "output": "find . -path ./misc -prune -o -name '*.txt' -print"}
{"input": "Add group write permission to all files and directories in the current directory including hidden files and excluding \"..\"", "output": "chmod g+w $(ls -1a | grep -v '^..$')"}
{"input": "Print IP address of the current host", "output": "echo $(/usr/sbin/arp $(hostname) | awk -F'[()]' '{print $2}')"}
{"input": "Make all regular files in the current directory tree world-readable", "output": "find . -type f -print0 | xargs -0 chmod go+r"}
{"input": "search for the regular/normal files iceweasel or thunderbird in the entire file system and exclude search in the paths /export and directories having the word Recommeded in their name", "output": "find / \\( -path /export -o -path \"/*Recommended*\" \\) -prune -o \\   \\( -name iceweasel -o -name thunderbird -type f \\) -print 2>/dev/null"}
{"input": "Move all *.emlx files/directories under /path/to/folders/ to ./Messages/ directory", "output": "find /path/to/folders/ -name \\*.emlx -print0 | xargs -0 -I {} mv {} ./Messages/"}
{"input": "print disk usage of files or folders in current directory", "output": "du -sh *"}
{"input": "Print a count of each unique line from standard input sorted from least frequent to most frequent", "output": "sort | uniq -c | sort -n"}
{"input": "searches through the root filesystem (\"/\") for the file named Chapter1, and prints the location", "output": "find / -name Chapter1 -type f -print"}
{"input": "Search for 'pattern' in file 'file' and print the matched lines by separating them with spaces instead of newlines", "output": "grep pattern file | tr '\\n' ' '"}
{"input": "Count the *.html files residing in the /usr/src directory tree and containing string \"foo\"", "output": "find /usr/src -name \"*.html\" -exec grep -l foo '{}' ';' | wc -l"}
{"input": "Rename all files and directories under current directory tree by converting the names to small letters without descending into 'CVS' directory", "output": "find . -name CVS -prune -o -exec mv '{}' `echo {} | tr '[A-Z]' '[a-z]'` \\; -print"}
{"input": "Saves space separated content of $RAW_LOG_DIR in FILES variable", "output": "FILES=`cat $RAW_LOG_DIR | xargs -r`"}
{"input": "find all the reglar files which ahve been changed in the last 5 minutes and do not search in the sub directories.", "output": "find /home/pankaj -maxdepth 1 -cmin -5 -type f"}
{"input": "Read 10 bytes from $0 and print them by replacing the set '\\000-\\377' with '#'", "output": "head -c 10 \"$0\" | tr '\\000-\\377' '#'"}
{"input": "Delete the first line of \"$FILE\" using intermediate file \"$FILE.tmp\"", "output": "tail -n +2 \"$FILE\" > \"$FILE.tmp\" && mv \"$FILE.tmp\" \"$FILE\""}
{"input": "Reports count of characters in the value of ${FOO_NO_TRAIL_SPACE} variable as follows: \"length(FOO_NO_TRAIL_SPACE)==<counted number of characters>\"", "output": "echo -e \"length(FOO_NO_TRAIL_SPACE)==$(echo -ne \"${FOO_NO_TRAIL_SPACE}\" | wc -m)\""}
{"input": "Search for empty files", "output": "find . -size 0k"}
{"input": "Find all *.txt files under the current directory whose names are not \"File.txt\"", "output": "find . -maxdepth 1 -type f -name '*.txt' -not -name File.txt"}
{"input": "Find all '*~' files under current directory and delete them", "output": "find ./ -name '*~' | xargs> rm"}
{"input": "Find a directory named 'project.images' in the entire filesystem and show it in long listing format", "output": "find  / -type d -name \"project.images\" -ls"}
{"input": "Decompress \"path/to/test/file.gz\" to standard output and save all lines matching \"my regex\" to files with a 1000000 line limit", "output": "gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -dl1000000 - file"}
{"input": "When a window is closed in a session, automatically renumbers the other windows in numerical order (since v1.7).", "output": "tmux set-option -g renumber-windows on"}
{"input": "Find the passwd file in the current directory and one level down", "output": "find -maxdepth 2 -name passwd"}
{"input": "Recursively finds all '*.pdf' files in a current folder and removes them without prompting.", "output": "find . -name '*.pdf' -exec rm -f {} \\;"}
{"input": "Display the first 32 bytes in \"foo\" as printable characters with 16 characters per line", "output": "od -c foo |head -2"}
{"input": "create symbolic links in directory \"/your/dest/dir/\" to all files located in \"/your/source/dir/\" and have filename extension \"txt.mrg\"", "output": "find /your/source/dir/ -iname '*.txt.mrg' -exec ln -s '{}' /your/dest/dir/ \\;"}
{"input": "Calculate md5 sum of empty string", "output": "echo -n \"\" | md5sum"}
{"input": "Find all the *.c files at any level of directory Programming under any 'src' directory", "output": "find ~/Programming -path '*/src/*.c'"}
{"input": "Print history with the first field removed", "output": "history | awk '{sub($1, \"\"); sub(/^[ \\t]+/, \"\"); print}'"}
{"input": "Print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts", "output": "find . -name \\*.java | tr '\\n' '\\0' | xargs -0 wc"}
{"input": "Find all files under current directory and set read-write permission for owner, read permission for group and other for those directories", "output": "find . -type f -exec chmod u=rw,g=r,o=r {} \\; - that's 644"}
{"input": "Find all broken symlinks including cyclic links under /path/to/search directory", "output": "find /path/to/search -type l -exec test ! -e {} \\; -print"}
{"input": "delete all text files in the entire file system", "output": "find / -type f -name \"*.txt\" -print | xargs rm"}
{"input": "Find all regular files that reside in the current directory tree and were last modified more than 2 days ago", "output": "find . -type f -mtime +2"}
{"input": "Merge files 'text.txt' and 'codes.txt' by outputting any lines whose second field in the first matches the first field in the second.", "output": "join -1 2 -2 1 text.txt codes.txt"}
{"input": "Save the list of files in the current directory tree whose names contain \"2011\" to /tmp/allfiles", "output": "find . -name '*2011*' -print0 > /tmp/allfiles"}
{"input": "List all files/directories under current directory and redirect it to /tmp/files.txt", "output": "find . -ls > /tmp/files.txt"}
{"input": "Find all the files whose name is tecmint.txt", "output": "find . -name tecmint.txt"}
{"input": "Find all files and directories starting from the current directory and excluding hidden files and directories", "output": "find . \\( ! -regex '.*/\\..*' \\) | sed 's/^..//'"}
{"input": "List in detail regular files from the current directory tree whose names match Perl regular expression '\\w+-\\d+x\\d+\\.\\w+$'", "output": "find -type f |  grep -P '\\w+-\\d+x\\d+\\.\\w+$' | sed -re 's/(\\s)/\\\\\\1/g' | xargs ls -l"}
{"input": "change owner and group of the file script.sh to user root", "output": "chown root:root script.sh"}
{"input": "Search for the pattern 'search string' in all the files in the ''/tmp folder and display the matched lines along with the file names", "output": "find /tmp -type f -exec grep 'search string' '{}' /dev/null \\+"}
{"input": "Move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT} to ${OUTPUT}", "output": "find ${INPUT}/ -name \"*.pdf\" -exec mv '{}' '{}'.marker ${OUTPUT} \\;"}
{"input": "Print the paths of all files in the current directory tree that contain \"abc\" replacing \"abc\" with \"xyz\"", "output": "find . |xargs grep abc | sed 's/abc/xyz/g'"}
{"input": "Remount \"/system\" with read only permission", "output": "mount -o remount,ro /system"}
{"input": "Compresses all '*.xml' files under current directory with 'bzip2' utility.", "output": "find -name \\*.xml -print0 | xargs -0 -n 1 -P 3 bzip2"}
{"input": "Execute awk script \"script.awk\" that exists in \"$PATH\" with argument \"arg1\"", "output": "awk -f `which script.awk` arg1"}
{"input": "Search for files that are at least 1.1GB", "output": "find / -size +1.1G"}
{"input": "List all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "find -depth -type d | while read dir;  do [[ ! $prev =~ $dir ]] && echo \"${dir}\" ; prev=\"$dir\"; done"}
{"input": "Rename \"old\" to \"tmp\"", "output": "mv old tmp"}
{"input": "Gives the primary group of $USERNAME.", "output": "groups $USERNAME | cut -d\\  -f 1"}
{"input": "Change permissions to u=rwx,g=rx,o= for all directories inside the current directory tree", "output": "find . -type d -exec chmod u=rwx,g=rx,o= '{}' \\;"}
{"input": "prints the name of the current git branch", "output": "git status | head -1 | cut -d ' ' -f 3"}
{"input": "Prints all Saturday days of a current month.", "output": "cal -h | cut -c19-20"}
{"input": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "output": "find data/ -name filepattern-*2009* -print0 | xargs -0 tar uf 2009.tar"}
{"input": "Find all files/directories under current directory tree excluding files/directories with name 'query_to_avoid'", "output": "find \\! -name \"query_to_avoid\""}
{"input": "Recursively prints all files in a current folders, and searches \"stringYouWannaFind\" in file content ignoring case differences, and preceding found string with its number in file.", "output": "find ./ -type f -print -exec grep -n -i \"stringYouWannaFind\" {} \\;"}
{"input": "Rename all *.jpg files to *.jpg$.jpg files under current directory by appending the parent directory name at the beginning of their names", "output": "find . -name '*.jpg' -exec sh -c 'mv \"$0\" \"$(basename $(dirname $0))-${0%.JPG}$.jpg\"' {} \\;"}
{"input": "Create script filesPermissions.sh that restores the original permissions of the regular files in the current directory tree", "output": "find . -type f | xargs stat -c \"%a %n\" | awk '{print \"chmod \"$1\" \"$2}' > ./filesPermissions.sh"}
{"input": "extract 'archive.tar.gz' to /destination", "output": "tar xzf archive.tar.gz -C /destination"}
{"input": "Read a line from standard input into variable \"response\" ignoring backslash escapes and using the prompt \"Are you sure? [y/N] \"", "output": "read -r -p \"Are you sure? [y/N] \" response"}
{"input": "Print continuous characters '/' and '\\' randomly from /dev/urandom", "output": "grep -ao \"[/\\\\]\" /dev/urandom|tr -d \\\\n"}
{"input": "Remove all vmware-*.log files under current directory ensuring white space safety in filename", "output": "find . -name vmware-*.log -print0 | xargs -0 rm"}
{"input": "Copy all *.data files under /source_path to /target_path", "output": "find /source_path -name *.data -exec cp {} /target_path \\;"}
{"input": "Search for filenames matching \"android\" in the current directory and number the output", "output": "ls | grep android | nl"}
{"input": "Change permissions for all PHP files under the current directory tree to 755", "output": "find . -name \"*.php\" -exec chmod 755 {} \\;"}
{"input": "Set permissions to 700 for directories under var/", "output": "find var/ -type d -exec chmod 700 {} \\;"}
{"input": "change the permissions of all the regular files in the folder root_dir to 444", "output": "find root_dir -type f -exec chmod 444 {} \\;"}
{"input": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"", "output": "find . -name \"*bills*\" -print0 | xargs -0 grep put"}
{"input": "Backup all PHP files under the current directory tree", "output": "find -name \"*.php\" \u2013exec cp {} {}.bak \\;"}
{"input": "Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones", "output": "comm <(sort -n f1.txt) <(sort -n f2.txt)"}
{"input": "remove all the files in the current folder which have not been changed in the last 30*24 hours", "output": "find ./ -ctime +30 -type f -exec rm -f {} \\;"}
{"input": "Prints all child processes of a process with id 20238.", "output": "pstree -p 20238 | sed 's/(/\\n(/g' | grep '(' | sed 's/(\\(.*\\)).*/\\1/'"}
{"input": "Delete all files in the \"${S}/bundled-libs\" folder except \"libbass.so\"", "output": "find \"${S}/bundled-libs\" \\! -name 'libbass.so' -delete"}
{"input": "Remove all files containing 'sample' (case insensitive) in their names under '/home/user/Series' directory tree", "output": "find /home/user/Series/ -iname '*sample*' -exec rm {} \\;"}
{"input": "Make directories \"foo\" and \"bar\"", "output": "mkdir foo bar"}
{"input": "Shows status of a shell option 'compat31'.", "output": "shopt compat31"}
{"input": "Copy \"local_file\" to \"user@host:remote_file\" via ssh protocol, saving partially transferred files, and showing progress", "output": "rsync --partial --progress --rsh=ssh local_file user@host:remote_file"}
{"input": "Remove all CVS directories in the current directory tree", "output": "find . -type d -name CVS -exec rm -r {} \\;"}
{"input": "find regular files under the current directory, whose name ends in .mbox, piping the output to the GNU Parallel command that will rename each file to not have a file extension.", "output": "find . -type f -wholename \\*.mbox | parallel mv {} {.}"}
{"input": "Remove all directories called \"test\" from the /path/to/dir directory tree", "output": "find /path/to/dir -name \"test\" -type d -exec rm -rf {} \\;"}
{"input": "Find all *text files/directories under current directory", "output": "find -name \"*text\""}
{"input": "find all normal/regular files in current folder and display the total lines in them", "output": "find . -type f -print0 | xargs -0 wc -l"}
{"input": "Page through a list of all running processes on the system, with those taking most CPU at the top of the list.", "output": "ps -eo pcpu,pid,user,args | sort -r -k1 | less"}
{"input": "Find all files with 644 permission and change the permission to 664", "output": "find . -type f -perm 644 -exec chmod 664 {} \\;"}
{"input": "Find all directories named build under the current directory", "output": "find . -type d -name build"}
{"input": "Recursively copy \"dir_a\" to \"dir_b\" and delete any new files in \"dir_b\"", "output": "rsync -u -r --delete dir_a dir_b"}
{"input": "Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.", "output": "sort file | uniq | cut -f1 -d' ' | uniq -c | rev"}
{"input": "Locate all passwd files on the system", "output": "find / -name passwd"}
{"input": "Find all files under current directory", "output": "find -type f"}
{"input": "search the word \"MySearchStr\" in all the regular/normal files in the current folder and display the line number and the file name", "output": "find . -type f -print0 | xargs -0 -e grep -nH -e MySearchStr"}
{"input": "Print the contents of \"$FILE\" starting from line 2", "output": "tail -n +2 \"$FILE\""}
{"input": "long list al the files in the current directory which have all the permissions", "output": "find . -perm 777 -type f -exec ls -l {} \\;"}
{"input": "Remove the last two components (directories) of $path", "output": "echo $path | rev | cut -d'/' -f4- | rev"}
{"input": "Lists all files that matches path pattern with wildcards.", "output": "ls -l /lib*/ld-linux*.so.2"}
{"input": "Ungzip and untar all files matching \"www-backup.tar.*\"", "output": "cat www-backup.tar.*|gunzip -c |tar xvf -"}
{"input": "Find all files in the current directory tree whose path names match pattern './sr*sc'", "output": "find . -path './sr*sc'"}
{"input": "Find target.out files starting from /starting/path and pass them as arguments to /path/to/simpleGrepScript.sh", "output": "find /starting/path -name target.out | xargs /path/to/simpleGrepScript.sh"}
{"input": "Search the home directory tree for all .txt files", "output": "find ~/ -name '*.txt'"}
{"input": "Find .rmv files in the ./root directory recursively and copy them to directory /copy/to/here", "output": "find root -name '*.rmv' -type f -exec cp --parents \"{}\" /copy/to/here \\;"}
{"input": "Print summary of files present only in dir1.", "output": "diff -rq dir1 dir2 | grep 'Only in dir1/'"}
{"input": "Counts lines in file $FILE.", "output": "count=$(grep -c ^ < \"$FILE\")"}
{"input": "display all the text files in a folder", "output": "find $1 -type f -name '*'$n'.txt'"}
{"input": "renames all \".htm\" files to \".html\" files", "output": "find . -name \"*.htm\" -exec mv '{}' '{}l' \\;"}
{"input": "Counts the number of lines in *.php and *.inc files in a current folder and subfolders.", "output": "find . -name '*.php' -o -name '*.inc' | xargs wc -l"}
{"input": "Count the number of files/directories named file1 under current directory", "output": "find -name file1 | wc -l"}
{"input": "Search the ./bin directory recursively for files called \"cp\"", "output": "find ./bin -name \u201ccp\u201d"}
{"input": "search for word linux in all the regular/normal files in the folder mail.", "output": "find ~/mail -type f | xargs grep \"Linux\""}
{"input": "Find all broken symlinks under current directory", "output": "find . -type l -! -exec test -e {} \\; -print"}
{"input": "find all the html files in the current folder and search for a pattern in these files", "output": "find . | grep html$ | xargs grep <string-to-find>"}
{"input": "Find *.java files under current directory and compress them to myfile.tar", "output": "find . -type f -name \"*.java\" | xargs    tar rvf myfile.tar"}
{"input": "Find all m? directories under current directory and run ./fixmbox with all of the directory paths as its arguments", "output": "find . -name 'm?' -type d -exec ./fixmbox {} +"}
{"input": "Print file system disk space usage with a grand total", "output": "df --total"}
{"input": "show all the files in the folder /etc which have been modified in the last 24 hours", "output": "find /etc -mtime -1"}
{"input": "Print the current user name associated with standard input", "output": "who -m | awk '{print $1;}'"}
{"input": "Find all hidden files starting from the directory given as variable $FOLDER", "output": "find $FOLDER -name \".*\""}
{"input": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.", "output": "sudo ls -hal /root/ | sudo tee /root/test.out > /dev/null"}
{"input": "find all c & c++ files in the current directory and save output names to another file", "output": "find . -name \"*.c\" -o -name \"*.cpp\" -o -name \"*.h\" -o -name \"*.hpp\" > cscope.files"}
{"input": "Search for files specifying the maximum depth of the search", "output": "find -maxdepth num -name query"}
{"input": "Recursively removes all files and folders named '.svn' in a current folder, handling content of removed folder before folder inself.", "output": "find . -depth -name .svn -exec rm -fr {} \\;"}
{"input": "Find all .mp3 files with more then 10MB and delete them from root directory .", "output": "find /  -type f -name *.mp3 -size +10M -exec rm  {} \\;"}
{"input": "list PID of a group leader", "output": "jobs -lp"}
{"input": "Set variable \"architecture\" to machine architecture, ie. x86_64", "output": "architecture=\"$(uname -m)\""}
{"input": "display all directories in current folder", "output": "find -type d"}
{"input": "Change the owner of all files in the directory tree \"dir_to_start\" excluding file \"file_to_exclude\" to \"owner\"", "output": "find dir_to_start -not -name \"file_to_exclude\"  -print0 | xargs -0 chown owner"}
{"input": "Search the directory tree /tmp for regular files using zero delimiter for output", "output": "find /tmp -type f -print0"}
{"input": "Search for files \"file1\" or \"file9\"", "output": "find . -name file1 -or -name file9"}
{"input": "Search the current directory tree for the files with extension \"trc\" and remove them if they are more than three days old", "output": "find . -name \"*.trc\" -ctime +3 -exec rm {} \\;"}
{"input": "Prints local machine's LAN IP address", "output": "ifconfig `ip route | grep default | head -1 | sed 's/\\(.*dev \\)\\([a-z0-9]*\\)\\(.*\\)/\\2/g'` | grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" | head -1"}
{"input": "find for a word in all the regular files in the current directory", "output": "find . -type f -print | xargs grep -li 'bin/ksh'"}
{"input": "Find all .zip files starting from the current directory which are owned by user tommye", "output": "find . -type f -user tommye -iname \"*.zip\""}
{"input": "find all files in the current folder which are bigger than 10bytes", "output": "find . \u2014 size +10 -print"}
{"input": "switch user to jenkins", "output": "su - jenkins"}
{"input": "Find all *.txt files/directories under current directory", "output": "find -name '*.txt'"}
{"input": "Fint all *.txt files/directories in entire file system without descending to other file system and without error reporting", "output": "find / -name  \"*.txt\" -mount 2> /dev/null"}
{"input": "View history using \"less\"", "output": "history | less"}
{"input": "finda ll the files in the current folder that are modified today.", "output": "find ~ -type f -mtime 0 -ls"}
{"input": "Set variable OS to the name of the operating system, ie. \"Linux\"", "output": "OS=`uname -s`"}
{"input": "display all the users in the current folder that belong to the group \"sunk\"", "output": "find . -type f -group sunk"}
{"input": "Print a single line of numbers from \"001\" to \"010\"", "output": "yes | head -n 10 | awk '{printf( \"%03d \", NR )}'"}
{"input": "Find files in the current directory tree whose status was changed within the last 60 minutes", "output": "find . -cmin -60"}
{"input": "Strips two last sections from the path $pathname, and prints basename of the rest part.", "output": "echo $(basename $(dirname $(dirname $pathname)))"}
{"input": "Print variable \"$module\" in formatted columns", "output": "column <<< \"$(printf '%s\\n' $module)\""}
{"input": "Assign permissions 755 to directories in the current directory tree", "output": "find . -type d -print0 | xargs -0 chmod 755"}
{"input": "Gets IP address of first listed network interface in system.", "output": "ifconfig | grep 'inet addr:' | grep -v 127.0.0.1 | head -n1 | cut -f2 -d: | cut -f1 -d ' '"}
{"input": "Assign permissions 644 to files in the current directory tree", "output": "find . -type f -print0 | xargs -0 chmod 644"}
{"input": "List files in the current directory and below that are exactly 1234 bytes in size", "output": "find . -size 1234c"}
{"input": "Find all files/directories named modules under current directory and list them twice", "output": "find . -name modules \\! -exec sh -c 'find -name modules' \\;"}
{"input": "find all files in the file system with the permissions 777 and having the word \"filename\" in their name.", "output": "find / -perm 777 -iname \"filename\""}
{"input": "Print and save the ping results of 25 requests to \"google.com\" in \"/home/user/myLogFile.log\" containing at most 100000 bytes", "output": "ping -c 25 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)"}
{"input": "Print DISPLAY of \"orschiro\" user", "output": "who | sed -e '/orschiro/! d; /pts/! d; s/^.*\\(:[0-9.]\\+\\).*$/\\1/p;d' | head -n1"}
{"input": "Counts lines in file file1 and shows progress bar while doing.", "output": "tail -n 100 file1 | pv | wc -l"}
{"input": "Perform case insensitive search for *.gif files/directories under downloads directory", "output": "find downloads  -iname \"*.gif\""}
{"input": "Find files using file-name", "output": "find -iname \"MyCProgram.c\""}
{"input": "Copy the executable \"python2.7\" in $PATH to \"myenv/bin/python\"", "output": "cp `which python2.7` myenv/bin/python"}
{"input": "Split \"list.txt\" into files with at most 600 lines each", "output": "split -l 600 list.txt"}
{"input": "find all the header files in /usr/include which have been modified in the last 400 days", "output": "find /usr/include -type f -mtime -400 -name \"*.h\""}
{"input": "Find all files in current directory and execute multiple commands for each file", "output": "find . -type f \\( -exec sh -c 'echo first; false' \\; -false -o -exec echo second \\; \\)"}
{"input": "Count the number of regular files in directory tree ${DIRECTORY} that contain a vowel in their names", "output": "find ${DIRECTORY} -type f -print | sed -e 's@^.*/@@' | grep '[aeiouyAEIOUY]' | wc -l"}
{"input": "List files under current directory according to their size in descending order", "output": "find . -type f -exec ls -s {} \\; | sort -n -r"}
{"input": "find StringBuffer in all *.java files", "output": "find . -type f -name \"*.java\" -exec grep -l StringBuffer {} \\;"}
{"input": "Delete in the background all files in /var/tmp/stuff1 and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff1 -mtime +90 -delete &"}
{"input": "Find the most recently modified files in /path/to/dir and print the modification time followed by a tab and the filename for each file", "output": "find /path/to/dir -type f | perl -ne 'chomp(@files = <>); my $p = 9; foreach my $f (sort { (stat($a))[$p] <=> (stat($b))[$p] } @files) { print scalar localtime((stat($f))[$p]), \"\\t\", $f, \"\\n\" }' | tail"}
{"input": "find all the files in the file system which have been modified in the last 60 minutes", "output": "find / -mmin -60"}
{"input": "Archive preserving permissions and ownership files in \"/var/www/\" on host \"user@10.1.1.2\" to local \"/var/www/\"", "output": "sudo rsync -az user@10.1.1.2:/var/www/ /var/www/"}
{"input": "Save the contents of \"file\" in the clipboard", "output": "cat file | xclip -selection clipboard"}
{"input": "Find files modified between 6 and 9 minutes ago", "output": "find . -mmin +5 -mmin -10"}
{"input": "Lists long format information about file '/bin/echo'.", "output": "ls -l /bin/echo"}
{"input": "delete all the log files which have not been modified in the last 5 days after user confirmation", "output": "find . \u2014 name \"*.LOG\" \u2014 mtime +5 -ok rm {} \\;"}
{"input": "Remove all files with a txt extension under current directory", "output": "find . -type f -name \"*.txt\" -exec rm {} \\; -print"}
{"input": "display all the files in the current folder", "output": "find ./"}
{"input": "Recursively unzip files to stdout in \"/some/dir/here\" and search for \"blah\"", "output": "zcat -r /some/dir/here | grep \"blah\""}
{"input": "Represent the current time as seconds since epoch and save it to variable 'TODAY'", "output": "TODAY=$(date  -d \"$(date +%F)\" +%s)"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names", "output": "find /home -type f -name \"*.ext\" -print0 | while read -r -d \"$(printf \"\\000\")\" -r path; do dos2unix $path $path\"_new\"; done"}
{"input": "create a compressed archive excluding files matching a pattern", "output": "tar -czf backup.tar.gz --exclude=PATTERN1 --exclude=PATTERN2 ... /path/to/backup"}
{"input": "Allow all users to execute \"myscript.sh\"", "output": "chmod a+x myscript.sh"}
{"input": "Read a line from standard input with prompt \"Enter your age:\\n\"", "output": "read -p $'Enter your age:\\n'"}
{"input": "Print a line of 100 random characters either \".\" or \" \"", "output": "cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1"}
{"input": "Find all files under current directory and append a null character at the end of each of their paths", "output": "find -type f -print0"}
{"input": "Find all directories in maximum 1 level down the current directory that were modified less than 1 day ago", "output": "find -maxdepth 1 -type d -mtime -1"}
{"input": "Remove all files that were older than 3 days", "output": "find . -type f -mtime +3 \u2013exec rm \u2013f {} \\;"}
{"input": "find all the files in the current folder ending with cpp or hpp or chpp and save the output to the file cscope.files.", "output": "find ./ -name \"*.[ch]pp\" -print > cscope.files"}
{"input": "Finds and deletes all empty folders (ones that contain no files or subfolders).", "output": "find ./ -type d -exec rmdir --ignore-fail-on-non-empty {} 2>/dev/null \\;"}
{"input": "Finds file 'Subscription.java' and changes to containing folder.", "output": "cd $(find . -name Subscription.java | xargs dirname)"}
{"input": "Find directories in the /path directory tree whose names are 33 characters in length", "output": "find /path -type d -printf \"%f\\n\" | awk 'length==33'"}
{"input": "Change permissions to 644 of multiple regular files with permissions 755", "output": "find . -type f -perm 755 -exec chmod 644 {} \\;"}
{"input": "Saves location of file $1 in 'dir' variable.", "output": "dir=$(dirname -- \"$1\")"}
{"input": "Change the owner of \"/var/www/html/mysite/tmp_file_upload/\" to \"nobody\"", "output": "sudo chown nobody /var/www/html/mysite/tmp_file_upload/"}
{"input": "Find all directories named \"D\" in the current directory tree and print their parents", "output": "find ./ -type d -name 'D'|sed 's/D$//'"}
{"input": "find all the files in the folder /home which are exactly of size 10MB", "output": "find /home -size 10M"}
{"input": "extracts text between pattern1 and pattern2 if and only if the pattern1 is followed by pattern2", "output": "tac infile | sed -ne '/pattern2/,/pattern1/ p' | tac -"}
{"input": "Measure the disk space taken up by all *.txt files in the /path directory tree", "output": "find /path -iname '*.txt' | perl -lane '$sum += -s $_; END {print $sum}'"}
{"input": "search for the file \"file_name\" in the folder /path", "output": "find /path -name file_name"}
{"input": "Install 'mono-devel' package, answering 'yes' for all questions.", "output": "yum -y install mono-devel"}
{"input": "Find broken links using the file command on each symlinks in the system and searching for the keword 'broken' with grep", "output": "find / -type l -print0 | xargs -0 file | grep broken"}
{"input": "SSH into \"hostname\" on port 22 as user \"myName\"", "output": "ssh -l myName -p 22 hostname"}
{"input": "Mount the \"vboxsf\" filesystem \"myFileName\" on \"~/destination\"", "output": "sudo mount -t vboxsf myFileName ~/destination"}
{"input": "Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files", "output": "cd /home/www && find . -type f -print0 | xargs -0 perl -i.bak -pe 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "find all files in the current folder and search for a word in them.", "output": "find . -type f -exec grep \"applicationX\" {} \\;"}
{"input": "Print timestamp as HH:MM:SS", "output": "date +\"%T\""}
{"input": "Archive the directory structure under backup directory into directory-structure.tar", "output": "find backup/ -type d -print0 | xargs -0 tar cf directory-structure.tar --no-recursion"}
{"input": "display the count of regular/normal files in the folder \"/path/to/dir\"", "output": "find /path/to/dir -type f -exec printf %.sX {} + | wc -c"}
{"input": "find all the files in the home folder which are less than 42 Bytes", "output": "find / -size 42"}
{"input": "Print source directory of bash script", "output": "dirname \"$(readlink -f \"$0\")\""}
{"input": "Search for the regex ... in the manual of the find command", "output": "man find | grep ..."}
{"input": "Find all files under /mnt/naspath directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter", "output": "find /mnt/naspath \\! \\(-name .snapshot -prune\\) -type f -mtime 0 -print0"}
{"input": "Execute \"/wherever/whatever\" in the background on target machine \"user@host\"", "output": "ssh -n -f user@host \"sh -c 'cd /whereever; nohup ./whatever > /dev/null 2>&1 &'\""}
{"input": "start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found", "output": "find . -wholename './src/emacs' -prune , -print"}
{"input": "Find all *.log files under current directory that contain the string \"Exception\"", "output": "find . -name '*.log' -mtime -2 -exec grep -Hc Exception {} \\; | grep -v :0$"}
{"input": "search all jpg,png,jpefg  files in the current folder and calculate the total size of them", "output": "find . \\( -iname \"*.jpg\" -o -iname \"*.jpeg\" -o -iname \"*.png\" \\) -ls | awk '{total += $7} END {print total}'"}
{"input": "Print the list of files and directories of the /etc directory", "output": "find /etc   ! -name /etc"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of the last file found", "output": "find var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \\;"}
{"input": "Copies file 'index.html' to each top-level directory in the current directory beginning with 'd'.", "output": "find . -mindepth 1 -maxdepth 1 -type d| grep \\/a |xargs -n 1 cp -i index.html"}
{"input": "Allow anyone to run command \"Xvfb\" as the owner of \"Xvfb\"", "output": "sudo chmod u+s `which Xvfb`"}
{"input": "Search the entire file hierarchy for all regular files owned by olduser and change their ownership to newuser.", "output": "find / -user olduser  -type f  -exec chown newuser {} \\"}
{"input": "Redirects output of 'time' built-in function and prints only real-time statistic.", "output": "{ time find / &>/dev/null; } 2>&1 | grep real"}
{"input": "Read a line from standard input in an interactive shell with prompt in variable \"myprompt\" interpreted as PS1 is interpreted", "output": "read -e -p \"${myprompt@P}\""}
{"input": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them", "output": "find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\\n' | sort | uniq | tr -d '\\n'"}
{"input": "Create symlinks to all  /home/folder2/*.txt files with the same name in current directory", "output": "find /home/folder2/*.txt -type f -exec ln -s {} \\;"}
{"input": "search for the file \"job.history\" in the folder /data/Spoolln and search for multiple patterns in the file and display the count of matched lines along with the pattern", "output": "find /data/SpoolIn -name job.history | xargs grep -o -m 1 -h 'FAIL\\|ABOR' | sort | uniq -c"}
{"input": "create archive \"backup.tar.gz\" from /path/to/catalog", "output": "tar czfP backup.tar.gz /path/to/catalog"}
{"input": "change owner of the file destination_dir to user \"user:", "output": "chown user destination_dir"}
{"input": "change the permission of all directories in current folder to 755.", "output": "find . -type d -exec chmod 755 {} \\;"}
{"input": "Locate all \"copyright\" files under and below /usr/share/doc", "output": "find /usr/share/doc -name \"copyright\""}
{"input": "Print right aligned numbers from 11 to 24", "output": "yes '' | nl -ba | sed -n -e 11,24p -e 24q"}
{"input": "Search for the regex \"\\$wp_version =\" in all the regular files that end with '/wp-includes/version.php' (case insensitive) in their paths in directories/files taken from the glob pattern '/home/*//public_html/' and show the matched lines along with the file names", "output": "find /home/*/public_html/ -type f -iwholename \"*/wp-includes/version.php\" -exec grep -H \"\\$wp_version =\" {} \\;"}
{"input": "Print out the names and types of all files in the current directory tree", "output": "find . -printf \"%y %p\\n\""}
{"input": "Find all files in the home directory tree that are owned by another user", "output": "find ~ ! -user ${USER}"}
{"input": "Find all *.* files not within .git directory and run $SED_CMD -i \"s/$1/$2/g\" on each of them", "output": "find . -type f -name \"*.*\" -not -path \"*/.git/*\" -print0 | xargs -0 $SED_CMD -i \"s/$1/$2/g\""}
{"input": "Filnd all files in root directory with 777 permission and change permision 644  with chmod commad .", "output": "find / -type f -perm 777 -print -exec chmod 644 {} \\;"}
{"input": "Print  \"Cannot acquire lock - already locked by \" followed by content of $lockfile file", "output": "echo \"Cannot acquire lock - already locked by $(cat \"$lockfile\")\""}
{"input": "Find all Makefile's in the current directory tree", "output": "find -type f -name \"Makefile\""}
{"input": "Prints the PID, PGID and command name of the process with the name 'test' every second", "output": "watch -n1 'ps x -o \"%p %r %c\" | grep \"test\" '"}
{"input": "Removes all files like '*.bak' in a current folder, and prints messages about what is being done.", "output": "rm -v *.bak"}
{"input": "Replace the leading spaces in the output of \"history\" with periods", "output": "history | sed 's/^ */&\\n/; :a; s/ \\(.*\\n\\)/.\\1/; ta; s/\\n//'"}
{"input": "Get the grandparent directory of each found 'pattern' file in $SEARCH_PATH", "output": "find \"$SEARCH_PATH\" -name 'pattern' | rev | cut -d'/' -f3- | rev"}
{"input": "Find all files that were last accessed more than 7 days ago under /home", "output": "find /home -atime +7"}
{"input": "Find files/directories under current directory that matches the regex /projects/insanewebproject[^/]*$  in their paths", "output": "find . -exec sh -c 'echo {} | grep -qi /projects/insanewebproject[^/]*$' \\; -print"}
{"input": "Recursively changes group ownership of every file in '/var/tmp/jinfo' to 'www-data'.", "output": "chgrp -R www-data /var/tmp/jinfo"}
{"input": "Scan every file in /etc for IPV4 addresses.", "output": "find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;"}
{"input": "Mount \"/tmp/loop.img\" on \"/mnt/image\" as a loop back device", "output": "mount /tmp/loop.img /mnt/image -o loop"}
{"input": "Find the current directory and all its subdirectories.", "output": "find . -type d"}
{"input": "Remove containing directories and suffix \".wiki\" from specified path, output the result.", "output": "basename /home/jsmith/base.wiki .wiki"}
{"input": "dsisplay all files inthe current folder", "output": "find ."}
{"input": "Go to directory /cygdrive/c/Program Files (x86) using quotes to escape special characters", "output": "cd \"/cygdrive/c/Program Files (x86)\""}
{"input": "Print contents of \"file\" as space separated hexadecimal bytes on a single line", "output": "od -t x1 -An file |tr -d '\\n '"}
{"input": "Find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file", "output": "find . -name \\*.sql -not -samefile $oldest_to_keep -not -newer $oldest_to_keep"}
{"input": "Finds every folder with file 'header.php' within, and copies file 'topscripts.php' to every one of them.", "output": "find -type f -name 'header.php' | xargs -n 1 dirname | xargs -n 1 cp -f topscripts.php"}
{"input": "Search the home directory tree for video files", "output": "find ~ -type f -name '*.mkv' -o -name '*.mp4' -o -name '*.wmv' -o -name '*.flv' -o -name '*.webm' -o -name '*.mov'"}
{"input": "Deletes empty folder 'nonsense_dir'.", "output": "rmdir nonsense_dir"}
{"input": "list all the \".ksh\" files in the current directory", "output": "find . -ls -name \"*.ksh\""}
{"input": "find the file arrow.jpg in the entire file system", "output": "find / -name arrow.jpg"}
{"input": "Run command 'su whoami' on host 'remotehost'", "output": "echo \"su whoami\" |ssh remotehost"}
{"input": "Find all regular files under $FOLDER directory tree that start with '\".' and end with '\"' in their names and were modified in less than $RETENTION days excluding the files whose contents match one of the regular expressions defined per line in file $SKIP_FILE", "output": "find ${FOLDER} -type f ! -name \\\".*\\\" -mtime -${RETENTION} | egrep -vf ${SKIP_FILE}"}
{"input": "Find *.o files with permissions 664 in the current directory tree", "output": "find . -name *.o -perm 664 -print"}
{"input": "Recursively changes group ownership of everything within a current directory to 'repogroup'.", "output": "chgrp -R repogroup ."}
{"input": "find all the normal/regular files in current folder excluding sub directories and hidden folders and display the count", "output": "find . -type f -maxdepth 1 ! -name '.*' -exec printf '%.0s.\\n' {} + | wc -l"}
{"input": "Installs git and bash-completion packages.", "output": "brew install git bash-completion"}
{"input": "Search the .css files in the /starting/directory tree for \".ExampleClass\"", "output": "find /starting/directory -type f -name '*.css' | xargs -ti grep '\\.ExampleClass' {}"}
{"input": "Find all CSS files that do something with HTML ID #content", "output": "find . -name \"*.css\" -exec grep -l \"#content\" {} \\;"}
{"input": "Set prompt to the system host name and history number", "output": "PS1=\"`hostname`:\\!>\""}
{"input": "change the permissions of all the normal files in a directory", "output": "find /path/to/dir/ -type f -print0 | xargs -0 chmod 644"}
{"input": "Calculate md5 sum of the md5 sum of all the sorted files under $path", "output": "find \"$path\" -type f -print0 | sort -z | xargs -r0 md5sum | md5sum"}
{"input": "Change every file under \"/var/www/html/\" to have permissions 664", "output": "sudo  find /var/www/html/ -type f -exec chmod 664 {} \\;"}
{"input": "Find all ES* and FS_* files under current directory", "output": "find . -type f \\( -iname \"ES*\" -o -iname \"FS_*\" \\)"}
{"input": "List all regular files in /var/www and below that have changed in the last 10 minutes", "output": "find /var/www -cmin -10 -type f -printf \"%c %pn\""}
{"input": "Remove all files from the current directory tree whose names end in \"~\"", "output": "find -iname '*~' | xargs rm"}
{"input": "Find links to any file that happens to be named `foo.txt'", "output": "find . -lname \\*foo.txt"}
{"input": "Find all *.p[lm] files/directories under current directory", "output": "find -name '*.p[lm]'"}
{"input": "Copy all files in current directory that do not match */not-from-here/* in their paths to /dest", "output": "find . -type f -not -path '*/not-from-here/*' -exec cp '{}' '/dest/{}' \\;"}
{"input": "Number every line of standard input as zero padded to 6 characters followed by \"-\"", "output": "nl -s- -ba -nrz"}
{"input": "Find all files in the current directory tree and replace string $1 with string $2 in them", "output": "find ./ -type f -exec sed -i \"s/$1/$2/\" {} \\;"}
{"input": "display all the files only in the path \"./sr*sc\"", "output": "find . -path \"./sr*sc\""}
{"input": "search for all the file sin the current folder which are bigger than 10KB and display them smallest file", "output": "find . -size +10k -exec ls -lS {} \\+ | head -1"}
{"input": "Recursively removes all files like '.DS_Store' from current folder.", "output": "rm `find ./ -name '.DS_Store'` -rf"}
{"input": "Search the files residing in the current directory tree whose names contain \"bills\" for \"put\"", "output": "find . -name '*bills*' -exec grep put {} \\;"}
{"input": "Print the full name of the current user", "output": "finger `id -un` | head -1 | cut -d: -f3-"}
{"input": "Search for the system host name in \"/etc/hosts\" and print the IP address in the first awk field", "output": "more /etc/hosts | grep `hostname` | awk '{print $1}'"}
{"input": "Print the list of files in the current directory tree skipping SVN files", "output": "find . -name .svn -a -type d -prune -o -print"}
{"input": "Archive \"directory\" preserving hard links from host \"remote\" to the current local directory and keep partial files, handle sparse files efficiently, and itemize changes made", "output": "rsync -aPSHiv remote:directory ."}
{"input": "Print a NULL-separated list of all hidden regular files from the home directory", "output": "find $HOME -maxdepth 1 -type f -name '.*' -print0"}
{"input": "Copy all files in \"/var/spool/mail\" to \"/home/username/mail\" preserving the directory hierarchy and modification times", "output": "find /var/spool/mail -type f | cpio -pvdmB /home/username/mail"}
{"input": "Find .txt files on the system whose size is greater than 12000 bytes", "output": "find / -name \"*.txt\" -size +12000c"}
{"input": "search for the word \"slrn\" in all the files in the current folder", "output": "find ./ -exec grep -q 'slrn' '{}' \\; -print"}
{"input": "find all files in the current folder that are modified exactly 1 minute ago", "output": "find -mmin 1 -print"}
{"input": "Print the names and sizes of regular files residing in the current directory tree", "output": "find $(pwd)/* -type f -exec stat -c \"f%15s %n\" {} +"}
{"input": "Remove all files named `junk' and `dummy'", "output": "find . \\( -name junk -o -name dummy \\) -exec rm '{}' \\;"}
{"input": "Kill process named \"python csp_build.py\".", "output": "ps aux | grep 'python csp_build.py' | head -1 | tr -s ' ' | cut -d \" \" -f2 | xargs kill"}
{"input": "Prefix all files and directories in the current directory with \"unix_\"", "output": "ls | xargs -i mv {} unix_{}"}
{"input": "Get a two column list of all regular .rb files residing in the current directory tree", "output": "find . -name \"*.rb\" -type f -print0 | xargs -0 -n 2 echo"}
{"input": "find all the normal/regular files in the folder \"pathfolder\" which are 2 levels deep, excluding all hidden files and display the count", "output": "find pathfolder -mindepth 2 -maxdepth 2 -type f -not -path '*/\\.*' | wc -l"}
{"input": "Prints total number of lines of all *.c files in a current folder and subfolders.", "output": "find . -name '*.c' -print0 |xargs -0 wc -l|grep -v total|awk '{ sum += $1; } END { print \"SUM: \" sum; }'"}
{"input": "delete what was typed in the command line and run \"pwd\" when button \"\\e[24~\"", "output": "bind '\"\\e[24~\":\"\\C-k \\C-upwd\\n\"'"}
{"input": "display all the regular/normal files in a folder", "output": "find $FILES_PATH -type f"}
{"input": "Recursively copy all files and directories matching \"*ela*L1*TE*\" in localhost's directory /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/ to /var/www/html/sbo/2010/teacher/ela/level1 on localhost connecting as ssh user \"dalvarado\", in batch mode (no prompt for passwords) preserving file permissions and timestamps, and without displaying progress information.", "output": "scp -Bpqr /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/*ela*L1*TE* dalvarado@localhost:/var/www/html/sbo/2010/teacher/ela/level1"}
{"input": "Moves the file that named like file $1 from '/tmp' folder to the folder where $2 file is located.", "output": "mv \"/tmp/`basename $1`\" \"`dirname $2`\""}
{"input": "Search the *.pdf files from directory tree PDFs/ for text \"perry sound\", ignoring the case", "output": "find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep -C 2 -i --with-filename --label=\"{}\" --color \"perry sound\"' \\;"}
{"input": "Print the file size and directory size in human readable format of the current directory tree 2 levels deep", "output": "tree --du -h -L 2"}
{"input": "Print the time of last boot", "output": "who -b"}
{"input": "Filter the cron list of user \"user\" through \"my_wonderful_sed_script\" and re-apply the resulting output.", "output": "crontab -u user -l | sed \"$my_wonderful_sed_script\" | crontab -u user -"}
{"input": "Remove regular files changed more than 15 days ago from the /tmp directory tree", "output": "find /tmp/ -ctime +15 -type f -exec rm {} \\;"}
{"input": "List only the non-hidden empty files only in the current directory.", "output": "find . -maxdepth 1 -empty -not -name \".*\""}
{"input": "Rename all \"thumbs\" directories to \"thumb\" in the current directory tree", "output": "find . -type d -exec rename 's/^thumbs$/thumb/' {} \";\""}
{"input": "Move all files including hidden files in \"/path/subfolder/\" to \"/path/\"", "output": "mv /path/subfolder/{.,}* /path/"}
{"input": "list all aliases that name contents the string \"xlogs\"", "output": "alias | grep xlogs"}
{"input": "ssh into default vagrant host without running \"vagrant ssh\"", "output": "ssh `vagrant ssh-config | tail -8 | perl -pe 's/^\\s+/-o@/; s/\\s/\\=/;s/@/ /;s/\\n/ /'` vagrant@localhost"}
{"input": "Recursively finds strings with the whole word 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings.", "output": "egrep -w -R \"word-1|word-2\u201d directory-path"}
{"input": "find files which modification time is  one day ago", "output": "find . -mtime 1"}
{"input": "Find all 'test' directories in the current directory tree and remove them", "output": "find . -type d -name 'test' -exec rm -rf {} \\;"}
{"input": "Find all *.md files in entire file system and convert them to HTML (*.html) files", "output": "find / -name \"*.md\" -type f -exec sh -c 'markdown \"${0}\" > \"${0%.md}.html\"' {} \\;"}
{"input": "Request changing the passphrase of key file \"private.key\"", "output": "ssh-keygen -pf private.key"}
{"input": "find all the directories  with the name \"c\" in the current folder which are at least 3 levels deep and which are not present in the path \"/p/\".", "output": "find -mindepth 3 -type d ! -path '*/p/*' -name c -print"}
{"input": "Find all the files whose name is tecmint.txt and contains both capital and small letters in /home directory", "output": "find /home -iname tecmint.txt"}
{"input": "Copy all regular files from the current directory tree to directory `TARGET'", "output": "find . -type f -exec cp -t TARGET {} \\+"}
{"input": "display all the files in the current folder which are in the path \"./sr*sc\"", "output": "find . -path './sr*sc'"}
{"input": "Lists '/tmp/hashmap.$1' file or folder '/tmp/hashmap.$1' content one file per line.", "output": "ls -1 /tmp/hashmap.$1"}
{"input": "find all the files in the file system which belong to the user \"pat\" and with the name \"dateiname\"", "output": "find / -user pat -iname \"Dateiname\""}
{"input": "display all the files in the current folder along with the hidden files with the depth", "output": "find . \u2014 name \"*\" \u2014 print -\u043e -name \".*\" \u2014 print -depth"}
{"input": "search for all regular/normal files in the current folder and display the number of lines in the file", "output": "find . -type f -print | xargs -L1 wc -l"}
{"input": "Convert all characters in \"$a\" to lower case and save to variable \"b\"", "output": "b=`echo \"$a\" | sed 's/./\\L&/g'`"}
{"input": "Delete orphan vim undo files under current directory", "output": "find . -type f -iname '*.un~' | while read UNDOFILE ; do FILE=$( echo \"$UNDOFILE\" | sed -r -e 's/.un~$//' -e 's&/\\.([^/]*)&/\\1&' ) ; [[ -e \"$FILE\" ]] || rm \"$UNDOFILE\" ; done"}
{"input": "Enables shell option 'compat31'.", "output": "shopt -s compat31"}
{"input": "display a long listing of all the log files in the current folder which are bigger than 1MB", "output": "find . -size +1000k -name *.log -print0 | xargs -0 ls \u2013lSh"}
{"input": "find all files in the home folder which are modified in the last 2 days.", "output": "find ~ -type f -mtime -2"}
{"input": "Execute \"killall -USR1 dd\" every minute", "output": "watch -n 60 killall -USR1 dd"}
{"input": "Print IP addresses of the host name", "output": "hostname -I | awk '{print $1}'"}
{"input": "Find all files/directories under current directory and set their permission to 775", "output": "find . -type f -exec chmod 775 {} \\;"}
{"input": "Replace each non-blank line in \"YOURFILE\" preceded with \"pX=\" where \"X\" is the line number", "output": "grep -v '^$' YOURFILE | nl -s= -w99 | tr -s ' ' p"}
{"input": "Save all directories under the current directory as a comma separated list in variable \"FOLDERS\"", "output": "FOLDERS=$(find . -type d | paste -d, -s)"}
{"input": "find all the files with the name test in the current folder ( case insensitive )", "output": "find . -iname test"}
{"input": "Delete files containing whitespaces", "output": "find . -name \"* *\" -exec rm -f {} \\;"}
{"input": "Search /root/directory/to/search recursively for the files matching pattern 'filename.*'", "output": "find /root/directory/to/search -name 'filename.*'"}
{"input": "Copies file 'file.dat' to each top-level directory in the current directory.", "output": "ls | xargs -n 1 cp -i file.dat"}
{"input": "Print the first line of \"filename\" as a hex dump of characters", "output": "head -n 1 filename | od -c"}
{"input": "Find all files in current directory that were modified less than 1 day ago, and create cpio archive in $backup_dir", "output": "find . -mtime -1 | cpio -oa 2>/dev/null | ( cd $backup_dir && cpio -imd)"}
{"input": "create a compressed archive in my_dir directory matching '.[^.]* ..?*' glob pattern", "output": "tar -C my_dir -zcvf my_dir.tar.gz .[^.]* ..?* *"}
{"input": "run command \"/path/to/my_daemon & echo \\$! > /tmp/su.joe.$$\" as user joe", "output": "su - joe -c \"/path/to/my_daemon & echo \\$! > /tmp/su.joe.$$\""}
{"input": "Count number of occurences of \"123\" in the string \"123 123 123\" (ie. 3)", "output": "echo \"123 123 123\" | grep -o 123 | wc -l"}
{"input": "Search all .py files in the current directory tree for \"some_function\"", "output": "find . -name \\*.py | xargs grep some_function"}
{"input": "search for a word in all the files in the current directory (case insensitive search)", "output": "find . -type f -exec grep 'needle' {} \\;"}
{"input": "Search the current directory recursively for the largest files", "output": "find . -type f -printf '%20s %p\\n' | sort -n | cut -b22- | tr '\\n' '\\000' | xargs -0 ls -laSr"}
{"input": "Look for file `Chapter1' under /usr and /home", "output": "find /usr /home -name Chapter1 -type f"}
{"input": "List all *.jar files/directories under /usr, /home and /tmp directory", "output": "find /usr /home  /tmp -name \"*.jar\""}
{"input": "search for the folder .dummy and remove it from the folder \"Test folder\"", "output": "find \"Test Folder\" -type d -name .dummy -exec rm -rf \\\"{}\\\" \\;"}
{"input": "Find all *.py files/directories under current directory", "output": "find . -name *.py"}
{"input": "find all files  the current folder which have not been accessed in the last 7 days and which are bigger than 20KB", "output": "find . -atime +7 -size +20480 -print"}
{"input": "Recursively copies \"$1\" to \"$2\".", "output": "cp -R \"$1\" \"$2\""}
{"input": "Find files starting with the word \"file\" in the current directory tree", "output": "find . -name \"file*\""}
{"input": "Find all *.tar.gz files/directories under /directory/whatever which were modified more than $DAYS ago", "output": "find /directory/whatever -name '*.tar.gz' -mtime +$DAYS"}
{"input": "find regular files under the current directory, whose name ends in .mbox, piping the output to a while loop that renames each file, to the same name without .mbox at the end", "output": "find . -type f -wholename \\*.mbox -print0 | \\     while read I ; do         mv $I $(echo $I | sed 's/\\.mbox//') ;     done ;"}
{"input": "split the file \"file\" into pieces per 2 lines", "output": "split -n2 infile"}
{"input": "find for the word \"dba_2pc_pending\" in all the files of current fodler having the word \"sql\" in their name", "output": "find . -print|grep sql|xargs grep -i dba_2pc_pending"}
{"input": "Find all the regular files under '/your/dir' directory tree which are bigger than 5 MB and display them in decreasing order of their sizes", "output": "find /your/dir -type f -size +5M -exec du -h '{}' + | sort -hr"}
{"input": "Search the home directory for OGG and MP3 files", "output": "find $HOME -iname '*.ogg' -o -iname '*.mp3'"}
{"input": "Find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree", "output": "find  /root -type f -iname \"*linux*\""}
{"input": "Execute \"dropbox-cli status\" every second", "output": "watch -n1 dropbox-cli status"}
{"input": "Find all hidden files", "output": "find /tmp -type f -name \".*\""}
{"input": "Find all files under /mountpoint and below which have hard links", "output": "find /mountpoint -type f -links +1"}
{"input": "Copies file '/boot/config-`uname -r`' to the  '.config', printing info message and prompting before owerwriting files.", "output": "cp -vi /boot/config-`uname -r` .config"}
{"input": "find all the html files that are acces in the last 24 hours in the current folder", "output": "find . -mtime 1 -name \"*.html\" -print"}
{"input": "Save the first three octets of the current host's IP address to variable \"local\"", "output": "local=$(hostname -I | awk '{print $2}' | cut -f1,2,3 -d\".\")"}
{"input": "Find all your text files and page through them", "output": "find . -name \"*.txt\" -print | less"}
{"input": "Print the file paths and their sizes for all files under full_path_to_your_directory", "output": "find full_path_to_your_directory -type f -printf '%p %s\\n'"}
{"input": "Allocate a pseudo-terminal and execute \"screen -r\" on host \"example.com\"", "output": "ssh -t example.com \"screen -r\""}
{"input": "Locate all *.txt files in the current directory tree", "output": "find . -name '*.txt"}
{"input": "Find all SUID set files in the file system", "output": "find / -perm /u=s"}
{"input": "Search the current directory tree for symbolic links named \"link1\"", "output": "find . -type l -name link1"}
{"input": "Counts the total number of lines in all the files in a git repository.", "output": "git ls-files | xargs cat | wc -l"}
{"input": "Replace all non-punctuation characters with newlines from standard input", "output": "tr -sc '[:punct:]' '\\n'"}
{"input": "copy the file header.shtml to those dirs", "output": "find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \\;"}
{"input": "Prevent ssh from reading from standard input and execute \"touch /home/user/file_name.txt\" on \"$R_HOST\" as \"$R_USER\"", "output": "ssh -n $R_USER@$R_HOST 'touch /home/user/file_name.txt'"}
{"input": "Print the basename from a colon separated path 'a:b:c:d:e'", "output": "basename $(echo \"a:b:c:d:e\" | tr ':' '/')"}
{"input": "find all the regular/normal files in the current directory and print them skip searching all the directories in the current folders.", "output": "find * -type f -print -o -type d -prune"}
{"input": "Print the list of all subdirectories of the current directory", "output": "find . -maxdepth 1 -mindepth 1 -type d"}
{"input": "search for the regular/normal file 'myfile' in the folder /root excluding those that are present in the /root/work directory", "output": "find /root/ -path '/root/work' -prune -o -name myfile -type f -print"}
{"input": "use find -exec with multiple commands regardless of their success or failure", "output": "find . -name \"*.txt\" \\( -exec echo {} \\; -o -exec true \\; \\) -exec grep banana {} \\;"}
{"input": "Counts non-blank lines (lines with spaces are considered blank) in all *.py files in a current folder.", "output": "grep -v '^\\s*$' *.py | wc"}
{"input": "Find all *.txt files/directories under current directory", "output": "find . -name '*.txt'"}
{"input": "Find all directories in directory tree `httpdocs'", "output": "find httpdocs -type d"}
{"input": "Remove all \"work\" directories residing in /usr/ports and below", "output": "find /usr/ports/ -name work -type d -print -exec rm -rf {} \\;"}
{"input": "Send text \"spawn daemon\" and a newline character to the screen session", "output": "screen -r user -X stuff \"spawn daemon$(printf \\\\r)\""}
{"input": "Rename all files in current directory to lowerase, overwriting any existing files.", "output": "rename -f 'y/A-Z/a-z/' *"}
{"input": "find all text files in current folder and trim the extra spaces in all lines in these files", "output": "find . -type f -name '*.txt' -exec sed --in-place 's/[[:space:]]\\+$//' {} \\+"}
{"input": "Look for files with wide open permissions", "output": "find . -type f  -perm 777 -exec ls -l {} \\;"}
{"input": "Find all files/directories under current directory and print their paths", "output": "find . -exec echo {} \\+"}
{"input": "Execute script /tmp/echoargs on all files from the /tmp/foo directory tree", "output": "find /tmp/foo -exec /tmp/echoargs {} \\;"}
{"input": "Remove \"\\n\" from \"test1\\ntest2\\ntest3\" and search for \"test1.*test3\"", "output": "echo -e \"test1\\ntest2\\ntest3\" |tr -d '\\n' |grep \"test1.*test3\""}
{"input": "Treat each line of \"list-of-entries.txt\" as a value to be put in one cell of the table that \"column\" outputs", "output": "column list-of-entries.txt"}
{"input": "Recursively change the owner and group of \"~/.ssh/\" to \"dev_user\"", "output": "chown \"dev_user\".\"dev_user\" -R ~/.ssh/"}
{"input": "find all files in current folder having the name pattern \"some_pattern\" and move them to folder target_location (GNU VERSION)", "output": "find . -name some_pattern -print0 | xargs -0 -I % mv % target_location"}
{"input": "Find and copy all log files in the current directory tree to /tmp/log-files", "output": "find . -name \\*.log -print0 | xargs -I{} -0 cp -v {} /tmp/log-files"}
{"input": "Write contents of \"/sys/kernel/debug/tracing/trace_pipe\" to standard output and to \"tracelog.txt\" executing as a root user", "output": "sudo cat /sys/kernel/debug/tracing/trace_pipe | tee tracelog.txt"}
{"input": "find the count of all the charcters of the list of regular files present in the current folder", "output": "find . -type f | xargs | wc -c"}
{"input": "Search the files in the current directory tree that are named \"string to be searched\" for \"text\"", "output": "find . -name \"string to be searched\" -exec grep \"text\" \"{}\" \\;"}
{"input": "Prints long recursive listing of all content of a current folder, saving output to 'output.file'.", "output": "ls |& tee files.txt"}
{"input": "Remove files that are greater than 1MB in size under <directory>", "output": "find <directory> -type f -size +1M -delete"}
{"input": "Convert all characters in standard input to lower case", "output": "sed 's/.*/\\L&/'"}
{"input": "Search the current directory tree for all regular files matching pattern \"*.rb\"", "output": "find . -name \"*.rb\" -type f"}
{"input": "display all the html files in the current folder that have been modified in the last 7*24 hours", "output": "find . -mtime -7 -name \"*.html\" -print"}
{"input": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories", "output": "find . -name foo.mp4 -printf '%h\\n'"}
{"input": "find all  *.csv files which  modify within last 2 days in /home directory then zip ( archive )-", "output": "find /home/archive -type f -name \"*.csv\"  -mtime -2 -exec gzip -9f {} \\;"}
{"input": "display all regular files in the folder image-folder", "output": "find image-folder/ -type f"}
{"input": "Get the total sizes of all files under current directory", "output": "find . -type f -printf '%p %s\\n'  | awk '{sum+=$NF}END{print sum}'"}
{"input": "Find all files/directores under /etc filter them by searching for 'test' in their name and run the file command on each of them", "output": "find /etc -print0 | grep -azZ test | xargs -0 file"}
{"input": "Rename the *.so files at level 2 of the current directory tree prepending their names with \"lib\"", "output": "find . -mindepth 2 -maxdepth 2 -name \"*.so\" -printf \"mv '%h/%f' '%h/lib%f'\\n\" | sh"}
{"input": "Recursively change owner to \"www-data\" of \"/var/www/.gnome2\", \"/var/www/.config\", and \"/var/www/.config/inkscape\"", "output": "chown -R www-data /var/www/.gnome2 /var/www/.config /var/www/.config/inkscape"}
{"input": "Remove all files and directories in the current directory by answering with \"y\" to all prompts", "output": "yes | /bin/rm -i *"}
{"input": "Dry run making directories in \"/TARGET_FOLDER_ROOT/\" for each \".mov\" file in the current directory tree", "output": "find . -type f -iname \\*.mov -printf '%h\\n' | sort | uniq | xargs -n 1 -d '\\n' -I '{}' echo mkdir -vp \"/TARGET_FOLDER_ROOT/{}\""}
{"input": "find all the jpg files in the entire file system and discard all the errors.", "output": "find / -name *.jpg 2>/dev/null"}
{"input": "Find all 2*.data files/directories under jcho directory", "output": "find jcho -name 2*.data"}
{"input": "search for the file \"dok.txt\" in the kat folder and if it sis present then print the echo statement", "output": "find kat -name dok.txt -exec bash -c 'echo -e \"\\nAutor: Jan Kowalski\" >> {}' \\;"}
{"input": "Run an awk program on every TXT file found in the current directory tree", "output": "find . -name \"*.txt\" -print -exec awk '{if($9!=\"\"&&n<11){print;n++}}' {} \\;"}
{"input": "find files in home directory that names are game", "output": "find ~ -name game"}
{"input": "create the compressed tar archive images.tar.gz containing all jpg files found under /", "output": "find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz"}
{"input": "Display only line numbers listed in 'file_of_line_numbers\" from file 'source'.", "output": "sed 's/$/p/' file_of_line_numbers | sed -nf - source"}
{"input": "Find all build* directories under /var/www/html/ and reverse sort them", "output": "find /var/www/html/ -type d -name \"build*\" | sort -r"}
{"input": "Print canonical filename of \"/path/there/../../\" even if it does not exist", "output": "readlink -m /path/there/../../"}
{"input": "Rename \"www_new\" to \"www\" even if \"www\" directory exists", "output": "mv -T www_new www"}
{"input": "recursively change owner and group of the directory /your/directory/to/fuel/ and all files into it to user and group nginx", "output": "chown nginx:nginx /your/directory/to/fuel/ -R"}
{"input": "Find all directories starting from root that contain the string \"99966\" in their names", "output": "find / -type d -name \"*99966*\" -print 2>/dev/null"}
{"input": "Lists all top-level files in a '/home/dreftymac/' folder.", "output": "ls /home/dreftymac/"}
{"input": "Find all *.bmp files in the current directory tree and convert them to the JPEG format", "output": "find -name *.bmp -type f -exec convert '{}' '{}'.jpg \\;"}
{"input": "start from current directory, skip the directory src/emacs and all files and directories under it, and print the names of the other files found", "output": "find . -wholename './src/emacs' -prune -o -print"}
{"input": "Grab the output of \"basename\" (in this case \"stuff\") and echo it to stdout, which basename would do by default anyway.", "output": "echo $(basename /foo/bar/stuff)"}
{"input": "Find all SUID set files under current directory and show a few lines of output from the beginning", "output": "find . -perm /u=s | head"}
{"input": "Print the current shell", "output": "ps -p $$ | tail -1 | awk '{print $NF}'"}
{"input": "Find files/directories named 'foo.bar' in the root filesystem partition", "output": "find / -name foo.bar -print -xdev"}
{"input": "find all the files in the file system whcih have been modified in the last 1 day", "output": "find / -mtime -1"}
{"input": "Print the filenames taken by the glob pattern * with null character as the delimiter", "output": "find * -maxdepth 0 -type d -print0"}
{"input": "Display the entire file system in a tree-like format", "output": "tree /"}
{"input": "Copy all \".php\" files in \"projects/\" directory tree to \"copy/\" preserving directory hierarchy", "output": "find projects/ -name '*.php' -print | cpio -pdm copy/"}
{"input": "Adjust the timestamp of file $filename by subtracting 2 hours from it", "output": "touch -d \"$(date -r \"$filename\") - 2 hours\" \"$filename\""}
{"input": "Print a count of duplicate lines in \"filename\" sorted by most frequent", "output": "sort filename | uniq -c | sort -nr"}
{"input": "Search the current directory recursively for regular files, skipping hidden files in the current directory", "output": "find * -type f -print"}
{"input": "Find all files under current directory, calculate their md5sum and print each of the hash and file name to filename-hash.md5 files", "output": "find . -type f | while read f; do g=`md5sum $f | awk '{print $1}'`; echo \"$g $f\"> $f-$g.md5; done"}
{"input": "find in the entire file system for the file mysql", "output": "sudo find / -name mysql -print"}
{"input": "search for all the mp3 files in the file system and move them to the folder /mnt/mp3", "output": "find / -iname \"*.mp3\" -exec mv {} /mnt/mp3 \\;"}
{"input": "Count number of lines for each file containing ASCII text under git repository.", "output": "git ls-files | xargs file | grep \"ASCII\" | cut -d : -f 1 | xargs wc -l"}
{"input": "Find all the files in entire file system which are greater than 50MB and less than 100MB.", "output": "find / -size +50M -size -100M"}
{"input": "find Texinfo source files in /usr/local/doc", "output": "find /usr/local/doc -name '*.texi'"}
{"input": "Find all files owned by the user daniel in the current directory and below.", "output": "find . -user daniel"}
{"input": "Set shell option 'dotglob'.", "output": "shopt -s dotglob"}
{"input": "Change mode of all files ending with \".php\" under the current folder to 755 and write the output to the console and \"logfile.txt\" file", "output": "find . -name '*.php' -exec chmod 755 {} \\; | tee logfile.txt"}
{"input": "Split \"file\" into 10 files of about equal size without splitting lines", "output": "split -n l/10 file"}
{"input": "Run `command' passing the files from the current directory tree as arguments", "output": "find . -exec command {} +"}
{"input": "Exit the shell on the first error encountered", "output": "set -o errexit"}
{"input": "Print a list of all duplicate case insensitive filenames in the current directory tree", "output": "find . -type f | awk -F/ '{print $NF}' | sort -f | uniq -i -d"}
{"input": "display top 11 files along with the last access date for all the files in the file system", "output": "find / -type f -printf \"\\n%AD %AT %p\" | head -n 11"}
{"input": "Find files under /usr that are newer than the first file `FirstFile'", "output": "find /usr -newer /usr/FirstFile -print"}
{"input": "get info about \"lbzip2\\|plzip\\|pigz\" from tar command", "output": "tar --help | grep \"lbzip2\\|plzip\\|pigz\""}
{"input": "Archive any files changed in the last day from \"remote_host\" to \"local_dir\"", "output": "rsync -av remote_host:'$(find logs -type f -ctime -1)' local_dir"}
{"input": "search for all mp3 files in the folder /home/you which have been accessed exactly 10*24 hours ago", "output": "find /home/you -iname \"*.mp3\" -atime 10 -type -f"}
{"input": "Make directorie(s) 'es/LC_MESSAGES' as needed in the current directory", "output": "mkdir -p es/LC_MESSAGES"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn -exec rm -rf '{}' \\;"}
{"input": "Prints process tree of a process having id $ID with parent processes.", "output": "pstree -s $ID"}
{"input": "Find all files in the current directory tree whose names begin with '-'", "output": "find . -name '[-]*'"}
{"input": "Replace \"string1\" with \"string2\" in all regular files in the current directory tree", "output": "find ./ -type f -exec sed -i 's/string1/string2/g' {} \\;"}
{"input": "Display summary of each specified file in human readable form", "output": "du --summary --human-readable *"}
{"input": "Copy all files/directories excluding *.flac files under current directory to /media/wd/network_sync/music directory", "output": "find . -type f -iname \"*.flac\" -o -print0 -iname \"*.mp3\" -print0 -o -iname \"*.wav\" -print0 -o -iname \"*.aac\" -print0 -o -iname \"*.wma\" -print0 | while read -d $'\\0' file; do cp -ruv \"$file\" \"/media/wd/network_sync/music/$file\"; done"}
{"input": "Delete all directories in the TBD directory that were modified more than 1 day ago", "output": "find /TBD -mtime +1 -type d | xargs rm -f -r"}
{"input": "Rotates the dirs stack so that the second directory (counting from the right of the list shown by `dirs', starting with zero) is at the top.", "output": "pushd -2"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory", "output": "find /home -type f -name \"*.ext\" -exec perl -pi -e 's/\\r//g' {} \\;"}
{"input": "Print the first line of output after alphabetically sorting the file \"set\"", "output": "head -1 <(sort set)"}
{"input": "Search for the query \"filename\" in the current directory and any subdirectories", "output": "find -iname \"filename\""}
{"input": "Move all files from the current directory to \"targetdirectory\"", "output": "find . ! -name . -prune -exec sh -c 'shift $1; mv \"$@\" targetdirectory/' 2 1 {} +"}
{"input": "Create a symbolc link in the current directory to \"target\"", "output": "ln -s target"}
{"input": "display the name of all directories in the current folder and do not search in sub directories ( mindepth ensures that the current folder name is removed from the output)", "output": "find . -type d -maxdepth 1 -mindepth 1 -exec basename {} \\;"}
{"input": "find the type of all the regular/normal files in the current folder (plus takes bulk of files as input to the file command)", "output": "find . -type f -exec file {} \\+;"}
{"input": "Set trace prompt to print seconds.nanoseconds", "output": "PS4='+ $(date \"+%s.%N\")\\011 '"}
{"input": "Generate the Spanish alphabet and number each character", "output": "echo -e {{a..n},\u00f1,{o..z}}\"\\n\" | nl"}
{"input": "Find all files in $dir directory without going into sub-directories and print only their names preceded by 3 spaces", "output": "find \"$dir\" -maxdepth 1 -type f | sed 's#.*/#   #'"}
{"input": "Find all Read Only files", "output": "find / -perm /u=r"}
{"input": "Find all files/directories named 'java' under /usr directory", "output": "find /usr -name java"}
{"input": "find all the files in the current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60"}
{"input": "check the previous alias in current list", "output": "alias | grep my_previous_alias"}
{"input": "Print a list of regular files from directory tree sort_test/ sorted with LC_COLLATE=C", "output": "find sort_test/ -type f | env -i LC_COLLATE=C sort"}
{"input": "Find all files newer than httpd.conf under and below the current directory", "output": "find . -newer httpd.conf"}
{"input": "Find all files under current directory whose file type description contains \"image\", display only path to each file.", "output": "find . -type f -exec file {} \\; | grep -o -P '^.+: \\w+ image'"}
{"input": "Search the current directory recursively for MOV files", "output": "find . -iname *.mov"}
{"input": "Remove trailing spaces from all files under current directory and keep backups of the originals", "output": "find . -type f -print0 | xargs -0 perl -pi.bak -e 's/ +$//'"}
{"input": "count the total number of lines that are present in all the normal/regular files", "output": "find . -type f -exec wc -l {} \\; | awk '{total += $1} END{print total}'"}
{"input": "Remove the .jpg files from the current directory whose names match regular expression \".+-[0-9]+x[0-9]+\\.jpg\"", "output": "find . -type f -regex \".+-[0-9]+x[0-9]+\\.jpg\" -exec rm -rf {} \\;"}
{"input": "Show all values (without the names) of variables whose name or value contains \"VARIABLE_NAME\"", "output": "myVariable=$(env  | grep VARIABLE_NAME | grep -oe '[^=]*$');"}
{"input": "find all directories with the name test in a directory", "output": "find /home/john -type d -name test -print"}
{"input": "List all files under current directory with their paths and sizes", "output": "find . -type f |xargs ls -lS |head -20 | awk '{print $9, $5}'"}
{"input": "Search for case insensitive pattern 'search for me' in all files that match the name pattern '*.[!r]*' under current directory tree", "output": "find . -name \"*.[!r]*\" -exec grep -i -l \"search for me\" {} \\;"}
{"input": "find *.gif files under the currently directory and sub-directories and list them using the ls command", "output": "find . -name *.gif -exec ls {} \\;"}
{"input": "Recursively finds all *.txt files and prints strings with \"text_pattern\" ignoring text distincts.", "output": "find . -name \"*.txt\" | xargs grep -i \"text_pattern\""}
{"input": "Finds IP address of 'eth0' network interface.", "output": "ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -F ':' '{print $2}'"}
{"input": "Search the current directory for all regular files executable by 'user', 'group', and 'others'", "output": "find . -maxdepth 1 -type f -perm -ugo=x"}
{"input": "Find all regular files that reside in the current directory tree and were last modified at least 1 day ago", "output": "find . -type f -mtime +0"}
{"input": "Print position number of day '9' in fourth line of calendar output for September, 2009.", "output": "cal 09 2009 | awk '{day=\"9\"; if (NR==4) {col=index($0,day); print col } }'"}
{"input": "Find all files under current directory and change their permission to 400", "output": "find . -type f -exec chmod 400 {} \\;"}
{"input": "Find files associated with an inode", "output": "find . -inum 968746 -exec ls -l {} \\;"}
{"input": "Print the first 2 lines of tree's help message by redirecting it from standard error to standard output", "output": "tree --help |& head -n2"}
{"input": "list all names of the aliases", "output": "alias | awk '/^alias /{print substr($2,1,index($2,\"=\")-1)}'"}
{"input": "Print name of the block device containing the file system containing $path.", "output": "df -P \"$path\" | awk 'BEGIN {FS=\"[ ]*[0-9]+%?[ ]+\"}; NR==2 {print $1}'"}
{"input": "Display the contents of \"sample_0001.gz\" with \"lk=1&\" removed", "output": "zcat sample_0001.gz | sed -e 's/lk=1&//g'"}
{"input": "get the jenkins user access", "output": "sudo su - jenkins"}
{"input": "Saves printed calendar of February,1900 in positional variables.", "output": "set -- $(cal 2 1900)"}
{"input": "Find all regular files under current directory tree whose names end with 'cache' or 'xml' or 'html'", "output": "find . -type f \\( -name \"*cache\" -o -name \"*xml\" -o -name \"*html\" \\)"}
{"input": "Search \"file1\" for lines matching regex patterns listed in \"file2\" and list the unique results (sorted alphabetically)", "output": "grep -f file2 file1 | sort | uniq"}
{"input": "Find all files with '.jpg' extension in the current directory ignoring sub-directories and archive them to a file named jpeg.tgz", "output": "find . -maxdepth 1 -iname \"*.jpg\" | xargs tar -czvf jpeg.tgz"}
{"input": "Find all *.cgi files/directories under current directory and change their permission to 775", "output": "find . -name '*.cgi' -print0 | xargs -0 chmod 775"}
{"input": "Lists content of all subfolder (without recursion) in a current folder.", "output": "ls -d -1 $PWD/**/*"}
{"input": "Search all files called \"abc\" that reside in the current directory tree for string \"xyz\"", "output": "find . -name \"abc\" -exec grep \"xyz\" {} \\;"}
{"input": "search for text files in the current folder which do not have write access to others", "output": "find . -type f \\( -iname \"*.txt\" -not -perm -o=w \\)"}
{"input": "List files/directories at least three levels down the directory tree", "output": "find / -mindepth 3  -name \"*log\""}
{"input": "search in the current folder for all the directories with the name \"test\"", "output": "find . -type d -name test"}
{"input": "Locate files not owned by any user or group", "output": "find / -path /proc -prune -o -nouser -o -nogroup"}
{"input": "Change onwer of \"file\" to \"user_name\"", "output": "chown user_name file"}
{"input": "Find all files/directories with execute permission by group or others", "output": "find /path -perm /011"}
{"input": "Copy the file foo.sh into /tmp of the docker container", "output": "tar -c foo.sh | docker exec -i theDockerContainer /bin/tar -C /tmp -x"}
{"input": "Recursively change \"/usr/local\" owner to the current user and group to admin", "output": "sudo chown -R $(whoami):admin /usr/local"}
{"input": "Search all Python files in the current directory tree for string \"import antigravity\"", "output": "find . -name \"*.py\" | xargs grep 'import antigravity'"}
{"input": "download content from \"http://example.com/textfile.txt\" and output to \"textfile.txt\"", "output": "curl http://example.com/textfile.txt -o textfile.txt"}
{"input": "search for files that are readable for everybody, have at least on write bit set but are not executable for anybody", "output": "find . -perm -a+r -perm /a+w ! -perm /a+x"}
{"input": "Convert \"some random\\nbytes\" to \"%\" separated hexadecimal byte values", "output": "echo -ne 'some random\\nbytes' | xxd -plain | tr -d '\\n' | sed 's/\\(..\\)/%\\1/g'"}
{"input": "find all the files in the home folder which are empty (Size 0 bytes)", "output": "find ~ -empty"}
{"input": "find all the files in the current folder which end with \"ext1\" or \"ext2\" or \"ext3\"", "output": "find -E . -regex \".*ext1|.*ext2|.*ext3\""}
{"input": "Find and delete all hard links in the /home directory tree to file1", "output": "find /home -xdev -samefile file1 | xargs rm"}
{"input": "Read a line from standard input into variable \"REPLY\" with prompt \"$1 ([y]es or [N]o): \"", "output": "read -p \"$1 ([y]es or [N]o): \""}
{"input": "Find all *.java files under current directory", "output": "find . -name \"*.java\""}
{"input": "Unzip and write \"backup.img.gz\" to \"/dev/sdb\"", "output": "cat backup.img.gz | gunzip | dd of=/dev/sdb"}
{"input": "Search the file system for regular files whose names are shorter than 25 characters", "output": "find / -type f | egrep '.*/.{1,24}$'"}
{"input": "Remove all regular files from the current directory tree whose names do not end with \"ignore1\" or \"ignore2\"", "output": "find . -type f -not -name '*ignore1' -not -name '*ignore2' | xargs rm"}
{"input": "Find all symbolic links containg 'vim' in their names under '/usr/bin' directory tree", "output": "find /usr/bin -name '*vim*' -type l"}
{"input": "Delete all non digits from index \"$i\" in bash array \"depsAlastmodified\" and print the hex dump as characters", "output": "echo \"${depsAlastmodified[$i]}\" | tr -cd '[[:digit:]]' | od -c"}
{"input": "save the list of all the core files in the entire file system which belong to the group mycomp to the file \"mycompcore\" and delete them", "output": "find / -name core -group mycomp -print -exec rm -f {} \\; >> mycompcore"}
{"input": "display all files in the current folder after pruning those in the current folder ( dot is the output of this command )", "output": "find . -prune -print"}
{"input": "Represent current date in RFC 3339 format with precision to seconds and save it to 'timestamp' variable", "output": "timestamp=`date --rfc-3339=seconds`"}
{"input": "reverses order of lines in a.txt and saves them to b.txt", "output": "tac a.txt > b.txt"}
{"input": "List directories in the current working directory and remove the trailing \"/\"", "output": "ls -1p | grep '/$' | sed 's/\\/$//'"}
{"input": "Find and replace xxx with yyy in whole directory tree", "output": "find . -type f -exec perl -pi -e 's|xxx|yyy|g' {} ;"}
{"input": "Find all the files which are accessed 50 days back", "output": "find / -atime 50"}
{"input": "display all the \".mov\" video files in the current folder in the format filename and folder path", "output": "find . -iname \"*.mov\" -printf \"%p %f\\n\""}
{"input": "Execute COMMAND for all files and directories under the current directory tree", "output": "find . -print0 | xargs -0 COMMAND"}
{"input": "Find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command", "output": "find -maxdepth 1 -name '*.sql' -exec cat '{}' \\; | sed -e 's/ , );/1,1);/g' | mysql -D ootp"}
{"input": "find all files with pattern` '*.mp3'", "output": "find / -name *.mp3"}
{"input": "Print fourth column of space-separated data from text file text.txt.", "output": "cat text.txt | cut -d \" \" -f 4"}
{"input": "Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.", "output": "ls -hal /root/ | sudo tee /root/test.out"}
{"input": "Find all files/directories named 'pattern' under current directory tree", "output": "find . -name \"pattern\" -print"}
{"input": "Read a line from standard input and save each word in the bash array variable \"arr\"", "output": "read -a arr"}
{"input": "Execute all commands in \"commands-to-execute-remotely.sh\" on server \"blah_server\"", "output": "cat commands-to-execute-remotely.sh | ssh blah_server"}
{"input": "find all the files in the entire file system which have been modified in the last 5 days", "output": "find / -mtime -5 -print"}
{"input": "display the version of find command", "output": "find -version"}
{"input": "Removes all files from current folder but 5 newest ones.", "output": "ls -C1 -t| awk 'NR>5'|xargs rm"}
{"input": "Decompress and sort \"$part0\" and \"$part1\" of files in different processes", "output": "sort -m <(zcat $part0 | sort) <(zcat $part1 | sort)"}
{"input": "Search file aaa from current direcoty downwards and print it .", "output": "find . -name aaa -print"}
{"input": "Lists all files in a current folder, separating names with comma.", "output": "ls | perl -F'\\n' -0777 -anE 'say join \",\", @F'"}
{"input": "Print the grand total disk usage of all files listed in \"files.txt\"", "output": "cat files.txt | xargs du -c | tail -1"}
{"input": "Synchronize \"/path/to/dir_b\" with files in \"/path/to/dir_a/\" if the files are newer", "output": "rsync -rtuv /path/to/dir_a/* /path/to/dir_b"}
{"input": "List the last modified file under \"$DIR\"", "output": "find $DIR -type f -printf \"%T@ %p\\n\" | sort -n | cut -d' ' -f 2 | tail -n 1"}
{"input": "Count all the lines of all files with names ending with 'php' in current directory recursively", "output": "find -name '*php' | xargs cat | wc -l"}
{"input": "display all directories in current folder and do not search in sub directories", "output": "find . -maxdepth 1 -mindepth 1 -type d"}
{"input": "Run 'git pull' in every git repository in the current directory", "output": "find . -type d -name .git -exec sh -c \"cd \\\"{}\\\"/../ && pwd && git pull\" \\;"}
{"input": "Search for files/directories that are readable for everybody, have at least one write bit set but are not executable for anybody", "output": "find . -perm -444 -perm /222 ! -perm /111"}
{"input": "Print the characters in $b that match with any character in $a without printing any whitespace in-between", "output": "echo \"$b\" | grep --only-matching \"[$a]\" | xargs | tr --delete ' '"}
{"input": "find all instances of a file in the current folder and create a backup of it in the floppy", "output": "find . -name nameoffile -print | cpio -iv > /dev/fd0"}
{"input": "switch to user username", "output": "su username"}
{"input": "create a soft link of the files in the folder /media/movies which have been modified in the last 30 days", "output": "find /media/Movies -type f -mtime -30 -exec ln -s {} /media/Movies/New/ \\;"}
{"input": "Find all *.plist files/directories under current directory", "output": "find ./ -name \"*.plist\""}
{"input": "Print the files in the current directory as a list of comma separated values", "output": "ls -1 | tr '\\n' ',' | sed 's/,$/\\n/'"}
{"input": "Find all files/directories under current directory in maximum 3 levels deep", "output": "find -maxdepth 3"}
{"input": "Make a new directory \"new-dir\" in every directory in the current directory tree", "output": "find . -type d | xargs -I \"{x}\" mkdir \"{x}\"/new-dir"}
{"input": "Delete all files named '-F' under current directory tree", "output": "find . -name \"-F\" -exec rm {} \\;"}
{"input": "Find all php files in current directory and delete lines matching the regex '<\\?php \\/\\*\\*\\/eval(base64_decode(.*));.*\\?>' in those files", "output": "find . \\( -name \"*.php\" \\) -exec grep -Hn \"<\\?php /\\*\\*/eval(base64_decode(.*));.*\\?>\" {} \\; -exec sed -i '/<\\?php \\/\\*\\*\\/eval(base64_decode(.*));.*\\?>/d' {} \\;"}
{"input": "display the names without extensions of all the data files in current folder which have not been changed in the last 60 mins", "output": "find . -prune -name \"*.dat\"  -type f -cmin +60 |xargs -i basename {} \\;"}
{"input": "find all the regular/normal files in the /path folder and delete them", "output": "find /path -type f -print0 | xargs -0 rm"}
{"input": "recursively look for files ending in either .py or .py.server", "output": "find . -type f -regex \".*\\.\\(py\\|py\\.server\\)\""}
{"input": "Print the second line of output of \"ls -l\"", "output": "ls -l | tail -n +2 | head -n1"}
{"input": "get second-to-last comma-separated field of each line in file.txt", "output": "cat file.txt | rev | cut -d ',' -f 2 | rev"}
{"input": "change the permissions of all the regular files in the current folder", "output": "find . -type f -exec chmod 500 {} ';'"}
{"input": "Recursively removes all empty folders under current folder.", "output": "find . -depth -type d -empty -exec rmdir {} \\;"}
{"input": "Find files ending in \"f\"", "output": "find .  -path '*f'"}
{"input": "Rename all *.jpg files to *_LRG.jpg files under temp/large directory", "output": "find temp/large -iname \"*.jpg\" -printf 'mv %p %p\\n' | sed 's/\\.jpg$/_LRG\\.jpg/' | while read l; do eval $l; done"}
{"input": "Remove all non-hidden files in the current directory tree", "output": "find -name \"*\" | xargs rm -f"}
{"input": "Create symbolic links in current directory for all files located in \"dir\" directory and have filename extension \"jpg\"", "output": "find dir -name '*.jpg' -exec ln -s \"{}\" \\;"}
{"input": "find  directory which case-insensitive name is too in currect directory", "output": "find . -iname foo -type d"}
{"input": "Count the number of users logged in minus one", "output": "who | sed 1d | wc -l"}
{"input": "Find all files/directories under $1 which have at least execute permission for their owner and set execute permission for group for these files/directories", "output": "find $1 -perm -u+x -exec chmod g+x {} \\;"}
{"input": "List all regular files in the current directory tree modified within the last 24 hours", "output": "find . -mtime 0 -type f -ls"}
{"input": "List all files in current directory whose name or file type description contains the word \"ASCII\".", "output": "file * | grep ASCII"}
{"input": "Convert symlink to regular file", "output": "find . -type l | while read f; do /bin/cp -rf --remove-destination -f $(find . -name $(readlink \"${f}\")) \"${f}\";done;"}
{"input": "Archive \"/var/www/test/\" to \"/var/www/test\" on host \"231.210.24.48\" as user \"ubuntu\" via ssh using identity file \"/home/test/pkey_new.pem\"", "output": "rsync -rave \"ssh -i /home/test/pkey_new.pem\" /var/www/test/ ubuntu@231.210.24.48:/var/www/test"}
{"input": "Print the contents of all file* files under current directory", "output": "perl -ple '' `find . -name \"file*\"`"}
{"input": "search for a word in all the php files in the current folder and display the count of all matching lines.", "output": "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\+ | wc -l"}
{"input": "Extract the second-to-last slash-separated path component, ie. \"90_2a5\" in this case.", "output": "echo 'test/90_2a5/Windows' | xargs dirname | xargs basename"}
{"input": "Copy all .pdf files in the ./work/ directory tree with size bigger then 2 MB and modified more than 5 days ago to the ./backup/ directory", "output": "find ./work/ -type f -name \"*.pdf\" -mtime +5 -size +2M  | xargs -r cp -t ./backup/"}
{"input": "Search the current directory tree for files and directories with permissions 775", "output": "find .  -perm 775 -print"}
{"input": "Search all files in the current directory tree whose names contain \".\" for \"SearchString\"", "output": "find . -name '*.*' -exec grep 'SearchString' {} /dev/null \\;"}
{"input": "Find all files/directories under current directory and print them with newline as the delimiter", "output": "find -print | xargs -d'\\n'"}
{"input": "Find recursively regular files in the current directory tree", "output": "find . -type f -print"}
{"input": "Pushes current folder to the directory stack.", "output": "pushd $(/bin/pwd)"}
{"input": "Print the character representations of 65 to 90", "output": "seq 65 90 | awk '{printf(\"%c\",$1)}'"}
{"input": "Find all .mp3 files starting from the current directory and delete them", "output": "find . -type f -iname *.mp3 -delete"}
{"input": "Find all files and directories under current directory without crossing over to other partitions", "output": "find . -xdev -print0"}
{"input": "Count the number of lines recursively in the current directory", "output": "find ./ -type f -exec wc -l {}  \\; | cut -d' ' -f1 | paste -sd+ | bc"}
{"input": "Calculate the md5 sum of \"logdir\" and print only the hash", "output": "echo -n \"logdir\" | md5sum - | awk '{print $1}'"}
{"input": "Print the files in the current directory as a list of comma separated values", "output": "ls -1 | tr '\\n' ','"}
{"input": "Set variable \"extract_dir\" to list of top-level directories and files contained in tar archive specified by variable FILE.", "output": "extract_dir=$(tar -tf $FILE | cut -d/ -f1 | uniq)"}
{"input": "Save the user name in all capitals of the current user to variable \"v\"", "output": "v=$(whoami | awk '{print toupper($0)}')"}
{"input": "search for a word in all the fies in the current folder", "output": "find . -type f -exec grep some_string {} \\;"}
{"input": "Find all symbolic links in the current directory tree", "output": "find -type l"}
{"input": "Find files under /etc/apache-perl that are modified more recently than /etc/apache-perl/httpd.conf", "output": "find /etc/apache-perl -newer /etc/apache-perl/httpd.conf"}
{"input": "Find files/directories with exactly read,write and execute permission for all (owner, group and others) under /path", "output": "find /path -perm ugo+rwx"}
{"input": "Find all the regular files under current directory tree that have not been modified in the last 31 days and delete them", "output": "find . -type f -mtime +31 -print0 | xargs -0 -r rm -f"}
{"input": "Add variable TESTVAR with value \"bbb\" to a temporary environment, and search for TESTVAR in all variables and their values in the resulting environment.", "output": "TESTVAR=bbb env | fgrep TESTVAR"}
{"input": "Find regular files under and below /path that match pattern \"???-???_[a-zA-Z]*_[0-9]*_*.???\"", "output": "find /path -type f -name \"???-???_[a-zA-Z]*_[0-9]*_*.???\""}
{"input": "list all js files under currect directory exculde the directory which path contain \"/path/to/search/exclude_me\" or name isexclude_me_too_anywhere", "output": "find /path/to/search                    \\   -type d                               \\     \\( -path /path/to/search/exclude_me \\        -o                               \\        -name exclude_me_too_anywhere    \\      \\)                                 \\     -prune                              \\   -o                                    \\   -type f -name '*\\.js' -print"}
{"input": "Set permissions to 700 for every subdirectory of the current directory", "output": "find . -mindepth 1 -type d -print0 | xargs -0 chmod -R 700"}
{"input": "display all the symbolic links in the current folder", "output": "find . -type l"}
{"input": "Find all broken symlinks in maximum 1 level down the $path directory", "output": "find -L $path -maxdepth 1 -type l"}
{"input": "Force decompress all files into '/etc'", "output": "gzip -d --force * /etc"}
{"input": "Creates temporary folder and saves path to it in a 'tempd' variable.", "output": "tempd=`mktemp -d`"}
{"input": "Interactively create a symbolic link in the current directory for \"$SCRIPT_DIR/$FILE\"", "output": "ln --symbolic --interactive $SCRIPT_DIR/$FILE"}
{"input": "display all normal/regular files in a folder", "output": "find /home/the_peasant -type f"}
{"input": "Compare the contents of gzip-ompressed files \"file1\" and \"file2\"", "output": "diff <(zcat file1.gz) <(zcat file2.gz)"}
{"input": "Archive all *.xml files under current directory tree to xml.tar excluding the files that match '/workspace/' in their paths", "output": "find . -name \\*.xml | grep -v /workspace/ | tr '\\n' '\\0' | xargs -0 tar -cf xml.tar"}
{"input": "Numerically sort file \"table\" by the fourth character of the second field, ignoring leading spaces", "output": "sort -b -n -k2.4 table"}
{"input": "find all the files in the current folder and search for the word \"vps admin\" in them.", "output": "find . -exec grep -i \"vds admin\" {} \\;"}
{"input": "find all the files in the current folder which have executable permission to all the users and display the ten files", "output": "find . -perm /a=x | head"}
{"input": "Compare \"fastcgi_params\" and \"fastcgi.conf\" line by line, output 3 lines of unified context, and print the C function the change is in", "output": "diff -up fastcgi_params fastcgi.conf"}
{"input": "Search the current directory for files whose names start with \"messages.\" ignoring SVN files", "output": "find \\( -name 'messages.*' ! -path \"*/.svn/*\" \\) -exec grep -Iw uint {} +"}
{"input": "Counts lines in each of *.php files in a current folder and subfolders and prints total count as well.", "output": "wc -l **/*.php"}
{"input": "Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the second and third dot.", "output": "echo \"$f\" | grep -Eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f3"}
{"input": "Print a summary of the command-line usage of find", "output": "find --help"}
{"input": "List all .c and .h files in the current directory tree that contain \"thing\"", "output": "find . -name '*.[ch]' | xargs grep -l thing"}
{"input": "List each unique case insensitive character in \"file\" prefixed by number of occurrences", "output": "grep -o . file | sort -f | uniq -ic"}
{"input": "Recursively change the owner group of \"/var/www\" of to \"www-data\"", "output": "sudo chown -R www-data:www-data /var/www"}
{"input": "find file which name like 'foo.*' in current directory.", "output": "find . -name \"foo.*\""}
{"input": "Set 644 permission to all regular files under /home/my/special/folder directory", "output": "chmod 644 `find /home/my/special/folder -type f`"}
{"input": "Search the current directory recursively for files with the exact permissions u=rwx,g=rx,o=rx", "output": "find . -perm a=rwx,g-w,o-w"}
{"input": "List (in long list format with inode number) the file under the current directory that has the oldest modification time", "output": "find . -type f -ls | sort +7 | head -1"}
{"input": "set alias \"prettify_json\" for command \"php -E '$o = json_decode($argn); print json_encode($o, JSON_PRETTY_PRINT);'\"", "output": "alias prettify_json=php -E '$o = json_decode($argn); print json_encode($o, JSON_PRETTY_PRINT);'"}
{"input": "Look for files in the current directory tree to which the group users have full access", "output": "find . -perm -070 -print"}
{"input": "Save a list of all 755 permission files/directories under $dir directory tree to the variable 'files'", "output": "files=\"$(find $dir -perm 755)\""}
{"input": "Set the permissions of all directories inside the current directory tree to u=rwx,g=rx,o=x", "output": "find . -type d -exec chmod u=rwx,g=rx,o=x {} \\;"}
{"input": "copy all the files with the extension \".type\" from one folder to a target directory", "output": "find \"$sourcedir\" -type f -name \"*.type\" -exec sh -c 'for f; do cp \"$f\" \"$0\"; done' \"$targetdir\" {} +"}
{"input": "show all the regular files in current folder", "output": "find . -type f -print0"}
{"input": "Find all the files recursively in directories or files taken from the glob pattern /tmp/test/* that have been modified today", "output": "find /tmp/test/* -mtime -0"}
{"input": "Find files in the current directory tree whose permissions are 775", "output": "find .  -perm 775"}
{"input": "Sort all files/directories under current directory according to modification time and print only the recent 7 of them", "output": "find -mindepth 1 -printf \"%T@ %P\\n\" | sort -n -r | cut -d' ' -f 2- | tail -n +7"}
{"input": "Find all *.java files under current directory and archive them to myfile.tar", "output": "find . -type f -name \"*.java\" | xargs tar rvf myfile.tar"}
{"input": "Find writable regular files in the current directory", "output": "find -type f -maxdepth 1 -writable"}
{"input": "Delete files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \\+"}
{"input": "Append *.java files from the current directory tree to tar archive `myfile.tar'", "output": "find . -type f -name \"*.java\" | xargs tar rvf myfile.tar"}
{"input": "Execute \"ls -l\" on host \"something\" as user \"root\"", "output": "ssh root@something 'ls -l'"}
{"input": "Delete all files that were modified more than 60 days ago under '/path-to-directory' tree", "output": "find /path-to-directory -mtime +60 -exec rm -f {} \\;"}
{"input": "print the last word in a.txt", "output": "tac a.txt | awk 'NF{print $NF; exit}'"}
{"input": "sort based on size and display top ten largest normal/regular files in the current folder", "output": "find . -type f -exec ls -s {} \\; | sort -n -r | head -10"}
{"input": "Find all files under current directory matching either of the patterns 'error.[0-9]*', 'access.[0-9]*', 'error_log.[0-9]*', 'access_log.[0-9]*', 'mod_jk.log.[0-9]*' in their names", "output": "find -type f -name 'error.[0-9]*' -o -name 'access.[0-9]*' -o -name 'error_log.[0-9]*' -o -name 'access_log.[0-9]*' -o -name 'mod_jk.log.[0-9]*'"}
{"input": "Remove all files with a txt extension under current directory", "output": "find . -type f -name \"*.txt\" | xargs    -i ksh -c \"echo deleting {}; rm {}\""}
{"input": "Find all regular files under current directory (no subdirectories) and replace every occurrences of 'toreplace' with 'replace' in those files", "output": "find . -maxdepth 1 -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g'"}
{"input": "Count the number of all directories under current directory non-recursively", "output": "find . -mindepth 1 -maxdepth 1 -type d | wc -l"}
{"input": "Find all *foo* files/directories under current directory and copy them to /your/dest", "output": "find . -name \"*foo*\" | sed -e \"s/'/\\\\\\'/g\" -e 's/\"/\\\\\"/g' -e 's/ /\\\\ /g' | xargs cp /your/dest"}
{"input": "Find all files/directories in current directory and execute the script itself with minimal invocation for those files/directories", "output": "find . -exec $0 {} +"}
{"input": "Search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory", "output": "find . -name \"$1\" -type f -print0 | xargs -0 grep -i \"$2\""}
{"input": "Prints help on 'yum' utility.", "output": "yum --help"}
{"input": "Remove all files that contain the word GUI in entire file system", "output": "find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f"}
{"input": "Search the current directory recursively for regular files last accessed less than 2 minutes ago", "output": "find . type -f -amin -2"}
{"input": "Find all directories under current directory excluding those which match the regex /\\. in their names", "output": "find . -type d | grep -v '/\\.'"}
{"input": "Prefix all files and folders in the current directory with \"PRE_\"", "output": "ls | xargs -I {} mv {} PRE_{}"}
{"input": "Print 'cp' commands that would copy a file xyz.c to all the files with '.c' extension present in the ./C directory and below", "output": "find ./C -name \"*.c\" | xargs -n1  echo cp xyz.c"}
{"input": "display all the regular/normal files in the current folder excluding the files \"bbb\" and \"yyy\"", "output": "find . \\( -name bbb -o -name yyy \\) -prune -o -type f -print"}
{"input": "Display the named characters in \"line1\\r\\nline2\"", "output": "echo -e \"line1\\r\\nline2\" | od -a"}
{"input": "display all directories in vim folder do not search in sub directories", "output": "find .vim/ -maxdepth 1 -type d"}
{"input": "Create a symbolic link in the current directory for each file under the directories matching \"../[12][0-9][0-9]\"", "output": "find ../[12][0-9][0-9][0-9] -type f -exec ln -s {} \\;"}
{"input": "display all the regular/ normal files in a folder", "output": "find src/js -type f"}
{"input": "Save the first \".\" separated field of the system host name to variable \"HOSTZ\"", "output": "HOSTZ=$( hostname | cut -d. -f1 )"}
{"input": "Find all the files whose name is tecmint.txt in the current directory", "output": "find . -name tecmint.txt"}
{"input": "Copies \"\"$project_dir\"/iTunesArtwork\", to the 'Payload/iTunesArtwork', rewriting files if necessary.", "output": "cp -f \"$project_dir\"/iTunesArtwork Payload/iTunesArtwork"}
{"input": "display all the files in current directory with each file name displayed twice in the same row", "output": "find . | sed 's/.*/& &/'"}
{"input": "Grab a gzipped text file from the web and display its decompressed content, interactively paging through the output.", "output": "curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less"}
{"input": "Print history with the first field removed", "output": "history | awk '{sub($1, \"\", $0); sub(/^[ \\t]+/, \"\", $0); print}'"}
{"input": "Print the path names of all .png files in the /home/kibab directory tree", "output": "find /home/kibab -name '*.png' -exec echo '{}' ';'"}
{"input": "Find files/directories that does not have write permssion for group or others", "output": "find /path ! -perm -022"}
{"input": "find all the files in the entire file system which belong to the group \"staff\"", "output": "find / -group staff -print"}
{"input": "display the number of lines in all the \".c\" files in the current folder", "output": "find . -name \"*.c\" -print | xargs wc -l"}
{"input": "Print the PIDs of the current user's instances of \"firefox\"", "output": "ps -u $(whoami) | grep firefox | awk '{printf $1}'"}
{"input": "Delete files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days", "output": "find \"$DIR_TO_CLEAN\" -mtime +$DAYS_TO_SAVE | while read FILE; do rm \"$FILE\"; done"}
{"input": "Compares two listings 'ls' and 'ls *Music*', showing only strings that unique for first listing.", "output": "comm -23 <(ls) <(ls *Music*)"}
{"input": "Find all files and directories on the system whose name is `filedir'", "output": "find / -name filedir"}
{"input": "run programm \"/home/oracle/database/runInstaller\" as user oracle in background", "output": "su oracle -c \"/home/oracle/database/runInstaller\" &"}
{"input": "Find all README's in /usr/share", "output": "find /usr/share -name README"}
{"input": "display all normal/regular files in current folder in sorted order", "output": "find . -type f print0 | sort -r"}
{"input": "Search for files bigger than 10M", "output": "find ~ -size +10M"}
{"input": "Make directories \"./es/es_MX.utf8/LC_MESSAGES\" as needed and do not error if it exists", "output": "mkdir --parents ./es_MX.utf8/LC_MESSAGES"}
{"input": "search the entire file system and save all the core file paths into a file", "output": "find / -name core -print | xargs echo > /tmp/core.log"}
{"input": "find all the directories in current folder which start with test", "output": "find . -type d -name \"test*\""}
{"input": "Add cron lists from \"filename\" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab.", "output": "crontab filename"}
{"input": "Search the current directory tree for regular files changed on the 10th of September", "output": "find ./ -type f -ls |grep '10 Sep'"}
{"input": "Find all directories in the current directory tree with \"music_files\" in their names", "output": "find . -type d -iname \\*music_files\\*"}
{"input": "Prints current month calendar, without highlighting of a current date.", "output": "cal -h"}
{"input": "Unzip all files matching \"/homes/ndeklein/mzml/*.gz\"", "output": "ls /homes/ndeklein/mzml/*.gz | xargs -I {} gunzip {}"}
{"input": "find & Substitute Only When the Line Matches with the Pattern Using sed", "output": "find . -type f -name \"*.txt\" -exec sed '/\\-/s /\\-.*//g'  {} \\;"}
{"input": "display all the files in current folder", "output": "find ."}
{"input": "find all the files in the file system which have been changed 1 minute ago.", "output": "find / -newerct '1\tminute ago' -print"}
{"input": "Print output of 'script -q /dev/null ./a' to standard output and \"output.txt\"", "output": "script -q /dev/null ./a | tee output.txt"}
{"input": "display long listing of top ten biggest regular/normal files in the folder /usr/share/man (discard errors during search)", "output": "find /usr/share/man/ -type f -exec ls -S {} + 2>/dev/null | head"}
{"input": "Make directory \"aaa\"", "output": "mkdir aaa"}
{"input": "Print unique lines in sorted file \"A\" when compared to sorted files \"B\", \"C\", and \"D\"", "output": "comm -2 -3 A B | comm -2 -3 - C | comm -2 -3 - D"}
{"input": "find all js files which path neither ./dir1 nor ./dir2", "output": "find . -name '*.js' -not \\( -path \"./dir1\" -o -path \"./dir2/*\" \\)"}
{"input": "Gets the groups these users belong to.", "output": "groups a b c d"}
{"input": "Check whether \"/full/path\" is a mount point with no output and using the exit code", "output": "df /full/path | grep -q /full/path"}
{"input": "Find all files that belongs to group Developer under /home directory", "output": "find /home -group developer"}
{"input": "Search all files called \"abc\" that reside in the current directory tree for string \"xyz\"", "output": "find . -name abc | xargs grep xyz"}
{"input": "find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir", "output": "find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +"}
{"input": "Remove the passphrase from ~/.ssh/id_rsa.", "output": "ssh-keygen -f ~/.ssh/id_rsa -P \"\""}
{"input": "display all the files in the current folder which contains form feed (^L) and does not contain NULL", "output": "find . | xargs grep -PL \"\\x00\" | xargs grep -Pl \"\\x0c\""}
{"input": "View history using \"vim\"", "output": "history | vim -"}
{"input": "Find files matching `.ssh*' and append their anmes to file `ssh-stuff'", "output": "find / -name .ssh* -print | tee -a ssh-stuff"}
{"input": "Find recursively all regular files in the current directory tree not ending in .dll or .exe", "output": "find . -type f | grep -vP \"\\.dll$|\\.exe$\""}
{"input": "Execute the ruby script \"genrc.rb\" which will output a filename, and interpret this file in the current shell.", "output": "source $(ruby genrc.rb)"}
{"input": "Delete all but the most recent 5 files", "output": "ls -tr | head -n -5 | xargs rm"}
{"input": "Find a size of only the target directory in MB format", "output": "du -s --block-size=M /path/to/your/directory/"}
{"input": "List all files under current directory with white space safety in their paths", "output": "find . -type f -print0 | xargs -0 ls"}
{"input": "Copy all files and directories in \"/home/\" to \"/newhome\" preserving directory hierarchy and modification time", "output": "find /home/ -maxdepth 1 -print | sudo cpio -pamVd /newhome"}
{"input": "find all files not ending in \".html\"", "output": "find . -type f -not -name \"*.html\""}
{"input": "Unset IFS and read a single character from standard input  with timeout of 0.01 seconds and save the response in variable \"keypress\"", "output": "IFS= read -t 0.01 -d '' -n1 keypress"}
{"input": "Print differences between files in directories folder1 and folder2 recursively, with unified context, ignoring changes in the amount of white space", "output": "diff -bur folder1/ folder2/"}
{"input": "Find every JavaScript file in the wordpress directory tree", "output": "find wordpress -name '*js'"}
{"input": "Mount \"tmpfs\" filesystem to \"/path/to/dir\"", "output": "mount none -t tmpfs /path/to/dir"}
{"input": "Add a number prefix followed by ')' to each line in \"$string\"", "output": "echo \"$string\" | nl -ba -s') '"}
{"input": "Find all empty files starting from the current directory and delete them", "output": "find . -type f -empty -print0 | xargs -0 /bin/rm"}
{"input": "Merge data in file1 and file2 where second field is common in both files", "output": "join -j2 <(sort -k2 file1) <(sort -k2 file2)"}
{"input": "Search the current directory for *rc.conf files and grant \"other\" users read permission", "output": "find `pwd` -name \"*rc.conf\"  -execdir /bin/chmod o+r {} \\;"}
{"input": "Remove containing directories from variable 'path' ie. \"/some/specific/directory\" becomes \"directory\".", "output": "path=$(basename $path)"}
{"input": "Silently read a line into variable \"passwd\" with prompt \"Enter your password: \"", "output": "read -s -p \"Enter your password: \" passwd"}
{"input": "Find all directories under $1/.hg and set their SGID bit", "output": "find \"$1\"/.hg -type d -print0 | xargs chmod g+s"}
{"input": "Move all files in the current directory tree that match \"some_pattern\" to \"target_location\"", "output": "find . -name some_pattern -print0 | xargs -0 -J % mv % target_location"}
{"input": "find all the directories with the name \"DIRNAME\" in the current folder and force delete them", "output": "find . -type d -name \u201cDIRNAME\u201d -exec rm -rf {} \\;"}
{"input": "search for a cpp directory in current folder and display all its files", "output": "find . -type d -name \"cpp\" -exec find {} -type f \\;"}
{"input": "set alias \"memu\" for command \"ps -u $(whoami) -o pid,rss,command | awk '{print \\$0}{sum+=\\$2} END {print \\\"Total\\\", sum/1024, \\\"MB\\\"}'\"", "output": "alias memu=\"ps -u $(whoami) -o pid,rss,command | awk '{print \\$0}{sum+=\\$2} END {print \\\"Total\\\", sum/1024, \\\"MB\\\"}'\""}
{"input": "Compress all .txt files in the current directory tree to archive \"txt.zip\"", "output": "find . -name '*.txt' | xargs zip -9 txt.zip"}
{"input": "SSH login in 'middle.example.org' via port 2222 as user 'deviceuser' using a private key file './device_id.pem'", "output": "ssh -i ./device_id.pem deviceuser@middle.example.org:2222"}
{"input": "Format time string @1267619929 according to default time format", "output": "date -d @1267619929"}
{"input": "display all files in current directory and save the output to a file", "output": "find . > files_and_folders"}
{"input": "Look for *.jpg files", "output": "find . -name \u201c*.jpg\u201d"}
{"input": "Search  in current directory downwards all files whose size is greater than 10 bytes .", "output": "find . -size +10c -print"}
{"input": "find all files in the current folder whose size is less than 50KB", "output": "find . -size -50k"}
{"input": "find the file with the name \"file\" in the entire file system", "output": "find / -name file"}
{"input": "Print the list of files from the \"/zu/durchsuchender/Ordner\" directory tree whose names begin with \"beispieldatei\" and which contain string \"Beispielinhalt\"", "output": "find \"/zu/durchsuchender/Ordner\" -name \"beispieldatei*\" -print0 | xargs -0 grep -l \"Beispielinhalt\""}
{"input": "Move all files from the `sourceDir' directory to the `destDir' directory", "output": "find sourceDir -mindepth 1 -maxdepth 1 -print0 | xargs -0 mv --target-directory=destDir"}
{"input": "Find all regular files whose names contain \"@\" in directory tree ~/$folder", "output": "find ~/$folder -name \"*@*\" -type f -print0"}
{"input": "Remove leading and trailing spaces or tabs from \"$string\"", "output": "echo \"$string\" | sed -e 's/^[ \\t]*//' | sed -e 's/[ \\t]*$//'"}
{"input": "Enables 'globstar' (recursive globbing) shell option.", "output": "shopt -s globstar"}
{"input": "Rename \"file.txt\" in directories \"v_1\", \"v_2\", and \"v_3\" each to \"v_1.txt\", \"v_2.txt\", and \"v_3.txt\" respectively and print the conversion", "output": "rename -v 's#/file##' v_{1,2,3}/file.txt"}
{"input": "Find all the files in file system which are accessed 50 days back", "output": "find / -atime 50"}
{"input": "Change permissions to 500 for all regular files under and below the current directory", "output": "find . -type f -exec chmod 500 {} ';'"}
{"input": "Change all occurrences of \"foo\" to \"bar\" in the file \"file.txt\"", "output": "echo ',s/foo/bar/g; w' | tr \\; '\\012' | ed -s file.txt"}
{"input": "Find all files/directories under '/home/exampleuser/' directory tree whose names end with 'conf' and were modified exactly 3 days ago", "output": "find /home/exampleuser/ -name \"*conf\" -mtime 3"}
{"input": "Updates all packages in system  answering 'yes' on all questions.", "output": "yum -y update"}
{"input": "Find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string \"debug (\"", "output": "find /srv/www/*/htdocs/system/application/ -name \"*.php\" -exec grep -H \"debug (\" {} +"}
{"input": "display a long listing of all the files in the current folder which have spaces in their names and save the output to the file log.txt", "output": "find . -name \"filename including space\" -print0 | xargs -0 ls -aldF > log.txt"}
{"input": "display all the files in the current folder and traverse from the sub directories", "output": "find . -type d -depth"}
{"input": "Page through the contents of 'file', but excess from lines that don't fit within the screen/window width is cut.", "output": "less -S file"}
{"input": "Find all files under /path and below executable by `group' or `other'", "output": "find /path -perm /011"}
{"input": "Return 0 if at least one \"abc\" file in the current directory tree contains text \"xyz\"", "output": "find . -name 'abc' -type f -exec grep -q xyz {} +"}
{"input": "Write standard input to standard output and file \"/tmp/arjhaiX4\"", "output": "tee /tmp/arjhaiX4"}
{"input": "Remove all empty directories under the current directory and below", "output": "find ./ -type d -size 0c -print | xargs rmdir"}
{"input": "display all file in the home folder except \".c\" files", "output": "find $HOME \\! -iname \"*.c\" print"}
{"input": "Find all the files/directories in the entire filesystem that do not belong to user 'wnj' and are not newer than the file/directory 'ttt' by modification time", "output": "find / \\! \\( -newer ttt -user wnj \\) -print"}
{"input": "Find files/directories named 'document' in 'ext2' partitions in entire filesystem", "output": "find / -fstype ext2 -name document -print"}
{"input": "Find all files under current directory that match the case insensitive regex .\\|./.git and replace all occurrences of the regex $1 (literal) with $upper2 (literal) in these files", "output": "find . -type f \\! -iregex '.\\|./.git' -exec perl -i -pe 's/$1/$upper2/gi' {} \\;"}
{"input": "Variable PID contains a process ID, check if this process exists - resulting exit status from this command will be zero if it does and current user has permission to send it signals.", "output": "kill -0 $PID"}
{"input": "Find all files/directories under current directory and print their paths", "output": "find . -exec echo {} \\;"}
{"input": "Find all files under current directory with their size and paths, reverse sort them numerically, then print the first 4 entries by removing all matches to the regex [0-9]+\\s from each line of the output", "output": "find -type f -printf \"%s %p\\n\" | sort -nr | head -n 4 | sed -r 's/[0-9]+\\s//g'"}
{"input": "Change directory to parent directory and do not resolve any symlinks in the resulting path", "output": "cd -L .."}
{"input": "Prints long listing of directories '/tmp', '/tnt' themselves bordered with '<--' and '--->'.", "output": "ls -ld /tmp /tnt | sed 's/^.*$/<-- & --->/'"}
{"input": "Change permissions to 777 for all directories in the current directory tree", "output": "find . -type d -exec chmod 777 {} \\;"}
{"input": "find all the text files in  the current folder and do not search in somedir, bin directories", "output": "find . \\( -name somedir -prune \\) , \\( -name bin -prune \\) -o \\( -name \"*.txt\" -print \\)"}
{"input": "Use the uncompressed contents of \"data.gz\" as input to \"./complicated-perl-script-that-reads-stdin\" and print a status", "output": "pv data.gz | gunzip -c | ./complicated-perl-script-that-reads-stdin"}
{"input": "kill all active jobs", "output": "jobs -p | xargs kill -9"}
{"input": "Find all *.mp4 files under /working", "output": "find /working -type f -name '*.mp4'"}
{"input": "Find all SGID files", "output": "find / -perm /g=s"}
{"input": "Find files that were modified second last week and archive them", "output": "find . -type f -mtime +7 -mtime -14 | xargs tar -cvf `date \u2018+%d%m%Y\u2019_archive.tar`"}
{"input": "Find all *.py files/directories under current directory", "output": "find . -name \\*.py -print"}
{"input": "find all regular files under the /etc/sysconfig directory that were accessed in the last 30 minutes", "output": "find /etc/sysconfig -amin -30 -type f"}
{"input": "find all normal/regular files in the current directory", "output": "find . -type f -print"}
{"input": "Show the number of lines for each PHP file in the current directory tree", "output": "find . -type f -name \"*.php\" -exec wc -l {} +;"}
{"input": "Print out the contents of all files in the current directory tree that contain \"spaces\" in their names", "output": "find -name '*spaces*' | while read text; do cat \"$text\"; done"}
{"input": "Execute \"wget -qO-  http://fake.link/file.txt\" every 5 seconds", "output": "watch -n 5 wget -qO-  http://fake.link/file.txt"}
{"input": "List all symlinks under current directory and search for targetfile.txt in this list", "output": "find . -type l | xargs -I % ls -l % | grep targetfile.txt"}
{"input": "Change the permissions of every directory in the current directory and all files and directories within them to 700", "output": "find . -maxdepth 1 -type d -exec chmod -R 700 {} \\;"}
{"input": "Generates temporary file in a '/dev/shm' folder and saves path to it in a 'tFile' variable.", "output": "tFile=$(mktemp --tmpdir=/dev/shm)"}
{"input": "searches through the /usr/local directory for files that end with the extension .html", "output": "find /usr/local -name \"*.html\" -type f"}
{"input": "Find all files named \"filename\" in the current directory tree, not descending into \"FOLDER1\" directories", "output": "find . '(' -name FOLDER1 -prune -o -name filename ')' -print"}
{"input": "find all foo.bar files in the entire file system and discard the errors", "output": "find / -name foo.bar -print 2>/dev/null"}
{"input": "Merge each non-blank line of standard input into a single comma separated line", "output": "grep -v '^$' | paste -s -d\",\" -"}
{"input": "Move all files that contain \"Subject: \\[SPAM\\]\" to \"DIR\"", "output": "grep -l 'Subject: \\[SPAM\\]' | xargs -I '{}' mv '{}' DIR"}
{"input": "find all the files in the current folder and replace old string with new string", "output": "find . | xargs perl -p -i -e \u2018s/something/else/g\u2019"}
{"input": "Find all files and directories whose names end in \".rpm\" and change their permissions to 755", "output": "find / -name *.rpm -exec chmod 755 '{}' \\;"}
{"input": "find all files in the current directory that are less than 1 byte size", "output": "find . -size -1c -print"}
{"input": "Display all lines contiaining 'funcname' in system map file matching current kernel.", "output": "cat /boot/System.map-`uname -r` | grep funcname"}
{"input": "Display a long listing of all regular files that are less than 50 bytes in size under '/usr/bin' directory tree", "output": "find /usr/bin -type f -size -50c -exec ls -l '{}' ';'"}
{"input": "Change permissions to 644 for all regular files under and below /path/to/someDirectory/", "output": "find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644"}
{"input": "Output \"file.txt\", omitting all containing directories \"some/unknown/amoutn/of/sub/folder/\"", "output": "basename \"some/unknown/amount/of/sub/folder/file.txt\""}
{"input": "find all the directories in current folder and do not search in sub directories", "output": "find . -maxdepth 1 -type d -print0"}
{"input": "Prints date of first Tuesday in January, 2015", "output": "cal 01 2015 | sed -n '1,2b;/^.\\{6\\} \\{0,1\\}\\([0-9]\\{1,2\\}\\) .*/ {s//0\\1/;s/.*\\([0-9]\\{2\\}\\)$/\\1/p;q;}'"}
{"input": "Search the home directory for files accessed more than 10 days ago", "output": "find ~/ -atime +10"}
{"input": "Calculate the sum of all the numbers from -5 to 10", "output": "seq -s+ -5 10 | bc"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f | sed 's/.*/\"&\"/' | xargs ls -E | awk '{ print $6,\" \",$7 }' | sort | tail -1"}
{"input": "Print a sorted list of directories from the ~/Music tree containing files whose names begin with \"cover.\"", "output": "find ~/Music/ -iname 'cover.*' -printf '%h\\n' | sort -u"}
{"input": "Find all files under /var/www directory and set their permission to 644", "output": "sudo find /var/www -type f -print0 | xargs -0 chmod 644"}
{"input": "Count the number of files named 'job.history' under '/data/SpoolIn' directory tree that match 'FAIL' in their contents", "output": "find /data/SpoolIn -name job.history -exec grep -l FAIL {} \\; | wc -l"}
{"input": "Find all files/directories under current directory with 'foo' in their paths and copy them to ~/bar", "output": "while read line ; do cp \"$line\" ~/bar ; done < <(find . | grep foo)"}
{"input": "Count the number of lines in the current git repository", "output": "git ls-files | xargs cat | wc -l"}
{"input": "Find all 15MB files in entire file system", "output": "find / -size 15M"}
{"input": "Counts lines in file 'filename' ignoring empty lines and lines with spaces only.", "output": "cat 'filename' | grep '[^ ]' | wc -l"}
{"input": "Print lines in file 'filename' that do not match the regex 'pattern'", "output": "grep -v 'pattern' filename"}
{"input": "Find files that are writable by both the \u201cother\u201d and the group", "output": "find plsql -type f  -perm -ug=rw -exec ls -l {} \\; 2>/dev/null"}
{"input": "Let the user page through 'filename.csv' with long lines chopped so they fit within the width of the screen/window.", "output": "csvtopretty filename.csv | less -S"}
{"input": "Get directory listing of URL $1 and save them to variable 'header' by deleting '\\r' characters", "output": "header=\"$(curl -sI \"$1\" | tr -d '\\r')\""}
{"input": "Print entire virtual memory usage of the current user", "output": "ps -u $(whoami) --no-header -o vsz | dc -f - -e '[+z1<r]srz1<rp'"}
{"input": "delete all the empty files in the current directory only if they are ok and the user has the permission to delete them", "output": "find . -empty -ok rm {}\\;"}
{"input": "Search for 'string' case insensitively in all files under current directory tree and show the matched lines with their filenames", "output": "find . -name * | xargs grep -iH \"string\""}
{"input": "Display the contents of \"file\" formatted into a table, removing duplicate lines where the first 12 characters are duplicates, and display the number of occurrences at the beginning of each line.", "output": "column -t file | uniq -w12 -c"}
{"input": "Give rwx permissions to the user and group of the directory named \"files\" leaving others without any privileges", "output": "find . -type d -name files -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "find all text files in user/directory/ which have been modified today and display the last line of these files", "output": "find /user/directory/ -name \"*txt\" -mtime 0 -type f -printf '%p: ' -exec tail -1 {} \\;"}
{"input": "Save the list of all subdirectories of the current directory up to depth level 2 as \"dirlist\"", "output": "find -maxdepth 2 -type d -ls >dirlist"}
{"input": "Save the user name in all capitals of the current user to variable \"v\"", "output": "v=$(whoami | perl -e 'print uc <>')"}
{"input": "Search for 'organic' in all files with '.html' extension under ~/html directory", "output": "find ~/html/ -name '*.html' -exec grep organic '{}' ';'"}
{"input": "Print amount of space available on the file system containg path to the current working directory human-readable.", "output": "df -Ph $PWD | tail -1 | awk '{ print $3}'"}
{"input": "Make DNS lookup for hostname stackoverflow.com", "output": "dig stackoverflow.com"}
{"input": "List all files except for those in directory SCCS", "output": "find . -print -o -name SCCS -prune"}
{"input": "Archive \"foo/bar/baz.c\" to \"remote:/tmp/\" preserving the relative path of \"foo/bar/baz.c\"", "output": "rsync -avR foo/bar/baz.c remote:/tmp/"}
{"input": "display a list of all files in the folder passed as argument to a script", "output": "find $@ -ls"}
{"input": "Dump \"myDB\" via \"pg_dump\" and compress to \"myDB.sql.gz\"", "output": "pg_dump -U myUser myDB | gzip > myDB.sql.gz"}
{"input": "Search the current directory recursively for files whose size is between 10 and 50 MB", "output": "find . -size +10M -size -50M -print"}
{"input": "Ping every address from 192.168.0.1 to 192.168.0.254 with a timeout of 1 second and filter out no responses", "output": "echo $(seq 254) | xargs -P255 -I% -d\" \" ping -W 1 -c 1 192.168.0.% | grep -E \"[0-1].*?:\""}
{"input": "find md5sum of an empty string", "output": "echo -n '' | md5"}
{"input": "Find all file1 and file9 files/directories under current directory", "output": "find . -name file1 -or -name file9"}
{"input": "display all the files in the home folder which are smaller than 500 bytes", "output": "find $HOME -size -500b"}
{"input": "change the group of all the files in the folder /u/netinst/ to staff", "output": "find /u/netinst -print | xargs chgrp staff"}
{"input": "find directories under the $LOGDIR directory where there have been no modifications for 5 days and deletes them.", "output": "find $LOGDIR -type d -mtime +5 -exec rm -f {} \\;"}
{"input": "Read standard input until a null character is found and save the result in variable \"line\"", "output": "read -d '' line"}
{"input": "Find movies over a gigabyte in size", "output": "find ~/Movies/ -size +1024M"}
{"input": "Find a hostname that resolves to IP '173.194.33.71'", "output": "dig +short -x 173.194.33.71"}
{"input": "Find and remove the .rhosts file in the /home directory tree", "output": "find /home -name .rhosts -print0 | xargs -0 rm"}
{"input": "check the file type of all the regular/normal files in the current directory and save the output to the file /tmp/filetypes.log", "output": "find . -type f -exec file {} \\; > /tmp/filetypes.log"}
{"input": "find all the html files in current folder and replace some pattern in all these files", "output": "find -type f -name '*.htm' -printf '%P\\0%f\\0' | xargs -0 -n2 sh -c 'fil=\"${2/\\.htm/}\"; sed -i -e \"s;<title>.*</title>;<title>$fil</title>;\" $1' replace"}
{"input": "Print the empty files/directories among empty1, empty2 and not_empty", "output": "find empty1 empty2 not_empty -prune -empty"}
{"input": "Move all *.php~ (case insensitive) files under current directory to /mydir", "output": "find . -iname \"*.php~\" -exec mv \"{}\" /mydir +;"}
{"input": "search for all the mp3 files in the current folder and change the character encoding of them to <source-encoding>", "output": "$ find . -name \"*mp3\" -print0 | xargs -0 mid3iconv -e <source-encoding> -d"}
{"input": "delete all the text files in the current folder.", "output": "find . -type f -name \"*.txt\" -exec rm -f {} \\;"}
{"input": "search for all the directories in the current directory and do not search in sub directories", "output": "find . -mindepth 1 -maxdepth 1 -type d"}
{"input": "find all data files in current folder which have not been changed in the last 60 minutes and display their name without extension", "output": "find . -iregex \"./[^/]+\\.dat\" -type f -cmin +60 -exec basename {} \\;"}
{"input": "Find all *.dbf files/directories in entire file system discarding errors and print their sorted and unique parent directory pathsg", "output": "find / -name \"*.dbf\"  -exec dirname {} \\; 2> /dev/null | sort -u"}
{"input": "Find directory \"your/dir\" if it is empty", "output": "find your/dir -prune -empty"}
{"input": "simulate a full login of user builder", "output": "su -l builder"}
{"input": "Prepend the reverse history number as negative values to the output of the history command with arguments \"$@\"", "output": "history \"$@\" | tac | nl | tac | sed 's/^\\( *\\)\\([0-9]\\)/\\1-\\2/'"}
{"input": "Force create a symbolic link named \"$*\" to the canonical absolute path of \"$1\"", "output": "ln -sf \"$(readlink -f \"$1\")\" \"$*\""}
{"input": "Split \"${fspec}\" into 6 files with about equal number of lines each and use prefix \"xyzzy.\"", "output": "split --number=l/6 ${fspec} xyzzy."}
{"input": "Find all *.dbf files/directories in entire file system discarding errors and print their sorted and unique parent directory paths", "output": "find / -name \\*.dbf -print0 2>/dev/null | xargs -0 -n1 dirname | sort | uniq"}
{"input": "Creates temporary file by template provided in option '-t'.", "output": "mktemp -t identifier.XXXXXXXXXX"}
{"input": "find all python files in current folder and test if there is a makefile in all these fodlers where these are present", "output": "find . -name '*.py' -exec bash -c 'test -f $(dirname \"$1\")/Makefile' -- {} \\; -print"}
{"input": "check if there any files from the .git folder after excluding it using the prune command", "output": "find . -path ./.git -prune -o -print -a \\( -type f -o -type l -o -type d \\) | grep '.git'"}
{"input": "get year-month-day hour:minute:second from date", "output": "date +%Y-%m-%d:%H:%M:%S"}
{"input": "Print \"test=hello world\"", "output": "echo \"hello world\" | echo test=$(cat)"}
{"input": "display a long listing of all files in the entire file system which are bigger than 1MB", "output": "find / -size +1000k -exec ls -l {} \\; -print"}
{"input": "Finds PIDs of ssh sessions of all logged in users.", "output": "pgrep -u w | grep ssh| awk '{print $1}' ssh"}
{"input": "Set up SSH connection forwarding in the background with no terminal or command execution from localhost port 8888 to \"proxyhost\" port 8888 and a reverse connection from \"officefirewall\" port 22222 to \"localhost\" port 22", "output": "ssh -fNT -L8888:proxyhost:8888 -R22222:localhost:22 officefirewall"}
{"input": "Read a single character from standard input with prompt \"Are you sure? (y/n) \"", "output": "read -p \"Are you sure? (y/n) \" -n 1"}
{"input": "find all the directories in the current folder", "output": "find . -type d -print"}
{"input": "display all the files in the current folder which have the permissions 777 and which have been modified in the last 24 hours.", "output": "find . -perm 777  -mtime 0 -print"}
{"input": "Update timestamps of all regular files (ie. excluding directories, symlinks, sockets, etc.) under /your/dir", "output": "find /your/dir -type f -exec touch {} +"}
{"input": "Search directory tree $DIR for *.txt files", "output": "find $DIR -name \"*.txt\""}
{"input": "Archive \"/path/to/sfolder\" to \"name@remote.server:/path/to/remote/dfolder\" preserving hard links and compressing the data during transmission", "output": "rsync -aHvz /path/to/sfolder name@remote.server:/path/to/remote/dfolder"}
{"input": "Lists available updates for installed packages.", "output": "yum check-update | awk '{if($5 ~ /updates/){print $1}}' | tr '\\n' ','"}
{"input": "login as user root", "output": "su -l"}
{"input": "find all the files in the current folder that end with the word bar", "output": "find -name *bar"}
{"input": "Shifts all positional arguments but last one, keeping it in $1 variable.", "output": "shift `expr $# - 1`"}
{"input": "search for files which are writable by both their owner and their group", "output": "find . -perm -g+w,u+w"}
{"input": "Search every directory except the subdirectory excluded_path for a regular file 'myfile'", "output": "find / -path excluded_path -prune -o -type f -name myfile -print"}
{"input": "Search for the regex '^ERROR' in all *.log files under current directory", "output": "find . -name \"*.log\" -exec egrep -l '^ERROR' {} \\;"}
{"input": "Join comma-separated data in file1 and file2, including extra non-matching information in both files.", "output": "join -t, -a1 -a2 <(sort file1) <(sort file2)"}
{"input": "find all instances of a specific file in the entire file system and discard the errors", "output": "find / -name expect 2>/dev/null"}
{"input": "find all files named `linux' on the system", "output": "find / -name linux"}
{"input": "Format the filename and modification time of files starting with t as a table on OSX", "output": "stat -f 'File: %N Modified: %t%Sm' t* |column -t"}
{"input": "Replace all occurrence of \"toreplace\" with \"replaced\" in all files under /home/www", "output": "find . -maxdepth 1 -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g'"}
{"input": "Show all running processes with a name matching \"postgres\"", "output": "ps -ef | grep postgres"}
{"input": "Find *.java files under current directory and compress them to myfile.tar", "output": "find . -type f -name \"*.java\" | xargs>    tar rvf myfile.tar"}
{"input": "Print the sorted uniqe list of folders in compressed archive nginx-1.0.0.tar.gz", "output": "tar tf nginx-1.0.0.tar.gz | xargs dirname | sort | uniq"}
{"input": "Remove trailing white spaces from all files under current directory ignoring *.jpg, *.png and *.ttf files", "output": "find . -not \\( -name *.jpg -prune -o -name *.png -prune -o -name *.ttf -prune \\) --type f -print0 | xargs -0 sed -i '' -E \"s/[[:blank:]]+$//\""}
{"input": "display all the files in the current folder excluding those which are in the path of \".git\"", "output": "find . ! -path  \"*.git*\" -type f -print"}
{"input": "Count the number of unique file extensions in the current directory tree", "output": "find . -type f | sed -e 's/.*\\.//' | sed -e 's/.*\\///' | sort | uniq -c | sort -rn"}
{"input": "Print the 2nd white space separated fields in \"file.txt\" as a comma separated list", "output": "awk '{print $2}' < file.txt | paste -s -d, -"}
{"input": "Print full path of command \"gradle\"", "output": "which gradle"}
{"input": "change the group to \"new_group\" and permissions to 770 for all the files in the current folder, $0 is the input to the sub shell i.e, the name of the file", "output": "find . -name \"*\" -exec sh -c 'chgrp -v new_group \"$0\" ; chmod -v 770 \"$0\"' {} \\;"}
{"input": "Search for 'pattern' in all files with '.cc' extension under current directory tree and show the matched lines with line numbers and filenames", "output": "find . -name \u201c*.cc\u201d |xargs grep -n \u201cpattern\u201d"}
{"input": "Search the directories that match pattern '/path/to/directory/folder{?,[1-4]?,50}' for .txt files", "output": "find /path/to/directory/folder{?,[1-4]?,50} -name '*.txt'"}
{"input": "Count the number of times that a single \"-----------\\n\" separated record contains both \"A=2\" and \"dummy=2\" in compressed file \"file.gz\"", "output": "zcat file.gz | awk -v RS=\"-----------\\n\" '/A=2[ ,\\n]/ && /dummy=2[ ,\\n]/{count++} END{print \"Final counter value=\",count}'"}
{"input": "Find regular files under / that contain \"stringtofind\"", "output": "find / -maxdepth 1 -xdev -type f  -exec grep -li stringtofind '{}' \\;"}
{"input": "Find all regular files in the current directory tree that do not contain a whitespace", "output": "find . -type f \\( -exec grep -q '[[:space:]]' {} \\; -o -print \\)"}
{"input": "search for the ip \"192.168.1.5\" in all the files in /etc folder", "output": "find /etc/ -iname \"*\" | xargs grep '192.168.1.5'"}
{"input": "create a symbolic link named \"link\" in directory named as value of the variable $2 to a file that named as result of the command `cd \\`dirname $2\\`; pwd`/`basename $2`", "output": "ln -s `cd \\`dirname $2\\`; pwd`/`basename $2` $1/link"}
{"input": "Find all C source code files from the current directory tree that contain \"keyword\" in their pathnames, ignoring the case", "output": "find . -type f \\( -iname \u201c*.c\u201d \\) |grep -i \u201ckeyword\u201d"}
{"input": "Print shared object dependencies of command \"YOURAPPNAME\"", "output": "ldd $(which YOURAPPNAME)"}
{"input": "create symbolic links in current directory to all files located in directory \"/original\" and have filename extension \".processname\"", "output": "find /original -name '*.processme' -exec echo ln -s '{}' . \\;"}
{"input": "search all html files in the current folder and remove all the empty lines", "output": "find ./ -type f -name '*.html' | xargs sed -i '/^$/d"}
{"input": "Synchronize \"dir_a\" and \"dir_b\" to contain the latest files in both directories", "output": "rsync -urv --progress dir_a dir_b && rsync -urv  --progress dir_b dir_a"}
{"input": "replace a string in all the files in the current folder", "output": "find . | xargs perl -p -i.old -e 's/oldstring/newstring/g'"}
{"input": "show all the files  in current directory", "output": "find ."}
{"input": "Print '\"HTTP/1.1 200 OK', two new lines and the current date", "output": "echo -e \"HTTP/1.1 200 OK\\n\\n $(date)\""}
{"input": "search for the file \"process.txt\" in the current directory", "output": "find . -name \"process.txt\""}
{"input": "Recursively change the owner to \"${JBOSS_USER}\" of \"$JBOSS_LOG_DIR\"", "output": "chown -R ${JBOSS_USER}: $JBOSS_LOG_DIR"}
{"input": "Send 4 ping packets of size 2 to \"www.google.com\" on a Solaris machine", "output": "ping -s www.google.com 2 4"}
{"input": "Find all *conf* files recursively under current directory, search for any lines matching the string 'matching_text' in those files and redirect the output to matching_text.conf.list", "output": "find . -name *conf* -exec grep -Hni 'matching_text' {} \\; > matching_text.conf.list"}
{"input": "Convert \";\" separated list \"luke;yoda;leila\" to new line separated list", "output": "echo \"luke;yoda;leila\" | tr \";\" \"\\n\""}
{"input": "Read a line from standard input with prompt \"Enter your choice: \" and save response to variable \"choice\"", "output": "read -p \"Enter your choice: \" choice"}
{"input": "search for the file test in the current folder", "output": "find . -name test"}
{"input": "Find all files in the current directory tree whose names end with the suffix \".keep.$1\", where $1 is the first command line argument, and remove that suffix", "output": "find . -type f -name \"*.keep.$1\" -print0 | xargs -0 rename \"s/\\.keep\\.$1$//\""}
{"input": "Move all files and directories in the current directory to \"/tmp/blah/\"", "output": "find . -depth=1 -exec mv {} /tmp/blah/ \\;"}
{"input": "Compress \"archive.tar\"", "output": "gzip archive.tar"}
{"input": "Finds all folders that contain 'ssh' file and have 'bin' in path.", "output": "find / -name ssh|grep bin|xargs dirname"}
{"input": "Make directory expanded by $dir variable", "output": "mkdir $dir"}
{"input": "Run command \"program\" as the current user", "output": "/usr/bin/sudo -u `whoami` `which program`"}
{"input": "Type unique list of all directories contiaining each file named 'myfile' under the /home directory", "output": "find /home/ -name 'myfile' -type f | rev | cut -d \"/\" -f2- | rev | sort -u"}
{"input": "List all nfs mount points on the system", "output": "mount -l | grep 'type nfs' | sed 's/.* on \\([^ ]*\\) .*/\\1/'"}
{"input": "Force pseudo tty allocation on connection to \"somehost\" and execute \"~/bashplay/f\"", "output": "ssh -t somehost ~/bashplay/f"}
{"input": "Unzip all files matching \"test1/*/*.gz\"", "output": "gunzip test1/*/*.gz"}
{"input": "Calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'", "output": "md5=`md5sum ${my_iso_file} | cut -b-32`"}
{"input": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3", "output": "find / -iname \"*.mp3\" -type f | xargs -I '{}' mv {} /mnt/mp3"}
{"input": "Print the output of history without line numbers", "output": "history | cut -d' ' -f4- | sed 's/^ \\(.*$\\)/\\1/g'"}
{"input": "Run the PHP script \"newEmptyPHP\" redirecting the output to \"nohup.out\" in the current directory, or in the home directory if that is not possible. The process will not receive or respond to SIGHUP (signal 1) which are sent to it.", "output": "nohup php newEmptyPHP.php &"}
{"input": "Write \"\\n/usr/local/boost_1_54_0/stage/lib\" to standard output and append to \"/etc/ld.so.conf\"", "output": "echo -e \"\\n/usr/local/boost_1_54_0/stage/lib\" | sudo tee -a /etc/ld.so.conf"}
{"input": "Prints what day it was 222 days ago", "output": "date --date=\"222 days ago\" +\"%d\""}
{"input": "Copy all *.txt files from the current directory tree to /tmp", "output": "find . -name '*.txt' | while read line; do echo \"Copying '$line' to /tmp\"; cp -- \"$line\" /tmp; done"}
{"input": "List non-hidden regular files in the current directory tree that were last modified more than 500 days ago", "output": "find . -type f -not -name '.*' -mtime +500 -exec ls {} \\;"}
{"input": "Force delete all jpg files in current directory which are less than 50KB and do not search in the sub directories", "output": "find . -maxdepth 1 -name \"*.jpg\" -size -50k -exec rm {} \\;"}
{"input": "Save the 10 ping results to \"$gateway\" in variable \"pingResults\"", "output": "local pingResults=$(LANG=C ping -q -c10 \"$gateway\")"}
{"input": "Print all string from file 'file2.txt' matching pattern in file 'file1.txt'", "output": "grep \"$(cat file1.txt)\" file2.txt"}
{"input": "find in the file system for the directories with the name \"httpdocs\" discard all the errors", "output": "find / -type d -name httpdocs 2> /dev/null"}
{"input": "find all files in the folder \"myfiles\" which are exactly 5 bytes", "output": "find /myfiles -size 5"}
{"input": "Extract any line in sorted file \"A\" that does not appear in \"B\", \"C\", or \"D\"", "output": "cat B C D | sort | comm -2 -3 A -"}
{"input": "Find all regular files with space in their names under current directory and rename them by replacing all spaces with _", "output": "find -name \"* *\" -type f | rename 's/ /_/g'"}
{"input": "Search for aaa in all files under current directory and count the number of matches", "output": "find . -type f -exec grep -o aaa {} \\; | wc -l"}
{"input": "Continuously print the seconds since Unix epoch and the ping time to \"google.com\"", "output": "ping google.com | awk -F'[ =]' 'NR>1{print system(\"echo -n $(date +%s)\"), $11}'"}
{"input": "Remove all regular files with extensions php, css, ini, txt from directory tree /old/WordPress/", "output": "find /old/WordPress/ -type f -regex \".*\\.\\(php\\|css\\|ini\\|txt\\)\" -exec rm {} \\;"}
{"input": "Find all files owned by user `comp'", "output": "find / -user comp"}
{"input": "find .bmp or .txt files", "output": "find /home/user/Desktop -name '*.bmp' -o -name '*.txt'"}
{"input": "Delete the files under the current working directory with inode numbers specified on standard input", "output": "xargs -n 1 -I '{}' find \"$(pwd)\" -type f -inum '{}' -delete"}
{"input": "Print common files of directory \"1\" and \"2\"", "output": "comm -12  <(ls 1) <(ls 2)"}
{"input": "concatenates file1.txt, file2.txt, and file3.txt with the filenames printed at the beginning of file contents", "output": "head -n99999999 file1.txt file2.txt file3.txt"}
{"input": "Prints process tree, showing only strings with 'MDSImporte', and chopping output after ${WIDTH} characters.", "output": "pstree | grep MDSImporte | cut -c 1-${WIDTH}"}
{"input": "Print the files under current directory twice per line", "output": "find . -type f -exec echo {} {} \\;"}
{"input": "display a long list of the files in the current folder which have the word fuddel in all the files in the current folder and then search for the word fiddel in the previously matched files", "output": "find -exec grep -q fuddel {} \";\" -exec grep -q fiddel {} \";\" -ls"}
{"input": "Print argument \"$1\" \"$number\" times", "output": "yes $1 | head -$number"}
{"input": "Print 'Since -printf is an action the implicit -print is not applied\\n' for every file named 'file' found under current directory tree", "output": "find -name file -printf 'Since -printf is an action the implicit -print is not applied\\n'"}
{"input": "Print the line number of each matching \"<phrase>\" in \"<filename>\"", "output": "nl -b a \"<filename>\" | grep \"<phrase>\" | awk '{ print $1 }'"}
{"input": "Find all directories under current directory tree that match the case insensitive regex '^\\./course\\([0-9]\\.\\)*[0-9]$' in their paths", "output": "find . -type d -iregex '^\\./course\\([0-9]\\.\\)*[0-9]$'"}
{"input": "find the type of all the regular/normal files in the current folder", "output": "find . -type f | xargs file"}
{"input": "Sort content of files 'file1' and 'file2' by second of dot-separated fields.", "output": "cat file1 file2 |sort -t. -k 2.1"}
{"input": "Find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir", "output": "find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +"}
{"input": "Print on the standard output the names of all directories that reside in the current directory tree and contain file \"YourProgram\"", "output": "find $(pwd) -name YourProgram -exec dirname {} \\; | while read d; do cd \"$d\" && pwd; done"}
{"input": "Search the /root directory recursively for files named \"FindCommandExamples.txt\"", "output": "find /root -name FindCommandExamples.txt"}
{"input": "get the job number from the stored PID", "output": "jobs -l | fgrep $! | perl -ne 'print \"$1\\n\" if /\\[(\\d+)\\]/'"}
{"input": "Find all regular files in the current directory and search them for \"example\"", "output": "find -maxdepth 1 -type f | xargs grep -F 'example'"}
{"input": "Remove all \\*~ files under dir", "output": "find dir -name \\\\*~ -exec rm {} +"}
{"input": "Recursively removes all files and folders named '.svn' in a current folder.", "output": "find . -name .svn | xargs rm -fr"}
{"input": "find all the files in the current folder which have not been modified in the last 90 days and force delete them", "output": "find . -mtime +90 -type f -exec rm -f {} \\;"}
{"input": "Find files in the /var/log folder which were modified an hour or more ago", "output": "find /var/log/ -mmin +60"}
{"input": "Counts lines of 'command' output.", "output": "command | wc -l"}
{"input": "Find all files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago and redirect the ouput to /tmp.$$", "output": "find . -maxdepth 1 -cmin +60 -name file >/tmp.$$"}
{"input": "prints absolute file path of a file", "output": "echo $(cd $(dirname \"$1\") && pwd -P)/$(basename \"$1\")"}
{"input": "Find files/directories writable by group or others under the /path directory", "output": "find /path -perm /g+w,o+w"}
{"input": "Create 6-letter named temporary file in a folder path $file1, and save the path to it in a variable 'tmpfile'", "output": "tmpfile=$(mktemp $(dirname \"$file1\")/XXXXXX)"}
{"input": "Find all the files which are accessed in last 1 hour", "output": "find / -amin -60"}
{"input": "Print the base name of the current working directory", "output": "pwd | xargs basename"}
{"input": "Split \"/etc/gconf/schemas/gnome-terminal.schemas\" into 1000000 files of about equal size", "output": "split -n 1000000 /etc/gconf/schemas/gnome-terminal.schemas"}
{"input": "search for a word in all the regular/normal files in the entire filesystem. ( + is used to give more than one file as input to the grep command.", "output": "find / -type f -exec grep -i 'the brown dog' {} +;"}
{"input": "Delete files in /var/tmp/stuff and below that have not been modified in over 90 days", "output": "find /var/tmp/stuff -mtime +90 -print0 | xargs -0 /bin/rm"}
{"input": "Find all files named 'test' in the current directory tree, not descending into \"test\" directories", "output": "find . -name test -prune"}
{"input": "Find files under current directory that are not newer than $date_time in regards of modification time", "output": "find . -type f -not -newermt \"$date_time\""}
{"input": "Remove group write permission on all files output by \"compaudit\"", "output": "compaudit | xargs chmod g-w"}
{"input": "Unzip \"$ip\" as input to \"pax -r\"", "output": "gunzip -c -d $ip | pax -r"}
{"input": "Create a symbolic link in target directory \"~/newlinks\" to \"$source\"", "output": "ln -s \"$source\" -t ~/newlinks"}
{"input": "Archive \"source\" to \"destination\" via ssh with \"rwX\" permissions", "output": "rsync -rvz --chmod=ugo=rwX -e ssh source destination"}
{"input": "Bind mount \"/something\" on \"/new_something\"", "output": "mount --bind /something /new_something"}
{"input": "Updates 'openssl' packages without using of 'epel' repository.", "output": "sudo yum --disablerepo epel update openssl"}
{"input": "find all the regular/normal files in the /path folder and delete them", "output": "find /path -type f -exec rm '{}' \\;"}
{"input": "Find all files/directories under current directory that are greater than 10MB in size", "output": "find . -size +10M"}
{"input": "Read a line from standard input with prompt \"Is this a good question (y/n)? \" and save the response to variable \"answer\"", "output": "read -p \"Is this a good question (y/n)? \" answer"}
{"input": "Find all files that are set user ID to root", "output": "find . -user 0 -perm -4000 -print"}
{"input": "Print each line in \"file\", \"file2\", and \"file3\" and replace any tabs with spaces", "output": "paste file file2 file3 | sed 's/\\t/ /'"}
{"input": "Find all the regular files under $DIR directory tree which have been modified before the file $a excluding the file $a and delete them", "output": "find \"$DIR\" -type f \\! -newer \"$a\" \\! -samefile \"$a\" -delete"}
{"input": "Modify interval to 0.1 seconds for the watch command", "output": "watch -n 0.1"}
{"input": "Find user daniel's files of type jpeg without `autumn' in the name", "output": "find . -user daniel -type f -name *.jpg ! -name autumn*"}
{"input": "Search for 'mystring' in all *.txt (case insensitive) files under current directory", "output": "find . -iname *.txt -exec egrep mystring \\{\\} \\;"}
{"input": "Remove files that are less than 1MB in size under current directory", "output": "find . -size -1M -exec rm {} \\;"}
{"input": "Search for files only that end with .php and look for the string $test inside those files", "output": "find . -name \\*.php -type f -print0 | xargs -0 grep -Hn '$test'"}
{"input": "search for all the directories in a folder and limit the search to current folder and give them as input to the python script", "output": "find /stuff -maxdepth 1 -type d -exec script.py {} +"}
{"input": "Updates all installed software.", "output": "yum update"}
{"input": "Find all files excluding *.gz files in the current directory tree and compress them with gzip", "output": "find . -type f ! -name '*.gz' -exec gzip \"{}\" \\;"}
{"input": "display all the files in the current folder which do not belong to any group", "output": "find . -nogroup"}
{"input": "display all the files in the current folder excluding those ending with \".disabled\" in sorted order", "output": "find /target/ | grep -v '\\.disabled$' | sort"}
{"input": "Find all of the distinct file extensions in current directory", "output": "find . -type f | perl -ne 'print $1 if m/\\.([^.\\/]+)$/' | sort -u;"}
{"input": "Find all directories named 'modules' that don't include any other directory named 'modules'", "output": "find . -name modules \\! -exec sh -c 'find {} -mindepth 1 -name modules|read' \\; -print"}
{"input": "Recursively copy directory \"/path/to/data/myappdata\" to \"user@host:/remote/path/to/data/newdirname\"", "output": "rsync -rvv --recursive /path/to/data/myappdata user@host:/remote/path/to/data/newdirname"}
{"input": "change the extension of all the text files from .txt to .txt_bak in current folder", "output": "find . -name '*.txt' -exec sh -c 'mv \"$0\" \"${0%.txt}.txt_bak\"' {} \\;"}
{"input": "Search all *.c files from the current directory tree for \"hogehoge\"", "output": "find . -name \\*.c -print0 | xargs -0 grep hogehoge /dev/null"}
{"input": "Recursively removes all files like '*.pyc' in a current folder.", "output": "find . -name '*.pyc' -print0 | xargs -0 rm"}
{"input": "Print unique lines in \"file1\" compared to \"file2\" in the order they appear", "output": "comm -23 <(sort file1) <(sort file2)|grep -f - file1"}
{"input": "search all the files in the folder \"myfiles\" which have the word \"blue\" in their name", "output": "find /myfiles -name '*blue*'"}
{"input": "Find all files whose names end with \"~\" in the /home/peter directory tree, following symlinks, and delete them", "output": "find -L /home/peter -name *~ -exec rm '{}' \\;"}
{"input": "Split \"data.tsv\" into files of at most 5000000 lines each with prefix \"_tmp\"", "output": "split -l5000000 data.tsv '_tmp';"}
{"input": "display all the text files in the temp folder", "output": "find /tmp -name *.txt"}
{"input": "split file input.txt into pieces per 1 line named output.NNNNN", "output": "split --lines=1 --suffix-length=5 input.txt output."}
{"input": "Find all regular *.css files", "output": "find . -type f -name \"*.css\""}
{"input": "display a long listing of all the regular/normal files in the file system which have set uid bit or set gid bit enabled.", "output": "find / -type f \\( -perm -4000 -o -perm -2000 \\) -exec ls -l {} \\;"}
{"input": "search for the word \"damian\" in all the regular/normal files in the /etc folder and display only the matched file name", "output": "find /etc -type f | xargs grep -l -i \"damian\""}
{"input": "Generates default-formatted file name of temporary file in a /dev/mapper folder, and saves path to it in a variable 'MAPPER'.", "output": "MAPPER=$(mktemp -up /dev/mapper)"}
{"input": "find all files in the current folder which are of size 0 bytes.", "output": "find . -type f -empty"}
{"input": "Pair side-by-side content of the 'file' and its side-mirrored content", "output": "paste -d ' ' file <(rev file)"}
{"input": "Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using find's -ls option", "output": "find ./ -daystart -mtime -3 -type f  ! -mtime -1 -exec ls -ld {} \\;"}
{"input": "Find out all files owned by user vivek", "output": "find / -user vivek"}
{"input": "Find files that have been modified within the last month and copy them somewhere", "output": "find /etc/ -mtime -30 | xargs -0 cp /a/path"}
{"input": "Finds strings with 'TEXT' from *.log files and prints all but first field from any space-delimited string.", "output": "grep -e TEXT *.log | cut -d' ' --complement -s -f1"}
{"input": "Save the list of all .py files under and below the current directory to output.txt", "output": "find . -name \"*.py\" -type f > output.txt"}
{"input": "count lines of C or C++ or Obj-C code under the current directory", "output": "find . \\( -name \"*.c\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.m\" \\) -print0 | xargs -0 wc"}
{"input": "Convert \"1199092913\" to dotted decimal IPv4 address", "output": "ping -c1 1199092913 | head -n1 | grep -Eow \"[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+\""}
{"input": "Delete all files under root whose status were changed more than 30 minutes ago", "output": "find root -type -f -cmin +30 -delete"}
{"input": "Search for occurrences of string \"main(\" in the .c files from the current directory tree", "output": "find . -type f -name \"*.c\" -print -exec grep -s \"main(\" {} \\;"}
{"input": "Compare \"$source_file\" and \"$dest_file\" line by line", "output": "diff \"$source_file\" \"$dest_file\""}
{"input": "Find all files/directories named 'file' and print them with null character as the delimiter instead of newline", "output": "find -name file -print0"}
{"input": "Search for files/directories which are writable by either their owner or their group", "output": "find . -perm /220"}
{"input": "find all the files in the folder /opt which have been modified between 20 to 50 days ago", "output": "find /opt -mtime +30 -mtime -50"}
{"input": "Find all files/directories under current directory that match the case insensitive regex ./\\(RT\\|ED\\).* and show several lines of output from the beginning", "output": "find . -iregex './\\(RT\\|ED\\).*' | head"}
{"input": "Find all files in your home directory and below that are smaller than 100M.", "output": "find ~ -size -100M"}
{"input": "Remove all directories in and below the current directory", "output": "find \\! -name . -type d -print0 | xargs -0 rmdir"}
{"input": "List all files under current directory matching the regex '.*\\(c\\|h\\|cpp\\)'", "output": "find . -type f -regex '.*\\(c\\|h\\|cpp\\)' -exec ls {} \\;"}
{"input": "Search all regular files in the current directory tree for \"example\"", "output": "find -type f -print0 | xargs -r0 grep -F 'example'"}
{"input": "Prints path to folder that contains file \"/path/to/vm.vmwarevm/vm.vmx\".", "output": "dirname \"/path/to/vm.vmwarevm/vm.vmx\""}
{"input": "display the name of all directories in the current folder and do not search in sub directories", "output": "find . -type d -maxdepth 1 -exec basename {} \\;"}
{"input": "Measure the disk space taken up by all *.txt files in directory tree /home/d", "output": "find /home/d -type f -name \"*.txt\" -printf \"%s\\n\" | awk '{s+=$0}END{print \"total: \"s\" bytes\"}'"}
{"input": "Replace newline with \"_\" in \"file\" then search for \"_foo_\" and output with \"_\" characters deleted", "output": "grep -o \"_foo_\" <(paste -sd_ file) | tr -d '_'"}
{"input": "Find all files in the current directory tree named 'FILES.EXT'", "output": "find . -name \"FILES.EXT\""}
{"input": "Search for the wp-config.php file in /var/www and one level below", "output": "find /var/www/ -name wp-config.php -maxdepth 2"}
{"input": "Print \"hello\" followed by the current user name", "output": "echo hello `whoami`"}
{"input": "display all the files in the current folder which have the permissions 777 and which have been modified in the last 24 hours.", "output": "find . -perm 777 -a -mtime 0 -a -print"}
{"input": "Find all SGID files in entire file system", "output": "find / -perm +2000"}
{"input": "Print the byte count of all regular files found in the current directory tree", "output": "find . -type f | xargs | wc -c"}
{"input": "Recursively find the latest modified file in the current directory and print the modification time and filename", "output": "find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\\n'| sort -n | tail -n1"}
{"input": "Print the last 10 commands in history", "output": "history | tail -n 10"}
{"input": "change the permissions of all the regular/normal files to 664 in the current folder", "output": "find . -type f -exec chmod 664 {} \\;"}
{"input": "Find all the SGID bit files whose permissions set to 644 in the file system", "output": "find / -perm 2644"}
{"input": "Recursively finds all files older than 7 minutes under the current directory, saves list of found files, and compresses them, executing at most 10 compress process at a time.", "output": "find . -type f  -mtime +7 | tee compressedP.list | xargs -I{} -P10 compress {} &"}
{"input": "Print '-okdir is an action so an implicit -print is not applied' for each file/directory found by the name 'file' under current directory tree", "output": "find -name file -okdir echo '-okdir is an action so an implicit -print is not applied' \\;"}
{"input": "Display environment variable \"_\" of the current shell", "output": "set | grep \"^_=\""}
{"input": "create a tar file of all the songs on my system that have been modified in the last 180 days (which is essentially six months)", "output": "find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar"}
{"input": "Test if a file named 'file' in the current directory is more than 1 hour old", "output": "find file -prune -cmin +60 -print | grep -q ."}
{"input": "display all the files in the home folder", "output": "find $HOME -print"}
{"input": "split file data.csv into pieces per 100 lines named with additional suffix \".csv\"", "output": "split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_"}
{"input": "List all functions or variables containing \" ()\" defined in the shell", "output": "set | grep \" ()\""}
{"input": "Find all files under current directory and show their file information", "output": "find . -type f -print0 | xargs -0 file"}
{"input": "Count the number of files in the directory trees whose pathnames match pattern '/dev/sd*[a-z]'", "output": "find /dev/sd*[a-z] -printf . | wc -c"}
{"input": "search for all the directories in a folder and limit the search to current folder and give them as input to the python script", "output": "find /stuff/* -type d -maxdepth 1 -print0 | xargs -0 script.py"}
{"input": "Go to /tmp directory.", "output": "cd /tmp"}
{"input": "Compare *.csv files in the current directory tree with their analogs stored in /some/other/path/", "output": "find . -name \"*.csv\" -exec diff {} /some/other/path/{} \";\" -print"}
{"input": "print list of all alias commands", "output": "alias -p | cut -d= -f1 | cut -d' ' -f2"}
{"input": "Locate all `readme.txt' files under the home directory", "output": "find ~ -name readme.txt"}
{"input": "Recursively remove all \"*.txt\" files and answer \"y\" to any prompt", "output": "yes | rm -r *.txt"}
{"input": "display all the \".c\" files in the current folder excluding those that are present in the .svn sub folder", "output": "find .  -name .svn -prune -o -name \"*.c\" -print"}
{"input": "find all normal/regular files in the folder /some/dir and save the output to the file \"somefile\"", "output": "find /some/dir/ -type f > somefile"}
{"input": "Find all files/directories with space in their names under  /tmp/ directory and rename them by replacing all spaces with _", "output": "find /tmp/ -depth -name \"* *\" -execdir rename 's/ /_/g' \"{}\" \\;"}
{"input": "Print the sizes of all files from the current directory tree", "output": "find . -iname '*.jpg' -type f -printf +%b"}
{"input": "Find all files/directories named '.todo' under $STORAGEFOLDER directory tree and print their parent paths", "output": "find \"$STORAGEFOLDER\" -name .todo -printf '%h\\n'"}
{"input": "find al the files that are modified exactly 2 days ago", "output": "find -daystart -mtime 2"}
{"input": "find all the files in the current directory and print them excluding those that have the name SCCS.", "output": "find . -print -o -name SCCS -prune"}
{"input": "find not case sensitive all directories that names are 'project.images'", "output": "find  / -type d -iname \"project.images\" -ls"}
{"input": "Save the list of all regular files accessed less than 10 days ago as `March.files'", "output": "find / -type f -atime -10 > March.files"}
{"input": "Print second section of space-separated data from text file \"a\".", "output": "cut \"-d \" -f2 a"}
{"input": "Execute \"myscript.rb\" with the first argument as the current host name and the second \"file.txt\"", "output": "echo \"`hostname -i` file.txt\" | xargs myscript.rb"}
{"input": "Find *.tex files in the current directory tree that contain text \"documentclass\"", "output": "find . -type f -name *.tex -print0 | xargs -0 grep -l 'documentclass'"}
{"input": "Remove all *.swp files under current directory", "output": "find . -name \"*.swp\"|xargs rm"}
{"input": "Find files/directories named 'sar' under '/usr', '/bin', '/sbin' and '/opt' directory tree", "output": "find /usr /bin /sbin /opt -name sar"}
{"input": "find all the jpg images in the folder /path/to/files which have been modified after after the file \"timestamp\" and convert them into pdf.", "output": "find /path/to/files -iname '*.jpg' -newer timestamp -exec mogrify -format pdf {} +; touch timestamp"}
{"input": "Change the ownership of all files in the current directory tree to myuser:a-common-group-name", "output": "find . -exec chown myuser:a-common-group-name {} +"}
{"input": "Report file system containing /example disk usage in kilobytes.", "output": "df -k /example"}
{"input": "Make 3 directories named \"~/Labs/lab4a/folder\" followed by the number 1, 2, or 3", "output": "mkdir ~/Labs/lab4a/folder{1,2,3}"}
{"input": "Find all *.texi files in /usr/local/doc", "output": "find /usr/local/doc -name '*.texi'"}
{"input": "Request NS record for com. domain, receiving only authoritative answers", "output": "dig NS +aaonly com."}
{"input": "Find all python files (.py files) in $topdir directory tree and search for 'Makefile' in all these folders and display all distinct folders having 'Makefile'", "output": "find \"$topdir\" -name '*.py' -printf '%h\\0' | xargs -0 -I {} find {} -mindepth 1 -maxdepth 1 -name Makefile -printf '%h\\n' | sort -u"}
{"input": "show the sum of disk used by all the files that belong to the user \"test1\" in the entire file system", "output": "find / -user test1 -exec du -sm {} \\;|awk '{s+=$1}END{print s}'"}
{"input": "Set permissions for files in `foldername' and its subdirectories to 644", "output": "find foldername -type f -exec chmod 644 {} \";\""}
{"input": "display all the files in the entire file system which begin with \"apache-tomcat\"", "output": "find / -name \"apache-tomcat*\""}
{"input": "show all the files in the entire file system which are bigger than 1.1GB", "output": "find / -size +1.1G"}
{"input": "display files ending with \".ext\" in current folder excluding those that are present in the list list.txt", "output": "find . -type f -name \"*.ext\" -exec grep -v \"^{}$\" list.txt && echo {} \\;"}
{"input": "returns the first 100 bytes in the file", "output": "head -c 100 file"}
{"input": "Find all directories under <path> excluding hidden directories and their subdirectories", "output": "find <path> -name '.*' -prune -o -type d -print"}
{"input": "Removes all empty folders within $DELETEDIR folder.", "output": "find \"$DELETEDIR\" -mindepth 1 -depth -type d -empty -exec rmdir \"{}\" \\;"}
{"input": "Delete all lines matching \"some string here\" in \"yourfile\"", "output": "sed --in-place '/some string here/d' yourfile"}
{"input": "Disables shell option 'dotglob'.", "output": "shopt -u dotglob"}
{"input": "get the root access", "output": "sudo su"}
{"input": "Move \"file.txt\" to docker container \"$CONTAINER_ID\" in path \"/var/lib/docker/devicemapper/mnt/$CONTAINER_ID/rootfs/root/file.txt\"", "output": "mv -f file.txt /var/lib/docker/devicemapper/mnt/$CONTAINER_ID/rootfs/root/file.txt"}
{"input": "create a backup of all the files in the file system which belong to the suer edwarda to the floppy", "output": "find / -user edwarda -print | cpio -ovBc > /dev/rfd0"}
{"input": "find all the mp4 video files in the current folder and save the output to the file /tmp/$$", "output": "find . -name \u2018*.mp4\u2019 >> /tmp/$$"}
{"input": "find all the files which end with \".deb\" and display their base name (strip the extension)", "output": "find . -name '*.deb' | xargs -n1 basename"}
{"input": "Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.", "output": "find /       \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , \\              \\( -size +100M -fprintf /root/big.txt  '%-10s %p\\n' \\)"}
{"input": "Perform a dry run replacing \"special\" with \"regular\" in all file names in the current directory", "output": "rename -n 's/special/regular/' **"}
{"input": "List all empty files in the current directory tree", "output": "find . -type f -empty"}
{"input": "Extract rpm \"foo.rpm\"", "output": "rpm2cpio foo.rpm | xzcat | cpio -idmv"}
{"input": "Delete all files and directories", "output": "find -delete"}
{"input": "Find all files/directories under current directory tree whose names start with 'some_text_2014.08.19'", "output": "find . -name 'some_text_2014.08.19*'"}
{"input": "Send SIGHUP (hangup) signal to all parents of zombie processes.", "output": "kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }')"}
{"input": "Run 'git pull' and, if successful, 'git status' in every git repository in the current directory", "output": "find . -type d -name .git -exec sh -c \"cd \\\"{}\\\"/../ && pwd && git pull && git status\" \\;"}
{"input": "display all normal/regular files in current directory", "output": "find . -type f -print0"}
{"input": "Merge lines from files \"file1\", \"file2\", \"file3\", \"file4\", \"file5\", replace \"\\t\" with \" \\t\", and format the \"\\t\" delimited result as a table", "output": "paste file{1,2,3,4} | sed -e 's/\\t/ \\t/g' | column -t -s$'\\t'"}
{"input": "find all the text files in current folder and change the extension of these files and move them to another folder", "output": "find . -name \"*.txt\" | xargs -I{} sh -c 'base=$(basename $1) ; name=${base%.*} ; ext=${base##*.} ; mv \"$1\" \"foo/${name}.bar.${ext}\"' -- {}"}
{"input": "Find all regular files under $FILES_PATH directory tree and save the output to 'FILES' variable", "output": "FILES=$(find $FILES_PATH -type f -name \"*\")"}
{"input": "Find all sample* files/directories under current directory and print 'program {}-out {}' where {} will expand to file paths", "output": "find . -name \"sample*\" | xargs -i echo program {}-out {}"}
{"input": "File 'mydatafile' has a number on each line, display the sum of these numbers.", "output": "awk '{s+=$1} END {print s}' mydatafile"}
{"input": "Gets IP addresses of all active network interfaces.", "output": "ifconfig | grep -oP \"(?<=inet addr:).*?(?=Bcast)\""}
{"input": "Find all executables in the current directory tree", "output": "find ./ -executable"}
{"input": "Find all 'test' directories in the current directory tree", "output": "find -type d -a -name test"}
{"input": "Remove all .txt files in and below the current directory", "output": "find . -name \"*.txt\" -delete"}
{"input": "Search the /myfiles directory tree for files last modified 2 days ago", "output": "find /myfiles -mtime 2"}
{"input": "Copy a file xyz.c to all directories or over all files matching the letter 'c' at the end of their names under current directory tree", "output": "find . -name \"*c\" -print0 | xargs -0 -n1 cp xyz.c"}
{"input": "Print the full path of command \"gcc\"", "output": "which gcc"}
{"input": "Find all files under current directory and set read permission for group and other for these files", "output": "find . -type f -print0 | xargs -0 chmod go+r"}
{"input": "display all files in current directory discard any errors and save the output to a file", "output": "find . 2>&1 | grep -v 'permission denied' > files_and_folders"}
{"input": "Find all .core files on the system starting from / and delete them", "output": "find / -name \"*.core\" | xargs rm"}
{"input": "Import the uncompressed contents of the last modified file  matching \"*.sql.gz\" into \"mysql\"", "output": "ls -Art *.sql.gz |tail -n 1 |xargs gunzip -c | mysql --user=user --password=password database"}
{"input": "Find all files/directories named 'vimrc' in the entire filesystem", "output": "find / -name vimrc"}
{"input": "display all the regular files in the current folder that are exactly 10KB", "output": "find . -type f -size 10k"}
{"input": "Find all the files which were modified 50 days ago", "output": "find / -mtime 50"}
{"input": "Searches available packages with 'mysql' and 'client' in name.", "output": "yum search mysql | grep client"}
{"input": "Find all files on smbfs mounts and print its information and file type", "output": "find $(mount -t smbfs | awk '{print $3}') -mount -type f -ls -execdir file {} \\;"}
{"input": "Find files that were modified more than 7 days ago and archive them", "output": "find . -type f -mtime +7 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`"}
{"input": "Print the current working directory with resolved symbolic links", "output": "pwd -P"}
{"input": "Use 'less' to nicely display control characters from the outupt of 'grep'.", "output": "grep -b -o $'\\x0c' filename | less"}
{"input": "search for al cpp files in current folder and display unique parent directory of these files in sorted order", "output": "find . -name \"*.cpp\" -exec dirname {} \\; | sort -u"}
{"input": "Remove trailing white spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths and keep backups of the originals", "output": "find . -type f -not -iwholename '*.git*' -print0  | xargs -0 sed -i .bak -E \"s/[[:space:]]*$//\""}
{"input": "Split the contents of all \".txt\" excluding the first 1000 lines into files of at most 1000 lines each", "output": "cat *.txt | tail -n +1001 | split --lines=1000"}
{"input": "Print 3 space separated '%'", "output": "echo $(yes % | head -n3)"}
{"input": "find all files in the file system which belong to the group users and having the word \"filename\" in their name.", "output": "find / -group users -iname \"filename\""}
{"input": "display all the files  in the current folder excluding those which are present in \"./src/emacs\" folder", "output": "find  .  -path  './src/emacs'  -prune  -o -print"}
{"input": "Takes first text field from file 'file.txt' as a domain name and gets short A record for this one.", "output": "awk '{print $1}' file.txt | xargs dig +short"}
{"input": "Recursively find the latest modified file in the current directory", "output": "find . -type f | xargs ls -ltr | tail -n 1"}
{"input": "Rename file with inode number 31467125 to new_name.html", "output": "find . -type f -inum 31467125 -exec /bin/mv {} new_name.html \\;"}
{"input": "Print all files with a '-' after their name if they are regular files, and a '+' otherwise", "output": "find / -type f -exec echo {} - ';' -o -exec echo {} + ';'"}
{"input": "Attaches to a 'session name' tmux session.", "output": "tmux attach -t <session name>"}
{"input": "Delete all files in the /myDir directory tree that were last modfied 7 days ago", "output": "find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} \\;"}
{"input": "Calculate the md5 sum of all the file metadata in the current directory tree excluding \".svn\"", "output": "find . -name '.svn' -prune -o -type f -printf '%m%c%p' | md5sum"}
{"input": "Find command will display top 10 Big files from current directory .", "output": "find . -type f -exec ls -s {} \\; |sort -n -r |head"}
{"input": "Read a line from standard input with prompt \"<Your Friendly Message here> : y/n/cancel\" and save the response to variable \"CONDITION\"", "output": "read -p \"<Your Friendly Message here> : y/n/cancel\" CONDITION;"}
{"input": "delete all the log files in the current folder", "output": "find ./ -name '*.log' | xargs rm"}
{"input": "Search the files from directory tree \"dirname\" for string \"foo\"", "output": "find dirname  -print0 | xargs -0 grep foo"}
{"input": "Find all regular .abc files under and below /the/path and rename them prefixing their names with \"version_1\"", "output": "find /the/path -type f -name '*.abc' -execdir rename 's/\\.\\/(.+)\\.abc$/version1_$1.abc/' {} \\;"}
{"input": "Recursively change the user and group of all files in \"/var/log/jenkins\" to \"root\"", "output": "chown -R root:root /var/log/jenkins"}
{"input": "Prints full process tree with id number of each process.", "output": "pstree -p"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree", "output": "find . -type f -name \"*.*\" | awk -F. '{print $NF}' | sort -u"}
{"input": "Find all MP3 files in the home directory tree that were modified in the last 24 hours", "output": "find ~ -type f -mtime 0 -iname '*.mp3'"}
{"input": "find all the files in the file system that belong to the user www", "output": "find / -user www -print"}
{"input": "Push the current directory path to the dirs stack", "output": "pushd `pwd`"}
{"input": "Find all SGID set files under current directory and show a few lines of output from the beginning", "output": "find . -perm /g+s | head"}
{"input": "Find all files/directories with space in their names under $1 directory", "output": "find $1 -name '* *'"}
{"input": "Find directory \"your/dir\" if it is empty", "output": "find your/dir -prune -empty -type d"}
{"input": "Calculate md5 checksum of the list of all files/dirs in /path recursively including dot files and excluding the patterns 'run', 'sys', 'tmp' and 'proc', then check the checksum against the checksum saved in /tmp/file", "output": "ls -alR -I dev -I run -I sys -I tmp -I proc /path | md5sum -c /tmp/file"}
{"input": "Execute \"chown -R ask:ask /www/askapache.com\" in the background on server \"askapache\"", "output": "ssh askapache 'nohup sh -c \"( ( chown -R ask:ask /www/askapache.com &>/dev/null ) & )\"'"}
{"input": "Remove trailing whitespaces in .txt files from the current directory tree", "output": "find . -type f -name \"*.txt\" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' \"$i\">/tmp/.$$ && mv /tmp/.$$ \"$i\";done' arg0 {} +"}
{"input": "Find all regular files in the current directory tree that have been modified within the last 10 minutes", "output": "find . \u2013type f -mmin -10"}
{"input": "Search directories /path/to/directory/folder{1..50} for .txt files", "output": "find /path/to/directory/folder{1..50} -name '*.txt'  2>/dev/null"}
{"input": "Write the standard output and error of \"ls\" to standard output and \"/tmp/ls.txt\"", "output": "ls 2>&1 | tee /tmp/ls.txt"}
{"input": "Find all executable upvoter-* files (following symlinks) under maximum 1 level down the current directory", "output": "find -L -maxdepth 1 -name 'upvoter-*' -type f -perm /111"}
{"input": "Prompt the user with a question \"This is the question I want to ask?\" and save \"y\" or \"n\" in variable \"REPLY\" in zsh", "output": "read REPLY\\?\"This is the question I want to ask?\""}
{"input": "find all php files in the folder  /var/www/", "output": "find /var/www/ -type f -iname \"*.php\" -print"}
{"input": "find all the directories  with the name \"c\" in the current folder which are at least 3 levels deep and which are not present in the path \"/p/\".", "output": "find -mindepth 3 -type d -path '*/p/*' -prune -o -name c -print"}
{"input": "Print the MD5 message digest of \"/path/to/destination/file\"", "output": "md5sum /path/to/destination/file"}
{"input": "Find all files/directories under current directory and print them", "output": "find . -print0 | xargs -I{} -0 echo {}"}
{"input": "Finds real time report in a 'sleep 1' command execution statistic.", "output": "{ time sleep 1; } 2>&1 | grep real"}
{"input": "Find \".c\" and \".h\" files in the current directory tree and print line numbers and lines containing \"#include\"", "output": "tree -if | grep \\\\.[ch]\\\\b | xargs -n 1 grep -nH \"#include\""}
{"input": "Show who is logged on", "output": "who"}
{"input": "display the directory name along with the modified time  for all the files /var", "output": "find /var -maxdepth 2 -type d -printf \"%p %TY-%Tm-%Td %TH:%TM:%TS %Tz\\n\""}
{"input": "List all files in /home/bozo/projects directory tree that were modified exactly one day ago", "output": "find /home/bozo/projects -mtime 1"}
{"input": "Disables shell option 'nocasematch'.", "output": "shopt -u nocasematch"}
{"input": "list all files under .performance_test directory except .performance_test/prune_me directory", "output": "find \".performance_test\" -not \\( -path \".performance_test/prune_me\" -prune \\) -exec bash -c 'echo \"$0\"' {} \\;"}
{"input": "Lists all directories in '/home/alice/Documents/'.", "output": "ls -d /home/alice/Documents/*/"}
{"input": "find all regular file and create jw-htmlfiles.tar", "output": "find . -type f -name \"*html\" | xargs tar cvf jw-htmlfiles.tar -"}
{"input": "Sort the contents of file \"ips.txt\", eliminate duplicate entries, and prefix each entry with number of occurrences.", "output": "sort ips.txt | uniq -c"}
{"input": "Find files in entire file system with at least 644 permissions", "output": "find / -perm -u+rw,g+r,o+r"}
{"input": "Compress every file in the current directory tree that matches \"*cache.html\" and keep the original file", "output": "find . -type f -name \"*cache.html\" -exec sh -c \"gzip < {} > {}.gz\" \\;"}
{"input": "Output all lines in BigFile.csv whose secondn comma-separated second field matches first field of a line in LittleFile.csv.", "output": "join -1 2 -2 1 -t, BigFile.csv LittleFile.csv"}
{"input": "Open all .c files in the current directory tree in the vim editor", "output": "find . -name \"*.c\" -print | vim -"}
{"input": "search for version in system.info files.", "output": "find /home/*/public_html/ -type f -iwholename \"*/modules/system/system.info\" -exec grep -H \"version = \\\"\" {} \\;"}
{"input": "Set the shell prompt to \"host:pwd>\"", "output": "PS1=`hostname`':\\W> '"}
{"input": "Find all files/directories that are owned by user 'wnj' and are newer than 'ttt' by modification time in the entire filesystem", "output": "find / -newer ttt -user wnj -print"}
{"input": "Find all *.jpg files in */201111/* paths and numerically sort them according to the second field in the file name with a delimiter '_'", "output": "find */201111/* -name \"*.jpg\" | sort -t '_' -nk2"}
{"input": "Print a random number from 2000 to 65000", "output": "seq 2000 65000 | sort -R | head -n 1"}
{"input": "Find \"file.xml\" under the current directory and change directory to its parent", "output": "cd `find . -name file.xml -exec dirname {} \\;`"}
{"input": "Delete all files with 128128 inode number under current directory tree", "output": "find . -inum 128128 | xargs rm"}
{"input": "Find all files/directories matching the regex .*sql.*", "output": "find -regex .*sql.*"}
{"input": "Change the owner of \"$JBOSS_CONSOLE_LOG\" to \"$JBOSS_USER\"", "output": "chown $JBOSS_USER $JBOSS_CONSOLE_LOG"}
{"input": "display list of all the files in the current directory", "output": "find | xargs ls"}
{"input": "display all files ending with \".ext\" in current folder and append the file contents of list.txt and sort them based on name and display only uniq items", "output": "find . -name \\*.ext | cat - list.txt | sort | uniq -u"}
{"input": "display all the files in the current folder which are present in the path \"./sr*sc\"", "output": "find . -path './sr*sc'"}
{"input": "find all the files that have been modified in the last 1 day ago", "output": "find -mtime -1"}
{"input": "Split \"system.log\" into files of at most 10 MiB in size with a numeric suffix and prefix \"system_split.log\"", "output": "split -b 10M -d  system.log system_split.log"}
{"input": "Look up for 'myip.opendns.com' in server 'resolver1.opendns.com' and save the terse output in 'IP' variable", "output": "IP=$(dig +short myip.opendns.com @resolver1.opendns.com)"}
{"input": "Set permissions to 400 for regular files under the current directory", "output": "find . -type f -exec chmod 400 {} \\;"}
{"input": "find all the backup files in the current folder and delete them", "output": "find . -type f -name \"*.bak\" -exec rm -f {} \\;"}
{"input": "Search all files in the current directory tree whose names end in \"1\" for string \"1\"", "output": "find . -name \"*1\" -exec grep \"1\" {} +"}
{"input": "Find files/directories in entire file system that were modified a day ago", "output": "find / -mtime 1"}
{"input": "find all the files that have been modified today(from the strart of the day)", "output": "find . -type f -daystart -mtime 0"}
{"input": "Sort and display the file name and creation month of top 11 files in the entire file system (Sort in the order of month )", "output": "find / -type f -printf \"\\n%Ab %p\" | head -n 11 | sort -k1M"}
{"input": "Search the .sh files in the current directory tree for string \"ksh\"", "output": "find . -name \"*.sh\" | xargs grep \"ksh\""}
{"input": "Find all files/directories named 'com.apple.syncedpreferences.plist' (case insensitive) under ~/Library directory tree", "output": "find ~/Library/ -iname \"com.apple.syncedpreferences.plist\""}
{"input": "Find all the SGID bit files under current directory whose permissions set to 644 and show a few lines of output from the beginning", "output": "find . -perm 0644 | head"}
{"input": "Make directories and parents as needed for each unique second \"&\" delimited field with \" \", \",\", and \":\" removed in \"filetypes.txt\"", "output": "mkdir -p `cut -f2 -d\"&\" filetypes.txt | sed 's/[ ,:]//g' | sort -u`"}
{"input": "list all CSS files (and directories ending with \u201c.css\u201d) under the current directory", "output": "find . -name \"*.css\""}
{"input": "Remove characters in columns 34 through 39 in the output of \"finger\"", "output": "finger | colrm 34 39"}
{"input": "Find regular files under / that contain \"stringtofind\" and clear out their contents", "output": "find / -maxdepth 1 -xdev -type f -exec grep -i \"stringtofind\" -q \"{}\" \\; -print0 | xargs -0 sed '/./d"}
{"input": "Find all files/directories that start with 'onlyme' in their names under maximum 2 levels down the current directory", "output": "find . -maxdepth 2 -name 'onlyme*'"}
{"input": "Find all files under current directory and set their permission to 775", "output": "find . -type f -exec chmod 775 {} +"}
{"input": "find all the links in the root folder which point to nothing ( links with their original file deleted ) and display them.", "output": "find / -type l -print | perl -nle '-e || print';"}
{"input": "Save a space separated list of process ids of currently running jobs to variable 'bgxjobs'", "output": "bgxjobs=\" $(jobs -pr | tr '\\n' ' ')\""}
{"input": "Find all 755 permission regular files under current directory tree", "output": "find . -type f -perm 755"}
{"input": "Gets IP address of 'en0' network interface.", "output": "ip addr show en0 | awk '$1 == \"inet\" {gsub(/\\/.*$/, \"\", $2); print $2}'"}
{"input": "Write standard output and error to the console and append to file \"log\"", "output": "./aaa.sh |& tee -a log"}
{"input": "Recursively change the owner of all files in \"/usr/local/lib/node_modules\" to the current user", "output": "sudo chown -R $USER /usr/local/lib/node_modules"}
{"input": "Search the current directory tree for files whose names end in \"rb\" or \"js\" and which contain string \"matchNameHere\"", "output": "find . -regextype posix-ergep -regex \".*(rb|js)$\" -exec grep -l matchNameHere {} \\;"}
{"input": "create directory /etc/cron.5minute", "output": "mkdir /etc/cron.5minute"}
{"input": "Save all directories under the current directory as a comma separated list in variable \"FOLDERS\"", "output": "FOLDERS=$(find $PWD -type d | paste -d, -s)"}
{"input": "Print a detailed list of all files under and below the two directories given as variables $FULFILLMENT and $ARCH1", "output": "find $FULFILLMENT $ARCH1 -exec stat -c '%i,%b,%A,%h,%U,%G,%y,%n' {} \\;"}
{"input": "view the manual page of find", "output": "man find"}
{"input": "Forward all connections to client localhost 3307 via the SSH tunnel to gateway and then connect to host 1.2.3.4 to port 3306", "output": "ssh -f user@gateway -L 3307:1.2.3.4:3306 -N"}
{"input": "Find all files in /dir1 and print only the filenames (not paths)", "output": "find /dir1 -type f -printf \"%f\\n\""}
{"input": "keep only read access to all the files in a directory.", "output": "find /path/to/dir/ -type f ! -perm 0644 -print0 | xargs -0 chmod 644"}
{"input": "Open a session-less connection to 'host' as user 'user' in master mode with a socket \"/tmp/%r@%h:%p\" to enable connection sharing", "output": "ssh user@host -M -S /tmp/%r@%h:%p -N"}
{"input": "find all files in the current folder which have been modified after /etc/passwd", "output": "find -newer /etc/passwd"}
{"input": "Create an empty file in each directory named \"mydir\" under current directory.", "output": "find . -type d -name \"mydir\" -exec touch '{}/abc.txt' \\;"}
{"input": "Take the section of variable \"FILE\" between the last slash and the following dot, if any, and store that section in variable \"NAME\".", "output": "NAME=`basename \"$FILE\" | cut -d'.' -f-1`"}
{"input": "sort each file in the bills directory, leaving the output in that file name with .sorted appended", "output": "find bills -type f -execdir sort -o '{}.sorted' '{}' ';'"}
{"input": "find all files in current folder having the name pattern \"some_pattern\" and move them to the folder target_location (GNU VERSION)", "output": "find . -name some_pattern -print0 | xargs -0 -i mv {} target_location"}
{"input": "Find all regular files under current directory tree containing 'some text' in their names without descending into hidden directories and excluding hidden files", "output": "find . -type d -path '*/\\.*' -prune -o -not -name '.*' -type f -name '*some text*' -print"}
{"input": "display all regular/normal files in the current folder with the name dummy", "output": "find -type f -name dummy"}
{"input": "find all directory list which have empty list in /tmp directory", "output": "find /tmp -type d -empty"}
{"input": "find all the word press configuration php files in the folder /var/www and do not search beyond two levels", "output": "find /var/www/ -name wp-config.php -maxdepth 2"}
{"input": "find directories under the $LOGDIR directory where there has been no modifications within the last 24 hours and compresses the files.", "output": "find $LOGDIR -type d -mtime +0 -exec compress -r {} \\;"}
{"input": "Gets IP addresses of all active network interfaces.", "output": "ifconfig | grep -oP \"(?<=inet addr:).*?(?=  Bcast)\""}
{"input": "Replace all occurrences of word \"foo\" with \"bar\" in *.c and *.h files from the current directory tree", "output": "find -name '*.[ch]' -exec sed -i 's/\\<foo\\>/bar/g' {} +"}
{"input": "find all the files in the home folder that are modified day before yesterday", "output": "find $HOME -mtime -2 -mtime +1"}
{"input": "Move \"caniwrite\" without clobbering into \"/usr/local/bin\"", "output": "mv -nv caniwrite /usr/local/bin"}
{"input": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"", "output": "find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir"}
{"input": "Case-insensitive search all existing environment variables and their values for \"shell\".", "output": "env | grep -i shell"}
{"input": "dispaly a list of all the files in the file system which belong to a specific user  and exclude searching in the folder proc", "output": "find / -path /proc -prune -o -user <account> -ls"}
{"input": "find all the *.conf files under / (root)", "output": "find / -name \"*.conf\""}
{"input": "find all files ending with \"js.compiled\" in current folder", "output": "find . -type f -name \"*.js.compiled\""}
{"input": "Find all .sh files in the current directory tree and remove them", "output": "find . -name \"*.sh\"| xargs rm -rf"}
{"input": "find all the files that have been modified on a specific day and copy them to another directory", "output": "find . -type f -daystart -mtime $date_dif -exec copy_it.sh $verbose -s {} -t $to_dir \\;"}
{"input": "Copy an entire file structure, creating empty files in the copy instead of copying the actual files.", "output": "find src/ -type d -exec mkdir -p dest/{} \\; -o -type f -exec touch dest/{} \\;"}
{"input": "Prints calendar of February, 1900.", "output": "cal 2 1900"}
{"input": "Search the current directory tree for files last accessed more than 10 days ago", "output": "find . -atime +10"}
{"input": "Create an empty file called \"emptyfile.c\"", "output": "cp /dev/null emptyfile.c"}
{"input": "Finds string beginning with 'IFS' in a 'set' output.", "output": "set | grep ^IFS="}
{"input": "Find all *.ext files/directories under current directory and print their path and parent directory path", "output": "find . -name '*.ext' | parallel echo {} '`dirname {}`'"}
{"input": "Search the /path directory tree for files matching pattern '*.foo'", "output": "find /path -name '*.foo'"}
{"input": "search for the host \"slc02oxm.us.oracle.com\" in all the xml files in the current folder and display the files which has the matched content", "output": "find -name \u201c*.xml\u201d -exec grep -l \u201cslc02oxm.us.oracle.com\u201d {} \\;"}
{"input": "Print a randomly sorted list of numbers from 1 to 10 to file \"/tmp/lst\" and outputs \"-------\" followed by the reverse list to the screen", "output": "seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') | tac"}
{"input": "Find all files under media/ directory and change their permission to 600", "output": "find media/ -type f -exec chmod 600 {} \\;"}
{"input": "Find all Name* files under ../../$name-module and rename them by replacing 'Name' with $Name (will be expanded in the sub-shell) in their names", "output": "find ../../$name-module -name 'Name*' -type f -exec bash -c 'mv \"$1\" \"${1/Name/$Name}\"' -- {} \\;"}
{"input": "List all files in entire file system that are newer than the file $newerthan and older than the file $olderthan and sort them according to file modification time", "output": "find / -type f -name \"*\" -newermt \"$newerthan\" ! -newermt \"$olderthan\" -printf \"%T+\\t%p\\n\" | sort | awk '{print $2}'"}
{"input": "Find all directories in maximum 2 levels down the /tmp directory", "output": "find /tmp -maxdepth 2 -mindepth 1 -type d"}
{"input": "delete all the regular files in the temp folder which have not been modified in the last 24 hours + at the end gives bulk input to the rm command", "output": "find /tmp/ -type f -mtime +1 -exec rm {} +"}
{"input": "Set trace prompt to print seconds, nnoseconds, script name, and line number", "output": "PS4='+$(date \"+%s:%N\") %N:%i> '"}
{"input": "Changes group ownership of 'public' to 'pub'.", "output": "chgrp pub public"}
{"input": "Allocate a pseudo-terminal and execute \"screen -r\" followed by \"ls\" on host \"example.com\"", "output": "ssh -t example.com \"screen -r; ls\""}
{"input": "Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found", "output": "cd $(find . -name Subscription.java | xargs dirname)"}
{"input": "Find all files you have modified in the last two days", "output": "find ~ -type f -mtime -2"}
{"input": "Gets domain name from dig reverse lookup.", "output": "$dig -x 8.8.8.8 | grep  PTR | grep -o google.*"}
{"input": "Find a more recent version of httpd.conf file than /etc/apache-perl/httpd.conf in entire file system", "output": "find / -name httpd.conf -newer /etc/apache-perl/httpd.conf"}
{"input": "Search the /Path/bar* directories recursively for files matching pattern \"file_name*\"", "output": "find /Path/bar* -name \"file_name*\""}
{"input": "List files cart1, cart2, ..., cart6 in directory ~/junk", "output": "find ~/junk  -name 'cart[1-6]' -exec ls -l {} \\; 2> /dev/null"}
{"input": "replaces the last occurrence of 'a' with 'c'", "output": "tac | sed '0,/a/ s/a/c/' | tac"}
{"input": "display the count of all the files in the current folder", "output": "find . -print | wc -l"}
{"input": "update the permission of all the files in the folder /u/netinst to 500", "output": "find /u/netinst -print | xargs chmod 500"}
{"input": "Remove the regular files from the current directory tree that were last modified on November, 21", "output": "find -type f -newermt \"Nov 21\" ! -newermt \"Nov 22\" -delete"}
{"input": "SSH into \"localhost\" with forced pseudo-terminal allocation, execute \"$heredoc\", and save the output to variable \"REL_DIR\"", "output": "REL_DIR=\"$(ssh -t localhost \"$heredoc\")\""}
{"input": "List all environment variables (name and value) whose name either equals HOME or PATH, or starts with GO", "output": "env | grep '^\\(GO\\|HOME=\\|PATH=\\)'"}
{"input": "Create intermediate directories \"x\" and \"p\" as required and create \"q\"", "output": "mkdir -p x/p/q"}
{"input": "Print the average time of 4 ping requests to \"www.stackoverflow.com\"", "output": "ping -c 4 www.stackoverflow.com | awk -F '/' 'END {print $5}'"}
{"input": "replace the word foo to bar in the current folder in all the regular/normal files which have execute permission  (does not update the file)", "output": "find . -type f -executable -exec sed -i 's/foo/bar/g' {} +"}
{"input": "Print the contents of \"filename\"", "output": "cat filename"}
{"input": "Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%TY %p\\n'", "output": "find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%TY %p\\n'"}
{"input": "Convert all markdown files on the system to html", "output": "find / -name \"*.md\" -type f -exec sh -c 'markdown \"$0\" > \"$0.html\"' {} \\;"}
{"input": "Unsets all environment variables.", "output": "unset $(/usr/bin/env | /usr/bin/cut -d = -f 1 | /usr/bin/xargs)"}
{"input": "Reverse the space separated words in \"aaaa eeee bbbb ffff cccc\"", "output": "echo \"aaaa eeee bbbb ffff cccc\"|tr ' ' '\\n'|tac|tr '\\n' ' '"}
{"input": "Sort \"file\" using a buffer with a size 50% of main memory", "output": "sort -S 50% file"}
{"input": "Copy recursively \"tata/\" to \"tata2/\" and remove read, write, and execute permission for other", "output": "rsync -avz --chmod=o-rwx -p tata/ tata2/"}
{"input": "find all the files that have been modified in the last 2 days", "output": "find . -type f -daystart -mtime -2"}
{"input": "Append all *.mp3 files modified within the last 180 days to tar archive `music.tar'", "output": "find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar"}
{"input": "display all directories in a folder", "output": "find /etc -type d -print"}
{"input": "Write output of \"ls -a\" to standard output and to \"output.file\"", "output": "ls -a | tee output.file"}
{"input": "Find the unique owners of all the files in the /bin directory", "output": "find /bin -type f -follow | xargs    ls -al | awk ' NF==9 { print $3 }'|sort -u"}
{"input": "Find all the Sticky Bit set files whose permission are 551", "output": "find / -perm 1551"}
{"input": "Search the current user's home directory and its sub-directories for any files accessed after alldata.tar was last accessed and add them to that same tar archive.", "output": "find ~/ -newer alldata.tar \t-exec tar uvf alldata.tar {} \\;"}
{"input": "Search the regular files of the current directory tree for string \"whatever\"", "output": "find . -type f | xargs grep whatever"}
{"input": "Write output of \"whatever\" to standard output and to \"logfile.txt\"", "output": "whatever | tee logfile.txt"}
{"input": "find all text files in current folder and display all files that have the alphabet a in their name", "output": "find . -name \".txt\" | grep a"}
{"input": "Find all files in the current directory tree whose size is greater than 1MB, and move them to the \"files\" folder with confirmation", "output": "find . -size +1M -ok mv {} files \\+"}
{"input": "Remount \"/mnt/mountpoint\" with read and write permission", "output": "mount /mnt/mountpoint -oremount,rw"}
{"input": "create a backup of all normal/regular files in current folder which have been modified between two dates and create a tar.gz file of this backup", "output": "find /path/to/files/ -newermt 20131204 -not -newermt 20131205 -type f -print0 | cpio --create --null  --format=ustar  | gzip > /tmp/dec-4.tar.gz"}
{"input": "Replace all '\u7f6e\u63db\u524d' with '\u7f6e\u63db\u5f8c' in all regular files under current directory tree and modify them in-place", "output": "sudo find . -type f -exec sed -i 's/\u7f6e\u63db\u524d/\u7f6e\u63db\u5f8c/g' {} \\;"}
{"input": "Find all files in the directory $directory or below with the permissions specificed by $permissions.", "output": "find \"$directory\" -perm \"$permissions\""}
{"input": "create a symbolic link named \"/usr/bin/openssl\" to file \"/usr/local/ssl/bin/openssl\"", "output": "ln -s \"/usr/local/ssl/bin/openssl /usr/bin/openssl"}
{"input": "Change directory to the user's home directory", "output": "cd"}
{"input": "Delete all files under user's home directory tree that were accessed more than 365 days after their status was changed", "output": "find ~ -used +365 -ok rm '{}' ';'"}
{"input": "Find all files under /myfiles with 647 permission", "output": "find /myfiles -type f -perm -647"}
{"input": "Prints only unique lines of './script.sh' output.", "output": "./script.sh | sort -u"}
{"input": "Find all files matching pattern '.#*' in the current directory tree", "output": "find -iname '.#*'"}
{"input": "split all files in directory \"/dev/shm/split/\" into pieces per 1000 lines", "output": "find /dev/shm/split/ -type f -exec split -l 1000 {} {} \\;"}
{"input": "Saves 'ls' output together with time report to a file 'time.txt'.", "output": "{ time ls; } 2>&1 |  cat > time.txt"}
{"input": "Print a randomly sorted list of numbers from 1 to 10 to file \"/tmp/lst\" and the screen followed by \" -------\"", "output": "seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')"}
{"input": "Find all directories under 'A' directory tree excluding paths containing the directory 'a'", "output": "find A -type d \\( ! -wholename \"A/a/*\" \\)"}
{"input": "Find all *.ogg (case insensitive) files/directories in entire file system", "output": "sudo find / -iname '*.ogg'"}
{"input": "Recursively list all files on smbfs mounts", "output": "mount -v | grep smbfs | awk '{print $3}' | xargs ls -lsR"}
{"input": "Report only total size of file systems in terabytes.", "output": "df -m | awk '{ SUM += $2} END { print SUM/1024/1024\"TB\" }'"}
{"input": "List the names of the directories in current directory without going into sub-directories", "output": "find . -maxdepth 1 -mindepth 1 -type d -printf '%f\\n'"}
{"input": "Find and remove multiple files such as *.mp3 or *.txt under current directory", "output": "find . -type f -name \"*.txt\" -exec rm -f {} \\;"}
{"input": "Clean the current directory from all subversion directories recursively", "output": "find . -type d -name \".svn\" -print | xargs rm -rf"}
{"input": "Find the directory with least modification time under current directory", "output": "find -type d -printf '%T+ %p\\n' | sort | head -1"}
{"input": "find files in root directory that names are game", "output": "find / -name game"}
{"input": "Print a list of differing files", "output": "diff -q /dir1 /dir2|cut -f2 -d' '"}
{"input": "Execute the `convert' command for every .jpg file in the current directory", "output": "find . -maxdepth 1 -name *.jpg -print -exec convert"}
{"input": "Print file system disk space usage in 1 KiB blocks of the current directory's file system", "output": "df -k ."}
{"input": "Print the full path of command \"rails\"", "output": "which rails"}
{"input": "Remove all files under /home/user/Maildir/.SPAM/cur", "output": "find /home/user/Maildir/.SPAM/cur -type f -exec rm -f '{}' '+'"}
{"input": "Find all *.jpg files in */201111 paths", "output": "find */201111 -name \"*.jpg\""}
{"input": "search the word NEEDLE and substitute it with REPLACEMENT in all the php files of the current folder", "output": "find ./ -type f -exec sed -i '' 's#NEEDLE#REPLACEMENT#' *.php {} \\;"}
{"input": "find the file \"MyCProgram.c\" in the current folder", "output": "find -iname \"MyCProgram.c\""}
{"input": "Search /usr/local recursively for directories whose names end with a number 0-9", "output": "find /usr/local -type d -name '*[0-9]'"}
{"input": "Print a list of all duplicate case insensitive file paths in the current directory tree", "output": "find . | sort -f | uniq -i -d"}
{"input": "display long listing of all the text files in the current folder", "output": "find . -name \"*.txt\" -exec ls -la {} \\;"}
{"input": "Change permissions of \"/dvtcolorconvert.rb\" to 755", "output": "sudo chmod 755 /dvtcolorconvert.rb"}
{"input": "Save the canonical filename of \"$BASH_SOURCE\" in variable \"me\"", "output": "me=$(readlink --canonicalize --no-newline $BASH_SOURCE)"}
{"input": "Searche JSP's for \"TODO\" lines and append them all to a file with a header showing what file they came from", "output": "for f in `find -name \\*.jsp` ; do echo \"==> $f\" >> out.txt ; grep \"TODO\" $f >> out.txt ; done"}
{"input": "List all file paths under the current directory with case insensitive name \".note\" in reverse alphabetic order", "output": "find . -iname '.note' | sort -r"}
{"input": "Print virtual memory usage of all processes owned by \"jbos[s]\"", "output": "ps axu | grep jbos[s] | tr -s ' ' | cut -d' ' -f5"}
{"input": "Find all symbolic links containing 'javaplugin' in their names under '/usr' directory tree", "output": "find /usr/ -lname *javaplugin*"}
{"input": "display all regular/normal files in current folder", "output": "find . -type f"}
{"input": "Save the user name of the current user to variable \"me\"", "output": "me=$(whoami)"}
{"input": "find files having the extension \"bam\" in current directory", "output": "find . -name \"*.bam\""}
{"input": "List all files/directories under current directory matching the posix-egrep type regex \".+\\.(c|cpp|h)$\" in their names", "output": "find . -regextype posix-egrep -regex \".+\\.(c|cpp|h)$\" -print0 | xargs -0 -n 1 ls"}
{"input": "Save the short host name appended with \".mysqldb\" in variable \"DBPREFIX\"", "output": "DBPREFIX=\"$(hostname -s).mysqldb\""}
{"input": "Change all variables containing \"gcc.4.2\" to containing \"gcc64\" in the current shell's environment.", "output": "source <(export | sed 's/gcc.4.2/gcc64/g')"}
{"input": "Return 0 if file system is mounted on '/full/path'", "output": "df /full/path | grep -q /full/path"}
{"input": "find all the files in the current directory which have been modified in the last 30 days and display the contents.", "output": "find . -atime +30 -exec ls \\;"}
{"input": "Finds recursively all files not having extension .o in '/path/' that contain 'pattern', and prints matched strings with string number and file name.", "output": "grep --exclude=*.o -rnw '/path/to/somewhere/' -e \"pattern\""}
{"input": "Read one character from standard input into variable \"REPLY\"", "output": "read -n 1 -r"}
{"input": "Search the current directory tree for regular files whose names begin with \"orapw\"", "output": "find . -name \"orapw*\" -type f"}
{"input": "Split \"input_file\" into files of at most 100 lines each with prefix \"output_file\"", "output": "split -l 100 input_file output_file"}
{"input": "display all the files in the home folder except text files", "output": "find /home ! -name \"*.txt\""}
{"input": "find all the files which have size 0 bytes in temp folder", "output": "find /tmp -type f -empty"}
{"input": "set alias \"unsetvar\" for command 'source /your/path/to/the/script/unsetvar'", "output": "alias unsetvar='source /your/path/to/the/script/unsetvar'"}
{"input": "List all files/directories under current directory", "output": "find | perl -lne 'print quotemeta' | xargs ls -d"}
{"input": "Look for \"testfile.txt\" in the \"/\" directory and 1 level below", "output": "find / -maxdepth 2 -name testfile.txt"}
{"input": "Compress every file in the current directory tree with gzip and keep file extensions the same", "output": "find folder -type f -exec gzip -9 {} \\; -exec mv {}.gz {} \\;"}
{"input": "Searches the manual pages with descriptions in section 3, that name begins with lowercase letter.", "output": "apropos -s 3 . | grep ^[a-z]"}
{"input": "Delete files under $LOCATION that match $REQUIRED_FILES in their names and were modified more than 1 day ago", "output": "find $LOCATION -name $REQUIRED_FILES -type f -mtime +1 -delete"}
{"input": "Prints the day of last Friday in a current month.", "output": "cal | awk '$6{date=$6}END{print date}'"}
{"input": "display all the regular/normal files ending with \".mod\" in a folder", "output": "find \"$dir\" -name \"*.mod\" -type f -print0"}
{"input": "Search for first match of the case insensitive regex 're' in all *.coffee files under current directory and print the file paths along with the matches", "output": "find . -print0 -name '*.coffee'|xargs -0 grep -m1 -ri 're'"}
{"input": "Replace all commas with tab characters in 'filename.csv' and page interactively through the result.", "output": "sed \"s/,/\\t/g\" filename.csv | less"}
{"input": "Find all files called wp-config.php in the /var/www directory and below", "output": "find /var/www/ -name wp-config.php"}
{"input": "Find all *.mov files under current directory", "output": "find . -name \"*.mov\""}
{"input": "Find all files/directories that belong to the group 'accts' under '/apps' directory tree", "output": "find /apps -group accts -print"}
{"input": "Create 6-letter named temporary directory in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmp'", "output": "tmp=$(mktemp -d $(dirname \"$1\")/XXXXXX)"}
{"input": "Search the *.cc files in the current directory tree for string \"xxx\"", "output": "find . -name \"*.cc\" | xargs grep \"xxx\""}
{"input": "Find all files/directories in entire file system that are owned by \"shadow\" group", "output": "find / -group shadow"}
{"input": "Convert all DOS files under and below the current directory to the Unix format", "output": "find . -type f -print0 | xargs -0 -n 1 -P 4 dos2unix"}
{"input": "Copy all files in the current directory except those containing 'Music' to '/target_directory'.", "output": "cp `ls | grep -v Music` /target_directory"}
{"input": "Save the current user name in variable \"myvariable\"", "output": "myvariable=$(whoami)"}
{"input": "Find all regular files undee '/usr/bin' directoryt tree that are less than 50 bytes in size", "output": "find /usr/bin -type f -size -50c"}
{"input": "Replace all occurrence of \"subdomainA.example.com\" with \"subdomainB.example.com\" in all files under /home/www and below", "output": "find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'"}
{"input": "Print mount point of the file system containing $path.", "output": "df -P \"/tmp\" | awk 'BEGIN {FS=\"[ ]*[0-9]+%?[ ]+\"}; NR==2 {print $NF}'"}
{"input": "Print the text file paths that match 'needle text' in their contents under 'my_folder' recursively", "output": "grep -rl \"needle text\" my_folder | tr '\\n' '\\0' | xargs -r -0 file | grep -e ':[^:]*text[^:]*$' | grep -v -e 'executable'"}
{"input": "Highlights current day in a month calendar with color.", "output": "cal -h | sed \"s/ $(date +%d) /\"$'\\033\\[94m&\\033\\[0m/g; '\"s/ $(date +%d)$/\"$'\\033\\[94m&\\033\\[0m/g'"}
{"input": "Open all .java files in the current directory tree in the vim editor", "output": "find . -name '*.java' | xargs vim"}
{"input": "Search all files in the current directory tree, except *.html and *.svn*, for \"SearchString\"", "output": "find . ! -name '*.html' ! -name '*.svn*' -exec grep 'SearchString' {} /dev/null \\;"}
{"input": "Convert Unix `cal` output to latex table code.", "output": "cal 02 2012|perl -F'(.{1,3})' -anE'BEGIN{$,=\"\\t&\";$\\=\"\\t\\\\\\\\\\n\"}$.==1||eof||do{$i//=@F;print@F[map{$_*2-1}(1..$i/2)]}'"}
{"input": "Find all 400 permission files under /data directory with null character as the delimiter", "output": "find /data -type f -perm 400 -print0"}
{"input": "Create a symbolic link named \"~/bin/subl\" to \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"", "output": "ln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" ~/bin/subl"}
{"input": "show all files in /usr/tom and display only files ending with \".pl\" or \".pm\"", "output": "find /usr/tom | egrep '*.pl| *.pm'"}
{"input": "Print the first 10 files or directories found in the current directory tree by `find'", "output": "find | head"}
{"input": "Display summary of each specified file in human readable form", "output": "du -sh *"}
{"input": "Starts 'chromium', storing user data in a newly created temporary folder.", "output": "(chromium --user-data-dir=$(mktemp -d) &)"}
{"input": "Print the list of files and directories of the current directory including \".\"", "output": "find . \\( -name . -o -prune \\)"}
{"input": "change the group to \"new_group\" and permissions to 770 for all the files in the current folder", "output": "find . -name \"*\" \\( -exec chgrp -v new_group {} \\; -o -exec chmod -v 770 {} \\; \\)"}
{"input": "Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt", "output": "find /mnt/zip -name \"*prefs copy\" -print0 | xargs>    -p rm"}
{"input": "Print all unique file paths under \"dir1\" compared to \"dir2\"", "output": "comm -23 <(find dir1 -type f | sed 's/dir1/\\//'| sort) <(find dir2 -type f | sed 's/dir2/\\//'| sort) | sed 's/^\\//dir1/'"}
{"input": "extract \"phantomjs-1.9.0-linux-x86_64.tar.bz2\"", "output": "sudo tar xvf phantomjs-1.9.0-linux-x86_64.tar.bz2"}
{"input": "Find all *.txt files/directories under your home directory", "output": "find ~ -name \"*.txt\" -print"}
{"input": "Find all files/directories in entire file system that have  \"write\" bit set for either the owner, the group, or others", "output": "find / -perm /u+w,g+w,o+w"}
{"input": "Find files in the current directory tree which have permissions rwx for user and rw for group and others", "output": "find . -perm 766"}
{"input": "Copy all files that match 'FooBar' in their paths under current directory tree to the '~/foo/bar' directory", "output": "find . | grep \"FooBar\" | tr \\\\n \\\\0 | xargs -0 -I{} cp \"{}\" ~/foo/bar"}
{"input": "Find grub.conf files in entire file system discarding errors", "output": "find / -name grub.conf 2>/dev/null"}
{"input": "Find all directories under dir whose names are 33 characters long", "output": "find dir -name '?????????????????????????????????'"}
{"input": "Read a single character from standard input into variable \"runCommand\" with the prompt \"Pick a letter to run a command [A, B, or C for more info] \"", "output": "read -n1 -p \"Pick a letter to run a command [A, B, or C for more info] \" runCommand"}
{"input": "delete all the hidden in the folder Musica after user confirmation", "output": "find M\u00fasica/* -type f -name \".*\" -exec /usr/bin/rm -i {} \\;"}
{"input": "list all the directories in the folder httpdocs", "output": "find httpdocs -type d"}
{"input": "Find all PHP files under current directory that contain only one line", "output": "find -name *.php -print | xargs -L1 awk 'NR>1{exit} END{if(NR==1) print FILENAME}'"}
{"input": "Find all directories under current directory and make them read, write, and executable for owner & group and remove read-write-execute permission for other", "output": "find . -type d -name files -exec chmod ug+rwx,o-rwx {} \\;"}
{"input": "Find all files/directories under '/abs/path/to/directory' directory non-recursively that match the pattern '.*invalidTemplateName.*' in their names", "output": "find /abs/path/to/directory -maxdepth 1 -name '.*invalidTemplateName.*'"}
{"input": "find all the normal files in the home directory which have been accesed in the last 30 days with the size greater than or equal to 100k.", "output": "find $HOME -type f -atime +30 -size 100k"}
{"input": "Counts lines in each *.php file.", "output": "wc -l `find . -name \"*.php\"`"}
{"input": "Find regular files named \"regex\" under and below /dir/to/search/", "output": "find /dir/to/search/ -type f -name 'regex' -print"}
{"input": "Archive \"./htmlguide\" to \"~/src/\" with resolved symbolic links and delete any extraneous files from \"~/src/\" not found in \"./htmlguide\"", "output": "rsync -av --copy-dirlinks --delete ../htmlguide ~/src/"}
{"input": "Find all top level directories under /home that doesn't contain a file/directory named 'bin'", "output": "for d in /home/*/; do find \"$d\" -type d -name bin | grep -q . || echo \"$d\"; done"}
{"input": "Records the number of occurences of 'needle' in the array 'haystack' into the variable 'inarray'", "output": "inarray=$(echo ${haystack[@]} | grep -o \"needle\" | wc -w)"}
{"input": "Find regular files in the current directory tree that have all executable bits set", "output": "find -L . -type f -perm -a=x"}
{"input": "Follows symbolic link $BASH_SOURCE, and prints path to its target.", "output": "$(dirname $(readlink -f $BASH_SOURCE))"}
{"input": "Save standard input to variable 'stdin' until the first character encoded as '\\004' is read", "output": "read -d \"$(echo -e '\\004')\" stdin"}
{"input": "Search the entire system for SUID or SGID files", "output": "find / -path /proc -prune -o -type f -perm +6000 -ls"}
{"input": "Find the files in the current directory that match pattern '*.ISOLATE.quantifier.txt' and move them to folder ISOLATE/", "output": "find -name '*.ISOLATE.quantifier.txt' -maxdepth 1 -exec mv {} ISOLATE/ +"}
{"input": "Remove adjascent duplicate lines from file 'input' comparing all but last space-separated fields", "output": "rev input | uniq -f1 | rev"}
{"input": "Find the top 5 big files", "output": "find . -type f -exec ls -s {} \\; | sort -n -r | head -5"}
{"input": "Make 3 directories named \"$HOME/Labs/lab4a/folder\" followed by a 3 width zero padded number from 1 to 3", "output": "mkdir $(seq -f \"$HOME/Labs/lab4a/folder%03g\" 3)"}
{"input": "Print common lines in sorted files \"ignore.txt\" and \"input.txt\"", "output": "comm -12 ignore.txt input.txt"}
{"input": "Find all files under directory tree /path/to/dir whose permissions are not 644", "output": "find /path/to/dir ! -perm 0644"}
{"input": "Decompress \"file2.txt\" and \"file1.txt\" and print lines in \"file1.txt\" that match the 5th tab separated field in \"file2.txt\"", "output": "awk -F'\\t' 'NR==FNR{a[$5];next} $5 in a' <(zcat file2.txt) <(zcat file1.txt)"}
{"input": "Find all files/directories with 755 permission under current directory tree", "output": "find ./ -perm 755"}
{"input": "set alias \"ps\" for command 'screen -d -m okular'", "output": "alias -s ps='screen -d -m okular'"}
{"input": "Delete all hidden files/directories under $some_directory", "output": "find \"$some_directory\" -name '.*' ! -name '.' ! -name '..' -delete"}
{"input": "Make directories to \"/tmp/test/blah/oops/something\" as needed", "output": "mkdir -p /tmp/test/blah/oops/something"}
{"input": "Find and print the names of all files found in the current directory and all of its sub-directories", "output": "find . -print"}
{"input": "Print content of 'a' file, showing all non-printing characters including TAB characters, and displaying $ at the end of each line.", "output": "cat -vet a"}
{"input": "Find all files in the current directory recursively with \"linkin park\" in their names and copy them to /Users/tommye/Desktop/LP, preserving path hierarchy", "output": "find . -type f -iname \"*linkin park*\" | cpio -pvdmu /Users/tommye/Desktop/LP"}
{"input": "Print which files differ between \"dir1/\" and \"dir2/\"", "output": "diff --brief -r dir1/ dir2/"}
{"input": "Search everywhere for files changed within the last minute", "output": "find / -newerct '1 minute ago' -print"}
{"input": "Finds all php processes running in system.", "output": "pstree | grep php"}
{"input": "Find all files/directories under current directory that match the case insensitive regex ./\\(EA\\|FS\\)_.*", "output": "find . -iregex './\\(EA\\|FS\\)_.*'"}
{"input": "find all files under \"/usr\"", "output": "find /usr -print"}
{"input": "Send SIGKILL signal to process ID 16085, killing it instantly.", "output": "kill -9 16085"}
{"input": "find all empty files in /tmp directory .", "output": "find /tmp -type f -empty"}
{"input": "Get a list of all hidden files from the current directory tree", "output": "find . -type f -name '.*'"}
{"input": "Print only the number of lines in file \"$f\"", "output": "wc -l $f | tr -s ' ' | cut -d ' ' -f 1"}
{"input": "create directory TestProject", "output": "mkdir TestProject"}
{"input": "Find all files with '.conf' extension under '/etc' directory tree that have been modified in the last 30 minutes", "output": "find /etc -name \"*.conf\" -mmin -30"}
{"input": "Read a line from standard input into variable \"message\" with escaped prompt \"Please Enter a Message: \\n\\b\"", "output": "read -p \"$(echo -e 'Please Enter a Message: \\n\\b')\" message"}
{"input": "find all the html, javascript and text files in the current folder", "output": "find . -type f -name \"*.htm*\" -o -name \"*.js*\" -o -name \"*.txt\""}
{"input": "find all the text files in the entire filesystem which belong to the user root and display the ten files.", "output": "find / -user root -iname \"*.txt\" | head"}
{"input": "See the word count of every *.txt file in the home directory", "output": "find ~/ -name '*.txt' -print0 | xargs -0 wc -w"}
{"input": "Find all files in the current directory tree whose size is greater than 1MB, and move them to the \"files\" folder", "output": "find . -size +1M -print0 | xargs -0 -I '{}' mv '{}' files"}
{"input": "find all text files in the current folder excluding those that are presenti n the folder \"/svn\" and search for a pattern.", "output": "find . -name '*.txt' \\! -wholename '*/.svn/*' -exec grep 'sometext' '{}' \\; -print"}
{"input": "Find the 5 largest regular files in the current directory and below.", "output": "find -type f -exec du -Sh {} + | sort -rh | head -n 5"}
{"input": "copy all files which do not have execute permission to another folder", "output": "cp `find -perm -111 -type f` /usr/local/bin"}
{"input": "Find files named \"AssemblyInfo.cs\" in the current directory and below, and run \"git diff\" on them", "output": "find . -name AssemblyInfo.cs | xargs git diff --"}
{"input": "find all the files in the folder /path/to/dir which have been modified after a specific date (Feb 07)", "output": "find /path/to/dir -newermt \u201cFeb 07\u201d"}
{"input": "display all normal/regular files in the folder \"pathfolder\"", "output": "find pathfolder -type f"}
{"input": "list *.bmp and *.txt files under the /home/user/Desktop directory.", "output": "find /home/user/Desktop -name '*.bmp' -o -name '*.txt'"}
{"input": "Display the sizes and filepaths of all files/directories with '.undo' extension under current directory tree", "output": "find -name *.undo -print0 | du -hc --files0-from=-"}
{"input": "Make a copy of the entire contents of dir1 in the Pictures directory located in the user's home directory.", "output": "cp -r dir1/ ~/Pictures/"}
{"input": "Find all *.rb (regular) files under current directory ensuring white space safety and print at most two file names/paths per line", "output": "find . -name \"*.rb\" -type f -print0 | xargs -0 -n 2 echo"}
{"input": "Move all lines starting with \"Ca\" to the beginning of the file", "output": "nl -n rz ca | awk -vOFS=\"\\t\" '/Ca/{$1=\"#\"$2} {$1=$1}1' | sort -k1,1 | cut -f2-"}
{"input": "Change owner to \"root\" and group to \"wheel\" of \"adbind.bash\"", "output": "sudo chown root:wheel adbind.bash"}
{"input": "find all the png files in current folder which are present in the pattern list file \"search.txt\"", "output": "find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt)"}
{"input": "create a symbolic link named \"bar\" to file that named is a result of the command `canonical.bash foo`", "output": "ln -s `canonical.bash foo` bar"}
{"input": "find all text files in current folder and delete all the files that have the word foo in their name", "output": "find . -name \".txt\" | grep \"foo\" | xargs rm"}
{"input": "Recursively copies '$1' directory to '$2' directory.", "output": "cp -r $1 $2"}
{"input": "Lists all content in a current folder but names like *.c and *.h.", "output": "ls -d !(*.[ch])"}
{"input": "Find all files under /path and below writable by `group' or `other'", "output": "find /path -perm /g+w,o+w"}
{"input": "Find files and directories in the /tmp/ tree that contain spaces in their names and replace those spaces with underscores", "output": "find /tmp/ -depth -name \"* *\" -execdir rename 's/ /_/g' \"{}\" \\;"}
{"input": "Find all regular files that reside in the current directory tree and were last modified more than 1 day ago", "output": "find . -type f -mtime +1"}
{"input": "Find all regular files named 'whatever' under current directory tree excluding all paths that contain any hidden directory", "output": "find . \\( ! -regex '.*/\\..*' \\) -type f -name \"whatever\""}
{"input": "Make directories to \"$2\" as needed", "output": "mkdir -p $2"}
{"input": "Search the current directory tree for regular files that contain \"string\"", "output": "find . -type f -printf '\"%p\"\\n' | xargs grep string"}
{"input": "Make directories \"tmp/real_dir1\" and \"tmp/real_dir2\" as needed", "output": "mkdir -p tmp/real_dir1 tmp/real_dir2"}
{"input": "Remove with prompting all files that have not been accessed in over 100 days", "output": "find /mydir -atime +100 -ok rm {} \\;"}
{"input": "Convert \"595a\" into characters and then print the hexadecimal and printable characters of each byte", "output": "echo 595a | awk -niord '$0=chr(\"0x\"RT)' RS=.. ORS= | od -tx1c"}
{"input": "Go to directory /cygdrive/c/Program Files (x86) using backslashes to escape special characters", "output": "cd /cygdrive/c/Program\\ Files\\ \\(x86\\)"}
{"input": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories", "output": "find . -name foo.mp4 -exec dirname {} \\;"}
{"input": "Print paths to all subdirectories inside of a directory", "output": "du | awk '{print $2}'"}
{"input": "Print all filenames under /proc and below", "output": "find /proc | xargs"}
{"input": "find all the html files in the current folder which have been modified exactly 7 days ago", "output": "find . -mtime 7 -name \"*.html\" -print"}
{"input": "Replace all negative numbers in the 3rd comma-separated column of inputfile by the number notated in parenthesis instead of with a minus sign.", "output": "awk -F, 'BEGIN {OFS = \",\"} {gsub(\"-([0-9.]+)\", \"(\" substr($3, 2) \")\", $3); print}' inputfile"}
{"input": "Go to /the/project/root//data, which in most filesystems/operating systems will be the same as cd /the/project/root/data", "output": "cd /the/project/root//data"}
{"input": "Mount all filesystems in /etc/fstab", "output": "sudo mount -a"}
{"input": "Find all catalina* files/directories under /path/to/search/in", "output": "find /path/to/search/in -name 'catalina*'"}
{"input": "Print a count of all unique entries in \"ips.txt\" with the most frequent results at the top", "output": "sort ips.txt | uniq -c | sort -bgr"}
{"input": "Print fourth column of data from text file \"file\" where columns separated by one or more whitespace.", "output": "tr -s ' ' < file | cut -d' ' -f4"}
{"input": "search for a string in gzip'd files", "output": "find . -type f -name \"*.gz\" -exec zgrep 'GET /foo' {} \\;"}
{"input": "Search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory", "output": "find . -name \"$1\" -type f -exec grep -i \"$2\" '{}' \\;"}
{"input": "search and unzip all the \".fq.gz\" files and perform a control check on this raw sequence of data and display the output to the screen", "output": "find . -name \"*.fq.gz\"  -exec gunzip -c  '{}' ';' | fastqc  /dev/stdin"}
{"input": "search  in current directory downwards all files whose status has changed more then 7  days ago", "output": "find .  -ctime +7 -print"}
{"input": "Go to directory /cygdrive/c/Program Files (x86)/$dollarsign using single quotes to escape special characters, including dollar signs", "output": "cd '/cygdrive/c/Program Files (x86)/$dollarsign'"}
{"input": "Search for files only that end with .php and look for the string $test inside those files", "output": "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\;"}
{"input": "Send a lot of packets to \"remote.machine\" on port \"CLOSED_PORT\" at 0.1 second intervals", "output": "watch --interval 0.1 \"nc remote.machine CLOSED_PORT\""}
{"input": "Search all regular files in the current directory for \"example\"", "output": "find -maxdepth 1 -type f | xargs grep -F 'example'"}
{"input": "Execute \"myscript.rb\" with the first argument as the current host name and the second \"file.txt\"", "output": "myscript.rb `hostname -i` file.txt"}
{"input": "Remove all files and directories called \"test\" from the current directory tree", "output": "find . -name test -exec rm -R \"{}\" \\;"}
{"input": "Find all regular files under '/directory_path' directory tree that have been modified within the last day", "output": "find /directory_path -type f -mtime -1 -print"}
{"input": "store absolute path of executing script", "output": "DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\""}
{"input": "search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end and save the output list to output.txt", "output": "find /data/images -type f -newer /tmp/start -not -newer /tmp/end > output.txt"}
{"input": "change owner of the file my_test_expect.exp to user el", "output": "sudo chown el my_test_expect.exp     //make el the owner."}
{"input": "Find all files/directories under /home/bozo/projects directory that were modified 1 day ago", "output": "find /home/bozo/projects -mtime 1"}
{"input": "Convert relative path \"/x/y/../../a/b/z/../c/d\" into absolute path with resolved symbolic links", "output": "readlink -f /x/y/../../a/b/z/../c/d"}
{"input": "Find all the Sticky Bit set files whose permission are 551 in the file system", "output": "find / -perm 1551"}
{"input": "Calculate the sum of all the numbers from 1 to 10", "output": "seq 10|jq -s add"}
{"input": "remove all the files in the present directory which have special characters in their name and do not search in the sub directories of the current folder.", "output": "find . -name '*[+{;\"\\\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \\;"}
{"input": "Find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded", "output": "find \"${searchpath}\" -type f -print0 | xargs -0 grep -l -E \"${string1}.*${string2}.*${string3}\""}
{"input": "Find all *.rb (regular) files under current directory and count their line numbers", "output": "find . -name \"*.rb\" -type f | xargs wc -l"}
{"input": "Force the group stickiness for directories under /var/www", "output": "find /var/www -type d -print0 | xargs -0 chmod g+s"}
{"input": "Create a symbolic link in the current directory for each .jpg file under \"dir\"", "output": "ln -s \"$(find dir -name '*.jpg')\" ."}
{"input": "Find recursively all files whose names ends with \"foo\"", "output": "find . -name \"*foo\""}
{"input": "If directory \"mydir\" exists in user's home directory, run \"mycommand\" in it, without changing the current shell's working directory, but do nothing if no such directory exists.", "output": "( cd ~/mydir && mycommand )"}
{"input": "Find all directories in the current one recursively which have the write bit set for \"other\"", "output": "find . -type d -perm -o=w"}
{"input": "Locate files that reside in the /u/bill directory tree and were last accessed between 2 and 6 minutes ago", "output": "find /u/bill -amin +2 -amin -6"}
{"input": "Find all the files under /home directory with name tecmint.txt", "output": "find /home -name tecmint.txt"}
{"input": "display all the files in the current folder expect perl shell and python fiels", "output": "find . -not -name \"*.pl\" -not -name \"*.sh\" -not -name \"*.py\""}
{"input": "search for all the directories in a folder and limit the search to current folder and give them as input to the python script", "output": "script.py $(find /stuff/* -type d)"}
{"input": "Compute the mean average of the word count of *.txt files smaller than 2000 words in the home directory", "output": "find ~/Journalism  -name '*.txt' -print0 | xargs -0 wc -w | awk '$1 < 2000 {v += $1; c++} END {print v/c}'"}
{"input": "Save the current date, system host name, and \"$changes\" with newlines removed to variable \"subj\"", "output": "subj=\"$(date) - $(hostname) - $(echo \"$changes\" | sed \"s/$/,/\" | tr \"\\n\" \" \")\""}
{"input": "Replace all spaces with underscores in file paths under current directory.", "output": "find -name \"* *\" -type f | rename 's/ /_/g'"}
{"input": "set alias \"cleanup\" for command \"rm -Rf -- foo bar baz\"", "output": "alias cleanup='rm -Rf -- foo bar baz'"}
{"input": "Archive \"/path/to/files\" to \"user@targethost:/path\"", "output": "rsync -av /path/to/files user@targethost:/path"}
{"input": "Prints process tree of a current process with parents processes and id numbers.", "output": "pstree --show-parents -p $$ | head -n 1 | sed 's/\\(.*\\)+.*/\\1/' | less"}
{"input": "find all the files (under root file system /) that were updated in the last 24 hours", "output": "find / -mtime -1"}
{"input": "Force create a hard link named '/home/user/Musik/youtube converted/aesthesys~ I Am Free, That Is Why I'\"'\"'m Lost..mp3' with target '/home/user/Musik/mix-2012-13/aesthesys~ I Am Free, That Is Why I'\"'\"'m Lost..mp3'", "output": "ln -f '/home/user/Musik/mix-2012-13/aesthesys~ I Am Free, That Is Why I'\"'\"'m Lost..mp3' '/home/user/Musik/youtube converted/aesthesys~ I Am Free, That Is Why I'\"'\"'m Lost..mp3'"}
{"input": "Read a single character from standard input into variable \"key\" without backslash escapes and using an interactive shell with the prompt $'Are you sure (Y/n) : ' and default value $'Y'", "output": "read -rp $'Are you sure (Y/n) : ' -ei $'Y' key"}
{"input": "Find all files/directories under /var/log directory", "output": "find /var/log"}
{"input": "search for the file in the entire file system which has the words \"filename\" in its name", "output": "find / -name \u201d*filename*\u201d"}
{"input": "Find files whose data was modified within the given days of the month", "output": "find ./ -daystart -mtime -10 -and -mtime +1"}
{"input": "Delete all files/directories under current directory tree with '.$1' extension where $1 expands as the first positional parameter", "output": "find . -name \"*.$1\" -delete;"}
{"input": "Find all files/directories that have read, write, execution permission for user and belong to the user 'my_user' under current directory tree", "output": "find . -user my_user -perm -u+rwx"}
{"input": "Write the current date and time followed by \" 1\" to the console and append to \"log.csv\"", "output": "echo $(date) \"1\" | tee -a log.csv"}
{"input": "display the count of total number of non empty files in the current folder", "output": "find . -type f -not -empty | wc -l"}
{"input": "Display differences between file1 and file2 side-by-side.", "output": "diff -y file1 file2"}
{"input": "Search the home directory tree for files modified less than 7 days ago", "output": "find $HOME -mtime -7"}
{"input": "Inserts \"new line\" after last occurrence of ScriptAlias in a file", "output": "tac file | awk '/ScriptAlias/ && ! seen {print \"new line\"; seen=1} {print}' | tac"}
{"input": "search for all the log files in the folder /apps which have not been modified in the last 60 days and which are present in the same file system as that of /apps and delete them", "output": "find /apps -xdev -name \"*.log\" -type f -mtime +60 | xargs rm"}
{"input": "Print received input to the terminal", "output": "tee"}
{"input": "Find all broken symlinks under current directory", "output": "find -L . -type l"}
{"input": "create a compressed archive \"filename.tar.gz\" with verbose output", "output": "tar -cvzf filename.tar.gz folder"}
{"input": "Find files/directories that isn't owned by the user 'apache' under /var/www", "output": "find /var/www ! -user apache -print0 | xargs -0"}
{"input": "Print the IP addresses for the current host name", "output": "hostname  -I | cut -f1 -d' '"}
{"input": "Search the `research' directory and one level below for directories that are not owned by group `ian'", "output": "find -L research -maxdepth 2 -type d ! -group ian"}
{"input": "search for the file \"myfile\" in the current folder and display all errors apart from permission denied error", "output": "find . -name myfile |& grep -v 'Permission denied'"}
{"input": "Find all files/directories under current directory", "output": "find ."}
{"input": "Locate OGG files under the home directory smaller than 100 megabytes", "output": "find $HOME -iname '*.ogg' -type f -size -100M"}
{"input": "Just find directories and skip file names", "output": "find  / -type d -name \"apt\" -ls"}
{"input": "Search the current directory and all of its sub-directory for any PDF files.", "output": "find . -name \"*.pdf\" -print"}
{"input": "Search for ERROR in all btree*.c files under current directory", "output": "grep ERROR $(find . -type f -name 'btree*.c')"}
{"input": "Decompress and unarchive \"hello-0.2.tar.gz\"", "output": "gzip -dc hello-0.2.tar.gz | tar -xf -"}
{"input": "Find files under current directory that are newer than $date_time in regards of modification time", "output": "find . -type f -newermt \"$date_time\""}
{"input": "Find files that are 0 bytes in size in the current directory and remove them", "output": "find . -maxdepth 1 -size 0c -exec rm {} \\;"}
{"input": "display all the regular/normal files in the current folder excluding the files with the name mmm", "output": "find . -name mmm -prune -o -type f -print"}
{"input": "Find files/directories that belong to user 'ian' under '/tmp' directory tree", "output": "find /tmp -user ian"}
{"input": "Print linker search path using gcc formatted on new lines", "output": "gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\\.\\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \\; \\\\012"}
{"input": "Print numbers from 1 to 5 without separating spaces and without a newline", "output": "seq 5 | awk '{printf \"%s\", $0}'"}
{"input": "Find all php files whose name is tecmint.php in a current working directory", "output": "find . -type f -name tecmint.php"}
{"input": "Find root's Ruby files accessed in the last two minutes", "output": "find /apps/ -user root -type f -amin -2 -name *.rb"}
{"input": "Print a hex dump of \"$DIREC\" as characters", "output": "echo \"$DIREC\" | od -c"}
{"input": "display all the files in the home folder that have been modified in the last 24 hours", "output": "find $HOME -mtime -1"}
{"input": "display all the files in the folder /home which do not belong to the group test", "output": "find /home -not -group test"}
{"input": "Print common lines of files \"file1\", \"file2\", \"file3\", and \"file4\"", "output": "comm -12 <(comm -12 <(comm -12 <(sort file1) <(sort file2)) <(sort file3)) <(sort file4)"}
{"input": "replace the word apple with orange in all the regular/normal files in the current folder", "output": "find ./ -type f -exec sed -i -e 's/apple/orange/g' {} \\;"}
{"input": "Remove all .mpg files in the /home/luser directory tree", "output": "find /home/luser -type f -name '*.mpg' | tr \"\\n\" \"\\000\" | xargs -0 rm -f"}
{"input": "Write summary of files present only in dir1, and which files differ between dir1 and dir2 to file 'difference1.txt'", "output": "diff -r dir1 dir2 | grep dir1 | awk '{print $4}' > difference1.txt"}
{"input": "Write the output of \"input_prog\" to standard output and error on console and as input to command \"my_editor\"", "output": "input_prog 2>&1 | tee /dev/tty | my_editor"}
{"input": "Search for \"mpirun\" in all processes owned by the current user", "output": "pgrep -u `whoami` mpirun"}
{"input": "find files in the /usr/src directory with pattern` *.c  that larger than 100 Kilobytes", "output": "find /usr/src -name '*.c' -size +100k -print"}
{"input": "Unzip files \"file1.gz\" and \"file2.gz\" as arguments to \"command -1 -2\"", "output": "command -1 <(gzip -dc file1.gz) -2 <(gzip -dc file2.gz)"}
{"input": "Search for files/directories which are writable by both their owner and their group", "output": "find . -perm -g+w,u+w"}
{"input": "List all zero-length files", "output": "find . -empty -exec ls {} \\;"}
{"input": "Find all files changed on the 29th of September, 2008, starting from the current directory", "output": "find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30"}
{"input": "list names of bind functions containing \"/\"", "output": "bind -l | grep /"}
{"input": "Print a detailed list of all regular files from the current directory tree", "output": "find . -type f -ls"}
{"input": "Find all directories in 1 level down the current directory", "output": "find . -mindepth 1 -maxdepth 1 -type d"}
{"input": "Set permissions to ug=rw,o= for files under the $d directory tree", "output": "find $d -type f -exec chmod ug=rw,o= '{}' \\;"}
{"input": "Find files larger than 50k", "output": "find . -size +50k"}
{"input": "List the combined path of the current working directory and \"file.txt\"", "output": "ls \"`pwd`/file.txt\""}
{"input": "Find and delete all hard links in the /home directory to file1", "output": "find /home -xdev -samefile file1 -print0 | xargs -0 rm"}
{"input": "Send 5 pings to broadcast address \"10.10.0.255\" and print the unique IPs who responded", "output": "ping -c 5 -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }' | sort | uniq"}
{"input": "List all broken symlinks excluding cyclic links under current directory", "output": "find . -type l -printf \"%Y %p\\n\" | grep -w '^N'"}
{"input": "Print the current date in '%H:%M:%S' format followed by the string ': done waiting. both jobs terminated on their own or via timeout; resuming script'", "output": "echo \"$(date +%H:%M:%S): done waiting. both jobs terminated on their own or via timeout; resuming script\""}
{"input": "Find out all hard links in the /home directory to file1", "output": "find /home -xdev -samefile file1"}
{"input": "Write current directory listing to standard output and to \"files.txt\"", "output": "ls |& tee files.txt"}
{"input": "find all the files in the present directory which have the group staff and check if is a symbolic link and display it.", "output": "find `pwd` -group staff -exec find {} -type l -print ;"}
{"input": "Remove the \"^M\" characters from all *.ext files under /home directory", "output": "find /home -type f -name \"*.ext\" -exec sed -i -e \"s/\\r$//g\" {} \\;"}
{"input": "Add \"A new line\" on top of each *.py files under current directory", "output": "perl -pi -e 'BEGIN { print \"A new line\" }' $(find . -name '*.py')"}
{"input": "Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files", "output": "find ${x} -type f -exec chmod ug=rw,o= '{}' \\;"}
{"input": "Normalize the path to command \"rename\" resolving any symlinks, and display what type of file it is.", "output": "file $(readlink -f $(type -p rename))"}
{"input": "Find all directories under current directory and run ./script.sh for each of them", "output": "find . -type d -exec ./script.sh {} \\;"}
{"input": "List all files/directories under current directory matching the posix-egrep type regex \".+\\.(c|cpp|h)$\" in their names", "output": "find . -regextype posix-egrep -regex \".+\\.(c|cpp|h)$\" | xargs -n 1 ls"}
{"input": "Archive \"/home/path\" to \"path\" on host \"server\" showing progress and statistics and remove files in the destination not found in the source", "output": "rsync -a --stats --progress --delete /home/path server:path"}
{"input": "Download 10 web pages \"http://example.com/?page${i}.html\" at most 2 at a time with \"${i}\" ranging from 1 to 10", "output": "seq 1 10 | xargs -n1 -P2 bash -c 'i=$0; url=\"http://example.com/?page${i}.html\"; curl -O -s $url'"}
{"input": "Puts working directory into clipboard, stripping newlines", "output": "printf $(pwd) | pbcopy"}
{"input": "find files in the current directory with pattern` '*.[ch]' which are contain \u2018thing\u2019 string and print file names", "output": "find . -name '*.[ch]' | xargs grep -l thing"}
{"input": "Recursively removes all files and folders that match pattern '/usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*'", "output": "rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*"}
{"input": "Find *.java files in the current directory with GNU find and replace foo with bar in those files", "output": "find . -name \"*.java\" -exec sed -i s/foo/bar/g \\;"}
{"input": "Find files in the current directory tree whose size is 24000 bytes", "output": "find . -size 24000c"}
{"input": "Resolve symbolic link of file \"/foo/bar/baz\"", "output": "readlink -e /foo/bar/baz"}
{"input": "Change all \"JPG\" filename suffixes in current directory to \"jpeg\".", "output": "rename -v 's/\\.JPG/\\.jpeg/' *.JPG"}
{"input": "Search the current directory tree for files named \"accepted_hits.bam\"", "output": "find `pwd` -name \"accepted_hits.bam\""}
{"input": "Copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'.", "output": "echo dir1 dir2 dir3 | xargs -n 1 cp file1"}
{"input": "Set variable PacketLoss to first digit of percentage of packet loss occurring when pinging host specified by TestIP", "output": "PacketLoss=$(ping \"$TestIP\" -c 2 | grep -Eo \"[0-9]+% packet loss\" | grep -Eo \"^[0-9]\")"}
{"input": "Find all files named \"file.ext\" within the current folder and print the path where each one is located", "output": "find `pwd` -name \"file.ext\" -exec dirname {} \\;"}
{"input": "Pops the top directory of dirs stack and changes to it.", "output": "popd"}
{"input": "set alias \"m\" for command \"mplayer -novideo -loop 0\"", "output": "alias m=\"mplayer -novideo -loop 0\""}
{"input": "Count the total number of lines in all HTML files under /usr/src that contain string \"foo\"", "output": "time find /usr/src -name \"*.html\" | xargs /usr/bin/grep -l \"foo\" | wc -l"}
{"input": "Unzip all \".gz\" files in the current directory tree excluding files containing \"dvportgroups\", \"nsanity\", \"vcsupport\", \"viclient\", and \"vsantraces\"", "output": "find . -name '*.gz' ! -name '*dvportgroups*' ! -name '*nsanity*' ! -name '*vcsupport*' ! -name '*viclient*' ! -name 'vsantraces*' -exec gunzip -vf {} \\;"}
{"input": "Counts total lines in all *.php files.", "output": "find . -type f -name '*.php' -exec bash -c 'wc -l \"$0\"' {} \\; | awk '{s+=$1} END {print s}'"}
{"input": "Search for files/directories with the case insensitive pattern anaconda.* in /var/log directory and create an archive (file.tar) of the last file found", "output": "find /var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \\;"}
{"input": "Remount \"/dev/block/mtdblock3\" on \"/system\" with read and write permission", "output": "mount -o remount,rw -t yaffs2 /dev/block/mtdblock3 /system"}
{"input": "Create a sorted unique list of new or modified files comparing \"old/\" and \"new/\"", "output": "(rsync -rcn --out-format=\"%n\" old/ new/ && rsync -rcn --out-format=\"%n\" new/ old/) | sort | uniq"}
{"input": "search for all xml files in current folder and display them", "output": "find . -name \"*.xml\" -exec echo {} \\;"}
{"input": "search for files which are writable by both their owner and their group", "output": "find . -perm -220"}
{"input": "Find all files/directories under '/var/tmp' directory tree that belong to a user with user id 1000", "output": "find /var/tmp -uid 1000"}
{"input": "print all files in the file system excluding those ending with \".c\"", "output": "find / \\! -name \"*.c\" -print"}
{"input": "Find all *company* (case-insensitive) files/directories under /basedir with null character as the delimiter", "output": "find /basedir/ -iname '*company*' -print0"}
{"input": "create a back up of several folder", "output": "find etc home apps -depth -print | cpio -ov > dev/rmt0"}
{"input": "Delete all files/directories named 'file' under current directory tree", "output": "find -name file -delete"}
{"input": "Search for \"pattern\" in all the .c files in the current directory tree", "output": "find . -name \"*.c\" | xargs grep pattern"}
{"input": "Remove everything in a current folder prompting user on each action.", "output": "rm -ri *"}
{"input": "Find the total size of *.jpg files within the current directory tree", "output": "find . -iname \"*.jpg\" -ls |perl -lane '$t += $F[6]; print $t/1024/1024/1024 . \" GB\"'"}
{"input": "Execute \"${MD5}\" on all files found under \"${1}\", numerically sort the results, and save to variable \"DATA\"", "output": "DATA=$( find \"${1}\" -type f -exec ${MD5} {} ';' | sort -n )"}
{"input": "Save number of lines in 'file.txt' file in 'nbLines' variable", "output": "nbLines=$(cat -n file.txt | tail -n 1 | cut -f1 | xargs)"}
{"input": "create directory tata", "output": "mkdir tata"}
{"input": "find regular files under the current directory, whose name ends in .mbox and rename each file, to the same name without .mbox at the end", "output": "find . -type f -wholename \\*.mbox | sed 's/\\(.*\\)\\.mbox/mv \"\\1.mbox\" \"\\1\"/' | sh"}
{"input": "Change permissions to 644 for all regular files under the /path/to/dir/ tree", "output": "find /path/to/dir/ -type f -print0 | xargs -0 chmod 644"}
{"input": "Convert Unix `cal` output to latex table code.", "output": "cal 02 2012|perl -lnE'$.==1||eof||do{$,=\"\\t&\";$\\=\"\\t\\\\\\\\\\n\";$l=$_;print map{substr($l,$_*3,3)}(1..5)}'"}
{"input": "Search directory /Users/david/Desktop/ recursively for regular files", "output": "find /Users/david/Desktop/ -type f"}
{"input": "search for all the files in the current directory which have size greater than 10KB (approx) and less than 32KB(approx).", "output": "find . -size +10000c -size -32000c -print"}
{"input": "find all the files (under root file system /) that were changed within the last 24 hours", "output": "find / -ctime -1"}
{"input": "Find all files/directories under current directory that were modified exactly 30 minutes ago", "output": "find . -mmin 30"}
{"input": "create directory saxon_docs", "output": "mkdir saxon_docs"}
{"input": "Find all files/directoires that were modified more than 3 days ago under $dir directory tree", "output": "find $dir -mtime +3"}
{"input": "find all the files in the home folder that belong to a specific user", "output": "find /home -user <usernmae> -print"}
{"input": "Search for the regex '->get(\\|#hyphenate' in all files with '.pl' or '.pm' extension under '/users/tom' directory tree and only show the filenames", "output": "find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(\\|#hyphenate' {} +"}
{"input": "search for a word in all the .C files in the current directory", "output": "find . -name \"*.c\" -exec grep -ir \"keyword\" {} \";\""}
{"input": "Print only strings from file 'file2' that not found in 'file1'", "output": "comm -1 -3 file1 file2"}
{"input": "Print \"I am USER and the program named ls is in LS_PATH\" where \"USER\" is the current user's user name and \"LS_PATH\" is the full path of the command \"ls\"", "output": "echo I am $(whoami) and the program named ls is in $(which ls)."}
{"input": "change owner of the file file.sh to user root", "output": "$sudo chown root file.sh"}
{"input": "Counts lines in file $file ignoring '//' commented lines, lines with spaces only and empty lines.", "output": "cat $file | sed '/\\/\\//d' | sed '/^\\s*$/d' | wc -l"}
{"input": "Compress all *.img files using bzip2", "output": "find ./ -name \"*.img\" -exec bzip2 -v {} \\;"}
{"input": "Search the /usr/bin directory tree for regular files modified or created less than 10 days ago", "output": "find /usr/bin -type f -mtime -10"}
{"input": "Print 'empty' if $some_dir is an empty directory, otherwise print 'not empty'", "output": "find \"$some_dir\" -prune -empty -type d | read && echo empty || echo \"not empty\""}
{"input": "Save the greater version number of \"$1\" and \"$2\" into variable \"ver\"", "output": "ver=`echo -ne \"$1\\n$2\" |sort -Vr |head -n1`"}
{"input": "Create a symbolic link in directory \"new\" for each file in \"original\" directory tree", "output": "find original -type f -exec ln -s {} new/{} \\;"}
{"input": "find all files in the current directory which are bigger than 4MB", "output": "find . -size +4096k -print"}
{"input": "Find files named \"blabla\" in the current directory tree and print the number of lines in each of them", "output": "find ./ -name \"blabla\" -exec wc -l {} ;"}
{"input": "Finds strings having text \"searched-string\" in all files recursively in a current folder.", "output": "find . | xargs grep \"searched-string\""}
{"input": "Fix files to default permissions 644", "output": "find . -type f -exec chmod 644 {} \\;"}
{"input": "List all your files including everything in sub-directories", "output": "find ~"}
{"input": "Overwirte file '/path/to/your/file' with random content, showing progress while execution.", "output": "shred -v -n 1 /path/to/your/file #overwriting with random data"}
{"input": "Recursively change the owner and group of \"/home/el/svnworkspace\" and \"775\" to \"your_user_name\"", "output": "chown -R your_user_name.your_user_name 775 /home/el/svnworkspace"}
{"input": "Unsets environment variable represented as var=value by $a.", "output": "unset $(echo \"$a\" | /usr/bin/cut -d = -f 1)"}
{"input": "Unzip and untar \"openssl-fips-2.0.1.tar.gz\"", "output": "gunzip -c openssl-fips-2.0.1.tar.gz | tar xf \u00ad-"}
{"input": "find all .pm, .pl files in /users/tom and search for a pattern in these files and display the matched file names", "output": "find /usr/tom | egrep '*.pl| *.pm' | xargs cat | grep <PATTERN>"}
{"input": "set alias \"vimrc\" for command \"$EDITOR ~/.vimrc\"", "output": "alias vimrc='$EDITOR ~/.vimrc'"}
{"input": "Find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding *.log files/directories", "output": "find /home/baumerf/public_html/ -mmin -60 -not -name \\*.log"}
{"input": "List files in the current directory and below except for GIT files", "output": "find . -not -iwholename '*/.git/*'"}
{"input": "Archive the directory structure under .. directory into dirstructure.tar", "output": "find .. -type d -print0 | xargs -0 tar cf dirstructure.tar --no-recursion"}
{"input": "Search the current directory tree for an html file having the text 'Web sites' in it", "output": "find . -type f -iname \\*.html -exec grep -s \"Web sites\" {} \\;"}
{"input": "Force create a hard link named \"non_secret_file.txt\" to \"secret_file.txt\"", "output": "ln -f secret_file.txt non_secret_file.txt"}
{"input": "find all the files in the entire file system that have been accessed exactly  50 days ago", "output": "find / -atime 50"}
{"input": "Archive \"/media/10001/music/\" on host \"server\" to local directory \"/media/incoming/music/\" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission", "output": "rsync -avzru --delete-excluded server:/media/10001/music/ /media/Incoming/music/"}
{"input": "Find all files/directories under current directory with 'FooBar' in their paths and copy them to ~/foo/bar", "output": "find . | grep \"FooBar\" | tr \\\\n \\\\0 | xargs -0 -I{} cp \"{}\" ~/foo/bar"}
{"input": "Find symbolic links under /etc/", "output": "find /etc -type l"}
{"input": "Count the number of regular files in the current directory tree", "output": "find . -type f | wc -l"}
{"input": "Remove all libEGL* files from the current directory tree", "output": "find . -name libEGL* | xargs rm -f"}
{"input": "List environment variable values whose name matches '^\\w*X\\w*'", "output": "set | grep -P '^\\w*X\\w*(?==)' | grep -oP '(?<==).*'"}
{"input": "Replace sequential tabs with a single space in \"thefile.txt\" and write to \"the_modified_copy.txt\"", "output": "tr -s '\\t' < thefile.txt | tr '\\t' ' ' > the_modified_copy.txt"}
{"input": "Counts number of lines returned by curl request.", "output": "curl yahoo.com --silent | wc -l"}
{"input": "display all the regular/normal files in current folder", "output": "find . -type f -name \\*"}
{"input": "Search the *.txt files from the current directory tree for \"string\"", "output": "find . -name \"*.txt\" -print0 | xargs -0 egrep 'string'"}
{"input": "Starts new tmux session, assuming the terminal supports 256 colours.", "output": "tmux -2"}
{"input": "Print a welcome message with the current user's user name", "output": "echo -ne \"Welcome `whoami`!\\n\""}
{"input": "Display a long listing of all the regular files in the file system which belong to user 'root' and which have suid bit set", "output": "find / -type f -user root -perm -4000 -exec ls -l {} \\;"}
{"input": "Find all files in your home directory and below that are exactly 100M.", "output": "find ~ -size 100M"}
{"input": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "output": "find data/ -name \"filepattern-*2009*\" | cpio -ov --format=ustar > 2009.tar"}
{"input": "Find directories starting from /TBD that were modified more than 1 day ago", "output": "find /TBD -mtime +1 -type d"}
{"input": "Search for \"Stock\" in all *.java files from the current directory tree", "output": "find . -name \"*.java\" | xargs grep \"Stock\""}
{"input": "display all the files in current folder which are bigger than 10KB", "output": "find . -size +10k"}
{"input": "Print local files without descending non-local directories", "output": "find . ! -local -prune -o -print"}
{"input": "find all the php/javascript files in current folder using regular expressions", "output": "find . -regex '.+\\.\\(php|js\\)'"}
{"input": "search for a shell script in the current folder and display the current folder path", "output": "find . -name onlyme.sh -exec pwd \\;"}
{"input": "Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout", "output": "bzip2 file | tee -a logfile"}
{"input": "Search all files from the /tmp directory tree for the string \"search string\"", "output": "find /tmp -type f -exec grep 'search string' '{}' /dev/null \\+"}
{"input": "change the extension of all the \".abc\" files in the folder \"/the/path\" to \".edefg\" and do not change in the sub directories", "output": "find /the/path -depth -name \"*.abc\" -exec sh -c 'mv \"$1\" \"${1%.abc}.edefg\"' _ {} \\;"}
{"input": "Create tar archive \"foo.tar\" and copy all files from directory tree /tmp/a1 to it", "output": "find /tmp/a1 | xargs tar cvf foo.tar"}
{"input": "Change permssions of *.cgi files under directories htdocs and cgi-bin to 755", "output": "find htdocs cgi-bin -name \"*.cgi\" -type f -exec chmod 755 {} \\;"}
{"input": "find all the files in the entire file system that start with top", "output": "find / -name 'top*'"}
{"input": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.", "output": "which -a rename | xargs readlink -f | xargs file"}
{"input": "find all the files in the current folder which have set guid bit on and list the top 10 files.", "output": "find . -perm /g+s | head"}
{"input": "Make hidden directory \".hiddendir\"", "output": "mkdir .hiddendir"}
{"input": "Search for files whose name is \"filename\" and whose permissions are 777", "output": "find / -perm 777 -iname \"filename\""}
{"input": "Find all files/directories under current directory and count the number of lines for the output", "output": "find |wc -l"}
{"input": "Rename all *.PNG files/directories to *48.png files/directories under current directory", "output": "find . -name '*.PNG' -exec bash -c 'git mv {} $(dirname {})/$(basename {} .PNG)48.png' \\;"}
{"input": "Find all *.foo files under current directory and search for 'bar' in those files", "output": "find . -name '*.foo' -exec grep bar {} \\;"}
{"input": "Search the current directory tree for regular files whose names end in \".shtml\" or \".css\"", "output": "find . -type f | egrep '\\.(shtml|css)$'"}
{"input": "change the permissions of all the regular/normal files to 644 in the folder /home/nobody/public_html", "output": "find /home/nobody/public_html -type f -exec chmod 644 {} \\;"}
{"input": "Find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory", "output": "find {} -name 'upvoter-*' -type f -or \\( -type l \\) -maxdepth 1 -perm +111"}
{"input": "Execute awk script \"script.awk\" with 2 arguments both \"file.txt\" and format the output as a table", "output": "awk -f script.awk file.txt{,} | column -t"}
{"input": "Write standard output and error of \"./a.out\" to standard output and to file \"output\"", "output": "./a.out |& tee output"}
{"input": "find all class files or sh script files  in the current folder", "output": "find . -type f \\( -name \"*.class\" -o -name \"*.sh\" \\)"}
{"input": "List all leaf directories of the current directory tree", "output": "find -depth -type d | while read dir;  do [[ ! $prev =~ $dir ]] && echo \"${dir}\" ; prev=\"$dir\"; done"}
{"input": "Show version information of the find utility", "output": "find -version"}
{"input": "Compress files excluding *.Z files", "output": "find . \\! -name \"*.Z\" -exec compress -f {} \\;"}
{"input": "Print each character in \"Hello\" as a hexadecimal value", "output": "echo -n \"Hello\" | od -A n -t x1"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f | sed 's/.*/\"&\"/' | xargs ls -E | awk '{ print $6,\" \",$7,\" \",$9 }' | sort | tail -1"}
{"input": "Gunzip all files matching \"file*.gz\" and answer \"n\" to any prompts", "output": "yes n | gunzip file*.gz"}
{"input": "Append the contents of \"file.txt\" to the current in-memory history list", "output": "history -r file.txt"}
{"input": "display all the C files or Python files in the folder \"euler\"", "output": "find euler/ -iname \"*.c*\" -exec echo {} \\; -or -iname \"*.py\" -exec echo {} \\;"}
{"input": "Find all directories under /home/username/public_html/themes and set their permission to 750", "output": "find /home/username/public_html/themes -type d -exec chmod 750 {} +"}
{"input": "display a long listing of all normal/regular files in a folder which have not been modified in the last 60 days and save the output to a file", "output": "find /path-to-directory -type f -mtime +60 -exec ls -l {} \\; > /path-to-directory/filenames.txt"}
{"input": "Get a detailed listing of all symbolic links in /usr/bin starting with \"z\"", "output": "find /usr/bin  -type l  -name \"z*\" -exec ls  -l {} \\;"}
{"input": "Find all files/directories under current directory tree that start with 'R' and end with 'VER' in their names and were modified more than 1 day ago", "output": "find . -name \"R*VER\" -mtime +1"}
{"input": "Answer \"1\" repeatedly until \"command\" exits", "output": "yes 1 | command"}
{"input": "Remove trailing white spaces from all *.rb files under current directory", "output": "find . -name '*.rb' | xargs -I{} sed -i '' 's/[[:space:]]*$//g' {}"}
{"input": "Search all regular files from the current directory tree for lines containing \"California\" and \"surfboard\", and save the output as SurfsUp.txt", "output": "find . -type f -exec grep California {} \\; -print | grep surfboard > SurfsUp.txt"}
{"input": "display all the regular/normal files in the current directory", "output": "find . -type f"}
{"input": "Print the average round trip time of 5 pings to \"google.com\"", "output": "ping -q -c 5 google.com | tail -n 1 | cut -f 5 -d '/'"}
{"input": "Search the file system for regular files whose names are shorter than 25 characters", "output": "find / -type f| egrep -o \"/[^/]{0,24}$\" | cut -c 2-"}
{"input": "List the unique parent directories of all .class files found in the entire filesystem", "output": "find / -name *.class -printf '%h\\n' | sort --unique"}
{"input": "Find all sample*_1.txt files/directories under current directory and print 'program  sample*-out sample*_1.txt sample*_2.txt' for each of them", "output": "find . -name \"sample*_1.txt\" | sed -n 's/_1\\..*$//;h;s/$/_out/p;g;s/$/_1.txt/p;g;s/$/_2.txt/p' | xargs -L 3 echo program"}
{"input": "Find all the files in the current directory", "output": "find * -type f -print -o -type d -prune"}
{"input": "To match only hidden dot directories", "output": "find /nas01/backups/home/user/ -type d -name \".*\" -print0 -exec ls -lrt {} \\;"}
{"input": "Kill the processes of user `myuser' that have been working more than 7 days", "output": "find /proc -user myuser -maxdepth 1 -type d -mtime +7 -exec basename {} \\; | xargs kill -9"}
{"input": "display the count of all the directories in the current folder", "output": "find . -type d \u2013print | wc -l"}
{"input": "Remove all regular files from the current directory tree except textfile.txt, backup.tar.gz, script.php, database.sql, info.txt", "output": "find . -type f ! -regex \".*/\\(textfile.txt\\|backup.tar.gz\\|script.php\\|database.sql\\|info.txt\\)\" -delete"}
{"input": "find all the files in the entire file system that have been modified between 50 to 100 days and display ten files", "output": "find / -mtime +50 -mtime -100 | head"}
{"input": "Recursively finds and compresses all files in a current folder.", "output": "find . -type f -exec bzip2 {} +"}
{"input": "Delete all files under current directory tree with '.$1' extension where $1 expands as the first positional parameter", "output": "find . -name \"*.$1\" -exec rm {} \\;"}
{"input": "Find all files/directories under '/usr/local' containing 'blast' (case insensitive) in their names", "output": "find /usr/local -iname \"*blast*\""}
{"input": "Find files named 'core' in or below the directory /tmp and delete them", "output": "find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f"}
{"input": "Find directories that have \"755\" permissions and modify them to have \"700\" permissions", "output": "find . -type d -perm 755 -exec chmod 700 {} \\;"}
{"input": "find all files in the file system which are modified after the file /tmp/checkpoint", "output": "find / -newer /tmp/checkpoint"}
{"input": "Print the 5th space separated fields in \"file\" as a comma separated list", "output": "cut -d' ' -f5 file | paste -d',' -s"}
{"input": "Write output of \"command_that_writes_to_stdout\" to standard output and as input to \"command_that_reads_from_stdin\"", "output": "command_that_writes_to_stdout | tee >(command_that_reads_from_stdin)"}
{"input": "Find files which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them", "output": "find ${userdir}/${i}/incoming -mtime +2 -type f -exec rm {} \\;"}
{"input": "List all files named \"filename\" from the current directory tree, ignoring directory \"FOLDER1\"", "output": "find . -name FOLDER1 -prune -o -name filename -print"}
{"input": "List all files under current directory with their sizes and paths", "output": "find . -type f -printf '%s %p\\n'"}
{"input": "Print percentage of the space used on the $FILESYSTEM.", "output": "df -k $FILESYSTEM | tail -1 | awk '{print $5}'"}
{"input": "Find all files in the current directory tree that are newer than some_file", "output": "find . -newer some_file"}
{"input": "Find all files/directories with '.xml' extension that start with 'log4j' in their names under '/cygdrive/e/MyDocs/Downloads/work/OATS Domain related/' directory tree, search for files that contain the string 'CONSOLE' in their contents, then search for the string 'ASYNC' in the matched files and display the matched lines along with their filenames", "output": "find \"/cygdrive/e/MyDocs/Downloads/work/OATS Domain related/\" -iname \"log4j*.xml\" | xargs -I % grep -ilr \"CONSOLE\" \"%\" | xargs -I % grep -H \"ASYNC\" %"}
{"input": "Unzip and extract \"*\\(userAgent=[^=]*\\) [^ =][^ =]*=.*\" from \"input.gz\"", "output": "zcat input.gz | sed -n 's/.*\\(userAgent=[^=]*\\) [^ =][^ =]*=.*/\\1/p'"}
{"input": "Recursively change the group of all files in \"/tmp/php_session\" to \"daemon\"", "output": "chown -R :daemon /tmp/php_session"}
{"input": "Recursively change the owner and group of \"/var/antoniod-data/\" to \"antoniod\"", "output": "chown -R antoniod:antoniod /var/antoniod-data/"}
{"input": "Changes group ownership of '/var/run/fcgiwrap.socket' to 'forge'.", "output": "chgrp forge /var/run/fcgiwrap.socket"}
{"input": "Change the owner and group of \"testfile.txt\" to \"root\"", "output": "sudo chown root:root testfile.txt"}
{"input": "Use the octal form to find and print detailed information about all regular files in your home directory and below that have only the group permission set.", "output": "find . -perm 040 -type f -exec ls -l {} \\;"}
{"input": "Find broken links", "output": "find / -type l -print0 | xargs -0 file | grep broken"}
{"input": "Prints total count of lines of all files in a current folder and subfolders.", "output": "find . -type f -exec wc -l {} \\; | awk '{ SUM += $0} END { print SUM }'"}
{"input": "Finds strings with text \"text\" in all files named \"string to be searched\" recursively in a current folder.", "output": "find . -name \"string to be searched\" -exec grep \"text\" \"{}\" \\;"}
{"input": "Silently read a single character from standard input into variable \"key\" without backslash escapes and using the prompt $'Press any key to continue...\\n'", "output": "read -rsp $'Press any key to continue...\\n' -n 1 key"}
{"input": "list all files under $dir directory except path $dir/prune_me directory", "output": "find \"$dir\" -not \\( -path \"$dir/prune_me\" -prune \\) -exec bash -c 'echo \"$0\"' {} \\;"}
{"input": "Gets IP addresses of all active network interfaces on host.", "output": "ifconfig | grep 'inet' | grep -v '127.0.0.1' | awk '{print $2}' | sed 's/addr://'"}
{"input": "Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.", "output": "fgrep --include='STATUS.txt' -rl 'OPEN' | xargs -L 1 dirname"}
{"input": "Print file type of the executable file of command \"file\"", "output": "file `which file`"}
{"input": "search for all the files in the current folder which have spaces, save the output of a file and save the long listing of these files to a log file", "output": "find . -name \"filename including space\" -print0 | tee my_teed_file | xargs -0 ls -aldF > log.txt"}
{"input": "Finds total lines count of few types of files (*.h and *.cpp) in a current folder and subfolders.", "output": "( find . \\( -name '*.h' -o -name '*.cpp' \\) -print0 | xargs -0 cat ) | wc -l"}
{"input": "find the path of a specfic video file in the current directory", "output": "find . -name foo.mp4 | sed 's|/[^/]*$||'"}
{"input": "Create a gzip archive file ($tarFile) of all *.log files under $sourcePath", "output": "find $sourcePath -type f -name \"*.log\" -exec tar -uvf $tarFile {} \\;"}
{"input": "Saves exit statuses of piped commands in a system variable PIPESTATUS='([0]=\"0\" [1]=\"0\" [2]=\"1\" [3]=\"0\" [4]=\"1\")'", "output": "true | true | false | true | false"}
{"input": "Run `fastqc' on all the fastqc files in the current directory tree", "output": "find . -name \"*.fq\" | xargs -n 1 fastqc"}
{"input": "run command \"ssh user1@192.168.1.2 \\\"awk '\\\\\\$5==1{print \\\\\\$3}' filename.log\\\"\" as user1 and unify the result", "output": "su user1 -c \"ssh user1@192.168.1.2 \\\"awk '\\\\\\$5==1{print \\\\\\$3}' filename.log\\\"\" | uniq -c"}
{"input": "Remove all broken symbolic links in /usr/ports/packages", "output": "find -L /usr/ports/packages -type l -delete"}
{"input": "Find files and directories with group id 1003", "output": "find . -gid 1003"}
{"input": "list any files modified since /bin/sh was last modified", "output": "find . -newer /bin/sh"}
{"input": "Print short DNS lookup for each domain name in a file 'list'", "output": "dig +short -f list"}
{"input": "Gets back to the foreground a job with number 2.", "output": "fg 2"}
{"input": "Print the contents of \"numbers.txt\"", "output": "cat numbers.txt"}
{"input": "Locate symlinks in directory trees lpi104-6 and research/lpi104-6", "output": "find lpi104-6 research/lpi104-6 -type l"}
{"input": "Change the group of all directories (except those with a '.') under current directory tree to a group with the same name as the directory name", "output": "find . -type d | sed -e 's/\\.\\///g' | awk '{print $1, $1}' | xargs chgrp"}
{"input": "Find all directories in the current directory tree", "output": "find -type d"}
{"input": "search for bash and rsync files in the entire file system excluding search in the path /usr/share folder and discard all the errors", "output": "find / -path /usr/share -prune -o \\( -name rsync -o -name bash \\) -print 2>/dev/nul"}
{"input": "Create a named screen session", "output": "screen -x main -X title blah"}
{"input": "search for a file in a directory and pass it as an input to the script getLine", "output": "find $dir -type f -name $1 -exec getLine {} \\;"}
{"input": "Print the list of all regular files from the current directory tree that contain \"confirm\", case insensitive", "output": "find . -type f -exec grep -il confirm {} \\;"}
{"input": "Find all symlinks in the /myfiles directory tree", "output": "find /myfiles -type l"}
{"input": "Replace 'company' with 'newcompany' in all files under current directory", "output": "find ./ -type f -exec sed -i 's/company/newcompany/' {} \\;"}
{"input": "Find all directories under minimum 1 level down the current directory and set their permission to 755", "output": "find  . -type d -mindepth 1 -print -exec chmod 755 {}/* \\;"}
{"input": "Quietly searches pattern in a given strings. Exits with zero status if any match is found, otherwise exits with non-zero.", "output": "grep -q \"tar archive\" <<<$filetype"}
{"input": "Print the path composed of the current working directory and the directory containing \"$0\"", "output": "echo `pwd`/`dirname $0`"}
{"input": "force create hard link between $GIT_DIR/../apresentacao/apresentacao.pdf and $GIT_DIR/../capa/apresentacao.pdf", "output": "ln -f $GIT_DIR/../apresentacao/apresentacao.pdf $GIT_DIR/../capa/apresentacao.pdf"}
{"input": "Rename all files in current directory whose name starts with 'F0000', trimming a zero from any sequence of four zeroes in the name.", "output": "rename s/0000/000/ F0000*"}
{"input": "Save a list of all the files/directories under current directory tree to a file named 'foo'", "output": "find . -fprint foo"}
{"input": "Recursively change the owner of all \"*.txt\" files under \"/mydir\" to \"root\"", "output": "find /mydir -type f -name \"*.txt\" -execdir chown root {} ';'"}
{"input": "Calculate the sum of all the numbers from -5 to 10", "output": "seq -5 10 | xargs printf \"- - %s\" | xargs  | bc"}
{"input": "find all the files in the current directory that have the word \"bash\" in their name", "output": "find . -name \"*bash*\""}
{"input": "List all files under the current working directory last modified less than a day ago", "output": "find `pwd` -mtime -1 -type f -print"}
{"input": "Search the current directory tree for regular files whose names match pattern $x", "output": "find . -type f -name $x"}
{"input": "Find files in the current directory tree that are named \"some_pattern\" and move them to directory \"target_location\"", "output": "find . -name some_pattern -print0 | xargs -0 -i mv {} target_location"}
{"input": "find all headers file *.h in /nas/projects directory", "output": "find /nas/projects -name \"*.h\""}
{"input": "find all directories that names are 'project.images' and display details", "output": "find  / -type d -name \"project.images\" -ls"}
{"input": "Search \"inputfile\" for lines starting with \"t:\" and group the results in files with at most 200 lines each", "output": "cat inputfile | grep \"^t\\:\" | split -l 200"}
{"input": "display all the jpg files in the current folder and do not search in sub directories", "output": "find . -maxdepth 1 -mindepth 1 -iname '*.jpg' -type f"}
{"input": "calculate the disk usage for all the files which have been modified in the last 24 hours in ~/tmp folder and display the file sizes", "output": "find ~/tmp -mtime 0 -exec du -ks {} \\; | cut -f1"}
{"input": "extract \"filename.tar.xz\" with verbose output", "output": "$ tar xvfJ filename.tar.xz"}
{"input": "Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files", "output": "find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "Mathematically sum each line in the output of \"...\"", "output": "... | paste -sd+ - | bc"}
{"input": "Search the current directory tree for files larger than 10MB but smaller than 50MB", "output": "find . -size +10M -size -50M -print"}
{"input": "create a compressed archive of a target directory excluding '<dir1>' and '<dir2>'", "output": "tar cfvz --exclude='<dir1>' --exclude='<dir2>' target.tgz target_dir"}
{"input": "search for files cart1 or cart2 or cart3 or ...cart6 in the folder junk which is in home folder and display all its details. Discard all the errors and do not display them.", "output": "find ~/junk  -name 'cart[1-6]' -exec ls -l {} \\; 2> /dev/null"}
{"input": "search for all regular/normal files in current folder and display all the files which contain 16 lines", "output": "find . -type f -print0 | xargs -0 grep -cH '' | awk -F: '$2==16'"}
{"input": "Request that the master ssh connection \"otherHosttunnel\" exits", "output": "ssh -O exit otherHosttunnel"}
{"input": "Display non-hidden files in the current directory with the given output format", "output": "find . -maxdepth 1 -name '[!.]*' -printf 'Name: %16f Size: %6s\\n'"}
{"input": "Print \"$line\" in hexadecimal 2-byte units", "output": "echo -n $line | od -x"}
{"input": "Removes all cached yum data from a system.", "output": "sudo yum clean all"}
{"input": "Display file.txt with lines numbered, and page interactively through the result.", "output": "less -N file.txt"}
{"input": "Automatically send \"y\" to \"sudo rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm\" to automate installation", "output": "yes | sudo rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm"}
{"input": "display all files in the entire file system excluding the directories /proc,/sys,/dev and those files which are writable and which are not symbolic links and which are not sockets and which do not have the sticky bit set", "output": "find / -noleaf -wholename '/proc' -prune -o -wholename '/sys' -prune -o -wholename '/dev' -prune -o -perm -2 ! -type l  ! -type s ! \\( -type d -perm -1000 \\) -print"}
{"input": "find all the file which name end with c or h and content contain 'thing'", "output": "find . -name '*.[ch]' | xargs grep -l thing"}
{"input": "Convert *.doc files in the current directory tree to the .txt format and remove the original files", "output": "find . -name '*.doc' | while read i; do antiword -i 1 \"${i}\" >\"${i/doc/txt}\" && rm \"${i}\"; done"}
{"input": "set alias \"my_command\" for command \"$oldalias -option 3\"", "output": "alias my_command=\"$oldalias -option 3\""}
{"input": "Variable PID contains a process ID, send SIGTERM to this process if it exists.", "output": "kill $PID"}
{"input": "Create tar.gz files older than one day logs", "output": "find /home/testuser/log/ -mtime +1 | xargs  tar -czvPf  /opt/older_log_$(date +%F).tar.gz"}
{"input": "Delete interactively all the files/directories with inode number 782263 under current directory tree", "output": "find . -inum 782263 -exec rm -i {} \\;"}
{"input": "Copies all files like \"*FooBar*\" under the current directory to the '~/foo/bar' directory.", "output": "find . -name '*FoooBar*' | sed 's/.*/\"&\"/' | xargs cp ~/foo/bar"}
{"input": "Find all *.ini files", "output": "find . -name *.ini"}
{"input": "Find the \"erl\" executable in $PATH and read the \"RELEASES\" file to extract the erlang release number", "output": "awk -F, 'NR==1 {gsub(/\"/,\"\",$3);print $3}' \"$(dirname $(readlink -f $(which erl)))/../releases/RELEASES\""}
{"input": "Print \"#include\" statements found in \"file2\" that are not in \"file1\"", "output": "comm -13 <(grep '#include' file1 | sort) <(grep '#include' file2 | sort)"}
{"input": "find all js files which path neither ./dir1 nor ./dir2 nor  ./dir3", "output": "find . -name '*.js' -not \\( -path \"./dir1\" -o -path \"./dir2/*\" -o -path \"./dir3/*\"\\)"}
{"input": "Prints process tree of the current process with parent processes.", "output": "pstree -s $$"}
{"input": "find all the files in the entire file system excluding the folder proc, which do not belong to any user or any group", "output": "find / -path /proc -prune -o -nouser -o -nogroup"}
{"input": "Find all configration files in Home directory & Subtitute permanently in files", "output": "find $HOME -name \"*.conf\" -exec sed -i 's/vermin/pony/g' {} \\;"}
{"input": "Display all variables with names starting with \"derby\" in a Window's command line", "output": "set derby"}
{"input": "Find any file that has \"disc\" somewhere in its name in the current directory and all of its sub-directories.", "output": "find . -name *disc*"}
{"input": "display all the \".c\" files in the folder \"/home/david\" which have been accessed in the last 48 hours", "output": "find /home/david -atime -2 -name '*.c'"}
{"input": "Print a sorted list of all .jpg files in the current directory and below", "output": "find -name '*.jpg' | sort -n"}
{"input": "Display variable 'var' without leading and trailing whitespace.", "output": "echo $var | awk '{gsub(/^ +| +$/,\"\")}1'"}
{"input": "Change the permissions of the current directory and all its subdirectories to 755.", "output": "find . -type d -exec chmod 755 {} \\;"}
{"input": "Find all files/directories owned by user 'michel' under current directory", "output": "find -user michel"}
{"input": "Request that the master ssh connection \"officefirewall\" exits", "output": "ssh -O exit officefirewall"}
{"input": "Make directories to \"/my/other/path/here/\" as needed", "output": "mkdir -p /my/other/path/here/"}
{"input": "Disable jobs running in their own process group in the shell", "output": "set +m"}
{"input": "Remove sequence like '\\xEF\\xBB\\xBF' from first string of every file in a current folder and subfolders, creating backup file with .bak extension for every changed file, and removing backup on success.", "output": "find . -type f -exec sed '1s/^\\xEF\\xBB\\xBF//' -i.bak {} \\; -exec rm {}.bak \\;"}
{"input": "Find all files/directories that are not newer than Jul 01 by modification time", "output": "find /file/path ! -newermt \"Jul 01\""}
{"input": "Find all directories under current directory and change their permission to 644", "output": "find -type d -print0|xargs -0 chmod 644"}
{"input": "Find all files that matches both the case insensitive patterns *$1* and *$2* under /home/musicuser/Music/ directory and execute mplayer for each of them", "output": "find /home/musicuser/Music/ -type f  -iname \"*$1*\" -iname \"*$2*\" -exec mplayer {} \\;"}
{"input": "Decompresses file 'xac.bz2', redirecting output to standard out.", "output": "bzip2 -dc xac.bz2"}
{"input": "display the directory name along with the modified time for all the files /var", "output": "find /var -maxdepth 2 -type d -exec stat  -c \"%n %y\" {} \\;"}
{"input": "take all the files in the current folder and pass them as argument to a program", "output": "find . -exec program {} +"}
{"input": "Find all *.ogg (case insensitive) files under your home directory that are less than 100MB in size", "output": "find $HOME -iname '*.ogg' -type f -size -100M"}
{"input": "Finds strings like \"texthere\" recursively in all files of a current folder regarding all symlinks.", "output": "grep -R \"texthere\" *"}
{"input": "Find all *.tex files/directories in maximum 2 levels down the current directory", "output": "find . -maxdepth 2 -name '*.tex'"}
{"input": "List all files from the current directory tree that were modified less than 60 minutes ago, omitting \".\"", "output": "find . -mindepth 1 -mmin -60 | xargs -r ls -ld"}
{"input": "Find all files/directories named 'query' (case insensitive) under current directory tree", "output": "find -iname \"query\""}
{"input": "Calculate the md5 sum of every \".py\" file in directory tree \"/path\"", "output": "find /path -type f -name \"*.py\" -exec md5sum \"{}\" +;"}
{"input": "Enables shell options 'nullglob' and 'dotglob'.", "output": "shopt -s nullglob dotglob"}
{"input": "Find all files in the current directory \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 and its sub-directories with the optional constraints of \u043e\u043f\u0446\u0438\u044f_\u043f\u043e\u0438\u0441\u043a\u0430, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 and/or \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.", "output": "find \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 [\u043e\u043f\u0446\u0438\u044f_\u043f\u043e\u0438\u0441\u043a\u0430] [\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435] [\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435]"}
{"input": "Searches available packages by word 'zsh'.", "output": "yum search zsh"}
{"input": "Print the first 32 hexadecimal characters from \"/dev/urandom\"", "output": "cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32"}
{"input": "Find all php files in current directory and delete text matching the regex '<?php /\\*\\*/ eval(base64_decode(\"aWY.*?>' in those files", "output": "find ./ -name \"*.php\" -type f | xargs sed -i 's#<?php /\\*\\*/ eval(base64_decode(\"aWY.*?>##g'  2>&1"}
{"input": "Create MD5 message digest of \"/path/to/source/file\" starting at byte 100 until the 250th byte", "output": "dd if=/path/to/source/file bs=1 skip=100 count=250 | md5sum"}
{"input": "find all java files in the current folder and search for the pattern REGEX", "output": "find . -name '*.java' -exec grep REGEX {} \\;"}
{"input": "Get the total size of all files under dir1 directory", "output": "find dir1 ! -type d -printf \"%s\\n\" | awk '{sum += $1} END{printf \"%f\\n\", sum}'"}
{"input": "Set status code to a non-zero value if process with PID 4129 is running in a different namespace than init", "output": "bash -c \"test -h /proc/4129/ns/pid && test '$(readlink /proc/4129/ns/pid)' != '$(readlink /proc/1/ns/pid)'\""}
{"input": "List all *.txt files/directories under /etc", "output": "find /etc -name \"*.txt\" -exec ls -l {} \\;"}
{"input": "search for all the non-hidden files in the current directory and do not search in the subfolders and dispaly their name and size.", "output": "find . -maxdepth 1 -name '[!.]*' -printf 'Name: %16f Size: %6s\\n'"}
{"input": "dispaly a long listing of all the files in the current folder which have been modified in the last 14 days", "output": "find . -mtime -14 -ls"}
{"input": "Search for \"pattern\" in \"file\" and separate each line with '\" \"'", "output": "cat file | grep pattern | paste -sd'~' | sed -e 's/~/\" \"/g'"}
{"input": "display all files in the current folder with the name test excluding those that are present folder test", "output": "find . -name test -prune -o -print"}
{"input": "Find all files under relative/path/to/dir, calculate their md5sum and redirect the result to sums.md5", "output": "find relative/path/to/dir -type f -exec md5sum {} + > sums.md5"}
{"input": "Print the sorted unique column of usernames of users who are currently logged in without the header", "output": "finger | cut -d ' ' -f1 | sort -u | grep -iv login"}
{"input": "find all the regular/normal files in all the directories in the /some/dir and delete them", "output": "find /some/dir -type d -exec find {} -type f -delete \\;"}
{"input": "Sort and show top 10 processes by memory usage", "output": "ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10"}
{"input": "Counts lines in file $file and prints number only.", "output": "wc -l $file | awk '{print $1}';"}
{"input": "Search for all files owned by user www-data that are not larger than 100kb", "output": "find -user www-data -not -size +100k"}
{"input": "Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*", "output": "find /path/to/directory/* -maxdepth 0 -type d -printf '%f\\n'"}
{"input": "Find all empty regular files in the current directory and below", "output": "find . -type f -empty"}
{"input": "find the regular js files which path does not contains '*/test/*'  and name does not contains '*-min-*' or '*console*'", "output": "find . ! -path \"*/test/*\" -type f -name \"*.js\" ! -name \"*-min-*\" ! -name \"*console*\""}
{"input": "Lists all files in a current folder, separating names with space.", "output": "ls -1 | perl -l40pe0"}
{"input": "file1.txt and file2.txt both contain a name and a number on each line. For each name whose corresponding number does not match in both files, display the \"Age of ... is different\" message.", "output": "join file{1,2}.txt | awk '$2 != $3 { print \"Age of \" $1 \" is different\" }'"}
{"input": "Save the system load average for the past 1 minute of the currently logged in user to variable 'proc_load_average'", "output": "proc_load_average=$(w | head -1 | cut -d\" \" -f12 | cut -d\",\" -f1-2 | tr ',' '.')"}
{"input": "Counts all files in a current folder and subfolders.", "output": "find -type f -printf '\\n' | wc -l"}
{"input": "Print lines containing string TEXT from all log files in the current directory.", "output": "grep -e TEXT *.log | cut -d':' --complement -s -f1"}
{"input": "find all directories with the name \"lib64\" in the usr folder and replace space with ':'", "output": "find /usr -name lib64 -type d|paste -s -d:"}
{"input": "Find files with the extension .conf in the /etc directory", "output": "find /etc -name '*.conf'"}
{"input": "get the root user access", "output": "sudo su"}
{"input": "Find all files/directories under /home/feeds/data directory", "output": "find /home/feeds/data"}
{"input": "find all regular/normal files which have cpp folder in their path", "output": "find . -type f -path \"*/cpp/*\""}
{"input": "Find all SUID and SGID files on the system and save the list of them to `setuid.txt'", "output": "find / -perm +6000 -type f -exec ls -ld {} \\; > setuid.txt &"}
{"input": "search for a shell script in the current folder and display the current folder path but search from the sub directories", "output": "find . -name onlyme.sh -execdir pwd \\;"}
{"input": "Numerically sort file \"file.dat\" by the second word of each line and output from greatest value to least value", "output": "sort -nrk 2,2 file.dat"}
{"input": "List files ending in .html and residing in the current directory tree", "output": "find . -name \"*.html\""}
{"input": "Print only name and login columns of the currently logged in users", "output": "finger -s | awk '{printf(\"%s %s\\n\", $1, $2);}'"}
{"input": "Find all directories under /var/www/some/subset and set their SGID bit", "output": "sudo find /var/www/some/subset -type d -print0 | xargs -0 chmod g+s"}
{"input": "Move all files/directories under current directory to ~/play", "output": "find . -exec mv '{}' ~/play/ \\;"}
{"input": "Counts all lines in $i file.", "output": "cat $i | wc -l"}
{"input": "Read a line from standard input into variable \"password\" without echoing the input and using the prompt \"Password: \"", "output": "read -s -p \"Password: \" password"}
{"input": "display all the files in the file system which are smaller than 20 bytes", "output": "find / -size 20"}
{"input": "Find all .bak files starting from the current directory and delete them", "output": "find . -iname \"*.bak\" -type f -print | xargs /bin/rm -f"}
{"input": "Print the current directory tree with file sizes", "output": "tree -s"}
{"input": "Search the current directory recursively for .sh files whose names begin with \"new\"", "output": "find . -name \"new*.sh\""}
{"input": "Remove all files in and below the current directory whose names begin with \"not\"", "output": "find . -name not\\* | xargs -d '\\n' rm"}
{"input": "Print all unique strings in $1.tmp file.", "output": "cat $1.tmp | sort -u"}
{"input": "find regular/normal files in the current folder", "output": "find -type f"}
{"input": "Find all files under /home/username/public_html/themes and set their permission to 640", "output": "find /home/username/public_html/themes -type f -exec chmod 640 {} +"}
{"input": "Split standard input into files of at most 1000 lines each", "output": "split"}
{"input": "Print CPU usage and memory usage of processes running \"mysql\"", "output": "ps aux | awk '{print $4\"\\t\"$11}' | sort | uniq -c | awk '{print $2\" \"$1\" \"$3}' | sort -nr |grep mysql"}
{"input": "find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file", "output": "find . -name \"*.jar\" -exec unzip -l {} \\;|grep -E \"Archive:|message_track.properties\""}
{"input": "Search the /home/sdt5z/tmp directory tree for files named \"accepted_hits.bam\"", "output": "find /home/sdt5z/tmp -name \"accepted_hits.bam\""}
{"input": "Print file type of the command \"c++\"", "output": "file `which c++`"}
{"input": "Find all *.py files under and below the current directory and search them for \"xrange\"", "output": "find . -name '*.py' -exec grep --color 'xrange' {} +"}
{"input": "Delete history entry at offset, defined in first argument of executed script", "output": "history -d \"$1\""}
{"input": "run script filename.sh as root with preserved user environment", "output": "su -cp filename.sh"}
{"input": "The file \"files_to_find.txt\" contains a list of filenames, create each file or update its timestamp if it exists.", "output": "touch `cat files_to_find.txt`"}
{"input": "Find all files in the current directory tree ignoring the \".git\" directory", "output": "find . -type d -name '.git*' -prune -o -type f -print"}
{"input": "recursively change owner of the directory ~/.npm to the current user", "output": "sudo chown -R $(whoami) ~/.npm"}
{"input": "list files in the directory \"$directory\" with permissions \"$permissions\"", "output": "find \"$directory\" -perm \"$permissions\""}
{"input": "display all scala files in the directory \"src/main\"", "output": "find . -type f -path \"*src/main/*\\.scala\""}
{"input": "Check if a drive with UUID \"$UUID\" is mounted", "output": "mount | grep $(readlink -f /dev/disk/by-uuid/$UUID )"}
{"input": "Find all directories under current directory tree that were modified $FTIME days ago", "output": "find . -type d -mtime $FTIME"}
{"input": "Counts number of lines with 'OK' in file 'filename'.", "output": "grep \"OK\" <filename> | wc -l"}
{"input": "Force remove all files and folders in the physical current working directory", "output": "rm -rf \"$(pwd -P)\"/*"}
{"input": "Prefix each non-blank line in \"filename\" with a line number", "output": "nl filename"}
{"input": "search for all the files in the current directory which have the name a.out or core or which end with .o and delete them.", "output": "find . \\( -name a.out -o -name '*.o' -o -name 'core' \\) -exec rm {} \\;"}
{"input": "run command \"command\" as user user1 with password \"password\"", "output": "echo password | su user1 -c 'command'"}
{"input": "download contents from \"https://www.npmjs.com/install.sh\" and execute", "output": "curl https://www.npmjs.com/install.sh | sh"}
{"input": "Find all '*~' files under current directory", "output": "find ./ -name '*~'"}
{"input": "Make a new directory \"new-dir\" in every directory in the current working directory non-recursively", "output": "find . -maxdepth 1 -type d | xargs -I \"{x}\" mkdir \"{x}\"/new-dir"}
{"input": "Find all 777 permission files and use chmod command to set permissions to 644", "output": "find / -type f -perm 0777 -print -exec chmod 644 {} \\;"}
{"input": "Exits the entire bash script with defined status code N.", "output": "exit N"}
{"input": "Search for .pdf files", "output": "find / -name '*.pdf'"}
{"input": "Force delete all jpg files in current directory which are less than 50KB and do not search in the sub directories", "output": "find . -maxdepth 1 -name \"*.jpg\" -size -50k | xargs rm -f"}
{"input": "Recursively search the current directory for unique entries of \"searchtext\" and replace \"matchtext\" with \"replacetext\"", "output": "grep -r -l 'searchtext' . | sort | uniq | xargs perl -e \"s/matchtext/replacetext/\" -pi"}
{"input": "Find all .mp3 files with more than 10MB and delete them", "output": "find / -type f -name *.mp3 -size +10M -exec rm {} \\;"}
{"input": "Print second field from semicolon-seprated line $string.", "output": "echo $string | cut -d';' -f2"}
{"input": "find all the python files in the current folder and save the list to the file output.txt", "output": "find . -name \"*.py\" -type f > output.txt"}
{"input": "Find find symlinks pointing to /mnt/oldname* in the entire file system", "output": "find / -type l -lname '/mnt/oldname*'"}
{"input": "Find text files modified less than 5 days ago", "output": "find . \u2013name \"*.txt\" \u2013mtime 5"}
{"input": "Saves byte size of all content of $1 folder in 'uiTotalSize' variable.", "output": "uiTotalSize=$(ls -l -R $1 | grep -v ^d | awk '{total+=$5;} END {print total;}')"}
{"input": "Find all .c and .C files in the current directory tree that contain \"main(\" and copy them to directory test1/", "output": "find -iname \u201c*.c\u201d -exec grep -l \u2018main(\u2018 {} \\; -a -exec cp {} test1/ \\;"}
{"input": "force delete all the directories the folder \"test folder\"", "output": "find 'Test Folder' -type d -print0 | xargs -0 rm -rf"}
{"input": "Find all *.c files under and below the current directory that contain \"wait_event_interruptible\"", "output": "find . -name \\*.c -exec grep wait_event_interruptible {} /dev/null \\;"}
{"input": "Recursively changes group ownership of everything in a '/home/user1/project/dev' folder to 'project_dev'.", "output": "chgrp -R project_dev /home/user1/project/dev"}
{"input": "Search the system for files whose names begin with letters 'a', 'b', or 'c'", "output": "find  / -name '[a-c]*'"}
{"input": "find all the files in the current folder which have been modified in the 10 minutes ago", "output": "find -mmin +15 -mmin -25"}
{"input": "Lists tmux sessions.", "output": "tmux list-sessions"}
{"input": "Find files under current directory that contains the string '/bin/ksh'", "output": "find . -type f -exec grep -iH '/bin/ksh' {} \\;"}
{"input": "find any files in the current directory that begin with a number", "output": "find . -regex './[0-9].*' -print"}
{"input": "Replace commas (',') with newlines in $MOUNT_OPTS and search for the regex '^acl$'", "output": "echo $MOUNT_OPTS | tr , \\\\\\n | grep '^acl$' -q"}
{"input": "Change permissions to 600 for all regular .rb files in the current directory tree", "output": "find . -name \"*.rb\" -type f -exec chmod 600 {} \\;"}
{"input": "Find all files under /path/to/base/dir and change their permission to 644", "output": "find /path/to/base/dir -type f -exec chmod 644 {} +"}
{"input": "Mount \"vfat\" filesystem \"/dev/sda7\" to \"/mnt/my_partition\" with read and write permission, umask of files and directories set to \"0000\", and save in fstab and allow ordinary users to mount", "output": "sudo mount -t vfat -o rw,auto,user,fmask=0000,dmask=0000 /dev/sda7 /mnt/my_partition"}
{"input": "display all the files in the current folder which have not been modified in the last 7 days and which are not in the list \"file.lst\"", "output": "find -mtime +7 -print | grep -Fxvf file.lst"}
{"input": "Find all *.gz files under asia and emea directory and print their names and line counts to file_count.txt", "output": "for file in $(find asia emea -name \\*.gz -print0 | xargs -0); do echo -n $(basename $file); gunzip -c $file |wc -l; done >> file_count.txt"}
{"input": "Merge already sorted files \"file*.txt\" and split the result into files of at most 100000 lines each with a prefix \"sorted_file\"", "output": "sort --merge file*.txt | split -l 100000 - sorted_file"}
{"input": "find all directories in the current directory", "output": "find . -type d"}
{"input": "Find files with 002 permission under /tmp and print them with the string 'Found world write permissions:' printed as the first line of output", "output": "find /tmp -type f -perm -002 | sed '1s/^/Found world write permissions:\\n/'"}
{"input": "Copy all .patch files from the current directory tree to patches/", "output": "find -name '*.patch' -print0 | xargs -0 -I {} cp {} patches/"}
{"input": "delete all the mp3 files in the current folder.", "output": "find . -type f -name \"*.mp3\" -exec rm -f {} \\;"}
{"input": "Find '.java' files with checksum 0bee89b07a248e27c83fc3d5951213c1 in the current directory", "output": "md5sum *.java | grep 0bee89b07a248e27c83fc3d5951213c1"}
{"input": "Save the first three octets of the host name's IP address to variable \"subnet\"", "output": "subnet=$(hostname -i | cut -d. -f1,2,3)"}
{"input": "Search for 'It took' in all $srch1* (case insensitive) files under current directory", "output": "find . -iname \"$srch1*\" -exec grep \"It took\" {} \\; -print"}
{"input": "Print content of all files ending with '*.foo' in current directory recursively", "output": "find . -name '*.foo' -exec cat {} \\;"}
{"input": "Print the names of all files from the /tmp/dir1 directory tree", "output": "find /tmp/dir1 -exec basename {} \\;"}
{"input": "Remove all files whose names begin with \"no-such-thing\" in the /home/peter directory tree", "output": "find /home/peter -name no-such-thing* |xargs rm"}
{"input": "Search the current directory tree for files whose names are not \"a.txt\"", "output": "find . ! -name \"a.txt\" -print"}
{"input": "search for the regular/normal file \"foo.bar\" and force delete it", "output": "find /home -name foo.bar -type f -exec rm -f \"{}\" ';'"}
{"input": "Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.", "output": "cp lib*.so ~/usr/gtest/lib"}
{"input": "Find all files starting from the current directory which are owned by the user tommye", "output": "find . -user tommye"}
{"input": "Set variable value to current kernel release name, making this variable visible by subprocesses of current shell.", "output": "export value=$(uname -r)"}
{"input": "Execute \"chown -R ask:ask /www/askapache.com\" in the background on server \"askapache\" with a niceness of 19", "output": "ssh askapache 'nice -n 19 sh -c \"( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )\"'"}
{"input": "List all files under current directory that are greater than 10MB in size", "output": "find . -size +10M -exec ls -ld {} \\;"}
{"input": "Merge colon-separated information from file1 and file2 where first field of both files matches", "output": "join -t: <(sort file1) <(sort file2)"}
{"input": "create a zip of all the files in the current folder which are bigger than 100Kb and do not go more than 2 levels during search", "output": "find . -maxdepth 2 -size +100000 -exec bzip2 {} \\;"}
{"input": "Send reverse requests to get domain name for each address in 'my_ips' list", "output": "cat my_ips | xargs -i dig -x {} +short"}
{"input": "Check all .txt files whether they contain \"needle\"", "output": "find . -type f -iname \"*.txt\" -print | xargs grep \"needle\""}
{"input": "Run \"./configure\" with a new environment variable CC set to the full path of the command 'cc'", "output": "CC=$(which cc) ./configure"}
{"input": "Find all files on your system that are world writable", "output": "find / -wholename  '/proc' -prune  -o  -type f -perm -0002 -exec ls -l {} \\;"}
{"input": "Search \"mygzfile.gz\" for \"string to be searched\"", "output": "gunzip -c mygzfile.gz | grep \"string to be searched\""}
{"input": "Delete all files/directories named 'sample' (case insensitive) under '/home/user/Series/' directory tree as super user", "output": "sudo find /home/user/Series/ -iname sample -print0 | sudo xargs -0 rm -r"}
{"input": "Rename all *$lower1* files under current directory without descending into .git directory by replacing the first occurrence of $lower1 with $lower2 in their paths", "output": "find . -name .git -prune -o type f -name \"*$lower1*\" -exec mmv \"*$lower1*\" \"#1$lower2#2\" {} +"}
{"input": "display all the files in the current folder in a single line separated by null command", "output": "sudo find . -print0"}
{"input": "Make directories to \"x/p/q\" as needed", "output": "mkdir -p x/p/q"}
{"input": "Copy file \"exist\" from directory \"/file/that\" to a new file named \"file\" in \"/location/for/new\"", "output": "cp /file/that/exists /location/for/new/file"}
{"input": "Search the regular files of the current directory tree for string \"stringYouWannaFind\", ignoring the case", "output": "find ./ -type f -print -exec grep -n -i \"stringYouWannaFind\" {} \\;"}
{"input": "Rank the usage of libraries for a set of tools \"/bin/* /usr/bin/* ...\"", "output": "ldd /bin/* /usr/bin/* ... | sed -e '/^[^\\t]/ d; s/^\\t\\(.* => \\)\\?\\([^ ]*\\) (.*/\\2/g' | sort | uniq -c"}
{"input": "Search the current directory recursively for text files containing at least one character", "output": "find . -type f -exec grep -Iq . {} \\; -and -print"}
{"input": "Find files smaller than 40 blocks skipping directories on other file systems", "output": "find . -size -40 -xdev -print"}
{"input": "verbosely create intermediate directoriy tmp as required and directory boostinst", "output": "mkdir -pv /tmp/boostinst"}
{"input": "Grab \"variable = value\" pairs from a windows style .ini file into the current shell.", "output": "source <(grep = file.ini | sed 's/ *= */=/g')"}
{"input": "Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories", "output": "find . -name foo.mp4 | sed 's|/[^/]*$||'"}
{"input": "Find all files/directories named 'FindCommandExamples.txt' under '/root' directory tree", "output": "find /root -name FindCommandExamples.txt"}
{"input": "Create an empty file 'last.check' in directory pointed by variable \"log_dir\", with specified timestamp.", "output": "touch -m 201111301200.00 $log_dir/last.check"}
{"input": "Find all directories starting from YOUR_STARTING_DIRECTORY that contain the string \"99966\" in their names", "output": "find YOUR_STARTING_DIRECTORY -type d -name \"*99966*\" -print"}
{"input": "Search the files in the current directory tree for lines containing string \"vds admin\"", "output": "find . -exec grep -i \"vds admin\" {} \\;"}
{"input": "Split \"filename\" into files of at most 200000 lines each", "output": "split -l 200000 filename"}
{"input": "prints the names of all files in the directory tree rooted in /usr/src whose name ends with \u2018.c\u2019 and that are larger than 100 Kilobytes.", "output": "find /usr/src -name '*.c' -size +100k -print"}
{"input": "Find all *.ogg files under the home directory ignoring the case", "output": "find $HOME -iname '*.ogg'"}
{"input": "For each item in array \"alpha\", display the basename, that is the part following the last slash, or the whole item if no slash is present.", "output": "basename -a \"${alpha[@]}\""}
{"input": "Create a directory named 'alpha_real' in the current directory", "output": "mkdir alpha_real"}
{"input": "Find all files under /somefolder matching the case insensitive regex '\\(.*error.*\\)\\|\\(^second.*\\log$\\)\\|\\(.*FFPC\\.log$\\)' in their paths", "output": "find /somefolder -type f | grep -i '\\(.*error.*\\)\\|\\(^second.*\\log$\\)\\|\\(.*FFPC\\.log$\\)'"}
{"input": "find dirctory files which modification time is  7 days ago", "output": "find . -mtime -7 -type d"}
{"input": "ssh into localhost on port 4444", "output": "ssh -p 4444 localhost"}
{"input": "List all php files below current directory whose full pathname name does not include \"libs\", \"tmp\", \"tests\", or \"vendor\", sorted by number of lines, letting the user page interactively through the output.", "output": "find . -name '*.php' -print0 | xargs -0 wc -l | sort -nr | egrep -v \"libs|tmp|tests|vendor\" | less"}
{"input": "Print the output of history without line numbers", "output": "history|awk '{$1=\"\";print substr($0,2)}'"}
{"input": "Recursively prints all folders in a current folder that contain files like \"*.class\".", "output": "find . -name \"*.class\" -print0 | xargs -0 -n1 dirname | sort --unique"}
{"input": "Find all regular files in the entire filesystem that belong to the group 'users'", "output": "find /  -type f -group users"}
{"input": "Create compressed archive from \"my_large_file_1\" and \"my_large_file_2\" and split into files of size 1024 MiB with prefix \"myfiles_split.tgz_\"", "output": "tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_"}
{"input": "Remove all regular files found in and below /path", "output": "find /path -type f -print | xargs rm"}
{"input": "find all files in a  directory with default depth size and compress them to lpicpio.2 file", "output": "find ~/lpi103-2/ -depth -print0 | cpio --null -o > ../lpicpio.2"}
{"input": "find all the cpp files in the current folder", "output": "find . -iname '*.cpp' -print"}
{"input": "Find all files/directories under current directory tree excluding files/directories with name 'query_to_avoid'", "output": "find -not -name \"query_to_avoid\""}
{"input": "search for text files in the folders /home/hobbes/ /home/calvin/ and discard all the errors", "output": "find /home/hobbes/ /home/calvin/ -name \u201c*.txt\u201d 2>/dev/null"}
{"input": "remove all the files in current folder which have the extension \"DS_Store\"", "output": "find . -name \".DS_Store\" -exec rm {} \\;"}
{"input": "Force pseudo-terminal allocation to run \"sudo <cmd>\" on \"remotehost\"", "output": "ssh -t remotehost \"sudo <cmd>\""}
{"input": "Print current shell settings", "output": "set -o"}
{"input": "Lists enabled repositories along with debugging information.", "output": "yum -v repolist enabled"}
{"input": "Remove all files with the .c extension in the current directory tree", "output": "find . -name \"*.c\" -print0 | xargs -0 rm -rf"}
{"input": "Move all regular files under current directory to ./newdir", "output": "find ./ -type f -print | xargs    -l56 -I {} mv -f {} ./newdir"}
{"input": "Find all files in the /home/myuser directory recursively that are older than 7 days", "output": "find /home/myuser -mtime +7 -print"}
{"input": "Find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding error_log files/directories", "output": "find /home/baumerf/public_html/ -mmin -60 -not -name error_log"}
{"input": "Search the current directory tree for files and directories whose names do not end in \".exe\" and \".dll\"", "output": "find . -name \\*.exe -o -name \\*.dll -o -print"}
{"input": "Show system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type.", "output": "uname -a"}
{"input": "Numerically sort file \"temp.txt\" by the second \"-\" separated value of each line ordered from highest value to least value", "output": "tac temp.txt | sort -k2,2 -r -u"}
{"input": "Display the current directory tree except files or directories starting with \"3rd\"", "output": "tree -I '3rd*'"}
{"input": "Eliminates partially duplicate lines by column, keeping the last occurrence", "output": "tac temp.txt | sort -k2,2 -r -u"}
{"input": "display all the files in the current folder which have been modified in the last 24 hours", "output": "find . -mtime -1"}
{"input": "Installs locally located 'packagename.arch.rpm' package, ignoring GPG checking.", "output": "yum --nogpgcheck localinstall packagename.arch.rpm"}
{"input": "Search subdirectory `Linux' in the current directory for file `teste.tex'", "output": "find -path './Linux/*' -name teste.tex"}
{"input": "search all the files in the current folder and assign them to a variable", "output": "files=`find .`"}
{"input": "Find all .tmp files under and below the /tmp/ directory and remove them", "output": "find /tmp -name \"*.tmp\"| xargs rm"}
{"input": "Remove all .gz files in the current directory tree", "output": "find . -name '*.gz' -type f -printf '\"%p\"\\n' | xargs rm -f"}
{"input": "Copy file in current directory of local host to host \"remote\", connecting as ssh user matching current local username, and copying the file in home directory on remote host - enable compression during transfer.", "output": "scp -C file remote:"}
{"input": "Unsets DUALCASE variable.", "output": "unset DUALCASE"}
{"input": "Gets IP address of a primary network interface.", "output": "/sbin/ifconfig $(netstat -nr | tail -1 | awk '{print $NF}') | awk -F: '/inet /{print $2}' | cut -f1 -d ' '"}
{"input": "Get the total size in bytes of all files in the current directory tree", "output": "find . -type f -printf \"%s + \" | dc -e0 -f- -ep"}
{"input": "Join lines in file \"aa\" with lines in file \"bb\" if the lines share a common first word and sort the result numerically", "output": "join <(sort aa) <(sort bb) | sort -k1,1n"}
{"input": "Print the IP addresses of the host name", "output": "hostname -I"}
{"input": "Save the absolute path of the current script to variable \"SELF\"", "output": "actual_path=$(readlink -f \"${BASH_SOURCE[0]}\")"}
{"input": "Search for regular files of the user bluher in the file system", "output": "find / -type f -user bluher -exec ls -ls {}  \\;"}
{"input": "Search the /path directory tree for files missing g+w and o+w bits", "output": "find /path ! -perm /022"}
{"input": "Find all files under current directory", "output": "find \"`pwd`\" -type f"}
{"input": "Find files with 777 permissions and change them to 755", "output": "find / -type f -perm 0777 -print -exec chmod 755 {} \\;"}
{"input": "Find all files/directories named 'game' under current directory tree", "output": "find . -name game"}
{"input": "Find files/directories under current directory without descending into it", "output": "find -maxdepth 0"}
{"input": "Find all files/directories under /path directory that were modified more than 30 minutes ago", "output": "find /path -mtime +30m"}
{"input": "Recursively copies everything under the 'current' folder to the '.hiddendir' folder.", "output": "cp * .hiddendir -R"}
{"input": "List all files that matches both the case insensitive patterns *$1* and *$2* under /home/musicuser/Music/ directory", "output": "find /home/musicuser/Music/ -type f  -iname \"*$1*\" -iname \"*$2*\" -exec echo {} \\;"}
{"input": "Print a list of all files and directories in the /var/log directory tree", "output": "find /var/log/"}
{"input": "Create a copy of the current working directory structure in the usr/project directory,", "output": "find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir -p"}
{"input": "split the file 2011.psv into pieces per 50000000 lines processed with script \"filter.sh\"", "output": "split -l 50000000 --filter=./filter.sh 2011.psv"}
{"input": "Continuously send \"a\" then \"b\" to \"script.py\"", "output": "yes $'a\\nb' | script.py"}
{"input": "Print the last space separated word from \"a b c d e\"", "output": "echo \"a b c d e\" | tr ' ' '\\n' | tail -1"}
{"input": "find all regular files in current directory and replace the word searc to replace in them.", "output": "find . -type f -exec sed -i 's/searc/replace/g' {} \\;"}
{"input": "Remove all *.sql files in the $backup_path directory that were last modified more than 5 days ago", "output": "find $backup_path/*.sql -mtime +5 -exec rm -f {} \\;"}
{"input": "Print $d if $d is empty", "output": "find \"$d\" -prune -empty"}
{"input": "List all files 2 levels deep in the current directory tree", "output": "tree -L 2 -fi"}
{"input": "Split \"input.txt\" into files of at most 10 bytes each with prefix \"/tmp/split-file\"", "output": "split -b 10 input.txt /tmp/split-file"}
{"input": "Perform a case insensitive search for *filename* files/directories under current directory tree", "output": "find . -iname \"*filename*\""}
{"input": "Search for all files with either \"sitesearch\" or \"demo\" in their path names", "output": "find . | grep -i demo | grep -i sitesearch"}
{"input": "Find files that are orphaned", "output": "find -nouser"}
{"input": "Print a 2 byte hexadecimal value, printable character, and octal value of \"$1\"", "output": "echo \"$1\" | od -xcb"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn -exec rm -rf {} \\;"}
{"input": "find all files that belong to root user", "output": "find . -uid 0 -print"}
{"input": "Print each line in \"f1\" and \"f2\" separated by a space and \"f3\" separated by a tab", "output": "paste <(paste -d\" \" f1 f2) f3"}
{"input": "Find broken symlinks in current directory", "output": "find -L -type l"}
{"input": "Find all links to path/to/file", "output": "find -L -samefile path/to/file"}
{"input": "Remove all files from the system whose path names contain \"GUI\"", "output": "find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f"}
{"input": "Show all files in /etc that are owned by root have been modified within the last minute", "output": "find /etc/ -user root -mtime 1"}
{"input": "Print 10 lines of a single \"x\"", "output": "yes x | head -n 10"}
{"input": "Find files which were changed in the past 1 hour", "output": "find . -cmin -60"}
{"input": "List all regular files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -type f -mmin -60 | xargs -r ls -l"}
{"input": "search for files in current folder using name patterns", "output": "find . -name \"S1A*1S*SAFE\""}
{"input": "search for the directory \"uploads\" in current folder and change the permission of the folder and all the files to 755", "output": "find . -type d -name 'uploads' | while read d; do chmod -R 755 \"$d\"; done"}
{"input": "Find all Read Only files in entire file system and show a few lines of output from the beginning", "output": "find / -perm /u=r | head"}
{"input": "Find all *.csv files under /foo/bar and move them to some_dir", "output": "find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir"}
{"input": "find all files in current folder which are exactly 300MB", "output": "find . -size 300M"}
{"input": "change the ownership of all directories in the current folder", "output": "find . -type d -exec chown username {} \\;"}
{"input": "For each line which has a common first field in test.1 and test.2, output the first 2 fields of test.2 and the field 2 and 3 of test.1", "output": "join -j1 -o 2.1,2.2,1.2,1.3  <(sort test.1) <(sort test.2)"}
{"input": "Find all files/directories named 'test' under current directory tree", "output": "find . -name test"}
{"input": "Find all files/directories that are newer than 'backup.tar.gz' by modification time", "output": "find . -newer  backup.tar.gz"}
{"input": "search all the files in the current folder using regex", "output": "find . -regex \".*/my.*p.$\""}
{"input": "Write the standard output and error of \"ls\" to the console and append it to \"/tmp/ls.txt\"", "output": "ls 2>&1 | tee -a /tmp/ls.txt"}
{"input": "Mathematically sum all numbers in \"numbers.txt\"", "output": "cat numbers.txt | php -r \"echo array_sum(explode(PHP_EOL, stream_get_contents(STDIN)));\""}
{"input": "Greps domain $domain IP name from long dig listing.", "output": "dig $domain | grep $domain | grep -v ';' | awk '{ print $5 }'"}
{"input": "delete all the empty directories in the current folder", "output": "find . -type d -empty -exec rmdir {} \\;"}
{"input": "Archive \"/usr/local/\" to \"/BackUp/usr/local/\" on host \"XXX.XXX.XXX.XXX\" via ssh and show progress", "output": "rsync --progress -avhe ssh /usr/local/  XXX.XXX.XXX.XXX:/BackUp/usr/local/"}
{"input": "find all the files in the current folder that have not been modified in the last 24*3 hours", "output": "find ./ -mtime +3"}
{"input": "Save the first line of \"$j\" into variable \"k\" in ksh", "output": "echo $j | read k"}
{"input": "Prints last modified file in a current folder with modification time.", "output": "find . -type f | sed 's/.*/\"&\"/' | xargs ls -E | awk '{ print $6,\" \",$7 }' | sort | tail -1"}
{"input": "Move \"/usr/bin/openssl\" to directory \"/root/\"", "output": "mv /usr/bin/openssl /root/"}
{"input": "Print the first 5 characters followed by the next 5 characters on a new line for each line in \"input_file\" and split the result into files of at most 2000000 lines each with a filename prefix \"out-prefix-\"", "output": "sed 's/\\(.....\\)\\(.....\\)/\\1\\n\\2/' input_file | split -l 2000000 - out-prefix-"}
{"input": "Find all *.txt files/directories under current directory terminating their names/paths with null character", "output": "find . -name '*.txt' -print0"}
{"input": "Find all files under current directory excluding hidden directories", "output": "find -name '.?*' -prune -o \\( -type f -print0 \\)"}
{"input": "delete all the files which start with \"Tes\" in the current folder", "output": "find . -type f -name \"Tes*\" -exec rm {} \\;"}
{"input": "Send contents of \"input.txt.gz\" to \"command\" on stdin", "output": "zcat input.txt.gz | command -"}
{"input": "Copy files printed by \"any_command_what_produces_relative_path_names\" to \"/new/parent/dir\" preserving the directory hierarchy", "output": "any_command_what_produces_relative_path_names | cpio -pamVd /new/parent/dir"}
{"input": "Remove all *.txt files, except robots.txt, under the given directory modified more than 5 minutes ago", "output": "find /home/u20806/public_html -name \"robots.txt\" -o -maxdepth 1 -mmin +5 -type f -name \"*.txt\" -delete"}
{"input": "Look in the current directory and below for all files whose names begin with either \"my\" or \"qu\"", "output": "find . \\( -name \"my*\" -o -name \"qu*\" \\) -print"}
{"input": "Search for files in your home directory which have been modified in the last twenty-four hours", "output": "find $HOME  -mtime 0"}
{"input": "Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output", "output": "find . -type f -exec grep -n California {} \\; -print | wc -l"}
{"input": "create directory /etc/cron.minute", "output": "mkdir /etc/cron.minute"}
{"input": "find all the files with the extension .xml and print them in a single line and check for the validity of a command by giving the file as input", "output": "find . -name *.xml -print0 | xargs -n 1 -0 invalid_command"}
{"input": "Find all symbolic links in the current working directory that link to files outside the current working directory", "output": "find . -type l -exec sh -c 'echo $(readlink -f \"{}\") \"<-- {}\"' \\; | grep -v \"^$(readlink -f ${PWD})\""}
{"input": "If first command fails, exits from script with exit code of failed command.", "output": "echo $[4/0] || exit $?"}
{"input": "Get the list of files owned by <userid>", "output": "find . -user <userid>"}
{"input": "Show the value of variable \"list\", discarding consecutive duplicates and adding number of occurrences at the beginning of each line.", "output": "echo \"$list\" | uniq -c"}
{"input": "Compare the files in 'FOLDER1' and 'FOLDER2' and show which ones are indentical and which ones differ", "output": "find FOLDER1 -type f -print0 | xargs -0 -I % find FOLDER2 -type f -exec diff -qs --from-file=\"%\" '{}' \\+"}
{"input": "Split \"input.txt\" into files of at most 10 bytes each with prefix \"xxx/split-file\"", "output": "split -b 10 input.txt xxx/split-file"}
{"input": "Find all files/directories that contain 'target' (case insensitive) in their names under current directory no-recursively", "output": "find -maxdepth 1 -iname \"*target*\""}
{"input": "display all the files in the current folder along with the change time and display file names of the last 10 changed files", "output": "find . -type f -printf \"%C@ %p\\n\" | sort -rn | head -n 10"}
{"input": "Print the contents of \"${SPOOL_FILE}\" file to the console and append to \"${LOG_FILE}\" file", "output": "cat ${SPOOL_FILE}                   | tee -a ${LOG_FILE}"}
{"input": "Dump \"/dev/ttySomething\" in both hex and text", "output": "od -t x1 -t a /dev/ttySomething"}
{"input": "Create intermediate directories as required and directory project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}", "output": "mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}"}
{"input": "Split a file \"file.tar.gz\" into pieces named as \"file.tar.gz.part-NNN\" with size 1024 MB where NNN is a numeric suffix", "output": "split -b 1024m \"file.tar.gz\" \"file.tar.gz.part-\""}
{"input": "change owner and group of the file uid_demo to user and group root", "output": "sudo chown root:root uid_demo"}
{"input": "Searches the manual page names and descriptions by 'disk' keyword.", "output": "apropos disk"}
{"input": "List all files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 -ls"}
{"input": "Show logged in users with idle time of each one", "output": "w | tr -s \" \" | cut -d\" \" -f1,5 | tail -n+3"}
{"input": "Find all directories under current directory having DIRNAME in their name", "output": "find . -type d | grep DIRNAME"}
{"input": "Read the first line of output from \"du -s $i\" into variable \"k\" in ksh", "output": "du -s $i | read k"}
{"input": "Find all the regular files under $DIR directory tree which have been modified before the file $a excluding the file $a and delete them", "output": "find \"$DIR\" -type f \\! -newer \"$a\" \\! -samefile \"$a\" -exec rm {} +"}
{"input": "find directories in the folder /usr/spool/uucp", "output": "find /usr/spool/uucp -type d -print"}
{"input": "find all the files in the file system which have been changed in the last 24 hours.", "output": "find / -ctime -1"}
{"input": "Print the base name of the current working directory", "output": "echo \"$(basename $(pwd))\""}
{"input": "Search all the *.pl files in the current directory and subdirectories, and print the names of any that don't have a line starting with 'use strict'", "output": "find . -name '*.pl' | xargs grep -L '^use strict'"}
{"input": "Change directory to the directory containing the \"oracle\" executable", "output": "cd $(dirname $(which oracle))"}
{"input": "List all files/directories under current directory", "output": "find ."}
{"input": "Read standard input until a null character is found and save the result in variable \"line\"", "output": "read -r -d $'\\0'"}
{"input": "Find all directories under current directory and set read-write-execute permission for owner and group and no permission for other for those directories", "output": "find . -type d -exec chmod ug=rwx,o= {} \\;"}
{"input": "Test if a file named 'file' in the current directory is more than 1 hour old", "output": "find file -chour +1 -exit 0 -o -exit 1"}
{"input": "change the permissions of all the directories in the current folder", "output": "find . -type d -exec chmod 2775 {} \\;"}
{"input": "find for lighttpd in /var", "output": "find /var -name lighttpd"}
{"input": "Search the entire file hierarchy for files ending in '.old' and delete them.", "output": "find / -name \"*.old\" -delete"}
{"input": "show the disk use of all the regular/normal files in the current folder which are bigger than 50MB", "output": "find . -type f -size +50000k | xargs du -sh"}
{"input": "Exclude directory from find . command", "output": "find . -name '*.js' -and -not -path directory"}
{"input": "Display the content of YourFile.txt, waiting for user input at each page.", "output": "more YourFile.txt"}
{"input": "Recursively removes all files named '.svn' in a current folder, and prints messages on each action.", "output": "find . -name .svn -exec rm -v {} \\;"}
{"input": "Print and split the output of \"my_program\" into files of at most 100000 bytes each and use numeric suffixes", "output": "my_program | tee >(split -d -b 100000 -)"}
{"input": "Find how many directories are in a path (counts current directory)", "output": "find . -type d -exec basename {} \\; | wc -l"}
{"input": "Print the contents of \"file\" in reverse order", "output": "nl file | sort -nr | cut -b8-"}
{"input": "find out what group a given user has", "output": "groups user"}
{"input": "create directory /etc/cron.15sec", "output": "mkdir /etc/cron.15sec"}
{"input": "Add the .abc suffix to the names of all *.txt regular files in the current directory tree", "output": "find . -type f -iname '*.txt' -print0 | xargs -0 mv {} {}.abc"}
{"input": "Find all files/directories greater than 100MB and print their list along with their size in /root/big.txt file", "output": "find \\( -size +100M -fprintf /root/big.txt '%-10s %p\\n' \\)"}
{"input": "Display the contents of \"myfile\" located in the current directory.", "output": "cat myfile"}
{"input": "Search the current directory tree for files whose names contain \"bills\"", "output": "find . -name '*bills*' -print"}
{"input": "Send \"yes\" 4 times followed by 1 \"no\" to \"./script\"", "output": "{ yes yes | sed 4q; yes no | sed 1q; } | ./script"}
{"input": "Recursively removes all files and folders like 'FILE-TO-FIND' from current folder.", "output": "find . -name \"FILE-TO-FIND\" -exec rm -rf {} +"}
{"input": "set alias \"cleanup\" for command 'rm -Rf `pwd`/{foo,bar,baz}'", "output": "alias cleanup='rm -Rf `pwd`/{foo,bar,baz}'"}
{"input": "Find all files/directories that are newer than 'ttt' by modification time or owned by the user 'wnj' in the entire filesystem", "output": "find / \\( -newer ttt -or -user wnj\t\\) -print"}
{"input": "Find directories in the current directory (no sub-directories) and print them appended with a string literal 'Directory: '", "output": "find . -maxdepth 1 -type d -print | xargs  -I \"^\" echo Directory: \"^\""}
{"input": "Print the current directory", "output": "find -prune"}
{"input": "Find recursively all Python files in the current directory and search them for the word \u2018import\u2019", "output": "find . -name '*.py' | xargs grep 'import'"}
{"input": "look for the largest 200 files over 1,000,000 bytes in the filesystem mounted at \"/usr/pcapps\"", "output": "find /usr/pcapps/ -mount -type f -size +1000000c | perl -lpe ' s{ }{\\\\ }g ' | xargs ls -l | sort +4nr | head -200"}
{"input": "Search the bla directory recursively for *.so files", "output": "find bla -name \"*.so\""}
{"input": "Find all regular files with name pattern $filename under $fileloc directory tree", "output": "find \"$fileloc\" -type f -prune -name \"$filename\" -print"}
{"input": "Find all the files that are not named \"MyCProgram.c\" in the current directory only and without regards to case.", "output": "find -maxdepth 1 -not -iname \"MyCProgram.c\""}
{"input": "prints the last non-empty line of a file", "output": "tac FILE |egrep -m 1 ."}
{"input": "search files in the folder /home which have been modified after /tmp/after and before /tmp/before", "output": "find /home/ -type f -newer /tmp/after -not -newer /tmp/before"}
{"input": "Change directory to the download directory specified in the current user's user-dirs.dirs file", "output": "cd \"$(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d \"=\" | tr \"\\\"\" \"\\n\")\""}
{"input": "Delete empty files and print their names", "output": "find . -empty -delete -print"}
{"input": "Spawn a background screen session running myCommand", "output": "screen -d -m sh -c \"while :; do ./myCommand; done;\""}
{"input": "create a tar ball of all the files in the current folder", "output": "tar cvf - `find . -print` > backup.tar"}
{"input": "Removes 55, adds a 10-digit line number, and rearranges the date for each line in \"input\"", "output": "nl -nrz -w10 -s\\; input | sed -r 's/55//; s/([0-9]{2})-([0-9]{2})-([0-9]{4})/\\3\\2\\1/'"}
{"input": "Set a title of a remote screen session", "output": "screen -S SessionName -p 0 -X title \"remote_0\""}
{"input": "Print the help message of command \"split\"", "output": "split --help"}
{"input": "Create a ssh key and store it in the file ~/.ssh/apache-rsync", "output": "ssh-keygen -f ~/.ssh/apache-rsync"}
{"input": "Search the current directory tree for files whose names end in \"rb\" or \"js\"", "output": "find . -name \"*js\" -o -name \"*rb\""}
{"input": "Find all *FooBar* files/directories under current directory and copy them to ~/foo/bar", "output": "find -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar"}
{"input": "Find all directories under $d directory and set read-write-execute permission for owner and group and no permission for other for those directories", "output": "find $d -type d -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "Starts new detached tmux session and runs command $CMD within.", "output": "tmux new -d \"bash -c '$CMD'\""}
{"input": "Remount \"point\" subtree to \"mnt\" as a bind mount", "output": "mount --bind point mnt"}
{"input": "remove all the files with the name \"Trash\" in the folder /home", "output": "find /home -name Trash -exec rm {} \\;"}
{"input": "Save the \"Pictures\" directory in the current user's home directory on the directory stack", "output": "pushd /home/`whoami`/Pictures"}
{"input": "Remove files whose names match regular expression '^.*/[A-Za-z]+-[0-9]+x[0-9]+\\.[A-Za-z]+$' from the current directory tree", "output": "find -regex '^.*/[A-Za-z]+-[0-9]+x[0-9]+\\.[A-Za-z]+$' | xargs echo rm -f"}
{"input": "Change permissions to 700 for directories at the current level and deeper", "output": "find . -mindepth 1 -type d | xargs chmod 700"}
{"input": "Set the setup connection timeout to 3 seconds for connecting to \"user@ip\" via ssh", "output": "ssh -o ConnectTimeout=3 user@ip"}
{"input": "Pushes to the dirs stack directory path of the current script, or current directory path if executed from bash shell.", "output": "pushd $(dirname $0)"}
{"input": "display all the statistics of the files in the current folder and discard the errors. ( + symbol at the end is used to give stat bulk input than a single file )", "output": "find . -type f -exec stat {} + > /dev/null"}
{"input": "Find the largest 10 files (regular files) under current directory", "output": "find . -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {}"}
{"input": "Search the current directory tree for regular files that contain \"string\"", "output": "find . -type f -print0 | xargs -0 grep string"}
{"input": "Calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'", "output": "md5=\"$(md5sum \"${my_iso_file}\")\""}
{"input": "Find all *blue* files/directories under /myfiles", "output": "find /myfiles -name '*blue*'"}
{"input": "Create a variable FOO_BACKWARDS containing \"oof\".", "output": "export FOO_BACKWARDS=$(echo 'foo' | rev)"}
{"input": "Find all files/directories named 'myfile' under your home directory", "output": "find ~ -name myfile"}
{"input": "Remove all files with names like \"vmware-*.log\" from the current directory tree", "output": "find . -name vmware-*.log | xargs rm"}
{"input": "replace the word apple with orange in all the files in the current folder", "output": "find ./ -exec sed -i 's/apple/orange/g' {} \\;"}
{"input": "List all *.txt files in <path> with details about their attributes", "output": "find <path> -xdev -type f -name *.txt -exec ls -l {} \\;"}
{"input": "Immediately exit the shell if a command fails", "output": "set -e"}
{"input": "Search the home directory for files whose names begin with \"test\"", "output": "find ~ -name \"test*\" -print"}
{"input": "Find recursively the latest modified file in the current directory", "output": "find . -type f | xargs ls -ltr | tail -n 1"}
{"input": "rename all the svg.png files to png files in the current fodler", "output": "find . -name \"*.svg.png\" -print0 | sed 's/.svg.png//g' | xargs -0 -I namePrefix mv namePrefix.svg.png namePrefix.png"}
{"input": "List detailed information about all Jar files in the current directory tree", "output": "find . -iname \"*.jar\" | xargs zipinfo"}
{"input": "Find all *$VERSION* files/directories under current directory where $VERSION is a variable", "output": "find . -name \"*$VERSION*\""}
{"input": "Find all the files on the system that have been modified within the last hour", "output": "find / -mmin -60"}
{"input": "Search the case insensitive regex ''a.search.pattern'' in all Python files and all XML files under current directory and pipe the result in a readonly Vim session", "output": "find -iregex '.*\\.py$\\|.*\\.xml$' | xargs egrep -niH 'a.search.pattern'  | vi -R -"}
{"input": "Count the number of non localhost users", "output": "who | grep -v localhost | wc -l"}
{"input": "Reconnect to a named screen session", "output": "screen -x screen id"}
{"input": "find all regular/normal files in the current folder that have been modified in the last 120 hours", "output": "find -mtime -5 -type f -print"}
{"input": "Unzip \"file.gz\" to standard output and execute in bash with arguments \"-n wordpress\"", "output": "gzip -d --stdout file.gz | bash -s -- \"-n wordpress localhost\""}
{"input": "SSH with trusted X11 forwarding into \"user@remoteToRemote_IP\" from SSH connection \"user@remote_IP\"", "output": "ssh -XY -t user@remote_IP 'ssh -XY -t user@remoteToRemote_IP'"}
{"input": "Search the specified group for the given \"filename", "output": "find / -group users -iname \"filename\""}
{"input": "Dump \"a\\0b\" as hexadecimal bytes", "output": "printf \"a\\0b\" | od -tx1"}
{"input": "display all regular files in current folder excluding search in the directories that are ending with \"git,svn\"", "output": "find . \\( -type d -regex '^.*/\\.\\(git\\|svn\\)$' -prune -false \\) -o -type f -print0"}
{"input": "Returns the number of modified files in a git repository, whitespaces stripped.", "output": "MYVAR=`git ls-files -m|wc -l|tr -d ' '`"}
{"input": "Find all .gif files in the /var/www directory tree that are between 5 kB and 10 kB in size", "output": "find /var/www -name *.gif -size +5k -size -10k"}
{"input": "Look for any files that were modified 2-5 days ago", "output": "find -mtime +2 -mtime -5"}
{"input": "Merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2", "output": "join -t, <(sort file1) <(sort file2)"}
{"input": "Display the number of regular files under current directory tree", "output": "find . -type f -print0 | tr -dc '\\0' | wc -c"}
{"input": "Disable exiting the shell on error", "output": "set +e"}
{"input": "Copy permissions from \"version2/somefile\" to \"version1/somefile\"", "output": "chmod --reference version2/somefile version1/somefile"}
{"input": "Back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory", "output": "find /etc -name \"*.txt\" | xargs -I {} mv {} {}.bak"}
{"input": "display all files in current folder excluding current folder (.)", "output": "find . \\! -name '.'"}
{"input": "Find the process id of mysql", "output": "ps aux | grep mysql | grep -v grep"}
{"input": "find all the files in the current folder with the name \"test-a\" and move them to the folder test-10", "output": "find ~ -type f -name test-a -exec mv {} test-10 \\;"}
{"input": "delete all the backup files in current directory", "output": "find . -name \"*.bak\" -delete"}
{"input": "Make all directories in the current directory tree accessible to anybody", "output": "find . -type d -print0 | xargs -0 chmod go+rx"}
{"input": "Check if the $somedir directory is empty", "output": "find \"$somedir\" -maxdepth 0 -empty -exec echo {} is empty. \\;"}
{"input": "Assign the alias rm5g to a find command that removes any .tar file larger than 5 gigabytes.", "output": "alias rm5g=\"find / -type f -name *.tar -size +5G -exec rm -i {} \\;\""}
{"input": "Find file `Chapter1' on the system", "output": "find / -name Chapter1 -type f -print"}
{"input": "Delete everything in the current directory", "output": "find -mindepth 1 -maxdepth 1 -print0 | xargs -0 rm -rf"}
{"input": "Find PHP files containing 2 or more classes", "output": "find . -type f -name \"*.php\" -exec grep --with-filename -c \"^class \" {} \\; | grep \":[2-99]\" | sort -t \":\" -k 2 -n -r"}
{"input": "display all the files in current folder which start with \"file2015-0\"", "output": "find . -name \"file2015-0*\""}
{"input": "Remove all Thumbs.db (case insensitive)  files under temp/images directory", "output": "find temp/images/ -type f -iname Thumbs.db | while read FILE ; do rm \"${FILE}\" ; done"}
{"input": "Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.", "output": "basedir=$(cygpath -am \"$(dirname \"$0\")\")"}
{"input": "Remove all files with a txt extension under current directory", "output": "find . -type f -name \"*.txt\" | xargs    -I {} ksh -c \"echo deleting {}; rm {}\""}
{"input": "Find files and directories owned by xuser1 and change their ownership to user2", "output": "find . -user xuser1 -exec chown -R user2 {} \\;"}
{"input": "Rename all *.jpg files under current directory by appending parent directory name at the beginning of their names if the name doesn't already contain the parent directory name", "output": "find . -name '*.jpg' -execdir bash -c 'd=\"${PWD##*/}\"; [[ \"$1\" != \"$d-\"* ]] && mv \"$1\" \"./$d-$1\"' - '{}' \\;"}
{"input": "display all the files in the file system which belong to the group lighttpd", "output": "find / -group lighttpd -print"}
{"input": "Query about which keys invoke the named function", "output": "bind -q complete"}
{"input": "Move all files and directories matching \"*.boo\" in the current directory to \"subdir\"", "output": "mv `ls *.boo` subdir"}
{"input": "List the current directory recursively ignoring the \"dir1\" subdirectory's content", "output": "find . -print -name dir -prune"}
{"input": "enable extglob expansion and create symbolic links in \"bar2\" directory to all files located in \"bar1\" directory that are not directory and do not have\".cc\" filename extension", "output": "shopt -s extglob; cd bar2; ln -s ../bar1/foo!(*.cc) ."}
{"input": "Read a line of standard input into variable \"_command\" with the prompt as the current working directory followed by \"$\"", "output": "read -p \"`pwd -P`\\$ \" _command"}
{"input": "Set variable 'path' to name of current directory (without the containing directories) converted to lowercase.", "output": "path=$(basename $(pwd) | tr 'A-Z' 'a-z' )"}
{"input": "Split the first 100 lines of \"datafile\" into files with at most 1700 bytes each preserving lines", "output": "sed 100q datafile | split -C 1700 -"}
{"input": "Find all files, starting from / but ignoring removable media, whose names end with \".rpm\"", "output": "find / -xdev -name \"*.rpm\""}
{"input": "Counts lines in each *.php file, sorted by number of lines, descending.", "output": "find . -name '*.php' -type f | xargs wc -l | sort -nr"}
{"input": "Change permissions to 0755 for all directories in the /path directory tree", "output": "find /path -type d -exec chmod 0755 {} \\;"}
{"input": "Replace all newlines with spaces in standard input", "output": "sed -z 's/\\n/ /'g"}
{"input": "List all hidden files under present working directory and redirect the list to all-hidden-files.txt", "output": "find `pwd` -iname \".*\" -type f > all-hidden-files.txt"}
{"input": "Get the processor's addressing bus width from the output of \"lshw\", ie. \"64 bits\".", "output": "lshw -class cpu|grep \"^       width\"|uniq|awk '{print $2}'"}
{"input": "Find all files larger than 100M and delete them", "output": "find / -size +100M -exec rm -rf {} \\;"}
{"input": "Find all directories under ~/code and replace all newlines with : in the output then remove the last :", "output": "find ~/code -type d | tr '\\n' ':' | sed 's/:$//'"}
{"input": "Move \"tobecopied/tobeexclude\" to \"tobeexclude\"", "output": "mv tobecopied/tobeexclude tobeexclude;"}
{"input": "Search the /path directory tree for files missing g+w or o+w bits", "output": "find /path ! -perm -022"}
{"input": "Print variable \"$module\" in formatted rows", "output": "column -x <<< \"$(printf '%s\\n' $module)\""}
{"input": "change cgi files to mode 755", "output": "find htdocs cgi-bin -name \"*.cgi\" -type f -exec chmod 755 {} \\;"}
{"input": "search for the word \"foo\" in all the regular/normal files in the directory \"/path/to/dir\"", "output": "find /path/to/dir -type f | xargs grep -l \"foo\""}
{"input": "Find all files/directories named 'document' in the root filesystem partition", "output": "find / -xdev -name document -print"}
{"input": "Find all *.ext regular files under /path and execute my_cool_script for each of them with the file path as argument", "output": "find /path -type f -name '*.ext' -exec my_cool_script \\{\\} \\;"}
{"input": "Cut off three last symbols from string '1234567890  *'", "output": "echo '1234567890  *' | rev | cut -c 4- | rev"}
{"input": "Set the prompt to \"title: (hostname)\"", "output": "export PS1='\\[\\e]0;`hostname`\\a\\]${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ '"}
{"input": "Print a list of all regular files residing in the current directory", "output": "find . -maxdepth 1 -type f -print0"}
{"input": "find all files that were modified between 90 to 100 days ago in home directory and delete then .", "output": "find /home -type f -mtime +90 -mtime -100  -exec rm  {} \\;"}
{"input": "Prints a process tree for each process of user 'username'.", "output": "ps -aux | grep ^username | awk '{print $2}' | xargs pstree"}
{"input": "Mount \"ext4\" filesystem \"/dev/xvdf1\" on \"/vol\"", "output": "sudo mount /dev/xvdf1 /vol -t ext4"}
{"input": "Handles shell option 'nullglob' according with flags stored in $NGV variable.", "output": "shopt \"$NGV\" nullglob"}
{"input": "Prints process tree of a process having id $mypid, with command options and process id number.", "output": "pstree -aAp $(ps -ejH | awk -v v1=$mypid '$1==v1 {print $3}')"}
{"input": "Add \"new.\" to the beginning of the name of \"original.filename\", renaming it to \"new.original.filename\".", "output": "rename 's/(.*)$/new.$1/' original.filename"}
{"input": "Recursively finds all files like \"*.log\" and \"*.trc\" in a current folder, modified in a last day, sorts list by modification time and pipes output to pager tool 'less'.", "output": "sudo find . \\( -name \"*.log\" -o -name \"*.trc\" \\) -mtime -1 | sudo xargs ls -ltr --color | less -R"}
{"input": "Move all files/directories under current directory to destDir", "output": "find sourceDir -print0 | xargs -0 mv -t destDir"}
{"input": "Continuously send \"Y\" to input of \"command-that-asks-for-input\"", "output": "yes Y | command-that-asks-for-input"}
{"input": "Rename \"svnlog.py\" to \"svnlog\"", "output": "mv svnlog.py svnlog"}
{"input": "Find all Lemon*.mp3 files under current directory and run mplayer with these files", "output": "find . -name 'Lemon*.mp3' -print0 | xargs -0 mplayer"}
{"input": "Read a line from standard input into variable \"response\" without backslash escapes using the prompt \"About to delete all items from history that match \\\"$param\\\". Are you sure? [y/N] \"", "output": "read -r -p \"About to delete all items from history that match \\\"$param\\\". Are you sure? [y/N] \" response"}
{"input": "Search the current directory tree for regular files whose names end in \".shtml\" or \".css\"", "output": "find . -type f \\( -name \"*.shtml\" -o -name \"*.css\" \\) -print"}
{"input": "Search in current directory downwards all files whose size is 10 bytes ( Characters ) .", "output": "find . -size 10c -print"}
{"input": "List all files/directories under current directory", "output": "find -ls"}
{"input": "Find all files/directories under $TARGET_DIR directory tree matching the posix extended regular expression \\\".*/$now.*\\\" (where $now is a variable) and save the output in file $FILE_LIST", "output": "find $TARGET_DIR -regextype posix-extended -regex \\\".*/$now.*\\\" -fprint $FILE_LIST"}
{"input": "Search for files/directories with the case insensitive pattern anaconda* in /var/log", "output": "find /var/log/ -iname anaconda*"}
{"input": "Remove \"_dbg\" from all file or directory names under the current directory", "output": "rename _dbg.txt .txt **/*dbg*"}
{"input": "Prints what year it was 222 days ago", "output": "date --date=\"222 days ago\" +\"%Y\""}
{"input": "Recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename.", "output": "find ~/ -type f -exec grep -H 'text-to-find-here' {} \\;"}
{"input": "Save the number of records in the system hostname that contain numbers in variable \"server_id\"", "output": "server_id=`hostname | tr 'A-Za-z-.' ' ' | tr -d '[[:space:]]' | awk '{print NR}'`"}
{"input": "Run `command' passing the files from the current directory tree as arguments", "output": "find . -print|xargs command"}
{"input": "display all the normal/regular files in the current folder and do not go beyond 3 levels", "output": "find . -maxdepth 3 -type f"}
{"input": "Change permissions of all directories in the ~/dir_data directory tree in accordance with mode `a+xr,u+w'", "output": "find ~/dir_data -type d -exec chmod a+xr,u+w {} \\;"}
{"input": "Print 'file' content, formatting output as 29-symbol wide column", "output": "cat file | fold -w29"}
{"input": "Set 444 permission to all regular files under current directory", "output": "find . -type f -print | xargs chmod 444"}
{"input": "Find all files in the `sourceDir' directory tree", "output": "find sourceDir -mindepth 1"}
{"input": "find the file \"fluidpoint\" in the file system and discard all the errors", "output": "find / -name fluidpoint 2> /dev/null"}
{"input": "Execute python script \"test.py\" with \"LD_PRELOAD=./linebufferedstdout.so\" and write the output to console and append to \"test.out\"", "output": "LD_PRELOAD=./linebufferedstdout.so python test.py | tee -a test.out"}
{"input": "Search for \"facebook\\|xing\\|linkedin\\|googleplus\" in \"access-log.txt\" and print a count of the unique entries", "output": "grep -ioh \"facebook\\|xing\\|linkedin\\|googleplus\" access-log.txt | sort | uniq -c | sort -n"}
{"input": "display a long list of all the jpg files in the home folder", "output": "find ~ -iname '*.jpg' -exec ls {} \\;"}
{"input": "Count all the lines of code in all php files in current directory recursively", "output": "find . -name \"*.php\" | xargs grep -v -c '^$' | awk 'BEGIN {FS=\":\"} { $cnt = $cnt + $2} END {print $cnt}'"}
{"input": "display all normal/regular files in current folder", "output": "find . -type f"}
{"input": "Print process tree, adjusting output width with a screen size.", "output": "pstree | cat"}
{"input": "Change all cron jobs running \"anm.sh\" to be run every 10 minutes instead of 5 minutes.", "output": "crontab -l | sed '/anm\\.sh/s,^\\*/5,*/10,' | crontab -"}
{"input": "Print sorted list of unique users logged in followed by a total count", "output": "who | awk '{ print $1; }' | sort -u | awk '{print $1; u++} END{ print \"users: \" u}'"}
{"input": "Find all *fink* files/directories under current directory", "output": "find . -name \"*fink*\" -print"}
{"input": "Print only the line \"foo///\" given two empty directories foo and bar", "output": "find foo/// bar/// -name foo -o -name 'bar?*'"}
{"input": "Find regular files modified less than 14 days ago stripping ./ from each file name", "output": "find . -type f -mtime -14 | cut -b 3- > deploy.txt"}
{"input": "Decompress and extract '/usr/src/redhat/SOURCES/source-one.tar.gz'", "output": "gzip -dc /usr/src/redhat/SOURCES/source-one.tar.gz | tar -xvvf -"}
{"input": "Find files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days and print them with null character appended to their paths", "output": "find \"${DIR_TO_CLEAN?}\" -type f -mtime +${DAYS_TO_SAVE?} -print0"}
{"input": "Read a single character from standard input into variable \"ans\"", "output": "read -n1 ans"}
{"input": "Unzip and extract \"*\\(userAgent=[^=]*\\) [^ =]\\+=.*\" from \"input.gz\"", "output": "zcat input.gz | sed -n 's/.*\\(userAgent=[^=]*\\) [^ =]\\+=.*/\\1/p'"}
{"input": "Counts all files in a current folder and in subfolders one-level lower, sorts result and pipes to the less pager.", "output": "find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo $(find {} | wc -l) \\\\t {}' | sort -rn | less"}
{"input": "Find all files with the SUID bit set beginning with the root directory", "output": "find / -perm -u+s"}
{"input": "Find all files/drectories under '/u/bill' directory tree that have been accessed in the last 2 to 6 minutes", "output": "find /u/bill -amin +2 -amin -6"}
{"input": "display a long listing of all the files in the home folder which are bigger than 200MB", "output": "find /home -size +200M -exec ls -sh {} \\;"}
{"input": "Print a line of 100 '=' characters", "output": "head -c 100 < /dev/zero | tr '\\0' '='"}
{"input": "Automatically spell check file \"text.txt\" using \"ispell\" command", "output": "yes 0 | script -c 'ispell text.txt' /dev/null"}
{"input": "display files ending with \".ext\" in current folder which are present in the file \"foo\"", "output": "find . -type f -name \\*.ext | xargs grep foo"}
{"input": "Print content of 'whatever' file", "output": "cat whatever | egrep 'snozzberries|$'"}
{"input": "display long listing of all normal/regular files in the current directory which have been modified in the last 2 days.", "output": "find . -mtime -2 -type f -name \"t*\" -exec ls -l '{}' \\;"}
{"input": "Sort a file 'file' preserving only unique lines and change the file in-place", "output": "sort -u -o file !#$"}
{"input": "Print crontabs of all users in system, skipping messages that some users don`t have crontab.", "output": "cat /etc/passwd | sed 's/^\\([^:]*\\):.*$/crontab -u \\1 -l 2>\\&1/' | sh | grep -v \"no crontab for\""}
{"input": "Read a single character from standard input into variable \"doit\" with prompt \"Do that? [y,n]\"", "output": "read -n1 -p \"Do that? [y,n]\" doit"}
{"input": "Print the list of all regular files in the current directory and below", "output": "find . -type f"}
{"input": "Write output of \"ls -lR /\" to standard output and to \"output.file\"", "output": "ls -lR / | tee output.file"}
{"input": "Find all regular files under $dir", "output": "find $dir -type f"}
{"input": "display all scala files in the directory \"src/main\"", "output": "find . -path \"*src/main*\" -type f -iname \"*\\.scala*\""}
{"input": "Change the owner to \"hduser\" and group to \"hadoop\" of \"{directory path}\"", "output": "sudo chown hduser:hadoop {directory path}"}
{"input": "Search the current directory tree for all files matching either pattern \"*.rb\" or pattern \"*.py\"", "output": "find . -name \"*.rb\" -or -name \"*.py\""}
{"input": "Compress .log files in /var and below on an individual basis", "output": "find /var -iname \\*.log -exec bzip {} \\;"}
{"input": "Check if content of all top-level *.txt files in the current directory contain only unique lines", "output": "cat *.txt | sort | sort -u -c"}
{"input": "Find the \"*.foo\" files in the current directory tree that are not under \".snapshot\" directories", "output": "find . -name .snapshot -prune -o -name '*.foo' -print"}
{"input": "List the files from the current directory tree that contain lines matching regular expression  '^Subject:.*unique subject'", "output": "find . -type f -print0 | xargs -0 grep -il '^Subject:.*unique subject'"}
{"input": "List all files under current directory matching the regex '.*(c|h|cpp)$'", "output": "find -E . -type f -regex '.*(c|h|cpp)$' -exec ls {} \\;"}
{"input": "Find all .txt files in the /home/user1 directory tree and copy them to /home/backup", "output": "find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents"}
{"input": "Find all symlinks under current directory", "output": "find ./ -type l"}
{"input": "find all the html files in the current folder which have not been modified in the last 7 days", "output": "find . -mtime +7 -name \"*.html\" -print"}
{"input": "Create a rsa key with comment specified by variable APP and passphrase specified y SSHKEYPASS.", "output": "ssh-keygen -t rsa -C \"$APP\" -N \"$SSHKEYPASS\" -f ~/.ssh/id_rsa"}
{"input": "Exclude directory from find . command", "output": "find -iname example.com | grep -v beta"}
{"input": "Find the passwd file under root and one level down.", "output": "find -maxdepth 2 -name passwd"}
{"input": "Gets IP address of 'en1' network interface.", "output": "ifconfig en1 | awk '{ print $2}' | grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\""}
{"input": "create directory /cpuset", "output": "mkdir /cpuset"}
{"input": "Search the current directory tree for executable files and searchable directories", "output": "find -executable"}
{"input": "Find all files/directories under '/usr/share/data' directory tree that match the posix extended regex \".*/20140624.*\" in their paths and save the list to '/home/user/txt-files/data-as-of-20140624.txt'", "output": "find /usr/share/data -regextype posix-extended -regex \".*/20140624.*\" -fprint /home/user/txt-files/data-as-of-20140624.txt"}
{"input": "change the owner of all the files in the current directory", "output": "find . -exec chown myuser:a-common-group-name {} +"}
{"input": "Save absolute path of \"$path\" whose parents exist to variable \"abspath\"", "output": "abspath=$(readlink -f $path)"}
{"input": "Find files belonging to the given owner", "output": "find /path/to/search -user owner"}
{"input": "List all regular files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 -type f -exec ls -l {} \\;"}
{"input": "Finds all users logged in via ssh.", "output": "w | grep ssh"}
{"input": "display list of all the files in the current folder which are empty.", "output": "find . -size 0 -ls"}
{"input": "search for the file \".user.log\" and display its parent directory", "output": "cd /nfs//office/ && find . -name '.user.log' | xargs -I{} dirname {} | xargs -I{} dirname {}"}
{"input": "Find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions", "output": "find / -maxdepth 1 -xdev -type f  -exec grep -li stringtofind '{}' \\;"}
{"input": "Display the contents of 'your_file' wrapping lines to maximum 80 characters, and waiting for user interaction after each page.", "output": "fold -80 your_file | more"}
{"input": "Save the user name in upper case of the current user in variable \"v\"", "output": "v=$(whoami | tr [:lower:] [:upper:])"}
{"input": "Copies all files under current directory like '*FooBar*' to the '~/foo/bar' directory.", "output": "find -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar"}
{"input": "Find all files whose names do not begin with \"zsh\" on ext3 file systems", "output": "find / -fstype ext3 -name zsh -ls 2> /dev/null"}
{"input": "search for mp3 files in the folder /mp3collection which are smaller than 5MB", "output": "find /mp3collection -name '*.mp3' -size -5000k"}
{"input": "Search for \"CONFIG_64BIT\" in gzip compressed file \"/proc/config.gz\"", "output": "zcat /proc/config.gz | grep CONFIG_64BIT"}
{"input": "Search the current directory tree for regular files that were modified $FTIME days ago", "output": "find . -type f -mtime $FTIME"}
{"input": "Search the current directory recursively for files containing \"needle text\"", "output": "find . -type f -print0 | xargs -0 grep -IZl . | xargs -0 grep \"needle text\""}
{"input": "Write every two lines in \"infile\" on a single line separated by a comma", "output": "cat infile | paste -sd ',\\n'"}
{"input": "create symbolic links in directory \"folder2\" to all files located in current directory that filename not started with \".\"", "output": "(IFS=$'\\n'; for t in `find -type f -name \"*txt*\" | sed 's|.*/||'`; do ln -s $t ../folder2/$t; done)"}
{"input": "Find all files under $1, calculate their md5sum and redirect the result to checksums.md5", "output": "find \"$1\" -type f -print0 | parallel -0 -X md5 > checksums.md5"}
{"input": "Print all matching commands in $PATH for command \"python\"", "output": "which -a python"}
{"input": "find all the directories in the current folder which begin with the words \"kt\" and end with a digit", "output": "find . -regex './kt[0-9] '"}
{"input": "Find all files/directories named $something under current directory", "output": "find -name \"$something\""}
{"input": "find files in /dir/path/look/up directory that names are dir-name-here", "output": "find /dir/path/look/up -name \"dir-name-here\" -print"}
{"input": "display all the files in the folders /etc /srv excluding the paths /etc/mtab and  /srv/tftp/pxelinux.cfg", "output": "find /etc /srv \\( -path /srv/tftp/pxelinux.cfg -o -path /etc/mtab \\)  -prune -o -print"}
{"input": "find all the files that have not been modified in the last 2 days", "output": "find -mtime +2"}
{"input": "Find all fglrx-libGL* files under and below debian/fglrx/", "output": "find debian/fglrx/ -name 'fglrx-libGL*'"}
{"input": "Get the total size in bytes of all files in the current directory tree", "output": "find . -type f | xargs stat --format=%s | awk '{s+=$1} END {print s}'"}
{"input": "create directory practice into home directory", "output": "mkdir ~/practice"}
{"input": "display all normal/regular files or directories in the folder \"$ORIG_DIR\"", "output": "find \"$ORIG_DIR\" -name \"*\" -type d -o -name \"*\" -type f"}
{"input": "recursively delete, without prompting, directories under /data/bin/test, that are older than 10 days and where the name starts with a number", "output": "find /data/bin/test -type d -mtime +10 -name '[0-9]*' -print | xargs rm -rf ;"}
{"input": "delete all the regular files in the temp folder which have not been modified in the last 24 hours", "output": "find /tmp/ -type f -mtime +1 -delete"}
{"input": "Find all build* directories under current directory and reverse sort them", "output": "find . -type d -name \"build*\" | sort -r"}
{"input": "Find files named \"AssemblyInfo.cs\" in the current directory and below, and run \"git diff --name-status\" on them", "output": "find . -name AssemblyInfo.cs | xargs git diff --name-status --"}
{"input": "Search *.txt files under and below /directory/containing/files for \"pattern_to_search\"", "output": "find /directory/containing/files -type f -name \"*.txt\" -exec grep -H 'pattern_to_search' {} +"}
{"input": "Search the current directory tree for files containing \"string\" in their path names", "output": "find | egrep string"}
{"input": "Recursively change the ownership of all files in \"/Users/xxx/Library/Developer/Xcode/Templates\" to \"xxx\"", "output": "sudo chown -R xxx /Users/xxx/Library/Developer/Xcode/Templates"}
{"input": "find all files in the current folder which have been modified after a specific time stamp and do not search in the subfolders;", "output": "find -maxdepth 1 -type f newermt \"$timestamp\"'"}
{"input": "Counts all files in a current folder and subfolders.", "output": "find `pwd` -type f -exec ls -l {} \\; | wc -l"}
{"input": "Exclude directory from find . command", "output": "find ! -path \"dir1\" -iname \"*.mp3\""}
{"input": "Select everything selected by * without descending into any directories", "output": "find * -maxdepth 0"}
{"input": "Split \"file.txt\" into files of at most 1 MiB in size with a numeric suffix and prefix \"file\"", "output": "split -b 1M -d  file.txt file"}
{"input": "Find files that do not have a listing in the /etc/passwd or /etc/group in the file system", "output": "find / -nouser -o  -nogroup"}
{"input": "Find files on the system accessed during the last 24 hours but not within the last hour", "output": "find / -atime -1 -amin +60"}
{"input": "Change to folder where the oracle binary is.", "output": "cd \"$(dirname \"$(which oracle)\")\""}
{"input": "Rename all \"thumbs\" directories to \"thumb\" in the current directory tree", "output": "find . -type d | awk -F'/' '{print NF, $0}' | sort -k 1 -n -r | awk '{print $2}' | sed 'p;s/\\(.*\\)thumbs/\\1thumb/' | xargs -n2 mv"}
{"input": "Convert the content of variable 'CLEAN' to small letters", "output": "CLEAN=`echo -n $CLEAN | tr A-Z a-z`"}
{"input": "Recursively from current folder searches only files that names match \".*xxx\" pattern, ignores binary files and prints file name before every string that contains \"my Text to grep\".", "output": "grep --include=\"*.xxx\" -nRHI \"my Text to grep\" *"}
{"input": "display all the statistics of the files in the current folder and discard the errors", "output": "find . -type f -exec stat {} \\; > /dev/null"}
{"input": "Find all *Company* files/directories under /root/of/where/files/are directory", "output": "find /root/of/where/files/are -name *Company*"}
{"input": "Find all the files in file system which are changed in last 1 hour", "output": "find / -cmin -60"}
{"input": "find all the normal/regular files in the current directory", "output": "find -type f"}
{"input": "search through only the /usr and /home directories for any file named Chapter1.txt", "output": "find /usr /home -name Chapter1.txt -type f"}
{"input": "Remove recursively Emacs backup files in the current directory", "output": "find . -name '*~' -print0 | xargs -0 rm"}
{"input": "Find empty files and directories", "output": "find . -empty"}
{"input": "find all the configuration or text files in current directory", "output": "find . -type f \\( -name \"*.conf\" -or -name \"*.txt\" \\) -print"}
{"input": "display the top 20 biggest files in the current folder which are present in the same partition as that of the current folder", "output": "find . -xdev -printf \u2018%s %p\\n\u2019 |sort -nr|head -20"}
{"input": "List all files in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time", "output": "find / -type f -name \"*\" -newermt \"$newerthan\" ! -newermt \"$olderthan\" -ls"}
{"input": "List all files with name \"someFile\" and their modification time under the current directory sorted by oldest modified to newest modified", "output": "find . -name \"someFile\" -printf \"%p:%T@\\n\" | sort -t : -k2"}
{"input": "Execute \"ps aux | grep php\" every second", "output": "watch -n 1 'ps aux | grep php'"}
{"input": "Ping all hosts in file \"ips\" twice", "output": "cat ips | xargs -n1 ping -c 2"}
{"input": "Display file status for all regular files in the current directory tree suppressing error messages", "output": "find . -type f -exec stat {} \\; > /dev/null"}
{"input": "Find all directories under 'test' directory tree whose paths match the regex '.*/course[0-9]\\.[0-9]\\.[0-9]\\.[0-9]$'", "output": "find test -type d -regex '.*/course[0-9]\\.[0-9]\\.[0-9]\\.[0-9]$'"}
{"input": "change the permission of all the normal/regular files to 644 in the current folder", "output": "find -type f -exec chmod 644 {} \\;"}
{"input": "Find all php files that belong to user 'takuya' and have been modified in the last 1 day", "output": "find -user takuya -name '*.php' -daystart -mtime -1"}
{"input": "List all files and directories from the current directory tree", "output": "find . -print | xargs ls"}
{"input": "Recursively copy local file/directory \"/copy/from/path\" to remote location \"/copy/to/path\" on host \"server\", connecting as ssh user \"user\" and using identity key file \"/path/to/your/.pemkey\" instead of the default in ~/.ssh/", "output": "scp -i /path/to/your/.pemkey -r /copy/from/path user@server:/copy/to/path"}
{"input": "Find all files/directories named 'apt' in the entrie filesystem", "output": "find  / -name \"apt\""}
{"input": "Find all files and directories under current directory", "output": "find ."}
{"input": "Find all *.data files under jcho directory", "output": "find jcho -name *.data"}
{"input": "Change onwer to \"root\" and group to \"wheel\" of \"com.xxxx.adbind.plist\"", "output": "sudo chown root:wheel com.xxxx.adbind.plist"}
{"input": "Remove all files under current directory", "output": "find -exec rm '{}' +"}
{"input": "Find all files under current directory and run the command fromdos for each of them with the file path as argument", "output": "find . -type f -exec fromdos {} \\;"}
{"input": "Find all files/directories in current directory and execute multiple commands (cmd1, cmd2) for each file/directory", "output": "find . -exec bash -c 'cmd1; cmd2' filedumper {} \\;"}
{"input": "split file data.csv into pieces per 100 lines", "output": "split -l 100 date.csv"}
{"input": "Print a count of each unique line from standard input", "output": "sort | uniq -c"}
{"input": "Print TXT record with server`s hostname from nameserver 'server'", "output": "dig @server hostname.bind ch txt"}
{"input": "display the three largest files by size in current folder", "output": "find . -type f -exec ls -s {} + | sort -n -r | head -3"}
{"input": "Find which ruby files under current directory contain the string 'jump'", "output": "find . -name '*.rb' -exec grep -H jump {} \\;"}
{"input": "Create symbolic link \"$1/link\" to the absolute path of \"$2\"", "output": "ln -s \"$(readlink -e \"$2\")\" \"$1/link\""}
{"input": "Reports count of processors in system.", "output": "grep '^core id' /proc/cpuinfo |sort -u|wc -l"}
{"input": "change the permissions of all the directories to 755 in the folder \"/home/nobody/public_html\"", "output": "find /home/nobody/public_html -type d -exec chmod 755 {} \\;"}
{"input": "Compare text \"hello\" and \"goodbye\" line by line", "output": "diff <(echo hello) <(echo goodbye)"}
{"input": "Search for \"search term\" in a sorted list of all files under current directory", "output": "find . | awk '{FS = \"/\" ; print \"\", NF, $F}' | sort -n  | awk '{print $2}' | xargs grep -d skip \"search term\""}
{"input": "Print the percentage of packets lost of the 5 packets sent to \"$host\"", "output": "ping -c 5 -q $host | grep -oP '\\d+(?=% packet loss)'"}
{"input": "Find in the current direcoty whose suffix is .tmp , find will not serach recursively limit of find is 2 subdirectory .", "output": "find .  -maxdepth 2 -name '*.tmp'"}
{"input": "find all javascript files under the current folder", "output": "find . -name '*.js'"}
{"input": "Search for files only that end with .php and look for the string $test inside those files", "output": "find . -name \\*.php -type f -exec grep -Hn '$test' {} \\+"}
{"input": "Delete all empty subdirectories in and below directory/", "output": "find directory -mindepth 1 -type d -empty -delete"}
{"input": "List all files/directories under current directory using comma (,) as the delimiter for different fields in the output", "output": "find . -ls | awk '{printf( \"%s,%s,%s,%s,%s,%s,%s,%s %s %s,%s\\n\", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 )}'"}
{"input": "Find all directories under current directory and change their permission to 755", "output": "find . -type d -exec chmod 755 {} \\;"}
{"input": "Serach for all the files starting with grep in man pages", "output": "find /usr/share/man/ -regex grep.*"}
{"input": "Find all files under $d directory (no sub-directories) that are executable by owner and print only their names", "output": "find $d -maxdepth 1 -perm -100 -type f | sed 's#.*/##'"}
{"input": "Change to the directory of the executable \"python\"", "output": "cd `dirname $(which python)`"}
{"input": "display the base name(name without extension) of all the \".flac\" files in the current folder", "output": "find . -name \"*.flac\" -exec basename \\{\\} .flac \\;"}
{"input": "delete a hard link and create a symbolic link to file named \"$link\"", "output": "ln -sf \"$(readlink -f \"$link\")\" \"$link\""}
{"input": "Format \"$line\" as a table", "output": "echo \"$line\" | column -t"}
{"input": "Search /dev/shm and /tmp for regular files not changed in two weeks", "output": "find /dev/shm /tmp -type f -ctime +14"}
{"input": "Print the names of all files in the home directory and its subdirectories recursively whose MIME type is video", "output": "find ~ -type f -exec file -i {} + | grep video"}
{"input": "Search for files/directories which are writable by somebody (their owner, or their group, or anybody else)", "output": "find . -perm /222"}
{"input": "List content of 'myfile' in a subshell and returns output to parent shell", "output": "$(cat myfile)"}
{"input": "Use \"$BYTES\" amount of RAM for \"$SECONDS\" seconds with no output", "output": "cat <(yes | tr \\\\n x | head -c $BYTES) <(sleep $SECONDS) | grep n"}
{"input": "find all text files in the current folder", "output": "find -name \"*.txt\""}
{"input": "Find all files named \"file.ext\" in the current directory tree and print the path names of the directories they are in", "output": "find . -name \"file.ext\" -execdir pwd ';'"}
{"input": "Search the /var/www/ tree for files not owned by user `apache'", "output": "find /var/www ! -user apache -print0 | xargs -0"}
{"input": "Find all directories under /directory-path and change their permission to 2755", "output": "find /directory-path  -type d -exec sudo chmod 2775 {} +"}
{"input": "Pass a wildcard to scp by escaping it: copy all files with names starting with \"files\" in directory \"/location\" on host \"server\" to current directory on local machine, displaying debug info and preserving timestamps and permissions on copied files.", "output": "scp -vp me@server:/location/files\\*"}
{"input": "Search the current directory tree for files and directories whose names begin with \"pro\"", "output": "find . -name pro\\*"}
{"input": "Print the compressed size, uncompressed size, compression ratio, and uncompressed filename of \"file.zip\"", "output": "gunzip -l file.zip"}
{"input": "Change all files with no user under \"/var/www\" to have owner \"root\" and group \"apache\"", "output": "sudo find /var/www -nouser -exec chown root:apache {} \\;"}
{"input": "Set permissions to ug=rwx,o= for directories under the $d directory tree", "output": "find $d -type d -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "Print \"*Checking Partition Permission* Hostname=$(hostname) LastChecked=\" followed by the current date", "output": "echo -n *Checking Partition Permission* Hostname=$(hostname) LastChecked=$(date)"}
{"input": "List directories under current directory", "output": "find . -type d"}
{"input": "Prints path to the folder that contains target of symbolic link ../../../../etc/passwd.", "output": "$(dirname $(readlink -e ../../../../etc/passwd))"}
{"input": "Print the names of all files and directories in the current directory tree", "output": "find ."}
{"input": "Create a table from '111 22 3\\n4 555 66\\n' with columns separated by a single space", "output": "echo -en '111 22 3\\n4 555 66\\n' | column -t | sed 's/ \\([0-9]\\)/\\1/g'"}
{"input": "Search the files from the current directory tree for \"foo\"", "output": "find . -exec grep -l foo {} \\;"}
{"input": "Find all files/directories under 'A' directory tree excluding directory 'A/a' and all of it's contents", "output": "find A \\! -path \"A/a/*\" -a \\! -path \"A/a\""}
{"input": "Search the current directory tree for files whose names start with \"f\"", "output": "find . -name f* -print"}
{"input": "Find all Lemon*.mp3 files under current directory and run mplayer with these files", "output": "find . -name 'Lemon*.mp3' -print0 | xargs -\u00ad0 -i mplayer '{}'"}
{"input": "Find files owned by nonexistent users", "output": "find / -nouser -print"}
{"input": "Follow symbolic links for the full path of \"lshw\"", "output": "readlink -f $(which lshw)"}
{"input": "Make directories \"project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}\" as needed and do not cause an error if it exists", "output": "mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}"}
{"input": "prints the maven project version", "output": "mvn help:evaluate -Dexpression=project.version | tail -8 | head -1"}
{"input": "search for a pattern in all the python files in the current folder. and save the output to output.txt file. print0 is used to handle files with newlines in their names", "output": "find . -name '*.py' -print0 | xargs -0 grep 'something' > output.txt"}
{"input": "Print a count of duplicate lines in \"filename\"", "output": "sort filename | uniq -c"}
{"input": "delete all the text files starting with the name \"oldStuff\" in the file system", "output": "find / -name \"oldStuff*.txt\" -delete"}
{"input": "Search for all the directories named 'm?' under current directory tree, add the extension \".mbox\" to all, create a 'Messages' directories inside them and move all files with .emlx extension to 'Messages' directory", "output": "find . -name 'm?' -type d -exec mv '{}' '{}.mbox' ';' -exec mkdir '{}.mbox/Messages' ';' -exec sh -c 'mv {}.mbox/*.emlx {}.mbox/Messages' ';'"}
{"input": "find all files in the current folder which have only the write permission for the others", "output": "find . -perm -0002 -print"}
{"input": "Make a copy of the entire contents of SRCFOLDER called \"DESTFOLDER\", if DESTFOLDER exists, the copy will be placed within it.", "output": "cp -R SRCFOLDER DESTFOLDER/"}
{"input": "Find all .rb files owned by root in the /apps/ folder and below that have been accessed in the last two minutes.", "output": "find /apps/ -user root -type f -amin -2 -name *.rb"}
{"input": "set alias \"cdl\" for command 'cd -- \"$(ls -t | head -n 1)\"'", "output": "alias cdl='cd -- \"$(ls -t | head -n 1)\"'"}
{"input": "remove all the files in the present directory which have space in their name.", "output": "find . -name \"* *\" -exec rm -f {} \\;"}
{"input": "Extract and print hostname and protocol part from URL like \"http://www.suepearson.co.uk/product/174/71/3816/\".", "output": "echo \"http://www.suepearson.co.uk/product/174/71/3816/\" | cut -d'/' -f1-3"}
{"input": "Count the number of files named `file1'", "output": "find -name file1 | wc -l"}
{"input": "Immediately display unique entries from access.log", "output": "tail -f access.log | stdbuf -oL cut -d ' ' -f1 | uniq"}
{"input": "Search for the literal string 'v$process' in all files under current directory", "output": "find . -print|xargs grep v\\$process"}
{"input": "Find all .txt files in the current directory tree and edit them with `vim'", "output": "find . -name \"*.txt\" | xargs bash -c '</dev/tty vim \"$@\"' ignoreme"}
{"input": "Delete newlines from output of 'hg st -R \"$path\"' and save to variable \"var\"", "output": "var=`hg st -R \"$path\" | tr -d '\\n'`"}
{"input": "Gets IP address of first network interface which name matches pattern \"venet0:0\\|eth0\".", "output": "ifconfig | grep -A2 \"venet0:0\\|eth0\" | grep 'inet addr:' | sed -r 's/.*inet addr:([^ ]+).*/\\1/' | head -1"}
{"input": "Execute script 'truncate.sh' on all regular files in the current directory tree", "output": "find . -type f -exec ./truncate {} \\;"}
{"input": "Report root file system disk usage human-readable.", "output": "df -h /"}
{"input": "find all text files in the current directory and display them page wise", "output": "find . -name \"*.txt\" -print"}
{"input": "Add directory \"$HOME/Pictures\" to the directory stack", "output": "pushd \"$HOME/Pictures\""}
{"input": "Recursively search for everything under the current directory, displaying human-readable file type description for each entry.", "output": "find . -exec file {} \\;"}
{"input": "Find all files in the current directory recursively with \"linkin park\" in their names and copy them to /Users/tommye/Desktop/LP", "output": "find . -type f -iname \"*linkin park*\" -exec cp -r {} /Users/tommye/Desktop/LP \\;"}
{"input": "Find all test2.h files under current directory", "output": "sudo find . -name test2.h"}
{"input": "Join colon-separated information in 3 files LN.txt PH.txt and AD.txt in a cascade fashion: join LN.txt and PH.txt, then join the result with AD.txt", "output": "join -t':' <(sort LN.txt) <(sort PH.txt) | join -t':'  - <(sort AD.txt)"}
{"input": "create directory log into home directory", "output": "mkdir ~/log"}
{"input": "Find all *.zip files under current directory and unzip them in the same directory as the files", "output": "find . -name '*.zip' -exec sh -c 'unzip -d `dirname {}` {}' ';'"}
{"input": "display the contents of all the regular files in the current folder and save the output to out.txt", "output": "find . -type f -exec cat {} \\; > out.txt"}
{"input": "Update timestamps of all files and directories under current directory.", "output": "find . -print0 | xargs -0 touch"}
{"input": "List subdirectories in the current directory", "output": "find . -maxdepth 1 -type d -exec ls -ld \"{}\" \\;"}
{"input": "Find all *.ps files under $STARTDIR", "output": "find $STARTDIR -name '*.ps' -print"}
{"input": "Print second section of data coming from stdin where sections are separated by one or more whitespace.", "output": "tr -s ' ' | cut -d ' ' -f 2"}
{"input": "Find \"*201512*\" regular files in /home/myhome/data/ARCHIVE/ and move them to /home/myhome/ARCHIVE/TempFolder/", "output": "find /home/myhome/data/ARCHIVE/. -name . -o -type d -prune -o -name '*201512*' -print | xargs -i mv {} /home/myhome/ARCHIVE/TempFolder/."}
{"input": "Print each logged in user's username and full name", "output": "finger -l | grep \"Name:\" | tr -s ' ' | cut -d \" \" -f 2,4- | sort | uniq"}
{"input": "Enable history in a script", "output": "set -o history"}
{"input": "Recursively search for all files with names ending with \"_test.rb\", renaming them to end with \"_spec.rb\", using at most 1000000 characters per command.", "output": "find . -name \"*_test.rb\" | xargs -s 1000000 rename s/_test/_spec/"}
{"input": "Redirects time output to file.", "output": "{ time find / 2>/dev/null; } 2>time.txt"}
{"input": "Creates temporary file in a current folder and saves path to it in 'f' variable.", "output": "f=`mktemp -p .`"}
{"input": "Print each unique line that is duplicated in files \"file1\" and \"file2\" combined", "output": "sort file1 file2 | uniq -d"}
{"input": "Find all the files/directories in '/path/to/files' directory tree which have not been modified in the last 2 hours", "output": "find \"/path/to/files\" -mmin +120"}
{"input": "Find .jpg files owned by user daniel in the current directory and its sub-directories.", "output": "find . -user daniel -type f -name *.jpg"}
{"input": "Go to last directory with name starting with a number, useful for timestamped directory names.", "output": "cd \"$(ls -rd [0-9]*/ | tail --lines 1)\""}
{"input": "Find all *.plist files/directories under current directory", "output": "find . -name \\*.plist"}
{"input": "remove all core files in the file system", "output": "find / -name \"*.core\" -print -exec rm {} \\;"}
{"input": "Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.", "output": "find . -name '*.pdf' -print"}
{"input": "Find files and directories that are at least seven levels of nesting in the directory /usr/src excluding CVS directory", "output": "find /usr/src -name CVS -prune -o -depth +6 -print"}
{"input": "delete all the normal files in the current folder and do not delete those in the subfolders", "output": "find . -maxdepth 1 -type f -delete"}
{"input": "Find all *.c files located under /home and below", "output": "find /home -name \"*.c\""}
{"input": "Check if a drive with UUID \"09b8f1ab-8d4b-4c5f-b395-40be09c090b0\" is mounted", "output": "mount | grep $(blkid -U '09b8f1ab-8d4b-4c5f-b395-40be09c090b0')"}
{"input": "List the directory contents of the current working directory", "output": "echo $(ls $(pwd))"}
{"input": "Find all PNG and JPG files and append them to archive `images.tar'", "output": "find . \\( -iname \"*.png\" -o -iname \"*.jpg\" \\) -print -exec tar -rf images.tar {} \\;"}
{"input": "Change the permission to 644 for all files under current directory", "output": "find . -type f | xargs chmod -v 644"}
{"input": "Display differences between directories dir1 and dir2.", "output": "diff -r dir1/ dir2/"}
{"input": "find all the files in the current directory which have been modified after a file", "output": "find . -newer file"}
{"input": "Search for 'example' in all regular files from the current directory", "output": "find -maxdepth 1 -type f | xargs grep -F 'example'"}
{"input": "Counts all files in a current folder and subfolders.", "output": "find -type f -exec printf '\\n' \\; | wc -l"}
{"input": "Save first IP address of domain 'google.com' in 'address' variable", "output": "address=$(dig +short google.com | grep -E '^[0-9.]+$' | head -n 1)"}
{"input": "Lookup information of the current user", "output": "finger `whoami`"}
{"input": "Copy all files below the current directory whose names contain \"FooBar\" to directory foo/bar/ in user's home directory.", "output": "find -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar"}
{"input": "Mount the directory \"/etc\" on \"/tmp/sarnold/mount_point/\"", "output": "mount -obind /etc /tmp/sarnold/mount_point/"}
{"input": "Delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions", "output": "find / -maxdepth 1 -xdev -type f -exec grep -i \"stringtofind\" -q \"{}\" \\; -print0 | xargs -0 sed '/./d'"}
{"input": "Show manual page of find utility", "output": "man find"}
{"input": "Make directory \"/tmp/googleTestMock\"", "output": "mkdir /tmp/googleTestMock"}
{"input": "Find regular files under '/somefolder' directory tree satisfying the options/conditions/operations provided in ${ARGS[@]} array with find command", "output": "find /somefolder -type f '(' \"${ARGS[@]}\" ')'"}
{"input": "Interpret backslash sequences and delete whitespace characters in variable $FOO and save the result to variable 'FOO_NO_WHITESPACE'", "output": "FOO_NO_WHITESPACE=\"$(echo -e \"${FOO}\" | tr -d '[[:space:]]')\""}
{"input": "Find all *.rb files/directories under current directory", "output": "find . -name \\*.rb"}
{"input": "From another terminal, detach process $PID from its terminal and run it in the background.", "output": "kill -20 $PID; kill -18 $PID"}
{"input": "Send SIGTERM signal to any process which 'ps' lists as \"python csp_build.py\"", "output": "kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')"}
{"input": "Prints Kb size of all top-level files and folders in a current folder in descending order in human readable format.", "output": "du -ksh * | sort -n -r"}
{"input": "Print numbers from 1 to 10 with padded leading zeros", "output": "seq -w 1 10"}
{"input": "Gets MAC addresses of all IP4 network interfaces.", "output": "ifconfig -a | awk '/^[a-z]/ { iface=$1; mac=$NF; next } /inet addr:/ { print mac }' | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'"}
{"input": "Find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory", "output": "find {} -name 'upvoter-*' -type f -or -type l -maxdepth 1 -perm +111"}
{"input": "Extract any line in \"file1.txt\" which does not appear as the first \";\" delimited entry in \"file2.txt\"", "output": "comm -23 <(sort file1.txt) <(grep -o '^[^;]*' file2.txt | sort)"}
{"input": "Count non-blank lines in a file 'foo.c'", "output": "cat foo.c | sed '/^\\s*$/d' | wc -l"}
{"input": "Displays what package provides value 'zsh'.", "output": "yum provides zsh"}
{"input": "find all files and directories under the current directory and display the inode of each one, using printf", "output": "find . -printf \"%i \\n\""}
{"input": "Find all .svn directories under current directory and delete them", "output": "find . -type d -name \".svn\" -print | xargs    rm -rf"}
{"input": "print command for alias \"list\" with low priority command", "output": "nice -10 `alias list | sed \"s/^\\(alias \\)\\?[^=]\\+='//; s/'$//;\"`"}
{"input": "Pipe 3 newlines to sshe-keygen, answering prompts automatically.", "output": "echo -e \"\\n\\n\\n\" | ssh-keygen -t rsa"}
{"input": "find all the files that have the word \"fstab\" in their name in a folder", "output": "find /etc -name *fstab*"}
{"input": "Run command with all the file/directory path under whatever directory as arguments", "output": "find whatever -print0 | xargs -0 command"}
{"input": "Find writable regular files in the current directory", "output": "find .  -maxdepth 1 -type f -writable"}
{"input": "Print mount point of the file system containing $filename.", "output": "df \"$filename\" | awk 'NR==1 {next} {print $6; exit}'"}
{"input": "Move all *.log files under $sourcePath that were modified more than 10 days ago to a zip archive $zipFile with only file names (not full path)", "output": "find $sourcePath -type f -mtime +10 -name \"*.log\" | xargs zip -jmT $zipFile -@"}
{"input": "Set the environment variable \"DISPLAY\" to the system host name followed by \":0 skype\"", "output": "DISPLAY=`hostname`:0 skype"}
{"input": "Get the total size of all files under dir1 directory", "output": "find dir1 ! -type d -printf \"%s\\n\" | awk '{sum += $1} END{print sum}'"}
{"input": "Find all files in $dir directory (non-recursive) and count them", "output": "find \"$dir\" -maxdepth 1 -type f | wc -l"}
{"input": "Shows only process trees rooted at processes of this user.", "output": "pstree user"}
{"input": "Recursively change owner and group to \"$JBOSS_AS_USER\" of \"$JBOSS_AS_DIR\"", "output": "chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR"}
{"input": "Find all symlinks under current directory", "output": "find . -type l"}
{"input": "Compress \"mysqldbbackup.sql\" with gzip and email it with subject \"MySQL DB\" to \"backup@email.com\"", "output": "gzip -c mysqldbbackup.sql | uuencode mysqldbbackup.sql.gz  | mail -s \"MySQL DB\" backup@email.com"}
{"input": "Enables shell option 'nocaseglob'.", "output": "shopt -s nocaseglob"}
{"input": "recursively change owner of the directory and all files into it to user  nobody", "output": "chown -R nobody upload_directory"}
{"input": "Set permissions to 2770 for all directories in the current directory tree", "output": "find . -type d -exec chmod 2770 {} +"}
{"input": "Find all files in and below the home directory that have been modified in the last 90 minutes", "output": "find ~ -mmin -90"}
{"input": "display all text files in the folder /tmp/1 excluding those which do not have spaces in their names", "output": "find /tmp/1 -iname '*.txt' -not -iname '[0-9A-Za-z]*.txt'"}
{"input": "dispaly all the empty regular/normal files in the current folder", "output": "find . -type f -empty"}
{"input": "list all regular files which path is not dir1 or dir2", "output": "find ! -path \"dir1\" ! -path \"dir2\" -type f"}
{"input": "List all files in the current directory tree larger than 1000 kb", "output": "find . -size +1000k"}
{"input": "list all javascipts file which whole name does not contain excludeddir", "output": "find . -name '*.js' | grep -v excludeddir"}
{"input": "Find all files under Mainfolder directory and redirect the output to outputfle", "output": "find Mainfolder -type f > outputfile"}
{"input": "Delete all files/directories with node number $inum under current directory tree", "output": "find . -inum $inum -exec rm {} \\"}
{"input": "find all the files in the current directory with the name \"wagoneer\" which are in the current device.", "output": "find . -xdev -name \"wagoneer*\" -print"}
{"input": "Find files newer than main.css in ~/src", "output": "find ~/src -newer main.css"}
{"input": "Search for all .mp3 files in the /mnt/usb directory tree", "output": "find /mnt/usb -name  \"*.mp3\" -print"}
{"input": "Search the current directory tree for TXT files skipping hidden ones", "output": "find . -type f \\( -iname \"*.txt\" ! -iname \".*\" \\)"}
{"input": "Search for occurrences of string \"main(\" in the .c files from the current directory tree", "output": "find . -name \"*.c\" -print | xargs grep \"main(\""}
{"input": "Replace \",\" with \"\\r\\n\" in \"a,b\"", "output": "echo \"a,b\"|sed 's/,/\\r\\n/'"}
{"input": "Make directories \"/tmp/A\", \"/tmp/B\", \"/tmp/C\", and \"/tmp/ dir with spaces\"", "output": "mkdir /tmp/A /tmp/B /tmp/C \"/tmp/ dir with spaces\""}
{"input": "Find all Makefile's in the current directory tree and look for line 235 in each of them", "output": "find . -name Makefile -print0 | xargs -0 grep -nH $ | grep :235:"}
{"input": "display all regular/normal files which have been modified in the last 30 minutes", "output": "find -type f -and -mmin -30"}
{"input": "copy all the regular/normal files from temp folder which have been modified in the last 30*24 hours to /tmp/backup", "output": "find /tmp -type f -mtime -30 -exec cp {} /tmp/backup \\;"}
{"input": "Find regular files under / that contain \"string\" and clear out their contents", "output": "find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.//g'"}
{"input": "find all the java script files in a folder and give them as input to a jar", "output": "find ./js/ -type f -name \"*.js\" -exec java -jar compiler.jar --compilation_level SIMPLE_OPTIMIZATIONS --js '{}' --js_output_file '{}'.compiled \\;"}
{"input": "List all *jsp and *java regular files found in the current directory tree", "output": "find . \\( -name '*jsp' -o -name '*java' \\) -type f -ls"}
{"input": "Delete all __temp__* directories under maximum 1 level down the current directory tree", "output": "find . -maxdepth 1 -type d -name '__temp__*' -print0 | xargs -0 rm -rf"}
{"input": "Save number of processors in system to 'NP' variable", "output": "NP=`cat /proc/cpuinfo | grep processor | wc -l`"}
{"input": "search for a folder junk in the home directory and create files cart1, cart2, cart3 ... cart6 in the folder junk. Discard all the errors.", "output": "find ~/junk -exec touch ~/junk/cart{1,2,3,4,5,6} {} \\; 2> /dev/null"}
{"input": "Find all files under directory tree /path/to/dir whose permissions are not 644", "output": "find /path/to/dir ! -perm 644"}
{"input": "Gets list of IP addresses of all network interfaces.", "output": "ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"}
{"input": "find all the files in the current directory and sub-directories, that were edited within the last 1 hour and execute the list command with long listing format", "output": "find -mmin -60 -exec ls -l {} \\;"}
{"input": "Compress every file in the current directory that matches \"*cache.html\" and keep the original file", "output": "gzip -k *cache.html"}
{"input": "Print the last 1000 lines of all files matching \"/var/spool/cron/*\"", "output": "tail -n 1000 /var/spool/cron/*"}
{"input": "find all files under the current directory, filtering the output through a regular expression to find any lines that contain the word foo or bar.", "output": "find ./ | grep -E 'foo|bar'"}
{"input": "Find all *.jpg files on the system", "output": "find / -name *.jpg 2>/dev/null"}
{"input": "Print the last 10 commands in history", "output": "history | tail -10"}
{"input": "Print file type information of the \"java\" executable", "output": "cat `which java` | file -"}
{"input": "Display current system's kernel name, kernel release and version, and machine architecture", "output": "uname -srvm"}
{"input": "Change the owner of all files in \"/empty_dir/\" to \"root\" using at most 10 files at a time", "output": "ls /empty_dir/ | xargs -n10 chown root"}
{"input": "Find all executable files under {} and reverse sort them", "output": "find {} -type f -depth 1 -perm +0111 | sort -r"}
{"input": "find all regular files exclude .o and exclude *.swp and output line number of soc_attach if it has", "output": "find .  \\( ! -path \"./output/*\" \\) -a \\( -type f \\) -a \\( ! -name '*.o' \\) -a \\( ! -name '*.swp' \\) | xargs grep -n soc_attach"}
{"input": "Find all *.m4a files under /home/family/Music directory and convert them to ogg", "output": "find /home/family/Music -name '*.m4a' -exec sh -c 'ffmpeg -i \"$0\" -acodec libvorbis -aq 6 -vn -ac 2 \"${0%.m4a}.ogg\"' '{}' \\;"}
{"input": "Create a tar archive of all regular files modified in the last 24 hours", "output": "tar cvf - `find . -mtime -1 -type f -print` > $archive.tar"}
{"input": "Find all 777 permission directories and use chmod command to set permissions to 755", "output": "find / -type d -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "Find all pdf files in /path and search for \"your pattern\" in the converted text output and print the paths to the matching files", "output": "find /path -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep --with-filename --label=\"{}\" --color \"your pattern\"' \\;"}
{"input": "find all the files under '/usr/local' directory tree which have been modified exactly 24 hours ago", "output": "find /usr/local -mtime 1"}
{"input": "Create a symbolic link named \"${DESTINATION}${file}\" to \"${TARGET}${file}\"", "output": "ln -s  \"${TARGET}${file}\"  \"${DESTINATION}${file}\""}
{"input": "Find all *.txt file and replace old word to new word with sed command", "output": "find  . -type f -name \"*.txt\" -exec sed 's/TZ/MALAWI/g' {} \\;"}
{"input": "Print a line of 99 '=' characters", "output": "seq -s= 100|tr -d '[:digit:]'"}
{"input": "Compresses all files listed in array $*, executing in background.", "output": "compress $* &"}
{"input": "Move all directories under current directory to new paths obtained by replacing all occurrences of 'foo' with 'Bar' in their paths", "output": "find . -type d -exec bash -c 'mv \"$1\" \"${1//foo/Bar}\"' -- {} \\;"}
{"input": "Append the current date in '%d%m%Y-%H-%M' format, '_' and the current username, then save it in 'name' variable", "output": "name=\"$(date +'%d%m%Y-%H-%M')_$(whoami)\""}
{"input": "Set environment variables using assignments are listed in '.env' file and run 'rails' command with defined environment", "output": "env $(cat .env | xargs) rails"}
{"input": "List all cron jobs for current user.", "output": "crontab -l"}
{"input": "Convert all DOS files under and below the current directory to the Unix format", "output": "find . -type f -exec dos2unix {} {} \\;"}
{"input": "Find all files/directories starting with 'readme' (case insensitive) under '/usr/share/doc' directory tree", "output": "find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'"}
{"input": "Gets a current job back to the foreground.", "output": "fg"}
{"input": "If variable \"c\" is a syntactically correct cron job, erase user's cron jobs and add \"c\" as the only cron job for user.", "output": "echo $c | crontab"}
{"input": "find all the html files in current folder and replace old string with new string", "output": "perl -p -i -e 's/oldstring/newstring/g' `find ./ -name *.html`"}
{"input": "Bind mount \"/original/path\" on \"/new/path\"", "output": "mount --bind /original/path /new/path"}
{"input": "Copy the current directory tree to \"newdirpathname\" preserving directory hierarchy", "output": "find ./ -depth -print | cpio -pvd newdirpathname"}
{"input": "Count the toal number of lines in all .py files in current directory tree", "output": "find . -name *.py -exec wc -l {} \\; | awk '{ SUM += $0} END { print SUM }'"}
{"input": "Find files/directories named 'file.txt' that belong to user 'tutonics' in the entire filesystem", "output": "find / -user tutonics -name \"file.txt\""}
{"input": "Display a long listing of all the regular files under current directory tree that are newer than \u2018Apr 18 23:59:59 EDT 2013\u2019 and older than \u2018Apr 20 00:00:00 EDT 2013\u2019 by modification time", "output": "find . -type f -newermt \u2018Apr 18 23:59:59 EDT 2013\u2019 ! -newermt \u2018Apr 20 00:00:00 EDT 2013\u2019 -exec ls -l \u2018{}\u2019 \\;"}
{"input": "Count the number of symbolic links starting from /students", "output": "find /students -type l -print 2> /dev/null |wc -l"}
{"input": "Find all files/directories that contain the string literal '`$VERSION`' in their names under current directory tree", "output": "find . -name '*`$VERSION`*'"}
{"input": "Find all files residing in /home/dm/Video or below that were changed less than 7 days ago", "output": "find /home/dm/Video -mtime -7"}
{"input": "Set the history time format variable \"HISTTIMEFORMAT\" to \"%s \" and display up to event 2", "output": "HISTTIMEFORMAT=\"%s \" history 2"}
{"input": "Find files not matching the patterns 'Image*-70x70*' and 'Image*-100x100*' in their names under Folder1 and copy them to Folder2", "output": "find Folder1 \\( ! -name 'Image*-70x70*' -a ! -name 'Image*-100x100*' \\) | xargs -i% cp -p % Folder2"}
{"input": "Find all files/directories under '/usr/share/doc' directory tree whose name start with 'README'", "output": "find /usr/share/doc -name README\\*"}
{"input": "Find all regular files starting from level 3 of directory tree ~/container and move them one level up", "output": "find ~/container  -mindepth 3 -type f  -execdir mv \"{}\" $(dirname \"{}\")/.. \\;"}
{"input": "display all the files in the current folder", "output": "find . | xargs echo"}
{"input": "find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir", "output": "find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +"}
{"input": "Change every directory under \"/var/www/html/\" to have permissions 775", "output": "sudo  find /var/www/html/ -type d -exec chmod 775 {} \\;"}
{"input": "Mathematically sum each line in \"infile\"", "output": "paste -sd+ infile | bc"}
{"input": "Find all files that are less than 50 bytes", "output": "find / -size -50c"}
{"input": "display all directories in the folder Symfony", "output": "find Symfony -type d"}
{"input": "Find UTF-8 files with BOM", "output": "find -type f -print0 | xargs -0 grep -l `printf '^\\xef\\xbb\\xbf'` | sed 's/^/found BOM in: /'"}
{"input": "List all files/directories under current directory matching the posix-egrep type regex \".+\\.(c|cpp|h)$\" in their names excluding the files that contain 'generated' or 'deploy' in their paths", "output": "find . -regextype posix-egrep -regex '.+\\.(c|cpp|h)$' -print0 | grep -vzZ generated | grep -vzZ deploy | xargs -0 ls -1Ld"}
{"input": "Find all 'test' directories in the current directory tree and remove them", "output": "find -type d -a -name test|xargs rm -r"}
{"input": "Set the bash prompt to \"username@hostname\"", "output": "PS1=\"`whoami`@`hostname | sed 's/\\..*//'`\""}
{"input": "display all the files in the current folder excluding the files with the name mmm", "output": "find . -name mmm -prune -o -print"}
{"input": "Find all files under /home/username/public_html/sites/all/modules and set their permission to 640", "output": "find /home/username/public_html/sites/all/modules -type f -exec chmod 640 {} +"}
{"input": "Tmux configuration to enable mouse support within tmux", "output": "set -g mouse on"}
{"input": "Find all the files/directories under user's home directory that do not belong to the user $USER", "output": "find ~ ! -user ${USER}"}
{"input": "reverse both words and lines in file", "output": "tac filename | perl -lane 'print join(\" \", reverse(@F))'"}
{"input": "search for the directory \"config\" in the current folder", "output": "find . -name config -type d"}
{"input": "display all files in the current folder", "output": "find ."}
{"input": "Display standard input as printable characters or backslash escapes with no addressing radix", "output": "od -cAn;"}
{"input": "Sort lines in \"FILE\" to standard output preserving only unique lines", "output": "sort -u FILE"}
{"input": "Move all *.log files under $sourcePath that were modified more than 10 days ago to a zip archive $zipFile", "output": "find $sourcePath -type f -mtime +10 -name \"*.log\" | xargs zip -mT $zipFile -@"}
{"input": "find all the regular/normal files in the current folder which have been accessed in the last 1440*24 hours and not modified in 1441*24 hours excluding those which are in the custom sub directory tree", "output": "ionice -c 3 find  . -type f -amin -1440 -mmin +1441 -not -path custom/ -print0"}
{"input": "Print \"file1.txt\" \"file2.txt\" and \"file3.txt\" with filename headers", "output": "tail -n +1 file1.txt file2.txt file3.txt"}
{"input": "Remove all *.bak files under current directory", "output": "find . -type f -name \\*.bak -print0 | xargs -0 rm -v"}
{"input": "Find all files under /path/to/base/dir and change their permission to 644", "output": "chmod 644 $(find /path/to/base/dir -type f)"}
{"input": "Change the permission to 644 for all files under current directory", "output": "find . -type f | xargs -I{} chmod -v 644 {}"}
{"input": "Count all the lines of code in the current directory recursively.", "output": "find ./ -type f -exec wc -l {}  \\; | cut -d' ' -f1 | paste -sd+ | bc"}
{"input": "List .log files from the current directory tree", "output": "find . -name \"*.log\" -exec echo {} \\;"}
{"input": "Delete all files/directories in minimum 2 levels down the root directory", "output": "find root -mindepth 2 -delete"}
{"input": "display all the files in the folder /etc /srv excluding those that are present in the path of ./srv/tftp/pxelinux.cfg* and /etc/mtab", "output": "find /etc /srv \\! -path \"./srv/tftp/pxelinux.cfg*\" -a \\! -name /etc/mtab"}
{"input": "List *.txt files residing in the current directory tree", "output": "find . -name *.txt -exec ls {} ;\\"}
{"input": "display all the text files  in the current folder", "output": "find . -name \"*.txt\" -print"}
{"input": "SSH into \"$NAME\" as user \"${USERNAME}\" using key file \"${KEYDIR}/${KEY}.pem\", automatically add the host to list of known hosts and execute \"${COMMANDS}\"", "output": "ssh -o \"StrictHostKeyChecking no\" -i ${KEYDIR}/${KEY}.pem ${USERNAME}@$NAME \"${COMMANDS}\""}
{"input": "Starts new detached tmux session 'vims' with new windows 'vim0' and opens file 'foo' within.", "output": "tmux new-session -s vims -n vim0 -d \"vim foo\""}
{"input": "Find all files/directories named 'top' in the entire filesystem", "output": "find / -name top"}
{"input": "Print unique lines of sorted file \"a\" compared with sorted file \"b\"", "output": "comm -23 a b"}
{"input": "Find all files/directories under $1 which have at least execute permission for their owner and set execute permission for group for these files/directories", "output": "find \"$1\" -perm -u+x -print0 | xargs chmod g+x"}
{"input": "Archive all files (not directories) in \"folder1\" to \"copy_of_folder1\" specifying to include files info.txt and data.zip", "output": "rsync -a -f\"+ info.txt\" -f\"+ data.zip\" -f'-! */' folder1/ copy_of_folder1/"}
{"input": "Find regular files in the current directory that are writable by at least somebody", "output": "find -maxdepth 1 -type f -perm /222"}
{"input": "Make a .tar.bz2 archive of all *.txt files from the dir/ directory tree", "output": "find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2"}
{"input": "Change folder to the one where $0 link target file is located.", "output": "cd $(dirname $(readlink -f $0))"}
{"input": "find all the regular/normal files ending with \".mod\" in a folder and pass them as input to remodup command", "output": "find $DIR -name \"*.mod\" -type f -exec bash -c 'remodup \"$1\"' - {} \\;"}
{"input": "create directory foo", "output": "mkdir -p foo"}
{"input": "display the file name and the file type of all the files in the current directory", "output": "find . -printf \"%y %p\\n\""}
{"input": "Archive present working directory excluding several files and directories", "output": "find \"$(pwd -P)\" -type d \\( -path '/path/to/dir1' -or -path '/path/to/dir2' \\) -prune  -or -not \\( -path '/path/to/file1' -or -path '/path/to/file2' \\) -print0 | gnutar --null --no-recursion -czf archive.tar.gz --files-from -"}
{"input": "Check which package the \"sort\" command belongs to in rpm", "output": "rpm -qf `which sort`"}
{"input": "Report file systems disk usage in 1GB blocks.", "output": "df -BG"}
{"input": "List the directory paths of all file.ext files under present working directory", "output": "find $PWD -name \"file.ext\" -exec sh -c 'echo $(dirname {})' ';'"}
{"input": "search for a word in all the shell scripts in the current folder and display the matched files.", "output": "find . -type f -name \"*.sh\" -exec grep -l landoflinux {} \\;"}
{"input": "Update timestamps of all files in entire filesystem which are not newer than /tmp/timestamp", "output": "find / ! -newer /tmp/timestamp -exec touch {} \\;"}
{"input": "find all the html files which are modified in the last 7 days", "output": "find . -mtime -7 -name \"*.html\""}
{"input": "Print file system disk space usage", "output": "df"}
{"input": "Prints process list with id numbers of a process having id 'pid'.", "output": "pstree -p [pid ...]"}
{"input": "Recursively list contents of the current directory in a tree-like format", "output": "tree"}
{"input": "Find all files/directories that are owned by user 'takuya' under current directory tree", "output": "find -user takuya"}
{"input": "For each line in 'file', print \"result = \" followed by the line backwards.", "output": "rev file | awk '{print \"result =\",$0}'"}
{"input": "Set 644 permission to all regular files under current directory", "output": "chmod 644 `find . -type f`"}
{"input": "Remove junk files modified more than 31 days ago recursively", "output": "find /path/to/junk/files -type f -mtime +31 -print0 | xargs -0 -r rm -f"}
{"input": "display all normal/regular files in current folder", "output": "find . -type f -print0"}
{"input": "Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.kb' file, comparing human readable numbers in file strings.", "output": "cat ${TMP}/${SCRIPT_NAME}.kb|sort -rh;"}
{"input": "Count non-blank lines in a file 'foo.c'", "output": "sed '/^\\s*$/d' foo.c | wc -l"}
{"input": "Copy the standard output of a \"bash\" session to \"/var/log/bash.out.log\"", "output": "bash | tee /var/log/bash.out.log"}
{"input": "list broken symbolic links under \"somedir\"", "output": "find \"somedir\" -type l -print0 | xargs -r0 file | grep \"broken symbolic\" | sed -e 's/^\\|: *broken symbolic.*$/\"/g'"}
{"input": "find all the jpg files in the directory /ftp/dir which are bigger than 500KB", "output": "find /ftp/dir/ -size +500k -iname \"*.jpg\""}
{"input": "Search all PDFs from the current directory tree for \"keyword\", ignoring the case", "output": "find . -iname '*.pdf' -exec pdfgrep -i keyword {} +"}
{"input": "Find all *.c files in /usr/src bigger than 100k", "output": "find /usr/src -name '*.c' -size +100k -print"}
{"input": "Print the current working directory prepended by \"pwd: \"", "output": "echo pwd: `pwd`"}
{"input": "Find files in the current directory tree whose names are of the form \"cxx_data.txt\" where xx is a number from 40 to 70", "output": "find . -regextype posix-egrep -regex \"./c(([4-6][0-9])|70)_data.txt\""}
{"input": "Find the largest original \".gz\" file in the current directory tree", "output": "find . -name '*.gz' | xargs gzip -l | tail -n +2 | head -n -1 | sort -k 2 | tail -n 1 | awk '{print $NF}'"}
{"input": "Make directories \"Labs/lab4a/folder1\", \"Labs/lab4a/myfolder\", and \"Labs/lab4a/foofolder\"", "output": "mkdir Labs/lab4a/{folder1,myfolder,foofolder}"}
{"input": "Set variable GZIP to the full path of command \"gzip\"", "output": "GZIP=\"$(which gzip)\""}
{"input": "Print space separated list of numbers from \"$start\" to \"$end\"", "output": "seq -s' ' $start $end"}
{"input": "Search the current directory tree for files without \"test\" in their path names", "output": "find . -not -regex \".*test.*\""}
{"input": "Answer \"n\" to any prompts in the interactive recursive removal of \"dir1\", \"dir2\", and \"dir3\"", "output": "yes n | rm -ir dir1 dir2 dir3"}
{"input": "set alias \"mkcd\" for command \"_(){ mkdir -pv $1; cd $1; }; _\"", "output": "alias mkcd='_(){ mkdir -pv $1; cd $1; }; _'"}
{"input": "Find all files whose names do not begin with \"zsh\" on ext3 file systems", "output": "find / -fstype ext3 -name zsh*"}
{"input": "Find all files under current directory and show their file information", "output": "find . -type f | xargs file"}
{"input": "List all files/directories under /data1/Marcel which are greater than 524288 bytes and were modified or accessed more than 1 year ago", "output": "find /data1/Marcel -size +1024 \\( -mtime +365 -o -atime +365 \\) -ls"}
{"input": "find all files in the entire file system whose size is more than 100MB", "output": "find / -size +100M"}
{"input": "Delete all regular files with '.txt' extension that were modified in more than 25 minutes ago in maximum 1 level down the directory '/home/u20806/public_html'", "output": "find /home/u20806/public_html -maxdepth 1 -mmin +25 -type f -name \"*.txt\" -delete"}
{"input": "extract \"backup.tar.gz\" with verbose output", "output": "tar -xzvf backup.tar.gz"}
{"input": "Find files named \"AssemblyInfo.cs\" in the current directory and below, and run \"git diff\" on them", "output": "find . -name \"AssemblyInfo.cs\" -print0 | xargs -0 git diff --"}
{"input": "Views text content of compressed FileB file in TarFile archive.", "output": "tar -xOf TarFile FileB.gz | zless"}
{"input": "Set variable \"b\" to the first word of \"a\" converted to uppercase.", "output": "b=`echo \"$a\" | awk '{ print toupper($1) }'`"}
{"input": "find all the directories in the different folders excluding search in the sub directories and create these folders in the current directory", "output": "find /media/New\\ Volume/bhajans -maxdepth 1 -type d | xargs -0 mkdir -p"}
{"input": "create an archive excluding files matching patterns listed in /path/to/exclude.txt", "output": "tar -czf backup.tar.gz -X /path/to/exclude.txt /path/to/backup"}
{"input": "List environment variables and their values, escaping all semicolons with a backslash.", "output": "env | sed 's/;/\\\\;/g'"}
{"input": "Number each non-blank line of standard input", "output": "nl"}
{"input": "create directory dirname with permissions 777", "output": "mkdir -m 777 dirname"}
{"input": "Change permissions to 644 for all subdirectories", "output": "find . -type d -print0|xargs -0 chmod 644"}
{"input": "Recursively finds string with text \"foo\" in all files of a current folder.", "output": "find ./ -type f | xargs grep \"foo\""}
{"input": "Recursively search through directory \"test\" in home directory, displaying names of all directories without full paths, ie. only the name part following the last slash of each directory.", "output": "find ~/test -type d -exec basename {} \\;"}
{"input": "Find *.c and *.h files under the current directory tree skipping hidden directories and files", "output": "find . \\( -path '*/.*' -prune -o ! -name '.*' \\) -a -name '*.[ch]'"}
{"input": "find all the files older than 30 days", "output": "find /tmp -mtime +30 -print"}
{"input": "Find all files and directories in the current directory recursively that contain spaces in their names", "output": "find . -name '* *'"}
{"input": "Execute \"cd /some/directory/myprogram\" in the background on target machine \"user@target\" and write standard output and standard error to foo.out and foo.err", "output": "ssh user@target \"cd /some/directory; nohup myprogram > foo.out 2> foo.err < /dev/null\""}
{"input": "Find all files/directories under current directory tree excluding hidden files/directories", "output": "find . -not -path '*/\\.*'"}
{"input": "Show the list of files that are not owned by user wnj or are not newer than file `ttt'", "output": "find / \\! \\( -newer ttt -user wnj \\) -print"}
{"input": "Find all directories under /home/username/public_html/sites/all/modules and set their permission to 750", "output": "find /home/username/public_html/sites/all/modules -type d -exec chmod 750 {} +"}
{"input": "Filters only directories from long file listing of the current directory", "output": "ls -l --color=always \"$@\" | grep --color=never '^d'"}
{"input": "Copy all regular files whose names end in \"~\" from the /path directory tree to ~/backups/", "output": "find /path -type f -name '*~' -print0 | xargs -0 -I % cp -a % ~/backups"}
{"input": "Check whether current terminal is opened in a screen session.", "output": "pstree --show-parents -p $$ | head -n 1 | sed 's/\\(.*\\)+.*/\\1/' | grep screen | wc -l"}
{"input": "Format output of \"mount\" as a table", "output": "mount | column -t"}
{"input": "Invoke a trusted X11 forwarding SSH connection with server \"192.168.0.14\" on port 222 as user \"phil\"", "output": "ssh -v -Y phil@192.168.0.14 -p 222"}
{"input": "Read a line from standard input in an interactive shell into variable \"input\" with prompt \"Do that? [Y,n]\" and suggestion \"Y\"", "output": "read -e -p \"Do that? [Y,n]\" -i Y input"}
{"input": "Find all directories under mydir", "output": "find mydir -type d"}
{"input": "Print only unique lines of 'file_name' file", "output": "cat -n file_name | sort -uk2 | sort -nk1 | cut -f2-"}
{"input": "find suffix tcl files under all directories started with 'n'", "output": "find ./n* -name \"*.tcl\""}
{"input": "Find all files/directories startring with 'onlyme' in their names under current directory without going into sub-directories", "output": "find . -maxdepth 1 -name 'onlyme*'"}
{"input": "Print joined strings from 'file', using space symbol as separator.", "output": "cat file | xargs"}
{"input": "Search for 'birthday' (case insensitive) in all regular files under ~/Documents directory tree and show only the filenames", "output": "find ~/Documents -type f -print0 | xargs -0 grep -il birthday"}
{"input": "Write \"foo\" to the real path of the current command's standard input", "output": "echo foo | readlink /proc/self/fd/1"}
{"input": "Prints the length and contents of the longest line in filename", "output": "cat filename | awk '{print length, $0}'|sort -nr|head -1"}
{"input": "recursively change owner of the directory testproject and all files into it to user ftpuser", "output": "chown ftpuser testproject/ -R"}
{"input": "Print the current default full path of the \"java\" executable", "output": "echo \"The current default java is $(readlink --canonicalize `which java`)\""}
{"input": "Find all files under current directory tree named 'filename_regex' excluding '.svn' and '.pdv' directories and files then search for the case insensitive pattern 'your search string' in those files", "output": "find . -name \"filename_regex\"|grep -v '.svn' -v '.pdv'|xargs grep -i 'your search string'"}
{"input": "List all files/folders in current directory by separating them with spaces", "output": "ls | tr  \"\\n\" \" \""}
{"input": "Determine if the kernel is 32 bit or 64 bit", "output": "lshw -class cpu|grep \"^       width\"|uniq|awk '{print $2}'"}
{"input": "Search for all files that end in \".conf\"", "output": "find / -type f -name \"*.conf\""}
{"input": "Delete all files in the $DIR directory that have not been accessed in 5 or more days.", "output": "find \"$DIR\" -type f -atime +5 -exec rm {} \\;"}
{"input": "Find recursively regular files in the directory given as the script's command line argument #1, skipping hidden files and directories", "output": "find \"$1\" -path \"*/.*\" -prune -o \\( -type f -print0 \\)"}
{"input": "Copy src_dir recursively to dest_dir, but without overwriting existing files.", "output": "cp -nr src_dir dest_dir"}
{"input": "Find all directories in /path/to/dir/ without going into sub-directories and append a null character at the end of each paths", "output": "find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d -print0"}
{"input": "Search all files under and below /etc for IP addresses", "output": "find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;"}
{"input": "Pushes current folder to the directory stack.", "output": "pushd ."}
{"input": "Enables shell option 'lithist'.", "output": "shopt -s lithist"}
{"input": "find all the directories in the folder $LOGDIR which have been modified in the last 5 days and delete them.", "output": "find $LOGDIR -type d -mtime +5 -exec rm -f {} \\;"}
{"input": "Recursively copy all files with names ending with .txt from dir_1 to the same location within copy_of_dir_1", "output": "rsync --recursive --prune-empty-dirs --include=\"*.txt\" --filter=\"-! */\" dir_1 copy_of_dir_1"}
{"input": "Print second section of line <line> where sections are separated by one or more whitespace.", "output": "echo -e \"<line>\" | sed 's:\\s\\+:\\t:g' | cut -f2"}
{"input": "Reads content of bzip2 compressed files and processes it with awk utility.", "output": "bzip2 -dc input1.vcf.bz2 input2.vcf.bz2 | awk 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 \";\" array[$1,$2] }'"}
{"input": "Search the files from the current directory tree for \"foo\"", "output": "find . -exec grep foo {} +"}
{"input": "Delete all empty directories under root", "output": "find root -type -d -empty -delete"}
{"input": "Delete all shared memory and semaphores for the current user on linux", "output": "ipcs -a | nawk -v u=`whoami` '$5==u &&(($1==\"m\" && $9==0)||($1==\"s\")){print \"ipcrm -\"$1,$2,\";\"}' | /bin/sh"}
{"input": "Print short TXT record of domain o-o.myaddr.l.google.com from nameserver 8.8.8.8", "output": "dig TXT +short o-o.myaddr.l.google.com @8.8.8.8"}
{"input": "find case-insentive example.com file, omit ./beta path", "output": "find ./ -path ./beta/* -prune -o -iname example.com -print"}
{"input": "display all the directories in the current folder", "output": "find . -type d"}
{"input": "Find all *.rb files/directories under current directory", "output": "find . -name \"*.rb\""}
{"input": "Show human-readable file type description of file \"/mnt/c/BOOT.INI\"", "output": "file /mnt/c/BOOT.INI"}
{"input": "Finds recursion-related options of a 'grep' utility.", "output": "grep --help |grep recursive"}
{"input": "Search for 'pattern_to_search' in all regular files with '.txt' extension under '/directory/containing/files' and show the matched lines along with filenames", "output": "find /directory/containing/files -type f -name \"*.txt\" -exec grep -H 'pattern_to_search' {} +"}
{"input": "Recursively print all directories in the current directory tree", "output": "tree -d"}
{"input": "Remove all a.out, *.o, and core files under the current directory", "output": "find . \\( -name a.out -o -name '*.o' -o -name 'core' \\) -exec rm {} \\;"}
{"input": "print all the files in the current folder which do not begin with a capital letter", "output": "find . \\! -name '[A-Z] *' -exec lpr { }\\;"}
{"input": "find all the text files in the file system and search only in the disk partition of the root.", "output": "find / -mount -name \"*.txt\""}
{"input": "Send each byte in \"/home/cscape/Desktop/table.sql\" to awk", "output": "fold -1 /home/cscape/Desktop/table.sql  | awk '{print $0}'"}
{"input": "Verbosely compresses all files on second and third depth level keeping original files in place.", "output": "bzip2 -kv */*"}
{"input": "Recursively removes all files like '4' under folder './a' and removes folders with such files if they become empty.", "output": "find a -type f -name '4' -delete -printf \"%h\\0\" | xargs -0 -r rmdir"}
{"input": "Find all *gz files under asia and emea directory", "output": "find asia emea -type f -name \"*gz\""}
{"input": "Show IPC information owned by the current user", "output": "ipcs -a | grep `whoami`"}
{"input": "Copy entire directory structure from dir1 as a subdirectory of dir2, omitting any file or directory named \"exclude\".", "output": "mkdir dir2; tar cvf - dir1/ --exclude \"*/exclude\" | tar xvf - -C dir2"}
{"input": "View gzip's help documentation", "output": "gzip --help | less"}
{"input": "Find all files/directories with '.log' extension whose names start with 'app-', have been modified in the last 5 minutes and show the first one found", "output": "find /var/log/crashes -name app-\\*\\.log -mmin -5 -print | head -n 1"}
{"input": "Finds all files like \"mylog*.log\" newer than $2 and archives them with bzip2.", "output": "find . -type f -ctime -$2 -name \"mylog*.log\" | xargs bzip2"}
{"input": "Find all files under current directory and count the output line number", "output": "find . -type f | wc -l"}
{"input": "run script \"runProgram.sh\" as user jetty", "output": "su - jetty ./runprogram.sh"}
{"input": "Prints a random number between 2000 and 65000", "output": "head -200 /dev/urandom |cksum | cut -f1 -d \" \" | awk '{print $1%63000+2001}'"}
{"input": "Find StringBuffer in all *.java files", "output": "find . -type f -name \"*.java\" -exec grep -l StringBuffer {} \\;"}
{"input": "Gets MAC address of p2p0 network interface.", "output": "ifconfig p2p0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'"}
{"input": "Find all files/directories under  current directory and rename them by replacing all blank spaces with _ in their paths", "output": "IFS=$'\\n';for f in `find .`; do file=$(echo $f | tr [:blank:] '_'); [ -e $f ] && [ ! -e $file ] && mv \"$f\" $file;done;unset IFS"}
{"input": "Creates temporary file and saves path to it in a 'tmpfile' variable.", "output": "tmpfile=$(mktemp)"}
{"input": "find all the files in the current folder which do not have the execute permission", "output": "find . -type d ! -perm -111"}
{"input": "Prints lines count of each *.php file in a current folder and subfolders, and prints total count.", "output": "find . -name '*.php' -print0 | xargs -0 wc -l"}
{"input": "Remove empty folder, and skip error message if one is not empty.", "output": "rmdir --ignore-fail-on-non-empty newBaseDir/Data/NewDataCopy"}
{"input": "Make directories to \"$TARGET_PATH\" as needed without causing an error if it exists", "output": "mkdir -p \"$TARGET_PATH\""}
{"input": "Find all files/directories that are owned by user 'dave' under current user's home directory tree", "output": "find ~ -user dave -print"}
{"input": "Find directories in /home/vmail that match pathname \"*/*/Maildir/.LearnAsHam/new\", and move them to folder .Inbox/new", "output": "find /home/vmail/ -type d -path \"*/*/Maildir/.LearnAsHam/new\" -exec sh -c '(cd {} && mv ./* ../../.Inbox/new)' ';'"}
{"input": "Source \"lib/B\" relative to the directory of the executing shell script, will fail if currently running script is not in PATH.", "output": "source \"$( dirname \"$( which \"$0\" )\" )/lib/B\""}
{"input": "find all the regular/normal files in a folder and assign the output to a variable", "output": "files2 = \"`find \"'\"$dirs\"'\" -type f`\""}
{"input": "run a shell as user jenkins", "output": "su - jenkins -s /bin/bash"}
{"input": "Set shell option 'checkwinsize'.", "output": "shopt -s checkwinsize"}
{"input": "find build.xml file in the current folder and run ant clean-all", "output": "find . -name 'build.xml' -exec ant -f {} clean-all \\;"}
{"input": "Change all file permissions to 664 and all directory permissions to 775 in directory tree \"htdocs\"", "output": "find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +"}
{"input": "Sends current job to the background.", "output": "bg %"}
{"input": "get year-month-day from date", "output": "date +%Y-%m-%d"}
{"input": "List all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "for dir in $(find -depth -type d); do [[ ! $prev =~ $dir ]] && echo \"$dir\" ; prev=\"$dir\"; done"}
{"input": "remove all core dump files from user's home directory", "output": "find ~/ -name 'core*' -exec rm {} \\;"}
{"input": "search for the file \"process.txt\" in the entire file system", "output": "find / -name \"process.txt\""}
{"input": "Display detailed usage help of the 'cp' (copy) command.", "output": "cp --help"}
{"input": "Delete all files under '/home/backups' directory tree with '.tgz' or '.gz' extension (case insensitive) that were modified more thant 60 days ago", "output": "find /home/backups -type f -iregex '.*\\.t?gz$' -mtime +60 -exec rm {} \\;"}
{"input": "Count the number of regular files with case insensitive name pattern $srchfor under 'teste2' directory tree", "output": "find teste2 -type f -iname \"$srchfor\"|wc -l"}
{"input": "split content of the file inputfile except lines started with \"^t:\" into pieces per 200 lines", "output": "cat inputfile | grep \"^t\\:\" | split -l 200"}
{"input": "List subdirectories in the current directory", "output": "find . -maxdepth 1 -type d -print0 | xargs -0 ls -d"}
{"input": "Print the number of lines for each *.txt file from the $DIR directory tree", "output": "find $DIR -name \"*.txt\" -exec wc -l {} \\;"}
{"input": "Search the Movies folder in the user's home directory for files larger than 1024 megabytes in size.", "output": "find ~/Movies/ -size +1024M"}
{"input": "Print information of the process running the current script as the current user", "output": "ps -ef | grep $0 | grep $(whoami)"}
{"input": "Gets IP address of 'en0' network interface.", "output": "ifconfig en0 | awk '/inet addr/{print substr($2,6)}'"}
{"input": "Compress \"my_large_file\" with gzip and split the result into files of size 1024 MiB with prefix \"myfile_split.gz_\"", "output": "gzip -c my_large_file | split -b 1024MiB - myfile_split.gz_"}
{"input": "find all the files in the current folder which have been modified for the ffiles that are at least one week old (7 days) but less then 30 days old", "output": "find . -mtime +30 -a -mtime -7 -print0"}
{"input": "show all regular/normal the files in the current folder whose size is bigger than 0 bytes excluding everything", "output": "find * -prune -type f -size +0c -print"}
{"input": "Find all executable files under current directory and show a few lines of output from the beginning", "output": "find . -perm /a=x | head"}
{"input": "Find the .groovy files outside the \"./target\" directory path", "output": "find .  -name \"*.groovy\" -not -path \"./target/*\" -print"}
{"input": "Uncomment every entry in current user's cron job list which contains \"test.sh\"", "output": "crontab -l | sed '/# *\\([^ ][^ ]*  *\\)\\{5\\}[^ ]*test\\.sh/s/^# *//' | crontab -"}
{"input": "Reread user's .profile configuration file.", "output": "source ~/.profile"}
{"input": "Find regular files under / that contain \"stringtofind\" and clear out their contents", "output": "find / -maxdepth 1 -xdev -type f -exec grep -Zli \"stringtofind\" {} + |  while IFS= read -r -d $'\\0' file; do sed '/./d' \"$file\"; done"}
{"input": "Create a named screen session", "output": "screen -x 2073 -p 0 -X title h"}
{"input": "File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.", "output": "awk '{s+=$1} END {printf \"%.0f\", s}' mydatafile"}
{"input": "Print lines 10000 to 10010 from input \"seq 1 100000\"", "output": "seq 1 100000 | sed -n '10000,10010p'"}
{"input": "Find all directories in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique paths", "output": "find /var/www/html/zip/data -type d -mtime +90 | uniq"}
{"input": "Find all files/directories named 'photo.jpg' under current directory tree", "output": "find -name photo.jpg"}
{"input": "find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file", "output": "find . -name \"*.jar\" -print -exec jar -tf {} \\;|egrep  \"jar$|message_track.properties\""}
{"input": "List all the emptry files in thecurrent directory only.", "output": "find . -maxdepth 1 -empty"}
{"input": "Set variable BZIP2_CMD to the full path of command \"bzip2\"", "output": "BZIP2_CMD=`which bzip2`"}
{"input": "Find all files/directories under '/usr' directory tree that have been modified exactly 5 minutes ago", "output": "find /usr -mmin 5"}
{"input": "find md5sum of a string \"password\"", "output": "printf 'password' | md5"}
{"input": "Go into the first directory whose name contains 1670", "output": "cd `find . -maxdepth 1 -type d | grep 1670`"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn -delete"}
{"input": "Find all .jpg files in the current directory and below", "output": "find -name '*.jpg"}
{"input": "Set the value of \"to_sort\" to \"$1\" in a subshell which no longer exists after the pipeline completes", "output": "echo \"$1\"| read -a to_sort"}
{"input": "Move all directories from the `sourceDir' directory tree to the `destDir' directory", "output": "find sourceDir -mindepth 1 -type d  -exec mv -t destDir \"{}\"  \\+"}
{"input": "Remove the last line from \"$file\" without reading the whole file or rewriting anything", "output": "tail -n 1 \"$file\" | wc -c | xargs -I {} truncate \"$file\" -s -{}"}
{"input": "find files which full path name is /tmp/foo/bar under /tmp/foo directory and print", "output": "find /tmp/foo -path /tmp/foo/bar -print"}
{"input": "Prefix all files in the current directory with \"unix_\"", "output": "for f in *; do [[ -f \"$f\" ]] && mv \"$f\" \"unix_$f\"; done"}
{"input": "Search the home directory tree for .tar.gz files newer than file \"filename\"", "output": "find ~/ -name *.tar.gz -newer filename"}
{"input": "Remove all files that end with 'prefs copy' in their names under '/mnt/zip' directory tree", "output": "find /mnt/zip -name \"*prefs copy\" -print | xargs rm"}
{"input": "replaces the second to last line of file", "output": "tac file | sed '2 s/,$//' | tac"}
{"input": "Calculate the md5 sum of hex byte 61", "output": "echo -n -e '\\x61' | md5sum"}
{"input": "Forward port 16186 on hello.com to 8888 on localhost using private key \"privatekeystuffdis88s8dsf8h8hsd8fh8d\" for login", "output": "ssh -N -i <(echo \"privatekeystuffdis88s8dsf8h8hsd8fh8d\") -R 16186:localhost:8888 hello.com"}
{"input": "force remove all the regular/normal files which begin with sess in the temp folder", "output": "find /tmp -type f -name sess* -exec rm -f {} \\;"}
{"input": "Run 'chmod 0755' on all directories in the current directory tree", "output": "find . -type d -exec chmod 0755 {} \\;"}
{"input": "Print \"Shared Memory\" if shared memory mounted at /tmp or print \"Not Shared Memory\" otherwise.", "output": "df /tmp | grep -q tmpfs && echo \"Shared Memory\" || echo \"Not Shared Memory\""}
{"input": "Print a list of all filepattern-*2009* files/directories under data directory to filesOfInterest.txt file", "output": "find -x data -name \"filepattern-*2009*\" -print0 > filesOfInterest.txt"}
{"input": "unzip all zip files in current folder", "output": "find -name '*.zip' | xargs -n 1 unzip"}
{"input": "search for al cpp files in current folder and display distinct parent directory of these files in sorted order", "output": "find . -name \"*.cpp\" | while read f; do dirname \"$f\" ; done | sort -u"}
{"input": "display a long listing of all images with the name \"articles\" in the current folder ( print0 is used to preserve file names with new line in their name )", "output": "find . -iname \"Articles.jpg\" -print0 | xargs -0 ls -l"}
{"input": "SSH into \"111.222.333.444\" as user \"tunneluser\" without interpreting bash variables locally", "output": "ssh tunneluser@111.222.333.444 <<\\EOI"}
{"input": "Find all files/directories under /var/www/some/subset and change their owner and group to www-data", "output": "sudo find /var/www/some/subset -print0 | xargs -0 chown www-data:www-data"}
{"input": "Join lines in file \"aa\" with lines in file \"bb\" if the lines share a common first word", "output": "join <(sort aa) <(sort bb)"}
{"input": "Write the output of \"./program\" to the console and \"a.txt\"", "output": "./program | tee a.txt"}
{"input": "search for files starting with memo and which belong to the user ann in the folder /work", "output": "find /work -name 'memo*' -user ann -print"}
{"input": "all the files that end with .mp3 and end with .jpg", "output": "find . -name '*.mp3' -name '*.jpg' -print"}
{"input": "Find all directories by the name `httpdocs' on the system", "output": "find / -type d -name httpdocs"}
{"input": "Find all regular files in the current directory tree and search them for \"example\"", "output": "find -type f -print0 | xargs -r0 grep -F 'example'"}
{"input": "Unzip every \".gz\" file in the current directory tree", "output": "find . -name \"*.gz\" | xargs gunzip"}
{"input": "Find all files/directories under '/home/user/' directory tree whose status were changed 10 minutes ago", "output": "find /home/user/ -cmin 10 -print"}
{"input": "Find all files in the /etc folder that have been modified within the last 30 days and copy them to /a/path/.", "output": "find /etc/ -mtime -30 | xargs -0 cp /a/path"}
{"input": "Split \"$in_file\" excluding the first line into files of at most 100000 lines each with numeric suffixes of length 5 and the prefix $in_file\"_\"", "output": "awk '{if (NR!=1) {print}}' $in_file | split -d -a 5 -l 100000 - $in_file\"_\""}
{"input": "Delete all files named \"filename\" in the current directory tree, except the one with path ./path/to/filename", "output": "find . -name \"filename\" -and -not -path \"./path/to/filename\" -delete"}
{"input": "Change the group to `temp' for all files in the current directory tree that belong to group `root'", "output": "find . -group root -print | xargs chgrp temp"}
{"input": "Decompress \"path/to/test/file.gz\" to standard output and save all lines matching \"my regex\" to files with a 1000000 line limit", "output": "gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -l1000000"}
{"input": "find  file which case-insensitive name is too in currect directory", "output": "find . -iname foo"}
{"input": "Run a \"rm\" process to recursively remove \"cache\", making it immune to all SIGHUP signals sent to it.", "output": "nohup rm -rf cache &"}
{"input": "find all the symbolic links in the current folder and check the file type and display the output of those files which are broken", "output": "find ./ -type l -exec file {} \\; |grep broken"}
{"input": "search for all the files with the name \"dummy\" in the current folder  and discard all the errors.", "output": "find / -type f -name dummy 2>/dev/null"}
{"input": "Find all .txt files in the current directory tree on a BSD system and edit them with `vim'", "output": "find . -name \"*.txt\" | xargs -o vim"}
{"input": "List all files/directories under current directory with 'FooBar' in their paths ensuring white space safety", "output": "find . -print0 | grep --null 'FooBar' | xargs -0"}
{"input": "Delete all empty directories in the current directory tree", "output": "find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +"}
{"input": "Counts lines in file $FILE.", "output": "wc -l < $FILE"}
{"input": "Create a symbolic link in target directory \"$tmpdir\" for each file under the current directory", "output": "find $PWD -type f -exec ln -st $tmpdir {} +"}
{"input": "Send SIGKILL signal to all processes using TCP port 8080, terminating them instantly.", "output": "kill -9 $(lsof -t -i:8080)"}
{"input": "find all files that names are game", "output": "find / -name game"}
{"input": "Find and delete all files with a used disk size of 0", "output": "rm `du * | awk '$1 == \"0\" {print $2}'`"}
{"input": "find all the files in the entire file system which have been modified in the last 48 hours", "output": "find / -mtime -2 -print"}
{"input": "search all the files in the current folder using name patterns", "output": "find . -name 'a(b*' -print"}
{"input": "Find all files/directories starting with 'onlyme' in their names under current directory tree in minimum 1 level deep", "output": "find . -mindepth 1 -name 'onlyme*'"}
{"input": "Show the epoch in default date/time format", "output": "date -ud@0"}
{"input": "Display users who are currently logged in", "output": "finger | sed 's/^\\([^ ]*\\) *\\([^ ]*\\) *pts[^A-Z]*\\([^(]*\\).*/\\2\\t(\\1)\\t\\3/'"}
{"input": "Find all *.tex regular files under current directory", "output": "find . -type f -name \"*.tex\""}
{"input": "list the regular files in your home directory that were modified yesterday", "output": "find ~/ -daystart -type f -mtime 1"}
{"input": "Find deb packages in the current directory recursively", "output": "find . -type f -and -iname \"*.deb\""}
{"input": "Find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file", "output": "find . -iname \"*.mov\" -print0 | xargs -0 -i sh -c 'ffmpeg -i {} -f flv `basename {}`'"}
{"input": "Move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT_LOCATION} to ${OUTPUT_LOCATION}", "output": "find ${INPUT_LOCATION} -name '*.pdf.marker' -exec sh -c 'mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${OUTPUT_LOCATION} \\;"}
{"input": "Installs package \"devtoolset-3\" answering 'yes' on all questions.", "output": "yum install -y devtoolset-3"}
{"input": "Delete all regular files under $DIR directory tree that have been modified before file $a", "output": "find \"$DIR\" -type f \\! -newer \"$a\" -exec rm {} +"}
{"input": "Search everywhere for hidden file `.profile'", "output": "find / -name .profile"}
{"input": "Find all files with extension .aac in the /home directory tree", "output": "find /home -type f -name '*.aac'"}
{"input": "Print only common strings in sorted content of files 'file1' and 'file2'", "output": "comm -1 -2 <(sort file1) <(sort file2)"}
{"input": "find all the patch files in current folder and copy them to separate folder patches", "output": "find -name '*.patch' -print0 | xargs -0 -I {} cp {} patches/"}
{"input": "Find files/directories that is under group 'root' or have no group and set their group to 'apache'", "output": "find /var/www -group root -o -nogroup -print0 | xargs -0 chown :apache"}
{"input": "Find command will list of all files & directories from current directory , before listing echo command will display ' List of files & Directory '", "output": "find . -exec echo ' List of files & Direcoty'   {} \\;"}
{"input": "Execute \"your_script.sh\" passing all \"sqlite.db\" files from the current directory tree as arguments to it", "output": "find . -name 'sqlite.db' | xargs your_script.sh"}
{"input": "Find and show all files in the current directory tree that are smaller than 500 kB", "output": "find . -size -500k"}
{"input": "Determine the user associated with stdin", "output": "who -m"}
{"input": "Display a long list of all the files/directories named \".todo\" under $STORAGEFOLDER directory tree", "output": "find $STORAGEFOLDER -name .todo  -exec ls -l {} \\;"}
{"input": "optimize all the png images in the current folder to level 5 and save the log to the file optipng.log", "output": "find . -type f -iname \"*.png\" -print0 | xargs -I {} -0 optipng -o5 -quiet -keep -preserve -log optipng.log \"{}\""}
{"input": "Get a list of all files in the /home directory tree and their coressponding inode numbers", "output": "find /home -type f -printf \"%i@%p\\n\""}
{"input": "Print a sorted list of regular files from directory tree /folder/of/stuff", "output": "find /folder/of/stuff -type f | sort"}
{"input": "find all text files which have extra extensions in the current folder", "output": "find . -name '*.text' -exec $SHELL -c '[ ! -f ${1%.*} ]' $SHELL '{}' ';' -print"}
{"input": "find all text files in user/directory/ and display the last line", "output": "find /user/directory/* -name \"*txt\" -mtime 0   -type f -exec awk '{s=$0};END{print FILENAME, \": \",s}' {} \\;"}
{"input": "Find recursively all Emacs backup files in the current directory and remove them", "output": "find . -name '*~' | xargs rm"}
{"input": "Print and recursively remove the alphabetically last directory in the current directory", "output": "find -mindepth 1 -maxdepth 1 -type d | cut -c 3- | sort -k1n | tail -n 1 | xargs -r echo rm -r"}
{"input": "Recursively change the owner and group of all files in the current directory to \"apache\"", "output": "find . -maxdepth 1 -not -name \".\" -print0 | xargs --null chown -R apache:apache"}
{"input": "find all the files with the name \"datainame\" in the file system which are bigger than 50MB", "output": "find / -size +50M -iname \"Dateiname\""}
{"input": "Append the contents of \".cwdhist\" file to the current in-memory history list", "output": "history -r .cwdhist"}
{"input": "Write the lines appended to \"xxxx\" as it appears to the console and append to \"yyyy\" in the background", "output": "tail -F xxxx | tee -a yyyy &"}
{"input": "Print the lines of file \"strings\" specified in file \"index\"", "output": "join <(sort index) <(nl strings | sort -b)"}
{"input": "Change the owner of all files in the current directory tree excluding those who match \"./var/foo*\" to \"www-data\"", "output": "find . -not -iwholename './var/foo*' -exec chown www-data '{}' \\;"}
{"input": "Find all the files/directories under '/usr/local' directory tree which have been modified within the last day", "output": "find /usr/local -mtime -1"}
{"input": "split result of the command \"tar [your params]\" into pieces per 500 mb named as \"output_prefixNNN\"", "output": "tar [your params] |split -b 500m - output_prefix"}
{"input": "Recursively print all files and directories in the current directory tree", "output": "tree ."}
{"input": "Find all *.txt files/directories under current directory and execute process for each of them", "output": "find . -name \\*.txt -exec process {} \\;"}
{"input": "Read first column of each row, find all other first columns which have a difference less than 10, and append that comma separated list to the row", "output": "awk 'FNR==NR { array[$1]++; next } { n = asorti(array,sort); for (i=1; i<=n; i++) if (sort[i] <= $1 + 10 && sort[i] >= $1 - 10 && $1 != sort[i]) line = (line ? line \",\" : line) sort[i]; print $0, line; line = \"\" }' file.txt{,} | column -t"}
{"input": "find all the files in the current folder that have a single letter in their name which have been modified in the last 3 days but not today", "output": "find . -name \\? -daystart -mtime +0 -mtime -3"}
{"input": "Find symbolic links in /usr/lib and /usr/lib64 to files whose pathnames contain \"libstdc++\"", "output": "find  /usr/lib/ /usr/lib64/ -lname \"*libstdc++*\""}
{"input": "search for the regular/normal file 'myfile' in the folder /root excluding those that are present in the \"work\" directory", "output": "find /root/ -name 'work' -prune -o -name myfile -type f -print"}
{"input": "Make directory \"/etc/cron.5minute\"", "output": "mkdir /etc/cron.5minute"}
{"input": "reverse a file with comma deliminators instead of newline deliminators", "output": "tac -s \",\" parse.txt > newparse.txt"}
{"input": "Archive \"user@remoteip:/path/to/files/\" to \"/local/path\" via ssh on port \"$portNumber\" and compressing data during transmission", "output": "rsync -avz -e \"ssh -p $portNumber\" user@remoteip:/path/to/files/ /local/path/"}
{"input": "Ping hostname, grep for 192.168.11 and print the IP from the output", "output": "ping -c 1 hostname | grep 192.168.11 | grep 'bytes from' | awk '{print $4}' | sed 's/://g'"}
{"input": "find all the directories in the file system which have read, write and execute to all the users", "output": "find / \\( -type d -a -perm -777 \\) -print"}
{"input": "Turns on network interface eth0.", "output": "ifconfig eth0 up"}
{"input": "find all the directories in the entire file system whose size is greater than 50KB", "output": "find / -type d -size +50k"}
{"input": "make directory \"/etc/cron.15sec\"", "output": "mkdir /etc/cron.15sec"}
{"input": "replace a word in all the regular/normal files in the current folder", "output": "find . -type f -exec perl -i -pe 's/something/another/g' {} \\;"}
{"input": "Search for '\u201cfoobar\u201d' in all files starting with '\u2018' and ending with '\u2019' and contain '.' in their names in the entire filesystem and display only the matched files", "output": "find / -name \u2018*.*\u2019 -exec grep -il \u201cfoobar\u201d {} \\;"}
{"input": "Uncompress all files listed in \"list.txt\" and send to \"./a.out\"", "output": "zcat $(cat list.txt) | ./a.out"}
{"input": "Find files and directories with the name RAID but don't traverse a particular directory", "output": "find . -name RAID -prune -o -print"}
{"input": "find all the files in the root folder which have been modified in the last 24 hours and print them", "output": "find / -mtime -1 -print"}
{"input": "find all jpg,png,jpeg,pdf,tif,tiff,bmp and other image formats using regular expressions excluding those ending with \"_ocr.pdf\"", "output": "find /somepath -type f -iregex \".*\\.(pdf\\|tif\\|tiff\\|png\\|jpg\\|jpeg\\|bmp\\|pcx\\|dcx)\" ! -name \"*_ocr.pdf\" -print0"}
{"input": "display all the directories in the current folder excluding those that are present in the folder secret", "output": "find . -name secret -type d -prune -o -print"}
{"input": "Unsets all environment variables with 'G4' in name.", "output": "unset $(printenv |grep G4 |awk 'BEGIN{FS=\"=\";}{print $1;}')"}
{"input": "Output all lines in 'file' comparing the first 12 characters and discarding any adjascent lines where these characters are duplicates.", "output": "uniq -w12 -c file"}
{"input": "Find all files/directories with '.txt' extension under '/home' directory tree that are exactly 100KB in size", "output": "find /home -name \"*.txt\" -size 100k"}
{"input": "Find files whose content was modified at least 1 minute ago", "output": "find ./ -mmin +1"}
{"input": "create an archive using 'pigz' as a compress program", "output": "tar -c --use-compress-program=pigz -f tar.file dir_to_zip"}
{"input": "Get files that last had their meta information changed more than 3 days ago", "output": "find / -ctime +3"}
{"input": "create a symbolic link named \"$ORACLE_HOME/include\" to file \"/usr/include/oracle/11.2/client\"", "output": "sudo ln -s /usr/include/oracle/11.2/client $ORACLE_HOME/include"}
{"input": "find all the normal/regular files in the current directory and search for the word mail and display the file names", "output": "find . -type f -exec grep -il mail"}
{"input": "Search the current directory tree for files modified less than 5 days ago", "output": "find . -mtime -5"}
{"input": "Remove the path $1 from the PATH environment variable", "output": "PATH=$(echo $PATH | tr \":\" \"\\n\" | grep -v $1 | tr \"\\n\" \":\")"}
{"input": "List files larger than 10MB under /var/log", "output": "find /var/log -size +10M -ls"}
{"input": "Search the current directory and two levels below for file `teste.tex'", "output": "find ~/ -maxdepth 3 -name teste.tex"}
{"input": "List all regular files from the current directory tree that were modified less than 60 minutes ago", "output": "find . -mmin -60 -type f -ls"}
{"input": "find all the text files in the current folder", "output": "find . \u2014 name \"*.txt\" \u2014 print"}
{"input": "Create directorie(s) 'some/path' as required in the current directory", "output": "mkdir -p ./some/path"}
{"input": "Filters only directories from long file listing of the current directory.", "output": "ls -l | grep \"^d\""}
{"input": "Find all files under current directory without descending into .git directory and replace the match of the regex \\Q$1\\E with \\L$2\\E in those files where $1 and $2 will be expanded in the current shell", "output": "find . -name .git -prune -o -type f -exec perl -i -pe \"s/\\Q$1\\E/\\L$2\\E/i\" {} +"}
{"input": "find md5sums of files named \"file*.txt\"", "output": "md5sum file*.txt"}
{"input": "display all pdf files in the current folder", "output": "find . -name *.pdf"}
{"input": "display the contents of all the regular files in the current folder and save the output to out.txt", "output": "find . -type f -print0 | xargs -0 cat > out.txt"}
{"input": "Recursively copy \"/path/to/data/myappdata/*.txt\" to \"user@host:/remote/path/to/data/myappdata/\"", "output": "rsync -rvv /path/to/data/myappdata/*.txt user@host:/remote/path/to/data/myappdata/"}
{"input": "Change the ownership of \"/etc/udev/rules.d/51-android.rules\" to \"root\"", "output": "sudo chown root. /etc/udev/rules.d/51-android.rules"}
{"input": "display all the files in current folder which have been changed in the last 2-6 days", "output": "find . -cmin +2 -cmin -6"}
{"input": "Find all *.xml.bz2 files under current directory and run the command find_graph with -build_graph, $i.graph and $i as it's arguments where $i is expanded to each file path", "output": "for i in `find . | grep \".xml.bz2$\"`; do find_graph -build_graph $i.graph $i; done"}
{"input": "Find all *.txt files on the vfat file system", "output": "find / -name  \"*.txt\" -fstype vfat 2> /dev/null"}
{"input": "Find all files/directories named modules under current directory", "output": "find . -name modules"}
{"input": "Find all *FooBar* files/directories under current directory and copy them to ~/foo/bar", "output": "find . -name \"*FooBar*\" -exec sh -c 'cp -- \"$@\" ~/foo/bar' sh {} +"}
{"input": "Update timestamps of all files (not directories) under current directory.", "output": "find . -exec touch {} \\;"}
{"input": "FInd files in current directory and grep text and html files - but not index.html and report things that contain the word 'elevator' in four or more lines", "output": "find . -type f -print0 | egrep -iazZ '(\\.txt|\\.html?)$' | grep -vazZ 'index.html' | xargs -n 1 -0 grep -c -Hi elevator | egrep -v ':[0123]$'"}
{"input": "Find all files larger than 20000k", "output": "find / -type f -size +20000k"}
{"input": "execute command \"who\" when key \"\\eW\" is pressed", "output": "bind -x '\"\\eW\":\"who\"'"}
{"input": "Create a bzip2 archive `dir_txt.tar.bz2' of all .txt files in the dir/ directory tree", "output": "find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2"}
{"input": "Find the directories whose names contain \"New Parts\" at level 3 of the current directory tree and create symlinks to them in /cygdrive/c/Views", "output": "find -mindepth 3 -maxdepth 3 -type d -name \"*New Parts*\" -exec ln -s -t /cygdrive/c/Views {} \\;"}
{"input": "Join data in \"file1\" sorted by the second word of each line with data in \"file2\" sorted by the first word of each line, keeping the same order as it is found in \"file1\"", "output": "join -1 2 -2 1 <(sort +1 -2 file1) <(sort +0 -1 file2)"}
{"input": "Find all regular files in the current directory tree ignoring directory ./source/script", "output": "find . -path ./source/script -prune -o -type f -print;"}
{"input": "Archive \"source\" to \"destination\" via ssh on port \"PORT_NUMBER\"", "output": "rsync -azP -e \"ssh -p PORT_NUMBER\" source destination"}
{"input": "find all files that names are dir-name-here", "output": "find / -name \"dir-name-here\""}
{"input": "List files with C-style escape sequences for non-alphanumeric characters", "output": "ls -b"}
{"input": "Prints list of folders containing '.git', searching recursively from a current folder.", "output": "find . -name '.git' | xargs -n 1 dirname"}
{"input": "Join comma-separated information in 4 files", "output": "join -t, <(sort test.1) <(sort test.2) | join -t, - <(sort test.3) | join -t, - <(sort test.4)"}
{"input": "set alias \"ff\" for command \"find . -name $1\"", "output": "alias ff=find . -name $1"}
{"input": "Find all files under ~/code that are executable by owner without descending into hidden directories and print their parent directories appended with : at the beginning and remove all newlines and the last : (colon)", "output": "find ~/code -name '.*' -prune -o -type f -a -perm /u+x -print | sed 's@/[^/]\\+$@:@' | sort | uniq | tr -d '\\n' | sed 's/^/:/; s/:$//'"}
{"input": "Remove all .txt files in and below the current directory", "output": "find . -name \"*.txt\" | xargs rm"}
{"input": "Find *.pdf files in the PDFs directory tree that contain text \"perry sound\" and \"October 26, 2004\"", "output": "find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext \"{}\" - | grep -l -Z -i --label=\"{}\" \"perry sound\" | xargs -0 -I{} grep -i -l --label=\"{}\" \"October 26, 2004\" \"{}\"' \\;"}
{"input": "Find files matching an exact set of permissions", "output": "find / -perm 644"}
{"input": "Fetch 'stackoverflow.com' domain IP addresses from dig DNS lookup", "output": "dig stackoverflow.com | grep -e \"^[^;]\" | tr -s \" \\t\" \" \" | cut -d\" \" -f5"}
{"input": "Allow all users to execute '$pathToShell\"myShell.sh\"'", "output": "chmod a+x $pathToShell\"myShell.sh\""}
{"input": "Raise an error for using uninitialized variables", "output": "set -u"}
{"input": "show all files in the current folder that belongs to a specific userid", "output": "find . -user <userid>"}
{"input": "Print 1 byte from \"/dev/urandom\" as a signed decimal value and no address radix", "output": "od -A n -t d -N 1 /dev/urandom"}
{"input": "search for files which are writable by either their owner or their group", "output": "find . -perm /220"}
{"input": "Print a colon-separated list of all directories from the $root directory tree", "output": "find $root -type d -printf '%p:'"}
{"input": "find files in /u/bill directory which are access an 2 to 6 minutes ago", "output": "find /u/bill -amin +2 -amin -6"}
{"input": "Find the largest 10 directories under current directory", "output": "find . -type d -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {}"}
{"input": "display all the files in the home folder which end with \".xbm\"", "output": "find ~ -name '*.xbm'"}
{"input": "Find all *.php files under current directory and change their permission to 640", "output": "chmod 640 $(find . -name *.php)"}
{"input": "Split \"$file\" into files with at most 1000 lines each and use a prefix length of 5", "output": "split -a 5 $file"}
{"input": "Print 1 to 10 by separating them with colon (':')", "output": "echo {1..9}: 10 | tr -d ' '"}
{"input": "Find all *.tar.gz files/directories under /directory/whatever which were modified more than $DAYS ago and show a message if no files were found", "output": "find /directory/whatever -name '*.tar.gz' -mtime +$DAYS | grep 'tar.gz' || echo \"You don't have files older than $DAYS days\""}
{"input": "Find all files/directories 1 level down the ~/bin/FilesDvorak/ directory and redirect the sorted output to file b", "output": "(cd ~/bin/FilesDvorak/; find . -maxdepth 1 | sort > b)"}
{"input": "List all aliencoders.[0-9]+ files/directories under /home/jassi/ directory", "output": "find /home/jassi/ -name \"aliencoders.[0-9]+\" | xargs -r ls -lrt | awk '{print $9}'"}
{"input": "Verbosely compresses all files on fifth and sixth depth level keeping original files in place.", "output": "bzip2 -kv */*/*/*/*/*"}
{"input": "search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3", "output": "find / -iname \"*.mp3\" -type f -print0 | xargs -0 -I '{}' /bin/mv \"{}\" /mnt/mp3/"}
{"input": "Retrieve column number from column name \"Target\" in file \"table\"", "output": "head -1 table | tr -s ' ' '\\n' | nl -nln |  grep \"Target\" | cut -f1"}
{"input": "find all the foo.txt files in the current folder and move them to another directory", "output": "find . -name \"foo.txt\" | awk '{ print \"mv \"$0\" ~/bar/\" | \"sh\" }'"}
{"input": "Finds users with X session in system and puts the result in USERS variable.", "output": "USERS=$(w | awk '/\\/X/ {print $1}')"}
{"input": "display the change owner command for all the regular files in the current folder.", "output": "find . -type f -exec echo chown username {} \\;"}
{"input": "Replace all occurrence of \"subdomainA.example.com\" with \"subdomainB.example.com\" in all files under /home/www and below", "output": "find /home/www/ -type f -exec perl -i.bak -pe 's/subdomainA\\.example\\.com/subdomainB.example.com/g' {} +"}
{"input": "search for all the files having spaces in the current folder and save the output to the variable founddata", "output": "founddata=`find . -name \"filename including space\" -print0`"}
{"input": "List detailed information about all Jar files in the current directory tree", "output": "find . -name \"*.jar\" -exec zipinfo {} \\;"}
{"input": "Copy all files from the current directory tree to /path/to/destination/dir preserving their times, permissions, and ownership", "output": "find . | cpio -pdumv /path/to/destination/dir"}
{"input": "Search the current directory tree recursively for the regular file named \"myfile\" ignoring \"work\" and \"home\" directories", "output": "find .  \\( -name work -o -name home \\)  -prune -o -name myfile -type f -print"}
{"input": "Make 999 folders one inside another where first 998 of them is named as \"folderX\" where X goes from 1 to 998 and the last folder named as \"folder9991000\"", "output": "mkdir -p folder$( seq -s \"/folder\" 999 )1000"}
{"input": "Find all files/directories ignoring *~ files/directories without descending into .snapshot directory with null character as the delimiter", "output": "find . -name .snapshot -prune -o \\( \\! -name *~ -print0 \\)"}
{"input": "Find all files under current directory and make them read-only for owner, read & writable by group and remove read-write-execute permission", "output": "find . -type f -exec chmod u+r-wx,g+rw-x,o-rwx {} \\;"}
{"input": "Find all 777 permission regular files and use chmod command to set permissions to 644", "output": "find / -type f -perm 0777 -print -exec chmod 644 {} \\;"}
{"input": "List path/filename of all PHP files under current directory whose file type description or path/name contains \"CRLF\"", "output": "find . -type f -iname \"*.php\"  -exec file \"{}\" + | grep CRLF"}
{"input": "change the current working directory to /some/dir and display all normal/regular files", "output": "cd \"/some/dir\" && find . -type f"}
{"input": "Prints a random N-digit number with leading zeroes", "output": "tr -dc '1-65000' </dev/urandom | head -c N"}
{"input": "For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv", "output": "join -o 1.1,1.2,1.3,1.4 -t, <(sort file1.csv) <(sort file2.txt)"}
{"input": "Find all *gz files under asia and emea directory and print their names and line counts to file_count.txt", "output": "find asia emea -type f -name \"*gz\" | while IFS= read -r fname; do printf \"%s %s\\n\" \"$fname\" $(gzip -dc \"$fname\" | wc -l) >> file_count.txt; done"}
{"input": "List all files/directories under current directory by replacing all spaces with commas (,)", "output": "find . -ls | tr -s ' ' ,"}
{"input": "Find all regular files under $DIR directory tree with \".$TYPE\" extension (case insensitive) where $TYPE expands in the current shell", "output": "find $DIR -type f -iname \"*.$TYPE\""}
{"input": "Find all directories under /path/to/Dir and set their permission to 755", "output": "sudo find /path/to/Dir -type d -print0 | xargs -0 sudo chmod 755"}
{"input": "Decompress and extract 'libxml2-sources-2.7.7.tar.gz'", "output": "gzip -dc libxml2-sources-2.7.7.tar.gz | tar xvf -"}
{"input": "Create a symbolc link named \"latest\" to the last modified file or directory in \"target-directory\"", "output": "ln -s target-directory/`ls -rt target-directory | tail -n1` latest"}
{"input": "Print \"new.txt\" with line numbers prepended and lines 3 and 4 deleted", "output": "cat new.txt  |  nl |sed  \"3d;4d\""}
{"input": "Print the file content of command \"f\"", "output": "cat \"$(which f)\""}
{"input": "find the file \"filename.txt\" in the usr folder", "output": "find /usr -name filename.txt -print"}
{"input": "Print the size for every *.ogg file found under the home directory", "output": "find $HOME -name '*.ogg' -type f -exec du -h '{}' \\;"}
{"input": "Find files larger than 100MB in /var/www and exclude files with /download/ in their path from the output", "output": "find /var/www/ -type f -name \"*\" -size +100M -exec du -h '{}' \\;|grep -v /download/"}
{"input": "Find all files/directories in entire file system less than 50 bytes", "output": "find / -size -50c"}
{"input": "find all files and directories under the current directory and display the inode of each one, using the stat command on FreeBSD/OSX", "output": "find . -print0 | xargs -0 stat -f '%i '"}
{"input": "Find all directories in current directory (non-recursive) excluding . and print a sorted list in the file a", "output": "find . -maxdepth 1 -type d ! -name . | sort > a"}
{"input": "Run script $2 on remote host $1 using interpreter $INTERPRETER with pseudo-terminal allocation", "output": "cat $2 | grep -v \"#\" | ssh -t $1 $INTERPRETER"}
{"input": "Counts lines of myfile.txt file.", "output": "cat myfile.txt | wc -l"}
{"input": "Find '*prefs copy' files under /mnt/zip and delete them ensuring white space safety", "output": "find /mnt/zip -name \"*prefs copy\" -print0 | xargs>    -0 rm"}
{"input": "Look for SUID files and directories", "output": "find / -perm +4000"}
{"input": "display all the files in the file system which belong to the user with the id 1005", "output": "find / -uid 1005"}
{"input": "Find all files/directories in maximum 1 level down the current directory which do not have only read permission for 'other'", "output": "find . -maxdepth 1 ! -perm  -o=r"}
{"input": "show all .cpp, .c, .h, .hpp files in the folder ~/src", "output": "find ~/src -type f \\( -iname '*.cpp' -or -iname '*.h' -or -iname '*.c' -or -iname '*.hpp' \\) -exec echo {} \\;"}
{"input": "find  files which full path name is /tmpfoo/bar under /tmp/foo directory and print", "output": "find /tmp/foo -path /tmp/foo/bar -print /tmp/foo/bar"}
{"input": "Find all the files on the system that have been accessed within the last hour", "output": "find / -amin -60"}
{"input": "Replace all occurrences of edx (case insensitive) with gurukul in all *.css (case insensitive) files under ./cms/djangoapps/contentstore/management/commands/tests directory", "output": "find ./cms/djangoapps/contentstore/management/commands/tests -iname *.css | xargs sed -i s/[Ee][Dd][Xx]/gurukul/g"}
{"input": "Print IP addresses of the host name", "output": "hostname --ip-address"}
{"input": "change owner of the files into directory \"/mydir\" with \".txt\" extension to user root", "output": "find /mydir -type f -name \"*.txt\" -print0 | xargs -0 chown root $(mktemp)"}
{"input": "Find all *.txt files under current directory and copy them to ./tmp", "output": "find . -type f -name '*.txt' | sed 's/'\"'\"'/\\'\"'\"'/g' | sed 's/.*/\"&\"/'  | xargs -I{} cp -v {} ./tmp/"}
{"input": "Print the current directory", "output": "find -maxdepth 0"}
{"input": "Delete all empty directories under test directory", "output": "find test -depth -type d -empty -delete"}
{"input": "List all variables (names only) with names containing X.", "output": "env | awk -F \"=\" '{print $1}' | grep \".*X.*\""}
{"input": "find all the error, access, ssl_engine and rewrite logs which are bigger than 300MB and are less then 5GB in the folder /opt", "output": "find /opt \\( -name error_log -o -name 'access_log' -o -name 'ssl_engine_log' -o -name 'rewrite_log' -o  -name 'catalina.out' \\) -size +300000k -a -size -5000000k"}
{"input": "search files  in the file system excluding those in the paths \"10_Recommended\" and \"/export/repo\"", "output": "find / -name whatever -not -path \"/10_Recommended*\" -not -path \"/export/repo/*\""}
{"input": "Find all files/directories with '.txt' extension that are less than 100 KB in size under '/home' directory tree", "output": "find /home -name \"*.txt\" -size -100k"}
{"input": "Print the IP addresses for the current host name", "output": "hostname  -I"}
{"input": "list the files with a name ending with '.mp3' or '.jpg' and beginning with 'foo'", "output": "find . \\( -name '*.mp3' -o -name '*.jpg' \\) -name 'foo*' -print"}
{"input": "Print a 2 byte decimal integer from \"/dev/random\"", "output": "od -An -N2 -i /dev/random"}
{"input": "Connect to host \"remotehost\" as ssh user \"user\" to copy remote file \"/location/KMST_DataFile_*.kms\" to current directory on local host.", "output": "scp -v user@remotehost:/location/KMST_DataFile_*.kms"}
{"input": "Look in /home/dm and below for files with 'uniform' in their names", "output": "find /home/dm -name \"*uniform*\""}
{"input": "Find all the files named 'vimrc' anywhere on the system", "output": "find / -name vimrc"}
{"input": "Find the file with inode number 211028 in the current dirrectory tree and move it to newname.dir", "output": "find . -inum 211028 -exec mv {} newname.dir \\;"}
{"input": "show all directories in the current folder excluding those that are present in the sub directories of media, images and backups", "output": "find . -type d \\( -name media -o -name images -o -name backups \\) -prune -o -print"}
{"input": "Find all *.txt, *.html files under /basedir that match the case insensitive pattern *company* in their names", "output": "find /basedir/ \\( -iname '*company*' -and \\( -iname '*.txt' -or -iname '*.html' \\) \\) -print0"}
{"input": "Print appended data in \"/var/log/syslog\" as the file grows", "output": "tail -f /var/log/syslog"}
{"input": "Create a symolic link in \"/usr/local/bin/\" to \"/Applications/Sublime\\ Text\\ 2.app/Contents/SharedSupport/bin/subl\"", "output": "ln -s /Applications/Sublime\\ Text\\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/"}
{"input": "Print each line in \"set1\" and \"set2\" that does not exist in the other", "output": "sort set1 set2 | uniq"}
{"input": "Delete all files/directories under current directory tree excluding '.gitignore' files/directories and files/directories matching the patterns '.git' or '.git/*' in their paths", "output": "find . ! -name '.gitignore' ! -path '.git' ! -path '.git/*' -exec rm -rf {} \\;"}
{"input": "Find all directories named '.texturedata' under '/path/to/look/in/' directory tree", "output": "find /path/to/look/in/ -type d -name '.texturedata'"}
{"input": "Saves byte size of $myvar variable value in the 'var2' variable.", "output": "var2=$(echo $myvar | wc -c)"}
{"input": "Archive directory specified by variable \"myFolder\" to current directory.", "output": "rsync -av $myFolder ."}
{"input": "Create an archive named newArch from the contents of ./test directory", "output": "find ./test -printf \"././%f\\n\"| cpio -o -F newArch"}
{"input": "Identify CMS version/releases accross all your Drupal websites", "output": "find /home/*/public_html/ -type f -iwholename \"*/modules/system/system.info\" -exec grep -H \"version = \\\"\" {} \\;"}
{"input": "Mathematically add each line in \"filename\"", "output": "paste -sd+ filename | bc"}
{"input": "find all the directories in the current folder and change to these directories and run a command", "output": "find . -type d -exec sh -c 'cd -P -- \"{}\" && pwd -P' \\;"}
{"input": "Find all directories under and below parent_directory", "output": "find parent_directory -type d"}
{"input": "Assign the alias rm2g to a find command that removes any .tar file larger than 2 gigabytes.", "output": "alias rm2g=\"find / -type f -name *.tar -size +2G -exec rm -i {} \\;\""}
{"input": "set alias \"vv\" for command \"$(date)\"", "output": "alias -g vv=\"$(date)\""}
{"input": "Find all test.txt files/directories under current directory", "output": "find . -name test.txt"}
{"input": "Find files in the current directory and its sub-directories that begin with 'f'.", "output": "find . -name f* -print"}
{"input": "Search the system for files named \"findcommandexamples.txt\", ignoring the case", "output": "find  / -iname findcommandexamples.txt"}
{"input": "find all txt files under the current folder except ./directory folder", "output": "find -name \"*.js\" -not -path \"./directory/*\""}
{"input": "Display source and mount point of the file system containing /some/path.", "output": "df '/some/directory' | awk '{print $1, $6}'"}
{"input": "search for all html files in current folder folder and create a zip file of all these files", "output": "find . -type f -name \"*.html\" | zip -j all-html-files -@"}
{"input": "Check whether \"$path_in_question\" is a mount point", "output": "df $path_in_question | grep \" $path_in_question$\""}
{"input": "Find all .zip files in the current directory tree", "output": "find . -depth -name *.zip"}
{"input": "Search the current directory tree for files and directories whose names do not end in \".exe\" and \".dll\"", "output": "find . -not -name \"*.exe\" -not -name \"*.dll\""}
{"input": "Count the number of regular files with 755 permission under current directory tree", "output": "find . -type f -perm 755 | wc -l"}
{"input": "Find the top 5 biggest files", "output": "find . -type f -exec ls -s {} \\; | sort -n -r | head -5"}
{"input": "Search the current directory tree for executable regular files", "output": "find . -type f -executable -exec file {} \\; | grep -wE \"executable|shared object|ELF|script|a\\.out\""}
{"input": "Find recursively all regular files changed within the last 5 minutes starting from directory b", "output": "find b -type f -cmin -5"}
{"input": "Read a single line from standard input and save to variable \"line\"", "output": "read line"}
{"input": "Search the current directory tree for all files matching pattern \"*.rb\"", "output": "find . -name \"*.rb\""}
{"input": "Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files invoking sed as few times as possible", "output": "find /home/www/ -type f -exec sed -i 's/subdomainA\\.example\\.com/subdomainB.example.com/g' {} +"}
{"input": "Search the current directory for files whose names start with \"messages.\" ignoring SVN and CVS files", "output": "find \\( -name 'messages.*' ! -path \"*/.svn/*\" ! -path \"*/CVS/*\" \\) -exec grep -Iw uint {} +"}
{"input": "Output two lines of \"-tcp\"", "output": "yes -- \"-tcp\" | head -n 2"}
{"input": "search for the file, filename.txt in the current folder ( case insensitive search )", "output": "find . -iname filename.txt"}
{"input": "Find suspicious PHP files", "output": "find . -type f -name \"*.php\" -exec grep --with-filename \"eval(\\|exec(\\|base64_decode(\" {} \\;"}
{"input": "Search the *.code files from the current directory tree for string 'pattern'", "output": "find . -name '*.code' -print0 | xargs -0 grep -H 'pattern'"}
{"input": "Replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/home/www' directory tree and modify them in-place", "output": "find /home/www -type f -name '*.cpp'  -exec sed -i 's/previousword/newword/g' '{}' \\;"}
{"input": "Find all files that are set group ID to 10", "output": "find . -group 10 -perm -2000 -print"}
{"input": "create symbolic links in current directory to all files located in \"dir\" directory and have filename extension \"jpg\"", "output": "find dir -name \\*.jpg -print0 | xargs -0 -N1 ln -s"}
{"input": "Prints long listing of a last modified file in a current folder.", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \" | sed 's/.*/\"&\"/' | xargs ls -l"}
{"input": "Fetch a script from the web and interpert (run) it in the current shell, without writing the script to disk.", "output": "source <(wget -q -O - \"http://www.modulesgarden.com/manage/dl.php?type=d&id=676\")"}
{"input": "Set variable \"MAVEN_DEBUG_OPTS\" to \"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\" on Windows machines", "output": "set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"}
{"input": "List all files in the current directory tree that were last modified yesterday or later", "output": "find -newermt yesterday -ls"}
{"input": "Search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*", "output": "find . -mtime 0 -not \\( -name '*.swp' -o -regex '\\./es.*' -o -regex '\\./en.*' \\)"}
{"input": "See what files are executable by the file's owner and group", "output": "find -type f -perm -110"}
{"input": "Find all files whose names begin with 'Makefile' at the /usr/ports directory tree's level 3 and count the number of lines with NOPORTDOCS or NOPORTEXAMPLES in them.", "output": "find /usr/ports/ -name Makefile\\* -mindepth 3 -maxdepth 3 -exec egrep \"NOPORTDOCS|NOPORTEXAMPLES\" '{}' '+' | wc -l"}
{"input": "List all .svn files/directories under current directory", "output": "find . -name .svn -exec echo {} \\;"}
{"input": "Find all regular files with case insensitive pattern '*$1*' ($1 expands to first positional parameter and falls back to empty string when not given) under current directory tree and execute a command given by $2 (falls back to 'file' command when $2 is not given) with each of those files as arguments", "output": "find . -type f -iname '*'\"${1:-}\"'*' -exec ${2:-file} {} \\;"}
{"input": "Show directory sizes in KB and sort to give the largest at the end", "output": "du -sk $(find . -type d) | sort -n -k 1"}
{"input": "Print yesterday's date as yyy:mm:dd", "output": "date +%Y:%m:%d -d \"1 day ago\""}
{"input": "Find files with pattern \"*[!0-9][1-9].txt\"  and execute chmod and ls command with AND condition then sort the output", "output": "sudo find -name \"*[!0-9][1-9].txt\" -exec chmod 744 '*' {} \\; -a -exec ls -l {} \\; | sort | parallel ls -l"}
{"input": "Find all files/directories named 'top' (case insensitive) in the entire filesystem", "output": "find / -iname top"}
{"input": "Archive \"/source\" and all files under \"folder/\" to \"/dstfolder/\" on host \"remoteserver\" as user \"user\" without copying files that already exist", "output": "rsync -avz --ignore-existing /source folder/* user@remoteserver:/dstfolder/"}
{"input": "Find files ending in \"config\"", "output": "find .  -path '*/*config'"}
{"input": "Replace all occurrence of \"subdomainA.example.com\" with \"subdomainB.example.com\" in all files under /home/www and below", "output": "find /home/www/ -type f -exec sed -i 's/subdomainA\\.example.com/subdomainB.example.com/g' {} +"}
{"input": "Move each of the 'm?' directories in current directory to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory", "output": "find . -name 'm?' -type d -exec mv '{}' '{}.mbox' ';' -exec mkdir '{}.mbox/Messages' ';' -exec sh -c 'mv {}.mbox/*.emlx {}.mbox/Messages' ';'"}
{"input": "replace a word in all the regular/normal files in the current folder(doesn't actually modify the original file just displays the replaced text)", "output": "find . -type f -print0 | xargs -0 sed -i 's/Application/whatever/g'"}
{"input": "Find regular non-hidden files containing `some text' in their names with hidden directories optimization", "output": "find . -type d -path '*/\\.*' -prune -o -not -name '.*' -type f -name '*some text*' -print"}
{"input": "Resolve symbolic link of path of \"python2.7\"", "output": "readlink $(which python2.7)"}
{"input": "Find files associated with an inode", "output": "find . -inum 968746 -print"}
{"input": "Find all directories in the current directory tree whose names do not contain '.' and move their contents to the current directory", "output": "find . -type d ! -iname '*.*' | while read d; do mv $d/* .; done"}
{"input": "Find all directories under the current directory that is on the same filesystem, execute \"/tmp/count_em_$$\" with the directory as an argument, sort the result numerically from least value to greatest value", "output": "find . -mount -type d -print0 | xargs -0 -n1 /tmp/count_em_$$ | sort -n"}
{"input": "Print the contents of \"Little_Commas.TXT\"", "output": "cat Little_Commas.TXT"}
{"input": "Compress all files in the \"$FILE\" directory tree that were last modified 30 days ago and have not already been compressed with gzip", "output": "find $FILE -type f -not -name '*.gz' -mtime 30 -exec gzip {} \\;"}
{"input": "find all files in current folder which are bigger than 1 MB and move them to another folder", "output": "find . -size +1M -exec mv {} files \\+"}
{"input": "List and sort all leaf directories (directories which don't contain any sub-directory) under current directory", "output": "find . -type d | sort | awk '$0 !~ last \"/\" {print last} {last=$0} END {print last}'"}
{"input": "Continuously send ping requests to broadcast address \"10.10.0.255\" and print the IP addresses who respond", "output": "ping -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }'"}
{"input": "List first 20 files under current directory", "output": "find . -type f |xargs ls -lS |head -20"}
{"input": "Find all *.txt files except for those on other file systems", "output": "find / -name  \"*.txt\" -mount 2> /dev/null"}
{"input": "Find all files throughout the entire file hierarchy with the optional constraints of \u043e\u043f\u0446\u0438\u044f_\u043f\u043e\u0438\u0441\u043a\u0430, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 and/or \u043e\u043f\u0446\u0438\u044f_\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f.", "output": "find / [\u043e\u043f\u0446\u0438\u044f_\u043f\u043e\u0438\u0441\u043a\u0430] [\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435] \t[\u043e\u043f\u0446\u0438\u044f_\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f]"}
{"input": "Find all orm* files/directories under current directory", "output": "find . -name 'orm*'"}
{"input": "Move all files that contain \"Subject: \\[SPAM\\]\" to \"your_file\"", "output": "mv $(grep -l 'Subject: \\[SPAM\\]' | awk -F ':' '{print $1}') your_file"}
{"input": "List files under current directory which were modified, accessed or whose status were changed $FTIME ago and sort them and remove duplicate entries", "output": "(find . -type f -ctime $FTIME && find . -type f -atime $FTIME && find . -type f -mtime $FTIME) | sort | uniq"}
{"input": "Display the 'bash' manpage, going to the first occurence of \\' sequence of characters.", "output": "man bash | less -Ip \"\\\\\\'\""}
{"input": "Find the password file between sub-directory level 2 and 4", "output": "find -mindepth 3 -maxdepth 5 -name passwd"}
{"input": "Split \"database.sql\" into files of at most 100000 lines each with prefix \"database-\"", "output": "split -l 100000 database.sql database-"}
{"input": "set alias \"logspace\" for command \"find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \\; | awk '{print $5, $9 }'\"", "output": "alias logspace=\"find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \\; | awk '{print $5, $9 }'\""}
{"input": "Save the numerically greater value of \"$kf\" and \"$mp\" into variable \"gv\"", "output": "gv=$(echo -e $kf'\\n'$mp | sort -t'.' -g | tail -n 1)"}
{"input": "Search the current user's home directory and its sub-directories for any file that was modified less than 2 days ago or was modified after filename was last modified.", "output": "find ~/ -mtime -2 -o -newer filename"}
{"input": "Show a listing of files not modified in over 20 days or not accessed in over 40 days", "output": "find /mydir \\(-mtime +20 -o -atime +40\\) -exec ls -l {} \\;"}
{"input": "Remove newlines from the output of \"./series.bc\" and pipe into \"sed 's.\\\\..g'\"", "output": "./series.bc | tr -d '\\n' | sed 's.\\\\..g'"}
{"input": "Find files/directories with exactly read,write and execute permission for all (owner, group and others) under /path", "output": "find /path -perm 777"}
{"input": "search for a pattern in all the files in the current folder", "output": "find . | xargs grep <string-to-find>"}
{"input": "Execute \"1\" and write standard output and error to standard output and file \"${LOG_FILE}\"", "output": "exec 1 2>&1 | tee ${LOG_FILE}"}
{"input": "Find the total size of all the \".avi\" files in all the sub-folders below \"/mnt/iso\"", "output": "find /mnt/iso -name *.avi -printf \"%s\\n\" | paste -sd+ - | bc"}
{"input": "create directory dir", "output": "mkdir -p dir"}
{"input": "search  character special files called ' backup '  from  /usr directory downwards and print them .", "output": "find /usr -type c -name backup -print"}
{"input": "Print variable \"$OPTARG\" \"$opt\" times", "output": "yes \"$OPTARG\" | head -$opt"}
{"input": "search in current directory downwards all files whose size is less then 10 bytes", "output": "find .  -size -10c -print"}
{"input": "Copy file or directory 'gtest' from directory 'include' in current directory to /usr/include, preserving ownerships and permissions.", "output": "sudo cp -a include/gtest /usr/include"}
{"input": "display all the html files in the current folder excluding search in the path ./foo", "output": "find . -path \"./foo\" -prune -o -type f -name \"*.html\""}
{"input": "Log output of a command in screenlog.0 every 10 seconds", "output": "screen -d -m -L python test.py"}
{"input": "List files under $CURR_DIR which were modified, accessed or whose status were changed $FTIME ago and sort them and remove duplicate entries", "output": "sort <(cd $CURR_DIR && find . -type f -ctime $FTIME) <(cd $CURR_DIR && find . -type f -atime $FTIME) <(cd $CURR_DIR && find . -type f -mtime $FTIME) | uniq"}
{"input": "change owner and group of the directory  $dstdir\" to the user and group of the file \"$srcdir\"", "output": "chown $(stat -f%u:%g \"$srcdir\") \"$dstdir\""}
{"input": "Find and list all regular files", "output": "find . -type f -ls"}
{"input": "Make directory and parents as needed to \"$FINALPATH\"", "output": "mkdir -p \"$FINALPATH\""}
{"input": "Format time string @$TIMESTAMP according to default time format", "output": "date -d @$TIMESTAMP"}
{"input": "Get a list of all hidden files from the current directory tree", "output": "find . -type f -name '.*' -print0 | while IFS= read -r -d '' f; do basename \"$f\"; done"}
{"input": "Recursively copies '../include/gtest' directory to '~/usr/gtest/include/'.", "output": "cp -r ../include/gtest ~/usr/gtest/include/"}
{"input": "Finds PIDs of all running processes, gets executable binary of each process, and prints containing folder of each binary.", "output": "ps -A -o pid | xargs -I pid readlink \"/proc/pid/exe\" | xargs -I file dirname \"file\""}
{"input": "Removes files that are listed in file 'xaa'.", "output": "rm $(<xaa)"}
{"input": "Change to parent directory and resolve any symlinks in the resulting path, making the physical path the current one.", "output": "cd -P .."}
{"input": "Removes strings with pattern from file 'filename'.", "output": "grep -v \"pattern\" filename > filename2; mv filename2 filename"}
{"input": "find all the files that have been modified in the last 7 days,", "output": "find . -mtime -7 -print"}
{"input": "Save hexadecimal bytes 7 and 8 in binary file \"file.moi\" to variable \"year\"", "output": "year=$(od -t x2 --skip-bytes=6 --read-bytes=2 file.moi | head -1 | awk '{print $2}')"}
{"input": "Find all *.mp3 files under current directory", "output": "find . -name *.mp3"}
{"input": "Enables shell option 'direxpand'.", "output": "shopt -s direxpand"}
{"input": "Print current shell using process ID", "output": "ps  -ef | grep $$ | grep -v grep"}
{"input": "search for a file \"file\" in current folder and if the file is found quit !", "output": "find -name file -quit"}
{"input": "Print the names of all files and directories found in the current directory tree", "output": "find . -exec printf '%s\\0' {} \\;"}
{"input": "Calculate the md5 sum of the sorted list of md5 sums of all \".py\" files under \"/path/to/dir/\"", "output": "find /path/to/dir/ -type f -name *.py -exec md5sum {} + | awk '{print $1}' | sort | md5sum"}
{"input": "Print inode, permissions, size, and modification date of all files in the current directory tree as a list with an extra column prepended", "output": "tree -afispugD --inodes | awk '{FS=\"./\"; ORS=\"\"; printf(\"%-60s%s\\n\",$NF,$0)}'"}
{"input": "find all the files in the current folder which are modified after /bin/sh.", "output": "find . -newer /bin/sh"}
{"input": "Search for first match of the regex 're' in all *.coffee files under current directory", "output": "find . -name '*.coffee' -exec awk '/re/ {print;exit}' {} \\;"}
{"input": "Continuously send \"y\" to input of \"command\"", "output": "yes | command"}
{"input": "find a specfic video file in the current directory", "output": "find ./ -name \"foo.mp4\" -exec echo {} \\;"}
{"input": "Delete all .pyc files in the current directory tree", "output": "find . -name \"*.pyc\" | xargs -0 rm -rf"}
{"input": "Prints file.txt without the last N bytes", "output": "head -c -N file.txt"}
{"input": "find all the files in the current folder and display them in the sorted order of their name", "output": "find . | sort"}
{"input": "Recursively change the owner and group of \"subdir3\" to \"user3\"", "output": "chown user3:user3 -R subdir3"}
{"input": "Gets IP address of only primary network interface.", "output": "ifconfig `ip route | grep default | head -1 | sed 's/\\(.*dev \\)\\([a-z0-9]*\\)\\(.*\\)/\\2/g'` | grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" | head -1"}
{"input": "Find files in the current directory and below that are 2000 kB in size", "output": "find . -size 2000k -print"}
{"input": "Find all files/directories following symbolic links under current directory tree that are owned by 'root' user", "output": "find . -follow -uid 0 -print"}
{"input": "Set variable 'path' to name of current directory (without the containing directories).", "output": "path=$(basename $(pwd))"}
{"input": "Compose filepath as folder path where file $SRC is located, and lowercase filename of $SRC file, and save it in 'DST' variable", "output": "DST=`dirname \"${SRC}\"`/`basename \"${SRC}\" | tr '[A-Z]' '[a-z]'`"}
{"input": "Find all files in the current directory tree whose names end with the suffix \".keep.$1\", where $1 is the first command line argument, and remove that suffix", "output": "find . -type f -name \"*.keep.$1\" -print0 | while IFS= read -r -d '' f; do mv -- \"$f\" \"${f%.keep.$1}\"; done"}
{"input": "Find all files/directories named 'articles.jpg' under current directory tree", "output": "find . -name \"articles.jpg\""}
{"input": "Login in 'whatever.com' as user 'whoever' with X11 forwarding to enable GUI programs on remote to be run", "output": "ssh -X whoever@whatever.com"}
{"input": "Find all files under current directory and print them appending a null character at the end of each file paths", "output": "find . -type f -print0"}
{"input": "Find files under '/travelphotos' directory tree which are bigger than 200KB and do not have 2015 in their names", "output": "find /travelphotos -type f -size +200k -not -iname \"*2015*\""}
{"input": "Prepends date to ping output", "output": "ping www.google.fr | while read pong; do echo \"$(date): $pong\"; done"}
{"input": "ssh into default vagrant host without running \"vagrant ssh\"", "output": "ssh $(vagrant ssh-config | awk 'NR>1 {print \" -o \"$1\"=\"$2}') localhost"}
{"input": "display all the regular/normal files in the current folder which have been modified in the last 24 hours", "output": "find . -mtime 0 -type f"}
{"input": "display all the \".c\" files in the current directory", "output": "find . -name \\*.c -print"}
{"input": "Sets 'extglob' shell variable.", "output": "shopt -s extglob"}
{"input": "Gets MAC address of en0 network interface.", "output": "ifconfig en0 | grep -Eo ..\\(\\:..\\){5}"}
{"input": "Push the directory containing the first existing command found in all arguments to the directory stack.", "output": "pushd $(dirname `which $@`)"}
{"input": "Move all *foo* (case insensitive) directories under current directory to new paths obtained by replacing all occurrences of 'foo' (case insensitive) with 'Bar' in their paths", "output": "find . -type d -iname '*foo*' -exec bash -O nocasematch -c '[[ $1 =~ (foo) ]] && mv \"$1\" \"${1//${BASH_REMATCH[1]}/Bar}\"' -- {} \\;"}
{"input": "Save the number of bytes in \"$file\" after decompression into variable \"size\"", "output": "size=\"$(zcat \"$file\" | wc -c)\""}
{"input": "Search the current directory tree for files matching regular expression '^myfile[0-9][0-9]?$'", "output": "find . -\\( -name \"myfile[0-9][0-9]\" -o -name \"myfile[0-9]\" \\)"}
{"input": "Find all files/directories that are owned by user 'eric' under current directory tree", "output": "find -user eric -print"}
{"input": "create a backup of all the files in the folder /tmp and display the taken for this operation", "output": "timex find /tmp -print|backup -ivqf/dev/null"}
{"input": "Find all files/directories under current directory tree", "output": "find | xargs"}
{"input": "Find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded", "output": "find \"${searchpath}\" -type f -print0 | xargs -0 grep -l -E \"${string1}\".*\"${string2}\".*\"${string3}\""}
{"input": "Find all files in current directory and search for 'searchName' in those files and show errors for files that are not directly on the current directory", "output": "find ./ -name \"*\" -printf \"%f\\n\" | xargs grep \"searchName\""}
{"input": "Search the current directory tree for files named 'Subscription.java'", "output": "find . -name 'Subscription.java'"}
{"input": "Gets list of IP addresses of all network interfaces.", "output": "ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\\.){3}[0-9]*).*/\\2/p'"}
{"input": "Append \"deb blah ... blah\" to \"/etc/apt/sources.list\" as root", "output": "echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list > /dev/null"}
{"input": "Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script2' variable.", "output": "script2=`mktemp /tmp/.script.XXXXXX`;"}
{"input": "Save the user name in upper case of the current user in variable \"v\"", "output": "v=$(whoami | tr 'a-z' 'A-Z')"}
{"input": "Print numbers from 1 to 10 with 2 values per line", "output": "seq 10 | paste -sd\" \\n\" -"}
{"input": "Mount a read only ntfs filesystem", "output": "mount -t ntfs"}
{"input": "Find all directories under /home/me/\"$d\"", "output": "find /home/me/\"$d\" -type d"}
{"input": "Find all directories named 'files' under current directory and set read-write-execute permission for owner and group and no permission for other for those directories", "output": "find . -type d -name files -exec chmod ug=rwx,o= '{}' \\;"}
{"input": "Count number of lines in \"Sample_51770BL1_R1.fastq.gz\"", "output": "zcat Sample_51770BL1_R1.fastq.gz | wc -l"}
{"input": "Find all files/directories in entire file system that have  \"write\" bit set for either the owner, the group, or others", "output": "find / -perm /a+w"}
{"input": "Find all file paths under current directory, sort them numerically and show last 10 lines of output with only their paths", "output": "find . -type f -printf '%T@ %p\\n' | sort -n | tail -10 | cut -f2- -d\" \""}
{"input": "find all files under the current directory that end in \"foo\" and execute somecommand on each quoted filename", "output": "find . -name \"*.foo\" -exec somecommand \"{}\" \\;"}
{"input": "Change permissions to 644 for all regular files under the /path/to/dir/ tree unless these permissions are already set", "output": "find /path/to/dir/ -type f ! -perm 0644 -print0 | xargs -0 chmod 644"}
{"input": "Archive directory \".\" to \"server2::sharename/B\"", "output": "rsync -av . server2::sharename/B"}
{"input": "Read a line from standard input into variable \"date\" with prompt \"BGC enter something\", and storing typed backslash as backslash symbol", "output": "read -p 'BGG enter something:' -r data"}
{"input": "display all the header files  and cpp files in the current folder", "output": "find \\( -name '*.cpp' -o -name '*.h' \\) -print"}
{"input": "Mount image \"test\" to loop device \"/dev/loop0\"", "output": "sudo mount -o loop /dev/loop0 test"}
{"input": "Find all files and directories in the current directory tree with \"linkin park\" in their names and copy them to /Users/tommye/Desktop/LP", "output": "find . -iname \"*linkin park*\" -exec cp -r {} /Users/tommye/Desktop/LP \\;"}
{"input": "Find all files under current directory, calculate their md5sum and print each of the outputs to filename.md5 files", "output": "find . -type f | while read f; do g=`md5sum $f` > $f.md5; done"}
{"input": "Find all files under the current directory whose pathnames do not end with \"Video\", ignoring the case", "output": "find . -maxdepth 1 -not -iwholename '*Video'"}
{"input": "Find all files under ./lib/app and sort them", "output": "find ./lib/app -type f | sort"}
{"input": "find all the files which end with \".deb\" and display their base name (strip the extension)", "output": "find . -name '*.deb' -exec basename {} \\;"}
{"input": "remove all the core files in the current directory", "output": "/bin/find -name \"core\" \u2014 exec rm {} \\;"}
{"input": "display in a list of all the files that are bigger than 10KB in current folder", "output": "find . -size +10k -ls"}
{"input": "List all files in /home/bozo/projects directory tree that were modified within the last day", "output": "find /home/bozo/projects -mtime -1"}
{"input": "delete all the files in the current folder which are bigger than 1KB", "output": "find . -size +1024 ?print|xargs -i rm \\;"}
{"input": "Force create a hard link in \"/usr/local/bin\" to \"findpdftext\"", "output": "sudo ln -f \"findpdftext\" /usr/local/bin"}
{"input": "Change permissions of \".git/hooks/pre-commit\" to 777", "output": "sudo chmod 755 .git/hooks/pre-commit"}
{"input": "Find all directories under present working directory", "output": "find $PWD -type d"}
{"input": "Find all filenames ending with .c in the current directory tree", "output": "find -name \"*.c\""}
{"input": "Print a sorted list of unique directory paths in entire file system that match the pattern '<name_pattern>' in their names", "output": "find / -name '<name_pattern>' -type d | sort | uniq"}
{"input": "find all files in and under the current directory that have read, write and execute permissions set for all users.", "output": "find . -perm 777 -print"}
{"input": "List all hidden regular files from the current directory separating them with zeroes", "output": "find . -maxdepth 1 -type f -name '.*' -printf '%f\\0'"}
{"input": "Find all *.mp3 (case insensitive) files/directories under /tmp and remove them", "output": "find /tmp -iname '*.mp3' -print0 | xargs -0 rm"}
{"input": "List environment variables and their values whose name matches '^\\w*X\\w*'", "output": "set | grep -P '^\\w*X\\w*(?==)'"}
{"input": "List executable files in the current directory, sort the list and then display the differences between the list and file .gitignore.", "output": "find . -perm /111 -type f | sed 's#^./##' | sort | diff -u .gitignore -"}
{"input": "find all files which name contain 'foo' and path is not dir1 or dir2", "output": "find ! -path \"dir1\" ! -path \"dir2\" -name \"*foo*\""}
{"input": "Read a line from standard input into variable \"SSHPASS\" with prompt \"Password: \" and without echoing the input", "output": "read -p \"Password: \" -s SSHPASS"}
{"input": "Find all files/directories under current directory and print them twice in each line", "output": "find | xargs -i sh -c \"echo {} {}\""}
{"input": "find httpd.conf file in /etc directory", "output": "find /etc -name \"httpd.conf\""}
{"input": "Remove all directories called \"test\" from the /path/to/dir directory tree", "output": "find /path/to/dir -name \"test\" -type d -delete"}
{"input": "Find all the Sticky Bit set files in entire file system whose permission are 551", "output": "find / -perm 0551"}
{"input": "Remove spaces from output of \"echo aa | wc -l\"", "output": "echo aa | wc -l | tr -d ' '"}
{"input": "Find all files under current directory and pipe their contents to the wordfrequency command and then search for 'yourword' in the output", "output": "find . -type f | xargs cat | wordfrequency | grep yourword"}
{"input": "Find all files/directories under $1 which have at least read permission for their owner and set read permission for group for these files/directories", "output": "find $1 -perm -u+r -exec chmod g+r {} \\;"}
{"input": "find all the perl files in the current folder", "output": "find . -type f -name \"*.pl\""}
{"input": "Find all regular files under current directory tree excluding files from './dir1' (except './dir1/subdir1/) and './dir2' directories", "output": "find . \\( -not -path './dir1/*' -and -not -path './dir2/*' -or -path './dir1/subdir1/*' \\) -type f"}
{"input": "Print which files differ between dir1 and dir2, treating absent files as empty", "output": "diff --brief -Nr dir1/ dir2/"}
{"input": "Search the current directory tree for files whose name is \".note\", case insensitive", "output": "find -type d -exec find {} -maxdepth 1 \\! -type d -iname '.note' \\;"}
{"input": "find all text files in current folder and trim the extra spaces in all lines in these files ( MAC version )", "output": "find . -iname '*.txt' -type f -exec sed -i '' 's/[[:space:]]\\{1,\\}$//' {} \\+"}
{"input": "display files ending with \".ext\" in current folder excluding those that are present in the list list.txt", "output": "find -type f -name '*.ext' | grep -vFf list.txt"}
{"input": "Download \"https://s3.amazonaws.com/sampletest/sample.tar.gz\", unzip it, and untar it replacing filenames with \"old\" to \"new\"", "output": "curl https://s3.amazonaws.com/sampletest/sample.tar.gz | gunzip | pax -r -s \"/old/new/\""}
{"input": "Find empty regular files in /dir and its subdirectories", "output": "find /dir -type f -size 0 -print"}
{"input": "set alias \"cd-\" for command 'cd ${${(z)$(fc -l -1)}[3]}'", "output": "alias cd-='cd ${${(z)$(fc -l -1)}[3]}'"}
{"input": "Find directory \"/some/dir\" if it is empty", "output": "find /some/dir/ -maxdepth 0 -empty"}
{"input": "change the permissions of all the regular/normal files in the current folder", "output": "chmod 640 `find ./ -type f -print`"}
{"input": "Create a named screen session", "output": "screen -S main"}
{"input": "Search PATH for utilities called \"rename\", display the type of file (script, executable, ...) for each match found.", "output": "which -a rename | xargs file -L"}
{"input": "Find all .txt files in current  directory and rename with  .html .", "output": "find  . -type f -name \"*.txt\" -exec mv {} `basename {} .html` .html \\;"}
{"input": "Sort and print each unique line in \"myfile.txt\"", "output": "cat myfile.txt| sort| uniq"}
{"input": "Find all files in the current directory tree whose names are \".DS_STORE\" and delete them", "output": "find . -name \".DS_STORE\" -delete"}
{"input": "Unsets all locale variables.", "output": "unset $(locale|cut -d= -f1)"}
{"input": "Display a long listing of all directories under '/nas' directory tree", "output": "find /nas -type d -ls"}
{"input": "Find all files under current directory matching the pattern '[error,access,error_log,access_log,mod_jk.log]*.[0-9]*' in their names", "output": "find -name '[error,access,error_log,access_log,mod_jk.log]*.[0-9]*' -type f"}
{"input": "Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.", "output": "find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f"}
{"input": "List the directory paths of all file.ext files under present working directory", "output": "find `pwd` -name file.ext |xargs -l1 dirname"}
{"input": "print all lines after the last match of 'string match'", "output": "tac infile | sed '/string match/,$d' | tac"}
{"input": "Archive all \".txt\" files in the current directory to \"/path/to/dest\" keeping partially transferred files", "output": "rsync -aP --include=*/ --include=*.txt --exclude=* . /path/to/dest"}
{"input": "display all the files in the current directory and do not search in the sub directories", "output": "find . -maxdepth 0 -print"}
{"input": "Archive directory \"/mnt/data\" to \"/media/WD_Disk_1/current_working_data/\", deleting any extraneous files in destination, compress data during copy.", "output": "rsync -az --delete /mnt/data/ /media/WD_Disk_1/current_working_data/;"}
{"input": "use regex with find command", "output": "find . * | grep -P \"[a-f0-9\\-]{36}\\.jpg\""}
{"input": "Enables shell option 'progcomp'.", "output": "shopt -s progcomp"}
{"input": "Count the number of lines in \"/etc/fstab\"", "output": "cat /etc/fstab | wc -l"}
{"input": "Read a line from standard input and save each word in the bash array variable \"first\"", "output": "read -a first"}
{"input": "find all the files in current directory of size exactly 6MB.", "output": "find . -size 6M"}
{"input": "Print the list of files in the current directory tree skipping SVN files", "output": "find . -type d -name .svn -prune -o -print"}
{"input": "Find all files in current directory excluding hidden files, archive them and put the output into variable  full_backup_dir", "output": "full_backup_dir=\"$(find . -depth \\( -wholename \\./\\.\\* \\) -prune -o -print | cpio -oav)\""}
{"input": "Get the PID of rsync for the user that owns the process matching the pattern expanded by CID$client_id", "output": "pstree $(pgrep CID$client_id) -ap | sed -n 's/.*rsync,\\([0-9]*\\).*/\\1/p'"}
{"input": "Print the 10 most used commands", "output": "history | awk '{print $2}' | awk 'BEGIN {FS=\"|\"}{print $1}' | sort | uniq -c | sort -n | tail | sort -nr"}
{"input": "Set permissions to ug=rw,o= for files inside the ./default/files tree", "output": "find ./default/files -type f -exec chmod ug=rw,o= '{}' \\;"}
{"input": "Count the number of unique 3 to 6 character file extensions are in the current directory tree", "output": "find . -type f -name \"*.*\" | grep -o -E \"\\.[^\\.]+$\" | grep -o -E \"[[:alpha:]]{3,6}\" | awk '{print tolower($0)}' | sort | uniq -c | sort -rn"}
{"input": "Remove all .mpg files in the /home/luser directory tree", "output": "find /home/luser -type f -name '*.mpg' -exec rm -f {} \\;"}
{"input": "Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%Tc %p\\n'", "output": "find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%Tc %p\\n'"}
{"input": "Prints reversed content of a file 'myfile.txt' with string numbers.", "output": "grep -n \"\" myfile.txt | sort -r -n | gawk -F : \"{ print $2 }\""}
{"input": "Finds string with text \"string to be searched\" in any cased files like \"*.cs\" recursively in a current folder.", "output": "find ./ -type f -iname \"*.cs\" -print0 | xargs -0 grep \"content pattern\""}
{"input": "find for a word in all the regular files in the current directory", "output": "find . -type f -exec grep -li '/bin/ksh' {} \\;"}
{"input": "removes last N lines from file.txt", "output": "head -$(gcalctool -s $(cat file | wc -l)-N) file.txt"}
{"input": "find all the files in the folder /opt which have been modified exactly 20 days ago", "output": "find /opt -mtime 20"}
{"input": "Recursively search current directory for all files with name ending with \".t1\", change this to .t2", "output": "find . -name \"*.t1\" -exec rename 's/\\.t1$/.t2/' '{}' \\;"}
{"input": "Search the current directory recursively for regular files that have been changed less than 3 days ago and print 5 of them.", "output": "find . -type f -ctime -3 | tail -n 5"}
{"input": "Search for files greater than 20MB in the entire file system, display the path and file size and discard error reporting of the find command", "output": "find / -type f -size +20M -exec ls -lh {} \\; 2> /dev/null | awk '{ print $NF \": \" $5 }'"}
{"input": "search for files in the current folder ending with \".au\"", "output": "find -type f -name '*.au'"}
{"input": "Delete all regular files that reside in directory $OUTPUTDIR and below, and were last modified more than 7 days ago", "output": "find $OUTPUTDIR -type f -mtime +7 -delete"}
{"input": "Save the full path of command \"~/f\" to variable \"foo\"", "output": "foo=`which ~/f`"}
{"input": "Search directories /path/to/directory/folder{1..50} for .txt files, outputting only the names of the matched files stripped of the .txt suffix", "output": "find /path/to/directory/folder{1..50} -name '*.txt' -exec basename {} .txt \\; 2>/dev/null"}
{"input": "Removes all top-level empty folders within the current folder.", "output": "ls | xargs rmdir"}
{"input": "Find files/directories that does not have write permssion for group", "output": "find /path ! -perm /020"}
{"input": "Find and delete all core files in the user's home directory and below.", "output": "find ~/ -name 'core*' -exec rm {} \\"}
{"input": "find all files in the current folder that are not modified in the last 240 hours", "output": "find . -mtime +10 -print"}
{"input": "find all files in the current directory excluding those that end with .js or have the words .min or console in their name", "output": "find . -type f \\( -name \"*.js\" ! -name \"*-min*\" ! -name \"*console*\" \\)"}
{"input": "Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE.*CPAN'", "output": "find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE.*CPAN' '{}' '+' | wc -l"}
{"input": "Find all of jzb's files", "output": "find -user jzb"}
{"input": "Get a path name of a process id", "output": "ps -p 24297 -o comm --no-heading"}
{"input": "remove all the \".core\" files in the file system", "output": "find / -name \"*.core\" -print -exec rm {} \\;"}
{"input": "Changes group ownership of 'shared' to 'Workers'.", "output": "chgrp Workers shared"}
{"input": "find all the files in the home folder which end with \".tex\"", "output": "find ~ -iname '*.tex'"}
{"input": "Execute \"1\" and write output to standard output and file \"${LOG_FILE}\"", "output": "exec 1 | tee ${LOG_FILE}"}
{"input": "Gets MAC address of 'eth0' network interface.", "output": "ifconfig eth0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'"}
{"input": "Find all files & directory which have write permission for group , remove the permission from group", "output": "find . -perm -20 -exec chmod g-w {} ;  or  find . -perm -20 -print | xargs chmod g-w"}
{"input": "find all png images in the current folder and convert the to jpg images.", "output": "find . -name \"*.png\" -print0 | xargs -0 mogrify -format jpg -quality 50"}
{"input": "find all the symbolic links in the current folder and follow to the original file", "output": "find -L . -type l"}
{"input": "Change the owner of all \".txt\" files in directory tree \"/mydir\" to \"root\"", "output": "find /mydir -type f -name \"*.txt\" -execdir chown root {} ';'"}
{"input": "Find all regular files under $SOURCE directory tree that were modified more than $KEEP days ago and show only the names without the paths", "output": "find $SOURCE -type f -mtime +$KEEP | sed \u2018s#.*/##'"}
{"input": "Dump \"testscript.sh\" as 2 byte hexadecimale, printable characters, and octal values", "output": "od -xcb testscript.sh"}
{"input": "set alias \"mycd\" for command \"cd `echo $1`\"", "output": "alias mycd=\"cd `echo $1`\""}
{"input": "display all text files in the folder /user/directory which have been modified in today", "output": "find /user/directory/* -name \"*txt\" -mtime 0 -type f"}
{"input": "Display a list of files with sizes in decreasing order of size of all the regular files under $dir directory tree that are bigger than $size in size", "output": "find $dir -type -f size +$size -print0 | xargs -0 ls -1hsS"}
{"input": "List all files/directories with spaces in their names under ~/Library directory", "output": "find ~/Library -name '* *' -exec ls {} \\;"}
{"input": "Remount \"/dev/block/mtdblock3\" on \"/system\" with read only permission", "output": "mount -o remount,ro -t yaffs2 /dev/block/mtdblock3 /system"}
{"input": "display list of all the regular/normal files in the home folder which are exactly 6579 bytes", "output": "find /home/ -type f -size 6579c -exec ls {} \\;"}
{"input": "Print the ping statistics of 4 requests to \"www.google.com\"", "output": "ping -c4 www.google.com | awk '/---/,0'"}
{"input": "Format the date represented by time string @1267619929 according to default format and print it", "output": "date -ud @1267619929"}
{"input": "Finds file 'Subscription.java' and changes to containing folder.", "output": "cd `find . -name Subscription.java | xargs dirname`"}
{"input": "Print the help message for tree", "output": "tree --help"}
{"input": "Run \"command\" on server \"host\" as user \"user\"", "output": "echo \"command\" | ssh user@host"}
{"input": "Retrieve only build number of current kernel, ie. #104", "output": "uname -v | grep -o '#[0-9]\\+'"}
{"input": "Find all empty files in home directory", "output": "find ~ -empty"}
{"input": "search for a word in all the files in the current directory and display the list of matched files.", "output": "find . -type f -exec grep -l 'needle' {} \\;"}
{"input": "Count lines that are neither blanks nor comments in a file 'foo.pl'", "output": "cat foo.pl | sed '/^\\s*#/d;/^\\s*$/d' | wc -l"}
{"input": "Find all files excluding files ending with 'gz', 'tmp' and 'xftp' in their names in the current directory tree and compress them with gzip not preserving timestamp and original name", "output": "find . -type f ! \\( -name \"*gz\" -o -name \"*tmp\" -o -name \"*xftp\" \\) -exec gzip -n '{}' \\;"}
{"input": "Save the md5 sum hash of \"$my_iso_file\" to variable \"md5\"", "output": "md5=$(md5sum \"$my_iso_file\" | cut -d ' ' -f 1)"}
{"input": "change permission of all the files in the entire file system which have the permissions 777.", "output": "find / -type f -perm 0777 -print -exec chmod 644 {} \\;"}
{"input": "find all the directories in the current folder and create the same directory structure in a remote machine using ssh", "output": "find -type d | ssh server-B 'xargs -I% mkdir -p \"/path/to/dir/%\"'"}
{"input": "Find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print their parent directory paths", "output": "find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90  | sed 's|/[^/]*$||'"}
{"input": "Locate all *.csv files under the current directory tree", "output": "find . -name \"*.csv\""}
{"input": "Renames all *.html files in a current directory to *.txt files.", "output": "ls *.html | xargs -I {} sh -c 'mv $1 `basename $1 .html`.txt' - {}"}
{"input": "Remove files modified at least five days ago in directory trees /path/to/files*", "output": "find /path/to/files* -mtime +5 -exec rm {} \\;"}
{"input": "Print the common third whitespace separated fields in \"file1\" and \"file2\"", "output": "comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)"}
{"input": "Search files \"file-containing-can't\" in the current directory tree for the string \"can't\"", "output": "find . -name \"file-containing-can't\" -exec grep \"can't\" '{}' \\; -print"}
{"input": "rename all the png files to jpg files in the current fodler", "output": "find . -name \"*.png\" -print0 | sed 'p;s/\\.png/\\.jpg/' | xargs -0 -n2 mv"}
{"input": "Check if 'nullglob' shell option is enabled, and if so, saves its status in 'is_nullglob' variable.", "output": "is_nullglob=$( shopt -s | egrep -i '*nullglob' )"}
{"input": "Update the archive '2009.tar' with the files from the data/ directory tree that match pattern 'filepattern-*2009*'", "output": "find data/ -name filepattern-*2009* -exec tar uf 2009.tar {} ;"}
{"input": "Gets IP addresses of all active network interfaces and saves to 'ip' variable.", "output": "ip=$(ifconfig | grep -oP \"(?<=inet addr:).*?(?=Bcast)\")"}
{"input": "find a file in current folder and show all errors apart from permission denied", "output": "find /. -name 'toBeSearched.file' 2>&1 | grep -v 'Permission denied'"}
{"input": "find all the files within your home folder accessed more than 100 days ago", "output": "find ~ -atime 100"}
{"input": "Split \"/usr/bin/cat\" into 10000 files of about equal size", "output": "split -n 10000 /usr/bin/cat"}
{"input": "display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2", "output": "find . -type d -regextype posix-egrep -regex '\\./processor[[:digit:]]*/10\\.(1|2)'"}
{"input": "display all text, mpg, jpg files  in the folder /Users/david/Desktop", "output": "find /Users/david/Desktop -type f \\( -name '*.txt' -o -name '*.mpg' -o -name '*.jpg' \\)"}
{"input": "Copy *.mp3 files to /tmp/MusicFiles", "output": "find . -type f -name \"*.mp3\" -exec cp {} /tmp/MusicFiles \\;"}
{"input": "Find all the files in the current directory with \u201clinkin park\u201d in their names", "output": "find . -maxdepth 1 -iname \"*linkin park*\""}
{"input": "Split \"2011.psv\" into chunks of at most 50000000 lines each as input to \"./filter.sh\"", "output": "split -l 50000000 --filter=./filter.sh 2011.psv"}
{"input": "get all files in a current directory modified in the last 7 days", "output": "find . -mtime -7 -print0 | xargs -0 tar -cjf /foo/archive.tar.bz2"}
{"input": "find all \".flac\" files starting with \"cmn-\" and search for files having CJK characters using unicodes", "output": "find . -name 'cmn-*.flac' -print | grep -P '[\\x4e00-\\x9fa5]'"}
{"input": "Find and print all PDF files in the current directory and its sub-directories except for any found in the ./pdfs directory.", "output": "find . -name \"*.pdf\" -print | grep -v \"^\\./pdfs/\""}
{"input": "Find all *.jpg files and copy them to /", "output": "find / -type f -name *.jpg  -exec cp {} . \\;"}
{"input": "Opens new tmux session.", "output": "tmux"}
{"input": "display a long listing of the files in current folder which have been modified in the last 60 minutes", "output": "find . -mmin -60 |xargs ls -l"}
{"input": "Find all *.err files under current directory that are larger than 5120 bytes in size", "output": "find . -type f -size +10 -name \"*.err\""}
{"input": "Execute awk script \"script.awk\" on \"File2\" and \"File1\" and format output as a table", "output": "awk -f script.awk File2 File1 | rev | column -t | rev"}
{"input": "display all files in the current folder along with their last accessed timestamps", "output": "find . -printf \"%h/%f : dernier acc\u00e8s le %AA %Ad %AB %AY \u00e0 %AH:%AM:%AS\\n\""}
{"input": "In the current shell, interpret 'incl.sh' which is in the directory pointed by variable DIR", "output": "source \"$DIR/incl.sh\""}
{"input": "Extract rpm \"packagename\"", "output": "rpm2cpio packagename | cpio -ivd"}
{"input": "Find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command", "output": "find -maxdepth 1 -name '*.sql' -print0 \\; | xargs -0 sed -e 's/ , );/1,1);/g'  | mysql -D ootp"}
{"input": "Print the user name of the current user", "output": "whoami"}
{"input": "display all the regular files in current folder excluding all the directories and all the sub directories having \"normal\" in their name", "output": "find . \\( \\( -path \"\\.?.*\" -type d \\) -o -path \"*normal*\" \\) -prune -o \\( -type f \\) -print"}
{"input": "List all environment variables (name and value) whose name starts with GOROOT", "output": "env | grep '^GOROOT'"}
{"input": "Print the base name via grep of the current working directory", "output": "pwd | grep -o '[^/]*$'"}
{"input": "Find all files/directories named 'my.txt' in the entire filesystem", "output": "find / -name \"my.txt\""}
{"input": "Starts new window named 'win0' in detached tmux session 'vims', opens file 'foo' within.", "output": "tmux new-window -t vims -d -n \"win0\" \"vim foo\""}
{"input": "Find all files/directories with '.js' extension under current directory tree without descending into  and ignoring './directory' completely", "output": "find . -not \\( -path ./directory -prune \\) -name \\*.js"}
{"input": "Print login name and full name of all users currently logged in", "output": "finger -l | awk '/^Login/'"}
{"input": "Find all the SGID files in the current directory tree", "output": "find . -perm /g+s"}
{"input": "Calculate the md5 sum of the list of files in the current directory", "output": "find . -maxdepth 1 -type f | md5sum"}
{"input": "Save the list of files modified within a fortnight ago to `deploy.txt' stripping the file names of any leading directories", "output": "find . -type f -mtime -14 -printf '%f\\n' > deploy.txt"}
{"input": "Add \"prefix\" to every non-blank line in \"file.txt\"", "output": "nl -s prefix file.txt | cut -c7-"}
{"input": "run \"tar -xzvf ...\" as user $username", "output": "su $username -c tar xzvf .."}
{"input": "search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the disk usage of them", "output": "find . -mtime +180 -exec du -sh {} \\;"}
{"input": "Find files owned by no group", "output": "find / -nogroup"}
{"input": "Download \"http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz\", unzip it, and view the output in \"less\"", "output": "curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less"}
{"input": "Read a single sample of raw audio in the form of a number between -32768 and 32767", "output": "parec --raw --channels=1 --latency=2 | od -N2 -td2 | head -n1 | cut -d' ' -f2- | tr -d ' '"}
{"input": "Rename files from the current directory tree to the ASCII standard", "output": "find . -type f -exec bash -c 'for f do d=${f%/*} b=${f##*/} nb=${b//[^A-Za-z0-9._-]/_}; [[ $b = \"$nb\" ]] || echo mv \"$f\" \"$d/$nb\"; done' _ {} +"}
{"input": "Find *.pl files/directories under /users/tom", "output": "find /users/tom -name \"*.pl\""}
{"input": "Find files/directories that are newer than 'foo.txt' under current directory tree", "output": "find -newer foo.txt"}
{"input": "Find files that were modified less than 7 days ago and archive them", "output": "find . -type f -mtime -7 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`"}
{"input": "Search for 'keyword' in all javascript files under current directory tree excluding all paths that includes the directory 'node_modules'", "output": "find ./ -not -path \"*/node_modules/*\" -name \"*.js\" | xargs grep keyword"}
{"input": "Perform a case insensitive search for *.jpg files which are greater than 500KB in size under /ftp/dir/ directory", "output": "find /ftp/dir/ -size +500k -iname \"*.jpg\""}
{"input": "display a list of all java or jsp files in the current folders", "output": "find . \\( -name '*jsp' -o -name '*java' \\) -type f -ls"}
{"input": "Lists all files in a current folder, separating names with comma.", "output": "ls | sed '$!s/$/,/' | tr -d '\\n'"}
{"input": "Set up local port forwards in the background with no terminal or command execution from port 4431 to host \"www1\" port 443 and port 4432 to host \"www2\" port 443 via the host \"colocatedserver\"", "output": "ssh -fNT -L4431:www1:443 -L4432:www2:443 colocatedserver"}
{"input": "Print a count of all unique lines in \"ports.txt\" sorted from most frequent to least frequent", "output": "sort ports.txt | uniq -c | sort -r"}
{"input": "create a symbolic link named \"/usr/bin/my-editor\" to file \"/usr/share/my-ditor/my-editor-executable\"", "output": "ln -s /usr/share/my-ditor/my-editor-executable /usr/bin/my-editor"}
{"input": "Print content of all files found regarding seach options '[whatever]'", "output": "find [whatever] -exec cat {} +"}
{"input": "find all the php files in current folder and search for multiple patterns in these files", "output": "find -name '*.php' -exec grep -li \"fincken\" {} + | xargs grep -l \"TODO\""}
{"input": "List the files in the /etc directory tree containing text '128.200.34.'", "output": "find /etc -type f -print | xargs grep -il '128\\.200\\.34\\.'"}
{"input": "Find all files in maximum 2 levels down the current directory", "output": "find . -maxdepth 2  -type f"}
{"input": "Show a long listing of the latest file or directory under current directory", "output": "ls -lrt | tail -n1"}
{"input": "Prints long listing of file 'file.ext'.", "output": "ls -al file.ext"}
{"input": "find in $HOME files ending in \"txt\" and do nothing with them, or files ending in \"html\" and list them null separated.", "output": "find $HOME -name \\*txt -o -name \\*html -print0"}
{"input": "Search the /Path directory tree for files whose pathnames match pattern \"/Path/bar*\" and whose names match pattern \"file_name*\"", "output": "find /Path -path \"/Path/bar*\" -name \"file_name*\""}
{"input": "List jobs and their process ids and print them by replacing newline with '^'", "output": "joblist=$(jobs -l | tr \"\\n\" \"^\")"}
{"input": "Sets shell options 'extglob' and 'nullglob'.", "output": "shopt -s nullglob extglob"}
{"input": "Find all files whose names end with \"~\" in the /home/peter directory tree, following symlinks, and delete them", "output": "find -L /home/peter -name *~ -print0 |xargs -0 -r rm"}
{"input": "Print the set difference of \"command_which_generate_N\" and \"command_which_generate_M\"", "output": "comm -23 <(command_which_generate_N|sort) <(command_which_generate_M|sort)"}
{"input": "Copy \"fileName.txt\" to all directories listed in \"allFolders.txt\" - names may not contain spaces.", "output": "cat allFolders.txt | xargs -n 1 cp fileName.txt"}
{"input": "find all posix-extended regex  \"[a-f0-9\\-]\\{36\\}\\.jpg\" files", "output": "find . -regextype posix-extended -regex \"[a-f0-9\\-]\\{36\\}\\.jpg\""}
{"input": "Look for files with the name 'search' under current directory", "output": "find . -name \"search\""}
{"input": "Force create a symbolic link named \"$lines\" to \"$c\" without dereferencing \"$lines\"", "output": "ln -sfn \"$c\" \"$lines\""}
{"input": "Save the last modified time of file 'file_name' to variable 'STAMP'", "output": "STAMP=`date -r file_name`"}
{"input": "Create an empty file \"foo\" in each directory under the current directory containing a file named \"bar\".", "output": "find -name \"bar\" -execdir touch foo \\;"}
{"input": "Display difference between one.txt and two.txt side-by-side.", "output": "diff -y one.txt two.txt"}
{"input": "Execute `somecommand' on each file from the current directory tree with the environment variable f set to the filename", "output": "find . -exec env f={} somecommand \\;"}
{"input": "Find all subdirectories of the current directory and run comand \"cmd2\" for each of them", "output": "find -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done"}
{"input": "Change the user and group of all files and directories under /var/www to www-data:www-data", "output": "find /var/www -print0 | xargs -0 chown www-data:www-data"}
{"input": "Print a minimal set of differences between files in directories \"teste1\" and \"teste2\", treat absent files as empty, ignore differences in whitespace, treat all files as text, and print 3 lines of unified context", "output": "diff -burNad teste1 teste2"}
{"input": "Counts lines in each *.php file.", "output": "wc -l `tree -if --noreport | grep -e'\\.php$'`"}
{"input": "Print list of files that are only in directory /dir1 and not their sub directories and only their file names.", "output": "diff -q /dir1 /dir2 | grep /dir1 | grep -E \"^Only in*\" | sed -n 's/[^:]*: //p'"}
{"input": "Find all files/directories under maximum 1 level down the current directory and print their inode numbers and names", "output": "find . -maxdepth 1 -print0 | xargs -0 stat -c '%i %n'"}
{"input": "Convert multiple *.jpg files from JPEG to PDF format", "output": "find /path/to/files -iname '*.jpg' -exec mogrify -format pdf {} +"}
{"input": "Find files that were modified more than 7 days ago but less than 14 days ago and archive them", "output": "find . -type f -mtime +7 -mtime -14 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`"}
{"input": "login as user postgres", "output": "su - postgres"}
{"input": "Show all files that have not been accessed in the $HOME directory for 30 days or more", "output": "find $HOME -atime +30"}
{"input": "Delete all *.zip files under current directory that are older than 2 days", "output": "find . -name \"*.zip\" -mtime +2 -print0 | xargs -0 -I {} rm {}"}
{"input": "Print summary of new/missing files, and which files differ between dir_one and dir_two, sorted alphabetically.", "output": "diff -qr dir_one dir_two | sort"}
{"input": "run command \"R -e \\\"install.packages('shiny', repos='http://cran.rstudio.com/')\\\"\" as user root with a full login simulation", "output": "sudo su - -c \"R -e \\\"install.packages('shiny', repos='http://cran.rstudio.com/')\\\"\""}
{"input": "Find all files starting from the current directory which are exactly 100MB in size", "output": "find . -size 100M"}
{"input": "find all the files in the current folder which are writable", "output": "find . -writable"}
{"input": "Find files newer than start.txt but not newer than end.txt", "output": "find ./ -newer start.txt -and ! -newer end.txt"}
{"input": "Change the owner and group of \"uid_demo\" to \"root\"", "output": "sudo chown root:root uid_demo"}
{"input": "delete all text files in the home folder after user confirmation", "output": "find $HOME/. -name \"*.txt\" -ok rm {} \\;"}
{"input": "Print the first 10 files or directories found in the /tmp directory tree by `find'", "output": "find /tmp  | head"}
{"input": "display all the text files from the current folder and skip searching in skipdir1 and skipdir2 folders", "output": "find . \\( -name skipdir1 -prune , -name skipdir2 -prune -o -name \"*.txt\" \\) -print"}
{"input": "create a symbolic link with absolute path \"/cygdrive/c/Program Files\" to file \"/cygdrive/c/ProgramFiles\"", "output": "ln -s \"/cygdrive/c/Program Files\" /cygdrive/c/ProgramFiles"}
{"input": "Remove all Thumbs.db files from the current directory tree", "output": "find . -name Thumbs.db -exec rm {} \\;"}
{"input": "Delete all empty directories in the current directory tree", "output": "find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} `;`"}
{"input": "remove all files that's older than 30 days in '/tmp'", "output": "find /tmp -type f -mtime +30 -exec rm -f {} \\;"}
{"input": "Replace all instances of \"string\" with \"longer_string\" in file \"input.txt\" and re-align", "output": "cat input.txt | sed 's/string/longer_string/g' | column -t"}
{"input": "Recursively removes all files like '*.pyc' in a current folder, printing info message about each action.", "output": "find . -name \"*.pyc\" | xargs -I {} rm -v \"{}\""}
{"input": "Find all files/directories containing the case insensitive string something' in their names under current directory tree", "output": "find . -iname '*something*'"}
{"input": "Export variable \"PS1\" as the current username \"@\" the hostname", "output": "export PS1='$(whoami)@$(hostname):'"}
{"input": "find file named foo.txt under current directory.", "output": "find . -name foo.txt"}
{"input": "Brings down network interface eth0.", "output": "ifconfig eth0 down"}
{"input": "Print the list of files and directories of the current directory", "output": "find . ! -name . -prune"}
{"input": "Delete all files that have not been accessed in the last 30 days", "output": "find . -type f -atime +30 -exec rm {} \\;"}
{"input": "Search the current directory tree for a regular file named \"file_name\"", "output": "find . -type f -name file_name"}
{"input": "change user of the direct public_html to user owner and group nobody", "output": "chown owner:nobody public_html"}
{"input": "Remove empty directories from directory tree /srv/abc", "output": "find /srv/abc/ -type d -empty -exec rmdir {} \\;"}
{"input": "Remove lines matching \"kpt#\" from \"data.txt\" and add left-justified line numbers", "output": "grep -v 'kpt#' data.txt | nl -nln"}
{"input": "Display standard input as octal bytes", "output": "cat | od -b"}
{"input": "Finds IP address of 'en0' network interface.", "output": "ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'"}
{"input": "display long list of all the files in the folder /home/peter which belong to no user and change the owner,group of all these files (after user confirmation) to \"peter\",\"peter\"", "output": "find /home/peter -nouser -exec ls -l {} \\; -ok chown peter.peter {} \\;"}
{"input": "Unsets all environment variables with 'G4' in name.", "output": "unset `printenv |grep G4 |awk 'BEGIN{FS=\"=\";}{printf(\"%s \",$1);}'`"}
{"input": "List all files and directories residing in the current directory and below", "output": "find | xargs ls"}
{"input": "Find all *.m4a files under /home/family/Music directory", "output": "find  /home/family/Music -type f -name '*.m4a' -print0"}
{"input": "Prints full path of a 'cat.wav' file in a current folder.", "output": "ls $PWD/cat.wav"}
{"input": "Find all CDC* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files", "output": "find .  -type f -name \"CDC*\" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \\;"}
{"input": "search for a word in all the normal/regular files in the current folder", "output": "find . -type f | xargs grep \"text\""}
{"input": "Find empty files under test directory", "output": "find test -empty"}
{"input": "Finds shell options like 'checkjobs' with their state.", "output": "shopt -p | grep checkjobs"}
{"input": "Find all files under dir and calculate their md5sum and save the output to dir.md5", "output": "find dir -type f -exec md5sum {} + > dir.md5"}
{"input": "Print the list of files in directory /tmp/a1 recursively", "output": "find /tmp/a1"}
{"input": "Find files owned by the \"shadow\" group", "output": "find / -group shadow"}
{"input": "Find all files under minimum 1 level down the current directory", "output": "find .  -mindepth 1 -type f"}
{"input": "Displays information about all network interfaces in system, including inactive ones.", "output": "ifconfig -a"}
{"input": "Write output of \"ls -lR /\" to standard output and append to \"output.file\"", "output": "ls -lR / | tee -a output.file"}
{"input": "Search the current directory up to depth level 2 for files and directories", "output": "find . -maxdepth 2"}
{"input": "Show the list of files larger than 100 MB", "output": "find / -size +100M -print"}
{"input": "Run mycommand in /tmp without changing the current shell's working directory", "output": "( cd /tmp; mycommand )"}
{"input": "List all of the subdirectories in the current directory with no trailing slash.", "output": "ls -d */ | cut -f1 -d'/'"}
{"input": "Calculate the md5sum of the executable file of command \"cc\"", "output": "md5sum $(which cc)"}
{"input": "Moves file '$2' to the folder where '$1' file is located.", "output": "mv \"$2\" \"`dirname $1`\""}
{"input": "List the unique tab delimited field number \"$FIELD\" in all files, prefix with the number of occurrences, sort from most frequent to least frequent", "output": "cut -f $FIELD * | sort| uniq -c |sort -nr"}
{"input": "Find files and directories modified in last 24 hours", "output": "find . -mtime 1"}
{"input": "Creates temporary file in a TMPDIR folder or /tmp folder if TMPDIR doesn`t defined, with file name like current shell name and '-XXXXX'-formatted suffix, and saves created path to the 'tempFile' variable.", "output": "tempFile=\"$(mktemp \"${TMPDIR:-/tmp/}$(basename \"$0\")-XXXXX\")\""}
{"input": "Search the /path directory tree for files having permissions 777", "output": "find /path -perm ugo+rwx"}
{"input": "find all the javascript files in current folder using regular expressions", "output": "find . -regex '.+\\.js'"}
{"input": "Prepend \"foo\" to the file \"bar\"", "output": "{ echo foo; cat bar; } | tee bar > /dev/null"}
{"input": "Find all the files/directories under '/var/adm' directory tree that have not been modified in the last 3 days", "output": "find /var/adm -mtime +3 -print"}
{"input": "Save full path of command \"mktemp\" to variable \"MKTEMP\"", "output": "MKTEMP=`which mktemp`"}
{"input": "Find all directories in 1 level down the /home directory that have two consecutive vowels in their names and count them", "output": "find /home -mindepth 1 -maxdepth 1 -type d -name '*[aeiou][aeiou]*' -printf '*' | wc -c"}
{"input": "Search the current directory tree for all files matching regular expression \".*\\.rb$\"", "output": "find . -regex \".*\\\\.rb$\""}
{"input": "Find all regular files matching the name pattern '*.?htm*' under '/srv/www' and '/var/html' directory tree", "output": "find /srv/www /var/html -name \"*.?htm*\" -type f"}
{"input": "find all the perl files in the current folder and search for a pattern", "output": "find . -name '*.pl' | xargs grep -L '^use strict'"}
{"input": "list all system calls during process of symbolic link creation process on  \"/tmp/output.txt\" file", "output": "strace -o /tmp/output.txt ln -s -f .bash_aliases test"}
{"input": "Print the last 10 lines of '/var/log/syslog', printing out any additional data appended to the file", "output": "tail -f /var/log/syslog"}
{"input": "display all the files in the current folder for the files which have not been accessed in the last 24 hours", "output": "find . -type f -atime +1"}
{"input": "Search the .cs files of the current directory tree for string \"content pattern\"", "output": "find ./ -type f -iname \"*.cs\" -print0 | xargs -0 grep \"content pattern\""}
{"input": "Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them", "output": "find MyApp.app -name Headers -type d -exec rm -rf \"{}\" \\;"}
{"input": "Search the current directory tree for all .java files newer than the file build.xml", "output": "find . -name '*.java' -newer build.xml -print"}
{"input": "Calculate the sum of all the numbers from 1 to 10", "output": "seq 10 | jq -s 'add'"}
{"input": "Saves date of the first Sunday in month $mo of year $yo in the 'do' variable.", "output": "do=$(cal -m $mo $yo|awk 'NR>2&&!/^  /{print$1;exit}')"}
{"input": "Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy", "output": "find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents"}
{"input": "find all the reguar/normal php files in current directory.", "output": "find . -type f -name \"*.php\""}
{"input": "Write out the entire directory hierarchy from the current directory", "output": "find . -print"}
{"input": "Find all directories in the current directory tree that do not have `execute' permissions for anyone", "output": "find . -type d ! -perm -111"}
{"input": "Find one file or directory in the current directory whose name matches the pattern given as a variable $a", "output": "find . -maxdepth 1 -name \"$a\" -print -quit"}
{"input": "Recursively changes group ownership on every file in the ${WP_ROOT}/wp-content directory to ${WS_GROUP} group.", "output": "find ${WP_ROOT}/wp-content -exec chgrp ${WS_GROUP} {} \\;"}
{"input": "Find all files named \"file.ext\" within the current folder and print the path where each one is located", "output": "find `pwd` -name \"file.ext\" -exec echo $(dirname {}) \\;"}
{"input": "Find all 50MB files in file system", "output": "find / -size 50M"}
{"input": "Exchanges the top two directories in the dirs stack.", "output": "pushd"}
{"input": "Find all *.$input_file_type files/directories under $source_dir", "output": "find \"$source_dir\" -name *.$input_file_type"}
{"input": "find all the files in some directory which have not been modified in the last 7*24 hours", "output": "find <dir> -mtime +7"}
{"input": "Prints information about user $euids currently on machine and its processes, without printing header.", "output": "w -h $euids"}
{"input": "Print difference between two strings \"$s\" and \"$r\"", "output": "diff <(fold -w1 <<< \"$s\") <(fold -w1 <<< \"$r\") | awk '/[<>]/{printf $2}'"}
{"input": "Report file system disk space usage in human readable format", "output": "df -h"}
{"input": "delete all the empty in the current folder and all its sub directories", "output": "find . -depth -type d -empty -exec rmdir {} \\;"}
{"input": "Prints names of all configured software repositories.", "output": "yum repolist | tail -n +3 | grep -v 'repolist:' | cut -f1 -d' '"}
{"input": "Filter the contents of 'file' through sed commands written in 'commandfile', displaying the result.", "output": "sed -f commandfile file"}
{"input": "Find all directories named \"D\" in the current directory tree", "output": "find ./ -type d -name 'D'"}
{"input": "Delete all regular files named 'IMAGE1806.jpg' under current directory tree", "output": "find . -type f -name 'IMAGE1806.jpg' -delete"}
{"input": "change to a directory and search for a file in that directory", "output": "cd /nfs//office/ && find . -name '.user.log'"}
{"input": "Remove files from the file system that are owned by nobody, asking the user before each removal", "output": "find / -nouser -ok rm {} \\;"}
{"input": "Counts the number of lines in each file in a git repository, if file names may contain spaces.", "output": "git ls-files -z | xargs -0 wc -l"}
{"input": "Generate HTML <a> links to files under the /public/html/cosi directory tree whose name is \"wiki.phtml\"", "output": "find /public/html/cosi -name \"wiki.phtml -exec echo \"<a href=\\\"{}\\\">{}</a>\" \\;"}
{"input": "Write differences between files \"file1\" and \"file2\" to \"file3\".", "output": "diff -u file1 file2 > file3"}
{"input": "Search the current directory tree for .aux files", "output": "find . -name \".aux\""}
{"input": "Verbosely compresses all files on third and fourth depth level keeping original files in place.", "output": "bzip2 -kv */*/*"}
{"input": "Report file systems disk usage, elide all entries insignificant to available space, and produce a grand total.", "output": "df --total"}
{"input": "Print common lines in \"file1\" and \"file2\"", "output": "comm -12 file1 file2"}
{"input": "Make directory \"~/log\"", "output": "mkdir ~/log"}
{"input": "Search the current directory tree for directories lacking execute permissions for user, group, or others", "output": "find . -type d ! -perm -111"}
{"input": "Removes first and last parts of path 'test/90_2a5/Windows' and prints the result.", "output": "echo 'test/90_2a5/Windows' | xargs dirname | xargs basename"}
{"input": "Print the top 10 commands with their use count", "output": "history | awk '{print $2}' | awk 'BEGIN {FS=\"|\"}{print $1}' | sort | uniq -c | sort -nr | head"}
{"input": "List all directories found in the current directory and below.", "output": "find . -type d"}
{"input": "find files under the current directory containing a space in the filename and delete them", "output": "find . -name \"* *\" -exec rm -f {} \\;"}
{"input": "Append \" | COUNTRY\" to every line in \"file\"", "output": "yes '| COUNTRY' | sed $(wc -l < file)q | paste -d ' ' file -"}
{"input": "recursively change user of the direct public_html and all files into it to user owner", "output": "chown -R owner:owner public_html"}
{"input": "Find all the files that were modified within the last day", "output": "find . -mtime -1"}
{"input": "Calculate the crc32 of \"testring\"", "output": "echo -n teststring | gzip -1 | tail -c 8 | head -c 4 | hexdump -e '1/4 \"%08x\" \"\\n\"'"}
{"input": "Print three lines of \"some line \" followed by a random number", "output": "seq -f 'some line %g' 500 | nl | sort -R | cut -f2- | head -3"}
{"input": "Delete all files under and below the current directory", "output": "find -mindepth 1 -delete"}
{"input": "Find all regular files newer than '/tmp/$$' (where $$ expands to current process id) under '/tmefndr/oravl01' directory tree", "output": "find /tmefndr/oravl01 -type f -newer /tmp/$$"}
{"input": "Create an empty file with a carriage return character in its name.", "output": "echo -e \"Icon\\\\r\" | xargs touch"}
{"input": "display all normal/regular files in current  folder", "output": "find . -type f"}
{"input": "Display file type information for all instances of \"file\" in the current PATH.", "output": "which file | xargs file"}
{"input": "Search /usr/local for subdirectories whose names end with a number 0-9", "output": "find /usr/local -maxdepth 1 -type d -name '*[0-9]'"}
{"input": "search for all the files in the current folder which have spaces and force delete them", "output": "find . -name \"filename including space\" -print0 | xargs -0 rm -rdf"}
{"input": "Recursively finds strings with 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings.", "output": "egrep -R \"word-1|word-2\u201d directory-path"}
{"input": "change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names)", "output": "find . -type f -print0 | xargs -0 chown username"}
{"input": "Find all regular files under current directory non-recursively that have execute permission set for all (user, group and other)", "output": "find . -maxdepth 1 -type f -perm -uga=x"}
{"input": "Numerically sort file \"file.dat\" by the second word of each line and output from greatest value to least value", "output": "sort -nk 2,2 file.dat | tac"}
{"input": "Make directories to \"directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}\" as needed", "output": "mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}"}
{"input": "Compress all files under /source directory tree using gzip with best compression method", "output": "find /source -type f -print0 | xargs -0 -n 1 -P $CORES gzip -9"}
{"input": "Find all file paths under current directory, perform a reverse sort and show first 10 file paths with their status change time", "output": "find . -type f -printf \"%C@ %p\\n\" | sort -r | head -n 10"}
{"input": "Find all directories under $FOLDER, take the first fields (dot (.) as the delimiter) from their timestamps and reverse sort them numerically", "output": "find \"$FOLDER\" -type d -printf \"%T@\\n\" | cut -f 1 -d . | sort -nr"}
{"input": "Remove all regular files found in and below /path", "output": "find /path -type f -exec rm '{}' \\;"}
{"input": "Find all .* files excluding list_files (case insensitive) under current directory", "output": "find . -iname \".*\" \\! -iname 'list_files'"}
{"input": "Send command to named screen session with special characters", "output": "screen -x $PROCESS -p 0 -X stuff `printf \"stop\\r\"`"}
{"input": "Find all files under /home/myfolder that match the regex 'abc.*def.*ghi' in their contents", "output": "find /home/myfolder -type f -print0 | xargs -0 grep -l -E 'abc.*def.*ghi'"}
{"input": "Search the /var/www/ tree for files owned by root or unknown group and change their group to 'apache'", "output": "find /var/www -group root -o -nogroup -print0 | xargs -0 chown :apache"}
{"input": "Display differences between list of files in /bin and /usr/bin.", "output": "diff <(ls /bin) <(ls /usr/bin)"}
{"input": "find all the files in the current folder which have the word cache in them and do not search in the sub directories of the folder.", "output": "find . -name 'cache*' -depth -exec rm {} \\;"}
{"input": "find all the files in the entire file system whose size is exactly 15MB", "output": "find / -size 15M"}
{"input": "Remove all *~ files under current directory with confirmation prompt", "output": "find . -name '*~' -ok rm {} \\;"}
{"input": "Print numerically sorted list of unique strings from 'ip_addresses' file, with number of occurrences of each string.", "output": "sort -n ip_addresses.txt | uniq -c"}
{"input": "Print unique lines in \"file_a\" and \"file_b\"", "output": "sort file_a file_b|uniq -u"}
{"input": "Replace \"-\" with \"0\" in columns 4 and 5 of file \"test.in\" and format as a table", "output": "awk '{gsub(/-/,\"0\",$4);gsub(/-/,\"0\",$5)}1' test.in | column -t"}
{"input": "Set variable OS to the name of the operating system, ie. \"Linux\"", "output": "OS=$(uname -s)"}
{"input": "Print IP addresses of the current host", "output": "hostname -I|cut -d\" \" -f 1"}
{"input": "sleep for 500 seconds", "output": "sleep 500"}
{"input": "Change to folder where the oracle binary is.", "output": "cd \"$(dirname $(which oracle))\""}
{"input": "Display the 5 smallest files in the current directory and its sub-directories.", "output": "find . -type f -exec ls -s {} \\; | sort -n  | head -5"}
{"input": "Find all regular files under $d directory tree and change their permissions to 777", "output": "find \"$d/\" -type f -print0 | xargs -0 chmod 777"}
{"input": "Search the current directory recursively for .m4a files", "output": "find . -type f -iname *.m4a -print"}
{"input": "Add prefix like number and \"^M${LOGFILE}> \" to every non-blank line received on standard input", "output": "nl -s\"^M${LOGFILE}>  \""}
{"input": "Prints list of user 'myuser' groups in a format: 'groups: [comma-separated groups list]'.", "output": "echo \"groups: [ $(groups myuser | sed -e 's/.\\+\\s\\+:\\s\\+\\(.\\+\\)/\\1/g' -e 's/\\(\\s\\+\\)/, /g') ]\""}
{"input": "Print lines unique and common to sorted files \"file1\" and  \"file2\"", "output": "comm file1 file2"}
{"input": "Find all files/directories named file1 under current directory", "output": "find -name file1"}
{"input": "Prints total number of lines of all *.m and *.h files in a current folder and subfolders.", "output": "find ./ -type f -name \"*.[mh]\" -exec wc -l {}  \\; | sed -e 's/[ ]*//g' | cut -d\".\" -f1 | paste -sd+ - | bc"}
{"input": "Search the current directory recursively for regular files last accessed 2 days ago", "output": "find . type -f -atime 2"}
{"input": "Find all *~ files/directories under dir and  print an rm command for each of them for deletion", "output": "find dir -name \\*~ | xargs echo rm"}
{"input": "Print a single line of numbers from \"001\" to \"010\"", "output": "yes | head -n 10 | awk '{printf( \"%03d \", NR )}'    ##for 01..10"}
{"input": "Find all regular files under $dir directory tree with name pattern provided by the first positional parameter and show only the $num'th line from each of those files", "output": "find $dir -type f -name $1 -exec sed $num'q;d' {} \\;"}
{"input": "Find all *.dbf files/directories in entire file system", "output": "find / -name \"*.dbf\""}
{"input": "Find the oldest *.sql file under current directory", "output": "find . -name \\*.sql | xargs \\ls -1rc | tail -7 | head -1"}
{"input": "Print only group names from /etc/group.", "output": "cut -d: -f1 /etc/group"}
{"input": "set alias \"killaf\" for command \"kill -9 `psu|grep MF1pp|grep -v grep|awk '{print $2}'`\"", "output": "alias killaf=\"kill -9 `psu|grep MF1pp|grep -v grep|awk '{print $2}'`\""}
{"input": "Save the system host name to variable \"myHostName\"", "output": "myHostName=`hostname`"}
{"input": "display the list of all the text files present in the current directory excluding the search in certain paths.", "output": "find . -type f -name \"*.txt\" ! -path \"./Movies/*\" ! -path \"./Downloads/*\" ! -path \"./Music/*\" -ls"}
{"input": "Print the current shell", "output": "ps | tail -n 4 | sed -E '2,$d;s/.* (.*)/\\1/'"}
{"input": "Changes group ownership of 'myprogram' to ${USER} (the current user)", "output": "chgrp \"${USER}\" myprogram"}
{"input": "Rename recursively all files in the current directory tree that are called \"article.xml\" to \"001_article.xml\"", "output": "find . -name \"article.xml\" -exec rename 's/article/001_article/;' '{}' \\;"}
{"input": "List files in the current directory", "output": "find . \\( ! -name . -prune \\)"}
{"input": "Read the history file $HISTFILE and append the contents to the history list", "output": "history -r \"$HISTFILE\"     #Alternative: exec bash"}
{"input": "Enables shell option 'cmdhist'.", "output": "shopt -s cmdhist"}
{"input": "find all files in the current folder with the permission 777 and modify the permissions as 755.", "output": "find . -type f -perm 777 -exec chmod 755 {} \\;"}
{"input": "Execute \"script.awk\" on \"file\" and format the output as a table", "output": "awk -f script.awk file{,} | column -t"}
{"input": "tar all files in the current folder and ask for user confirmation before creating the tar ball", "output": "find . -ok tar rvf backup {} \\;"}
{"input": "find all files in the current directory do not display the files which are not readable", "output": "find . ! -readable -prune"}
{"input": "Find all files named 'foo' under current directory tree without descending into directories named 'foo'", "output": "find . -name foo -type d -prune -o -name foo -print"}
{"input": "Change permissions to 644 for all files in the current directory tree", "output": "find . -type f | xargs -I{} chmod -v 644 {}"}
{"input": "Find all directories in level 1 down the $queue directory", "output": "echo \"$queue\" | xargs -I'{}' find {} -mindepth 1 -maxdepth 1 -type d"}
{"input": "Count the number of areas that differ in \"file1\" and \"file2\" with 0 lines of unified context", "output": "diff -U 0 file1 file2 | grep ^@ | wc -l"}
{"input": "Print enumerated sorted list of all group names known to the system.", "output": "getent group | cut -d: -f1 | sort | cat -n"}
{"input": "find al the files which have been accesed in the last 6 days and display their details", "output": "find . -atime +6 -exec ll | more"}
{"input": "Sets the shell prompt to \"[USER@HOST]\" where USER is the current user and HOST is the short host name", "output": "set prompt=\\[`id -nu`@`hostname -s`\\]\\#\\"}
{"input": "Try to determine the type of contents in \"myfile\" located in user's home directory.", "output": "file ~/myfile"}
{"input": "List files smaller than 9kB residing in the current directory and below", "output": "find . -size -9k"}
{"input": "Find all *.php (case insensitive) and *.js files (case insensitive) under /home/jul/here excluding  /home/jul/here/exclude/* paths", "output": "find /home/jul/here -type f \\( -iname \"*.php\" -o -iname \"*.js\" \\) ! -path \"/home/jul/here/exclude/*\""}
{"input": "Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them beginning with USE_RC_SUBR", "output": "find /usr/ports/ -name Makefile -exec grep ^USE_RC_SUBR '{}' '+' | wc -l"}
{"input": "Search all files in the current directory tree that are named \"whatever\" for \"whatever\"", "output": "find . -name whatever -print | xargs grep whatever"}
{"input": "Display all symlinks and their targets in the current directory", "output": "find -P .  -maxdepth 1 -type l -exec echo -n \"{} -> \" \\; -exec readlink {} \\;"}
{"input": "Remove gitlab.site.org from root's known hosts file.", "output": "ssh-keygen -f \"/root/.ssh/known_hosts\" -R gitlab.site.org"}
{"input": "Remove blank lines and replace \" \" with \"/\" in \"struct.txt\" as input to make directories with parents as needed", "output": "sed '/^$/d;s/ /\\//g' struct.txt | xargs mkdir -p"}
{"input": "List all users logged into the current(null) tty", "output": "who | grep \"$(tty | sed 's:/dev/::')\""}
{"input": "Find all files whose names contain the string 'xpilot' which exist within '/usr/local/games'", "output": "find /usr/local/games -name \"*xpilot*\""}
{"input": "Find all files/directories under /myfiles that are 2560 bytes in size", "output": "find /myfiles -size 5"}
{"input": "Find the largest original \".gz\" file in the current directory tree", "output": "find . -name '*.gz' -print | xargs gzip -l | awk '{ print $2, $4 ;}'  | grep -v '(totals)$' | sort -n | tail -1"}
{"input": "Display human-readable file type description of utf8.txt", "output": "file utf8.txt"}
{"input": "Rename all files in the current directory starting with \"fgh\" to start with \"jkl\"", "output": "for f in fgh*; do mv \"$f\" $(echo \"$f\" | sed 's/^fgh/jkl/g'); done"}
{"input": "Convert all bmp files to png in the current directory tree", "output": "find . -name \"*bmp\" -print0 | xargs -0 -l -i basename \"{}\" \".bmp\" | xargs -0 -l -i convert \"{}.bmp\" \"{}.png\""}
{"input": "Recursively change the owner and group of all files in the current directory to \"andrewr\"", "output": "chown -R andrewr:andrewr *"}
{"input": "Find all files under current directory and print only the filenames (not paths)", "output": "find . -type f -printf \"%f\\n\""}
{"input": "Delete all filename* files under /dir directory", "output": "find /dir -name \"filename*\" -type f -exec rm {} \\;"}
{"input": "Find all *.txt files/directories under current directory and execute process command for each of them", "output": "find . -name '*.txt' -exec process {} \\;"}
{"input": "Run a shell in a named screen session", "output": "screen -x title"}
{"input": "Search all the regular files from the current directory tree for \"search string\"", "output": "find . -type f -print -exec grep --color=auto --no-messages -nH \"search string\" \"{}\" \\;"}
{"input": "Find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir", "output": "find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir"}
{"input": "Find files named 'core' in or below the directory /tmp and delete them", "output": "find /tmp -depth -name core -type f -delete"}
{"input": "Find files in the current directory tree that have one link", "output": "find . -links 1"}
{"input": "Print DISPLAY of \"orschiro\" user", "output": "who | awk -F '[()]' '/orschiro/{print $(NF-1)}' | grep -v orschiro | uniq"}
{"input": "Find all files under current directory matching the regex '.*\\(\\(error\\|access\\)\\(_log\\)?\\|mod_jk\\.log\\)\\.[0-9]+' in their paths", "output": "find -type f -regex '.*\\(\\(error\\|access\\)\\(_log\\)?\\|mod_jk\\.log\\)\\.[0-9]+'"}
{"input": "find all regular/normal files in the folder \"myfiles\" which have read and write permission to the other users", "output": "find /myfiles -type f -perm -o+rw"}
{"input": "Recursively changes group ownership of everything in 'files' to 'apache_user'.", "output": "chgrp -R apache_user files"}
{"input": "Find all .gz archives in the current directory tree", "output": "find . -name '*.gz'"}
{"input": "Find largest file in linux with find command", "output": "find . -type f -printf \"%s\\t%p\\n\" | sort -n | tail -1"}
{"input": "List the names of all file.ext files/directories under present working directory", "output": "find `pwd` -name \"file.ext\" -printf \"%f\\n\""}
{"input": "Delete all contents (including new lines) form the files that contain the regex 'string' in maximum 1 level down the / directory excluding other partitions", "output": "find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.*\\n//g'"}
{"input": "display all files in the current folder and do not search in the sub directories", "output": "find . -maxdepth 0"}
{"input": "Find all regular files that reside in the current directory tree and were last modified more than 5 days ago", "output": "find . -type f -mtime +5"}
{"input": "Prints information about active network interfaces in system.", "output": "echo \"$(ifconfig)\""}
{"input": "display all files ending with \"ini\" in current folder", "output": "find . -type f -name '*.ini'"}
{"input": "display all the files in the current folder which have been modified in the last 14*24 hours", "output": "find . -mtime -14 -print"}
{"input": "Display the last dot-separated field, in this case \"com\".", "output": "echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev"}
{"input": "Compress from standard input and print the byte count preceded with 'gzip.'", "output": "echo gzip. $( gzip | wc -c )"}
{"input": "Mount remote \"cifs\" filesystem \"//192.168.0.111/serv_share\" on \"/mnt/my_share\" with username \"me\" and password \"mine\"", "output": "sudo mount -t cifs -o username=me,password=mine //192.168.0.111/serv_share /mnt/my_share"}
{"input": "Find the top 5 small files", "output": "find . -type f -exec ls -s {} \\; | sort -n  | head -5"}
{"input": "find foo, Foo, FOo, FOO, etc.", "output": "find . -iname foo"}
{"input": "Prints the length, line number, and contents of the longest line in myfile", "output": "perl -ne 'print length().\"  line $.  $_\"' myfile | sort -nr | head -n 1"}
{"input": "Write \"Australia/Adelaide\" to standard output and to \"/etc/timezone\"", "output": "echo \"Australia/Adelaide\" | sudo tee /etc/timezone"}
{"input": "Store content of uncompressed file \"$file.fastq\" in variable \"reads\"", "output": "reads=$(zcat $file.fastq)"}
{"input": "Compress from standard input with gzip", "output": "gzip"}
{"input": "search for files in a directory and check the validity of a command by giving the  file as input", "output": "find \u2026 -print0 | xargs -0 -n1 invalid_command"}
{"input": "Removes all files from current folder but 5 newest ones.", "output": "rm `ls -t | awk 'NR>5'`"}
{"input": "Set permissions for all regular files under /var/www to 755", "output": "find /var/www -type f -print0 | xargs -0 chmod 644"}
{"input": "Remove newline characters from \"yourfile.txt\"", "output": "tr -d '\\n' < yourfile.txt"}
{"input": "Find the largest files in a particular location", "output": "find /home/tecmint/Downloads/ -type f -exec du -Sh {} + | sort -rh | head -n 5"}
{"input": "find all the cpp files in the current folder and move them to another folder", "output": "find . -type f -iname '*.cpp' -exec mv {} ./test/ \\;"}
{"input": "Find all files/directories under current directory that were accessed 30 minutes ago", "output": "find -amin 30"}
{"input": "Find all files under /home/username/public_html/sites/default/files and set their permission to 660", "output": "find /home/username/public_html/sites/default/files -type f -exec chmod 660 {} +"}
{"input": "Execute the 'echo' command on each file from the current directory tree individually", "output": "find . -exec echo {} \\;"}
{"input": "Counts number of *.php files in a current folder and subfolders.", "output": "find . -name '*.php' | wc -l"}
{"input": "Print last 10 commands in history with the first 7 characters removed", "output": "history 10 | cut -c 8-"}
{"input": "Change directory to \"/path/to/pdf\"", "output": "cd  /path/to/pdf"}
{"input": "Go to directory pointed by last element of array \"dirs\" in bash version 4.2", "output": "cd \"${dirs[-1]}\""}
{"input": "Set permissions to 600 for regular files under media/", "output": "find media/ -type f -exec chmod 600 {} \\;"}
{"input": "Find files in the current directory tree whose names begin with \"file\" and whose size is 0, and remove them", "output": "find -name 'file*' -size 0 -delete"}
{"input": "Gets IP addresses of all network interfaces.", "output": "ifconfig | grep ad.*Bc | cut -d: -f2 | awk '{ print $1}'"}
{"input": "Immediately kill all processes using TCP port 3000 on the system.", "output": "kill -9 $(lsof -i:3000 -t)"}
{"input": "search for a pattern in all the python files in the current folder. and save the output to a txt file", "output": "find . -name \"*.py\" -type f -exec sh -c 'grep \"something\" <\"$0\" >\"$0.txt\"' {} \\;"}
{"input": "Forward port 12345 bound on 'localhost' to port 12345 on 'otherHost' as user 'otherUser'", "output": "ssh -f -N -L localhost:12345:otherHost:12345   otherUser@otherHost"}
{"input": "SSH into \"111.222.333.444\" as user \"tunneluser\" without a pseudo-terminal and without interpreting bash variables locally", "output": "ssh -T tunneluser@111.222.333.444 <<'EOI'"}
{"input": "Print the $N'th line from file by replacing commas (',') with newlines", "output": "head -$N file | tail -1 | tr ',' '\\n'"}
{"input": "search for the file \"abc\" in the current folder or display all the directories", "output": "find . -name abc -or -type d"}
{"input": "Print string \"123\" once with '1' replaced by 'a' and second time replaced by 'b'", "output": "echo 123 | tee >(tr 1 a)  | tr 1 b"}
{"input": "Send SIGTERM signal to entire process tree starting from ID 24901 and below.", "output": "kill `pstree -p 24901 | sed 's/(/\\n(/g' | grep '(' | sed 's/(\\(.*\\)).*/\\1/' | tr \"\\n\" \" \"`"}
{"input": "print lines from last match of ^Statistics until end of file", "output": "tac INPUTFILE | sed '/^Statistics |/q' | tac"}
{"input": "list all files in /home/bozo/projects directory tree that were modified within the last day", "output": "find /home/bozo/projects -mtime -1"}
{"input": "Recursively change the owner of all files in \"/home/test\" to \"test\"", "output": "sudo chown -R test /home/test"}
{"input": "Execute 'top -n1 | grep mysql' every 2 seconds and highlight the differences between runs", "output": "watch -d 'top -n1 | grep mysql'"}
{"input": "Find all files under current directory and search for 'something' in those files", "output": "find . -exec grep something {} +"}
{"input": "Make directories \"bravo_dir\" and \"alpha_dir\"", "output": "mkdir bravo_dir alpha_dir"}
{"input": "Print the path names of all files and directories in the current directory tree", "output": "find -printf '\"%h/%f\" '"}
{"input": "Print summary of new/missing files, and which files differ between dir1 and dir2.", "output": "diff -q dir1 dir2"}
{"input": "search for files in the current folder ending with \".au\" and save the output to the file names.txt", "output": "find -type f -name '*.au' > names.txt"}
{"input": "Find all files called \"INPUT.txt\" in the current directory tree and remove lines starting with # in them, saving backup copies as INPUT.txt.bak", "output": "find . -type f -name INPUT.txt -print0 | xargs -0 sed -i.bak '/^#/d'"}
{"input": "list all regular files under the directory \"$directory\"", "output": "find $directory -type f -name '*'"}
{"input": "ssh into default vagrant host without running \"vagrant ssh\" and without an interactive ssh shell", "output": "vagrant ssh-config --host default | ssh -F /dev/stdin default"}
{"input": "Counts all files in a DIR_NAME folder and subfolders.", "output": "find DIR_NAME -type f | wc -l"}
{"input": "Find not-executable files under /home/www", "output": "find /home/www/ ! -executable"}
{"input": "Starts tmux session 'name', forcing tmux to assume the terminal supports 256 colours, and executes defined script within.", "output": "tmux -2 new-session -s name \"another_script.sh $1\""}
{"input": "Gets IP address of 'en1' network interface.", "output": "ifconfig en1 | sed -n '/inet addr/s/.*addr.\\([^ ]*\\) .*/\\1/p'"}
{"input": "Finds if 'subversion' package is installed in system.", "output": "yum list | grep subversion"}
{"input": "Find all $2 files in $1 path and search for the regex expanded by $3 in those files excluding the files with /proc in their paths", "output": "find $1 -name \"$2\" | grep -v '/proc' | xargs grep -Hn \"$3\" {} \\;"}
{"input": "Sort the lines of the file 'temp.txt' and change it in-place", "output": "sort temp.txt -otemp.txt"}
{"input": "Assign a name when starting a screen session", "output": "screen -S lynx lynx"}
{"input": "change owner and group of the file dir1 to user root and group  specialusers", "output": "chown root:specialusers dir1"}
{"input": "Find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file", "output": "find . -iname \"*.mov\" -printf \"%p %f\\n\" | xargs -l bash -c 'echo ffmpeg -i $0 -f flv $1' | xargs"}
{"input": "Synchronize \"/path/to/dir_a\" with files in \"/path/to/dir_b/\" if the files are newer", "output": "rsync -rtuv /path/to/dir_b/* /path/to/dir_a"}
{"input": "Send the contents of \"file\" as input to \"clipboard\"", "output": "cat file | clipboard"}
{"input": "Find all xx* files/directories excluding 'xxx' files/directories under your home directory", "output": "find ~ -name 'xx*' -and -not -name 'xxx'"}
{"input": "find all the empty directories in current folder and delete them", "output": "find ./ -empty -type d -delete"}
{"input": "Filters out strings, using the extended regexp pattern '^#|^$|no crontab for|cannot use this program' from \"$USERTAB\"", "output": "echo \"$USERTAB\"| grep -vE '^#|^$|no crontab for|cannot use this program'"}
{"input": "Send SIGTERM (signal 15) to all processes using TCP port 6000 on the system using root account.", "output": "sudo kill -15 $( sudo lsof -i:6000 -t )"}
{"input": "Format the output of \"...\" as a tab separated table", "output": "... | column -s$'\\t' -t"}
{"input": "Sort \":\" delimited lines in \"test.txt\" by the first and third field preserving only unique lines", "output": "sort -u -t : -k 1,1 -k 3,3 test.txt"}
{"input": "List all files/directories under current directory with 'FooBar' in their names ensuring white space safety", "output": "find . -name 'FooBar' -print0 | xargs -0"}
{"input": "Rename all .jpg files to .jpeg under the current directory and below", "output": "find  | rename 's/\\.jpg$/.jpeg/'"}
{"input": "Print your/dir if it's an empty directory", "output": "find your/dir -prune -empty -type d"}
{"input": "unzip and search for a word in all the jar files in the current folder and display the matched file name", "output": "find . -iname '*.jar' -printf \"unzip -c %p | grep -q '<stringWithOrWithoutSpacesToFind>' && echo %p\\n\" | sh"}
{"input": "Search for all files in the /home directory tree that have the same inode number", "output": "find /home -xdev -inum 2655341"}
{"input": "set alias \"X\" for command \"| cut -d' ' -f2\"", "output": "alias -g X=\"| cut -d' ' -f2\""}
{"input": "list all the sqlite files in the current folder", "output": "find ./ -name \"*.sqlite\" -ls"}
{"input": "Output a CSV file as a formatted table", "output": "sed 's/^,/ ,/' test2.csv | tr -d \\\" | column -s, -t"}
{"input": "Find all file.ext files/directories under present working directory and print . for each of them", "output": "find `pwd` -name \"file.ext\" -exec echo $(dirname {}) \\;"}
{"input": "search for files in the current folder which start with \"myfile\" ( case insensitive search )", "output": "find . -iname 'MyFile*'"}
{"input": "compress all the non-compressed  files in the current directory.", "output": "find . \\! -name \"*.Z\" -exec compress -f {} \\;"}
{"input": "Count the number of lines in all \".php\" files in the current directory tree", "output": "find . -name '*.php' -type f | xargs cat | wc -l"}
{"input": "Copies all files under the current folder like \"file.ext\" with \"FooBar\" in the path to the root of the current folder, preserving mode, ownership and timestamp attributes.", "output": "find . -name \"file.ext\"| grep \"FooBar\" | xargs -i cp -p \"{}\" ."}
{"input": "search for dbmsspool.sql file in the current folder", "output": "find . -print|grep ?i dbmspool.sql"}
{"input": "display the contents of all the regular files in the current folder and save the output to out.txt", "output": "find . -type f | xargs cat > out.txt"}
{"input": "find md5sum of a string stored in $pass", "output": "printf '%s' \"$pass\" | md5"}
{"input": "Print standard input to standard output line by line, discarding any adjascent duplicate lines.", "output": "uniq"}
{"input": "Locate all .txt files in and below the current directory", "output": "find . -name \"*.txt\""}
{"input": "Search history for \"part_of_the_command_i_still_remember_here\"", "output": "history | grep 'part_of_the_command_i_still_remember_here'"}
{"input": "Print list of disk and mountpoint of disks matching \"/dev/sd*\" into \"mount_point\" as a background task", "output": "mount | grep -i \"/dev/sd.*\" | awk '{ print NR \"\\t\" $1 \"\\t\" $3 }' > mount_output &"}
{"input": "Print unique lines of sorted file \"A.txt\" compared to sorted file \"B.txt\"", "output": "comm -23 <(sort -u A.txt) <(sort B.txt)"}
{"input": "Find all TXT files in the current directory and copy them to directory \"$HOME/newdir\"", "output": "find \"$HOME\" -name '*.txt' -type f -print0 | sort -zu | xargs -0 cp -t \"$HOME/newdir\""}
{"input": "Recursively finds file some_file_name.xml file and prints strings with \"PUT_YOUR_STRING_HERE\" preceding each found string with file name.", "output": "find . -type f -name some_file_name.xml -exec grep -H PUT_YOUR_STRING_HERE {} \\;"}
{"input": "Print the last 10 commands in history", "output": "history | tail"}
{"input": "find all the directories in the home folder do not search in sub directories", "output": "find /home -maxdepth 1 -type d"}
{"input": "Receive input and print it to terminal preceeding with line number", "output": "cat -n"}
{"input": "search for a word in all the files in the current directory", "output": "find . -exec grep chrome {} \\;"}
{"input": "change user and group of the file bin to user and group root:wheel", "output": "sudo chown root:wheel bin"}
{"input": "display all the regular files in the current folder excluding those that are present in the path \"git\"", "output": "find . -path \"*.git\" -prune -o -type f -print"}
{"input": "Display all files in a folder", "output": "find /usr/X11/man/man5 -print"}
{"input": "Print environment variable \"IFS\" and its value", "output": "set | grep ^IFS="}
{"input": "Find all files in the current directory tree whose pathnames match pattern \"./sr*sc\"", "output": "find . -path \"./sr*sc\""}
{"input": "Count the number of equal lines in \"file1.txt\" and \"file2.txt\"", "output": "comm -12 <(sort file1.txt) <(sort file2.txt) | wc -l"}
{"input": "Make directory \"backup\"", "output": "mkdir backup"}
{"input": "display a long list of all the files that are bigger than 10KB in current folder and save the output to the file myLogTxt.text", "output": "find . -size +10k -type f -maxdepth 1 -exec ls -lh {} \\; > myLogFile.txt"}
{"input": "Remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node.1'", "output": "rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1"}
{"input": "find all the files in the home folder that have not been modified in the last one year", "output": "find $HOME -mtime +365"}
{"input": "Move all directories in the current directory that match \"some-dir\" to \"x/\"", "output": "find ./ -maxdepth 1 -name \"some-dir\" -type d -print0 | xargs -0r mv -t x/"}
{"input": "Print variable \"$opt\" with double quotes deleted", "output": "echo \"$opt\" | tr -d '\"'"}
{"input": "display long listing of all the files that have been changed in the last 4 days, daystart is used to compare from the starting of day i.e, at 00:00", "output": "find . -daystart -ctime 4 -ls -type f"}
{"input": "Perform syntax check on all PHP files in the current directory tree", "output": "find . -name \\*.php -type f -print0 | xargs -0 -n1 php -l"}
{"input": "Print all file/directory paths under current directory", "output": "find -print0 | while IFS= read -rd $'\\0' f ; do echo \"[$f]\" ; done"}
{"input": "Change the group of all directories (except those with a '.') under current directory tree to a group with the same name as the directory name", "output": "find . -type d | sed -e 's/\\.\\///g' -e 's/\\./avoid/g' | grep -v avoid | awk '{print $1\"\\t\"$1}' | xargs chgrp"}
{"input": "Print the names of all hidden regular files from the current directory", "output": "find . -maxdepth 1 -type f -name '.*' -exec basename {} \\;"}
{"input": "Change the permission to 0644 for all files under current directory", "output": "find . -type f -exec chmod 0644 {} +"}
{"input": "Force delete all the regular/normal files in the current folder and do not search in the sub folders   (print0 is used to handle files which have newlines in their names or files with the name only as spaces )", "output": "find . -maxdepth 1 -type f -print0 | xargs rm -f"}
{"input": "Check if files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago were not found and print old if that's true", "output": "[[ \"$(find . -maxdepth 1 -cmin +60 -name file)\" = \"\" ]] && echo \"old\""}
{"input": "Remove directories in /media/1Tb/videos modified more than 7 days ago", "output": "find /media/1Tb/videos -maxdepth 1 -type d -mtime +7 -exec rm -rf {} \\;"}
{"input": "List all *.txt files under current directory that match 'foo=' in their file information", "output": "find . -name \"*.txt\" -type f -print | xargs file | grep \"foo=\" | cut -d: -f1"}
{"input": "Find all the files whose name is FindCommandExamples.txt and contains both capital and small letters in / directory", "output": "find  / -iname findcommandexamples.txt"}
{"input": "Force create a symbolic link without dereferencing named \"mylink\" to \"dir2\"", "output": "ln -nsf dir2 mylink"}
{"input": "display all the details of empty files in current folder", "output": "find . -size 0 -printf '%M %n %u %g %s %Tb\\n \\b%Td %Tk:%TM %p\\n'"}
{"input": "create an archive excluding files and directories matching {*.png, *.mp3, *.wav, .git, node_modules}", "output": "tar --exclude={*.png,*.mp3,*.wav,.git,node_modules} -Jcf ${target_tarball}  ${source_dirname}"}
{"input": "Force create a symbolc link named \"new_dir\" to \"/other/dir\" without dereferencing \"new_dir\"", "output": "ln -sfn /other/dir new_dir"}
{"input": "Find & Substitute Only 2nd Occurrence of a Word Using sed s//2 in all .txt files", "output": "find . -type f -name \"*.txt\" -exec sed 's/Linux/Linux-Unix/2' thegeekstuff.txt"}
{"input": "Display total apparent size of a file", "output": "du -sb"}
{"input": "search for all the directories in a folder and give them as input to the python script", "output": "find /stuff -type d -exec script.py {} +"}
{"input": "Removes everything from current folder but '*ddl*' and '*docs*' files.", "output": "ls -1|grep -v -e ddl -e docs| xargs rm -rf"}
{"input": "find all the files that have been modified in the last 60 minutes", "output": "find -mmin -60"}
{"input": "Execute md5sum command on files found by the find command", "output": "find -iname \"MyCProgram.c\" -exec md5sum {} \\;"}
{"input": "Find files/directories with inode number '212042' under '/var' directory tree without traversing other devices/partitions", "output": "find -x /var -inum 212042"}
{"input": "Mathematically sum all numbers in \"file.txt\"", "output": "cat file.txt | xargs  | sed -e 's/\\ /+/g' | bc"}
{"input": "find all the files  in the entire file system which belong to the user with the uid 1005 and discard all the errors", "output": "find / -uid 1005 2>/dev/null"}
{"input": "Find all regular files with '.txt' extension excluding 'README.txt' files under current directory tree", "output": "find . -type f -name \"*.txt\" ! -name README.txt -print"}
{"input": "Starts new detached tmux session and runs command $CMD within.", "output": "tmux new -d \"bash -c \\\"$CMD\\\"\""}
{"input": "Use \"/var/log/wtmp\" and print IPs and search for \"^msw.*127.0.0.1\"", "output": "who --ips /var/log/wtmp | grep '^msw.*127.0.0.1'"}
{"input": "Run the find command with all positional parameters", "output": "find \"$@"}
{"input": "search for all the files in the current folder which start with \"my\"", "output": "find . -name 'my*'"}
{"input": "Remove regular files whose names match Perl regular expression '\\w+-\\d+x\\d+\\.\\w+$' from the current directory tree", "output": "find -type f  |  grep -P '\\w+-\\d+x\\d+\\.\\w+$' | sed -re 's/(\\s)/\\\\\\1/g' | xargs rm"}
{"input": "Split \"hugefile.txt\" into files with 100000 lines each starting with \"part.\" and using numeric suffixes", "output": "split -a4 -d -l100000 hugefile.txt part."}
{"input": "Gets IP address of ${NET_IF} network interface.", "output": "NET_IP=`ifconfig ${NET_IF} | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'`"}
{"input": "Make directory \"temp\"", "output": "mkdir temp"}
{"input": "display all regular files in current folder which have spaces in their name", "output": "find -type f -name \"* *\""}
{"input": "Print numbered list of all top-level files in the current directory, with name containing 'android'", "output": "ls | grep \"android\" | cat -n"}
{"input": "Prints long listing of ${0} file.", "output": "ls -l ${0}"}
{"input": "Archive all filepattern-*2009* files/directories under data/ into 2009.tar", "output": "find -x data -name \"filepattern-*2009*\" -print0 | tar --null --no-recursion -uf 2009.tar --files-from -"}
{"input": "check if named screen session exists", "output": "screen -list | grep -q \"myscreen\""}
{"input": "Counts lines of 'file' file.", "output": "wc -l file"}
{"input": "Find all directories under and below /root that match pattern \"*linux*\", case insensitive", "output": "find  /root -type d -iname \"*linux*\""}
{"input": "Connect to \"$USER_AT_HOST\" using connection sharing on \"$SSHSOCKET\" and request the master to exit", "output": "ssh -S \"$SSHSOCKET\" -O exit \"$USER_AT_HOST\""}
{"input": "Print yesterday's date information in \"%a %d/%m/%Y\" format", "output": "date -d \"-1 days\" +\"%a %d/%m/%Y\""}
{"input": "Find file `filename.txt' in the current directory tree and edit it with `vi'", "output": "find . -type f -name filename.txt -exec vi {} +"}
{"input": "Send SIGTERM signal to any process which 'ps' lists as \"python csp_build.py\"", "output": "ps aux | awk '$11\" \"$12 == \"python csp_build.py\" { system(\"kill \" $2) }'"}
{"input": "List files in the current directory tree using echo", "output": "find . -exec echo {} ;"}
{"input": "Search the system for 'dead' symbolic links", "output": "find / -type l -print | perl -nle '-e || print';"}
{"input": "display all the files in the file system which belong to the user \"wnj\" and which are modified after the file \"ttt\"", "output": "find / -newer ttt -user wnj -print"}
{"input": "search for the word echo all the bash files(files ending with .bash) in the current folder", "output": "find . -name \"*.bash\" |xargs grep \"echo\""}
{"input": "Find directories that are directly under /home/user/workspace directory (no-subdirectories) and were modified more than 30 days ago and print a message saying that the directory wasn't modified during last 30 days", "output": "find /home/user/workspace -mindepth 1 -maxdepth 1 -type d -mtime +30 -execdir echo \"It seems that {} wasn't modified during last 30 days\" ';'"}
{"input": "find all hidden files in the current folder which have been modified after profile file", "output": "find . -type f -name \".*\" -newer .cshrc -print"}
{"input": "Remove all *.mp3 files in tmp directory but not in it's subdirectories", "output": "find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    -n1 rm"}
{"input": "display all instances  of the file tkConfig.sh in the folder /usr", "output": "find /usr -name tkConfig.sh"}
{"input": "Print the contents of \"my_script.py\"", "output": "cat my_script.py"}
{"input": "Swap \"new\" and \"old\" files or directories", "output": "mv new old -b && mv old~ new"}
{"input": "converts all absolute symbolic links to relative symbolic links", "output": "find . -lname \"`pwd`*\" -exec sh -c 'ln -snvf `python -c \"from os.path import *; print relpath(\\\"$(readlink {})\\\",dirname(\\\"{}\\\"))\"` {}' \\;"}
{"input": "Set 644 permission to all regular files under /path", "output": "find /path -type f -exec chmod 644 {} +;"}
{"input": "Display all symlinks and their targets in the current directory tree", "output": "find -P . -type l -exec echo -n \"{} -> \" \\; -exec readlink {} \\;"}
{"input": "Treat references to unset variables as errors", "output": "set -o nounset"}
{"input": "Find all files under maximum 1 level down the ./subfolder and ./subfolder/*/  paths", "output": "find ./subfolder ./subfolder/*/ -maxdepth 1 -type f"}
{"input": "Number each line in \"foobar\" as right-justified zero padded to a width of 9", "output": "nl -nrz -w9 foobar"}
{"input": "List all non-empty files under under current directory", "output": "find . -type f ! -size 0"}
{"input": "Shows status of a shell option 'nullglob'.", "output": "shopt nullglob"}
{"input": "find all the mp3 files in the current folder and move them to another folder", "output": "find . -name \"*.mp3\" -exec mv {} \"/Users/sir/Music//iTunes/iTunes Media/Automatically Add to iTunes.localized/\" \\;"}
{"input": "Search for directories that contain the phrase \"foo\" but do not end in \".bar\"", "output": "find . -name '*foo*' ! -name '*.bar' -type d -print"}
{"input": "Search all regular files in the /var/log directory tree for string \"19:26\"", "output": "find /var/log/ -type f -exec grep -H \u201819:26\u2032 {} \\;"}
{"input": "Search the /myfiles directory tree for regular files with at least these permissions: 647", "output": "find /myfiles -type f -perm -647"}
{"input": "Search the current directory tree for symbolic links to files matching pattern '*test*'", "output": "find . -lname '*test*'"}
{"input": "search for the file chapter1 in the folder /work", "output": "find /work -name chapter1"}
{"input": "delete all the empty in the current folder do not search in sub directories", "output": "find . -maxdepth 1 -type d -empty -exec rm {} \\;"}
{"input": "List all broken symlinks under the current directory with info on whether the links exist or not", "output": "find -L . -type l |xargs symlinks"}
{"input": "find all empty files in home directory", "output": "find ~ -empty"}
{"input": "Find all files/directories named 'testfile.txt' under current directory tree", "output": "find . -name testfile.txt"}
{"input": "Prepend date to ping output to google.com", "output": "ping google.com | xargs -L 1 -I '{}' date '+%+: {}'"}
{"input": "Print name of user with current EUID.", "output": "ps -o user= -p $$ | awk '{print $1}'"}
{"input": "Prints sequentially listing of a current folder and calendar of a current month.", "output": "echo `ls` \"`cal`\""}
{"input": "find all the files in the folder \"/u/bill\" which have been accessed in the last 2-6 minutes", "output": "find /u/bill -amin +2 -amin -6"}
{"input": "Find all files under $dir", "output": "find \"$dir\" -type f"}
{"input": "Print file size and user name with color support for each file in the current directory tree", "output": "tree -Csu"}
{"input": "Find users whose names begin with \"ab\" or whose terminal from which they are logged in ends with \"1\"", "output": "who | grep -e '^ab' -e '1$'"}
{"input": "Recursively change the owner to \"$USER\" and group to \"$GROUP\" of \"/var/lib/cassandra\"", "output": "sudo chown -R  $USER:$GROUP /var/lib/cassandra"}
{"input": "Remove duplicate phrases and keep the original order of lines in \"$infile\"", "output": "nl -w 8 \"$infile\" | sort -k2 -u | sort -n | cut -f2"}
{"input": "Find all files under and below /dir that were modified less than 60 minutes ago", "output": "find /dir -mmin -60"}
{"input": "use find command to search for .png and .jpg files", "output": "find ./ -type f \\( -iname \\*.jpg -o -iname \\*.png \\)"}
{"input": "Recursively finds all '*.pdf' files and folders in a current folder and removes them without prompting.", "output": "find . -name \"*.pdf\" -print0 | xargs -0 rm -rf"}
{"input": "discard all the errors and search for the file \"program.c\" in the entire file system", "output": "find / -name 'program.c' 2>/dev/null"}
{"input": "Find all files/directories under current directory tree whose paths start with './sr' and end with 'sc'", "output": "find . -path './sr*sc'"}
{"input": "Search for the extened regex 'expr' in all files with '.c' and '.h' extension under current directory tree", "output": "find . -name '*.[ch]' | xargs grep -E 'expr'"}
{"input": "get md5sum of an iso file without displaying the filename, save value to 'md5' variable", "output": "md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`"}
{"input": "display a long listing of all the directories in the current folder", "output": "find . -type d -exec ls -algd {} \\;"}
{"input": "Find all symbolic links under current directory that are not hard links", "output": "find . -type f -links 1 -print"}
{"input": "Find all files/directories under /myfiles that were accessed more than 30 days ago", "output": "find /myfiles -atime +30"}
{"input": "Execute \"mysqladmin -u root -pXXXXX processlist | grep tablename\" every second and append output to \"/root/plist.log\"", "output": "watch -n 1  \"mysqladmin -u root -pXXXXX processlist | grep tablename\"  | tee -a /root/plist.log"}
{"input": "Display differences in \"/tmp/ksh-9725.log\" when compared to \"/tmp/ksh-9781.log\"", "output": "diff /tmp/ksh-{9725,9781}.log | grep ^\\<"}
{"input": "Find all the files in file system which are greater than 50MB and less than 100MB", "output": "find / -size +50M -size -100M"}
{"input": "Find links to any file that happens to be named `foo.txt'", "output": "find / -lname foo.txt"}
{"input": "Remove all regular files found in and below /path", "output": "find /path -type f -exec rm '{}' +"}
{"input": "Change the encoding of all *.java files in a directory and subdirectories from cp1252 to utf-8", "output": "find . -type f  -name '*.java' -exec sh -c 'iconv -f cp1252 -t utf-8 \"$1\" > converted && mv converted \"$1\"' -- {} \\;"}
{"input": "Move all *.pdf.marker files and their corresponding *.pdf files under ${INPUT_LOCATION} to ${OUTPUT_LOCATION}", "output": "find \"${INPUT_LOCATION}\" -name '*.pdf.marker' | xargs -i bash -cx 'pdf=`dirname {}`/`basename {} .marker`;[ -e \"$pdf\" ]&&{ mv {} \"$pdf\" \"$0\";}' \"${OUTPUT_LOCATION}\""}
{"input": "Print all lines of \"seq 1 10\" except the last 3", "output": "seq 1 10 | perl -ne 'push @l, $_; print shift @l if @l > 3'"}
{"input": "Counts lines in file file1 and shows progress bar while doing.", "output": "bar file1 | wc -l"}
{"input": "search for all the files excluding directories ending with old or sccs or core or orig in the project folder and save the output to the file exclude", "output": "find project ! -type d -print | egrep '/,|%$|~$|\\.old$|SCCS|/core$|\\.o$|\\.orig$' > Exclude"}
{"input": "Move all directories in the current directory tree that have been modified in the last day to \"/path/to/target-dir\"", "output": "find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +"}
{"input": "search for all files ending with \".mkv\" in current folder", "output": "find /volume1/uploads -name \"*.mkv\""}
{"input": "List all regular files from the current directory tree that were modified less than 60 days ago", "output": "find -type f -mtime -60"}
{"input": "Find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago", "output": "find -daystart -mtime +0"}
{"input": "Find all files/directories under 'A' directory tree excluding the paths containing the directory 'a'", "output": "find A \\! -path \"A/a/*\""}
{"input": "Print out ln commands for each file in /home/folder1/*.txt that can be run to create symlinks appending '_CUSTOM_TEXT.txt' in their names", "output": "find /home/folder1/*.txt -type f | awk -F '.txt' '{printf \"ln -s %s %s_CUSTOM_TEXT.txt\\n\", $0, $1}'"}
{"input": "Find all *.jpg files under current directory and print only duplicate names", "output": "find . -name \\*.jpg -exec basename {} \\; | uniq -d"}
{"input": "Installs  'packagename' package.", "output": "yum install packagename"}
{"input": "List all files in maximum 2 levels down the current directory", "output": "find . -maxdepth 2  -type f -exec ls -l {} \\;"}
{"input": "set alias \"iTMSTransporter\" for command '`xcode-select --print-path`/../Applications/Application\\ Loader.app/Contents/MacOS/itms/bin/iTMSTransporter'", "output": "alias iTMSTransporter='`xcode-select --print-path`/../Applications/Application\\ Loader.app/Contents/MacOS/itms/bin/iTMSTransporter'"}
{"input": "display all the files in the home folder which begin with \"arrow\"", "output": "find ~ -name 'arrow*'"}
{"input": "change the owner and group of all the files in the folder  /usr/lpp/FINANCIALS", "output": "find /usr/lpp/FINANCIALS -print | xargs chown roger.staff"}
{"input": "Search for all jpg images on the system and archive them", "output": "find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz"}
{"input": "Save a comma separated list of all $MY_DIRECTORY/*/ directories to variable 'FOLDER'", "output": "FOLDERS=`ls -dm $MY_DIRECTORY/*/ | tr -d ' '`"}
{"input": "find all files starting with capital letter in the current folder", "output": "find . \u2014 name \"[A\u2011Z]*\" \u2014 print"}
{"input": "Find all files/directories named Root under current directory and copy them to newRoot", "output": "find . -name Root | xargs cp newRoot"}
{"input": "Execute \"ls -l data.temp\" every 2 seconds", "output": "watch ls -l data.temp"}
{"input": "Rename all .html files to .txt (change filetype suffix) in a portable way without requiring the \"rename\" perl script.", "output": "for file in *.html; do mv \"$file\" \"${file%.html}.txt\"; done"}
{"input": "Find all JPG files residing in the current directory tree and edit them in gimp", "output": "find . -name \u201c*.jpg\u201d | xargs gimp"}
{"input": "Replace all occurrence of \"subdomainA.example.com\" with \"subdomainB.example.com\" in all files under the current directory and below ignoring SVN files", "output": "find . \\( ! -regex '.*/\\..*' \\) -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'"}
{"input": "find all files in the folder /etc which have been modified after /tmp/foo", "output": "find /etc -newer /tmp/foo"}
{"input": "Display standard input as a table with \"${tab}\" separators", "output": "column -s\"${tab}\" -t"}
{"input": "Find files/directories writable by group and others under the /path directory", "output": "find /path -perm -022"}
{"input": "Search the current directory tree for symlinks pointing at other symlinks", "output": "find . -type l -xtype l"}
{"input": "Change owner to \"root\" and group to \"dockerroot\" of \"/var/run/docker.sock\"", "output": "sudo chown root:dockerroot /var/run/docker.sock"}
{"input": "Sort strings of 'test.txt' file by second from the end field", "output": "rev   test.txt | sort  -k2 | rev"}
{"input": "Remove all .txt files in and below the current directory", "output": "find . -name \"*.txt\" -exec rm {} \\;"}
{"input": "find all the normal/regular files in the current folder which have been modified in the last day and display a long listing of them", "output": "find . -type f -mtime -1 -daystart -exec ls -l {} \\;"}
{"input": "search for the file foo in  the current folder and display a long listing of it in sorted order of modification date", "output": "find . -name foo | xargs ls -tl"}
{"input": "Print contents of \"file\" as space separated hexadecimal bytes on a single line", "output": "xxd -p file | tr -d '\\n'"}
{"input": "Execute \"xbacklight -set 0% && sleep 20 && xbacklight -set 100%\" every 1200 seconds", "output": "watch -n1200 \"xbacklight -set 0% && sleep 20 && xbacklight -set 100%\""}
{"input": "Make directories to \"/some/path\" as needed", "output": "mkdir -p ./some/path"}
{"input": "List all files/directories under current directory matching the posix-egrep type regex \".+\\.(c|cpp|h)$\" in their names excluding the paths */generated/* and */deploy/*", "output": "find . -regextype posix-egrep -regex '.+\\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L1d"}
{"input": "Gets all man entries beginning with std and sends them to vi.", "output": "apropos -r '^std' | vi -"}
{"input": "Print line, word and byte count for each file recursively and also show the total counts", "output": "wc `find`"}
{"input": "find all the findme.txt files in the file system", "output": "find / -name findme.txt -type f -print"}
{"input": "Report file system containing path to the current working directory disk usage human-readable.", "output": "df -h ."}
{"input": "search for \"flac\" files in current folder using regular expressions", "output": "find ./ -regex \"./cmn-.\\.flac\""}
{"input": "Find regular files whose names end in .JPG", "output": "find . -type f -name \"*.JPG\""}
{"input": "Find all files in the current directory tree whose size is greater than 1MB, and move them to the \"files\" folder", "output": "find . -size +1M -exec mv {} files \\+"}
{"input": "List all SGID and SUID files in entire file system", "output": "find / -type f \\( -perm -4000 -o -perm -2000 \\) -ls"}
{"input": "Find user daniel's files of type jpeg", "output": "find . -user daniel -type f -name *.jpg"}
{"input": "find all the files in the home folder that have been modified between 24 to 48 hours", "output": "find $HOME -mtime -2 -mtime +1"}
{"input": "Sources script incl.sh in the folder where current script is located.", "output": "source $(dirname $0)/incl.sh"}
{"input": "Change permissions of all directories from the current directory tree to 644", "output": "find . -type d -exec chmod 755 {} +"}
{"input": "Search  all files & directoy from root directory which  are greater then 100M and delete them .", "output": "find /  -size +100M -exec rm -rf {} \\;"}
{"input": "Split \"/usr/bin/gcc\" into 100000 files of about equal size", "output": "split -n 100000 /usr/bin/gcc"}
{"input": "Save the current working directory to variable \"CURRENT\"", "output": "CURRENT=`pwd`"}
{"input": "Recursively bind mount \"/something\" on \"/new_something\"", "output": "mount --rbind /something /new_something"}
{"input": "Executes 'echo \"$ret\"' in a subshell that is opened by command 'true'.", "output": "true | echo \"$ret\""}
{"input": "find all files under the /etc directory and display IP address patterns in them", "output": "find /etc -type f -exec cat '{}' \\; | tr -c '.[:digit:]' '\\n' \\ | grep '^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$'"}
{"input": "Find all *.rb (regular) files under current directory and change their mode to 600", "output": "find . -name \"*.rb\" -type f -exec chmod 600 {} \\;"}
{"input": "Prefix all files and folders in the current directory with \"PRE_\"", "output": "find * -maxdepth 0 ! -path . -exec mv {} PRE_{} \\;"}
{"input": "Report file systems disk space usage pretty formatted.", "output": "df -Ph | column -t"}
{"input": "Find and clear UTF-8 files with BOM", "output": "find . -type f -exec sed '1s/^\\xEF\\xBB\\xBF//' -i.bak {} \\; -exec rm {}.bak \\;"}
{"input": "Find all hidden (regular) files under /tmp", "output": "find /tmp -type f -name \".*\""}
{"input": "Find all  'custlist*' files under current directory", "output": "find . -name custlist\\*"}
{"input": "Append the date and command ran to \"/tmp/trace\" after every command", "output": "PROMPT_COMMAND='echo \"$(date +\"%Y/%m/%d (%H:%M)\") $(history 1 |cut -c 7-)\" >> /tmp/trace'"}
{"input": "Find all regular files under current directory tree that were accessed $FTIME days ago", "output": "find . -type f -atime $FTIME"}
{"input": "Read a single character from standard input into variable \"key\" without backslash escapes and using the prompt \"Press any key to continue...\"", "output": "read -n1 -r -p \"Press any key to continue...\" key"}
{"input": "Search the current directory tree for regular files changed less than 1 day ago", "output": "find . -type f -ctime -1"}
{"input": "Display differences between a and b side-by-side", "output": "diff -y a b"}
{"input": "Run script `fixname.sh' for each regular file from the current directory tree", "output": "find . -type f -exec sh fixname.sh {} \\;"}
{"input": "List all cron jobs which contain \"word\".", "output": "crontab -l | grep 'word'"}
{"input": "Counts the number of lines in each *.hpp or *.cpp file in a git repository.", "output": "git ls-files | grep -P \".*(hpp|cpp)\" | xargs wc -l"}
{"input": "Copy the 3 specified files to /tmp/package, preserving/creating directory structure of each file as specified on command line.", "output": "cp --parents src/prog.js images/icon.jpg /tmp/package"}
{"input": "find the file \"filename.txt\" in the entire file system", "output": "find / -name filename.txt -print"}
{"input": "Count all files under \"/DIR\"", "output": "find /DIR -type f -print0 | tr -dc '\\0' | wc -c"}
{"input": "Changes to the directory where 'ssh' executable is located.", "output": "cd $(dirname $(which ssh));"}
{"input": "Create a copy of the current working directory structure in the usr/project directory,", "output": "find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir"}
{"input": "Print the path to the pipe created for process substitution", "output": "echo <(true)"}
{"input": "Save \"$N\" number of '.' characters in variable \"myvar\"", "output": "myvar=`seq 1 $N | sed 's/.*/./' | tr -d '\\n'`"}
{"input": "Search the /path directory tree for files that do not have a valid user or group", "output": "find /path -nouser -or -nogroup"}
{"input": "Copy all files in the current directory tree matching \"textToSearch\" to \"$destination_path\"", "output": "find . -type f | xargs grep -l \"textToSearch\" | cpio -pV $destination_path"}
{"input": "Find file `foo.bar' and delete it", "output": "find /home -name foo.bar -type f -exec rm -f \"{}\" ';'"}
{"input": "Serach in current directory downwards all files which  have not been modified since last 7 days", "output": "find .  -mtime +7 -print"}
{"input": "Find '.git' directories in directory tree /path/to/files and print the pathnames of their parents", "output": "find /path/to/files -type d -name '.git' -exec dirname {} +"}
{"input": "Unset the executable bit of all regular files from directory trees arch, etc, lib, module, usr, xpic", "output": "find arch etc lib module usr xpic -type f | xargs chmod -x"}
{"input": "Search directory tree $DIR for *.txt files", "output": "find $DIR -name \"*.txt\" -print"}
{"input": "Calculate md5 sum of file $item and save it to variable 'md5'", "output": "md5=$(md5sum $item | cut -f1 -d\\ )"}
{"input": "Creates file with random 10-byte size content.", "output": "shred -s 10 - > my-file"}
{"input": "Read a line from standard input into variable \"i\" with the prompt \" Again? Y/n \"", "output": "read -p \" Again? Y/n \" i"}
{"input": "Prints path to folder that contains file \"/path/to/vm.vmwarevm/vm.vmx\".", "output": "echo /path/to/vm.vmwarevm/vm.vmx | xargs dirname"}
{"input": "Recursively change owner of all files in \"folder\" to \"user_name\"", "output": "chown -R user_name folder"}
{"input": "Find all regular files 1 level down the $dir directory", "output": "find $dir -maxdepth 1 -type f"}
{"input": "Unzip \"archive.tgz\" and extract all archives excluding ones matching \"apri/fls/filename\"", "output": "zcat archive.tgz | tar -x --wildcards apri/fls/filename"}
{"input": "Find all files/directories under /myfiles that were modified 2 days ago", "output": "find /myfiles -mtime 2"}
{"input": "find all the files that have been modified today", "output": "find . -type f -mtime 0"}
{"input": "Print the last command in history", "output": "history | tail -1 | awk '{print $1}'"}
{"input": "Print 'huzzah' if /some/dir/ is empty", "output": "find /some/dir/ -maxdepth 0 -empty -exec echo \"huzzah\" \\;"}
{"input": "Execute awk command '{ ...}' on compressed file \"FILE\"", "output": "zcat FILE | awk '{ ...}'"}
{"input": "Print out the names of all directories in mydir recursively", "output": "find mydir -type d"}
{"input": "search for all text files in current folder and delete them", "output": "xargs rm -f <<< $(find . -name \".txt\")"}
{"input": "Search the /mnt/raid/upload directory tree for files that have been modified within the last 7 days", "output": "find /mnt/raid/upload -mtime -7 -print"}
{"input": "Find all files ignoring hidden files under current directory and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files", "output": "find . -not -path '*/\\.*' -type f -print0 | xargs -0 sed -i 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "Find all files/directories that start with 'test' in their names under current directory tree", "output": "find . -name 'test*'"}
{"input": "Search the /home/user1 directory tree for files whose names end in \".bin\"", "output": "find /home/user1 -name \"*.bin\""}
{"input": "set alias \"no\" for command \"ls -f\"", "output": "alias no=ls -f"}
{"input": "Find all regular files on the system whose size is greater than 20000k and print their names and sizes", "output": "find / -type f -size +20000k -exec ls -lh {} \\; | awk '{ print $8 \": \" $5 }'"}
{"input": "search  all block spacial files called backup from /usr directory downwards and print them .", "output": "find /usr -type b -name backup -print"}
{"input": "Copy \"src/prog.js\" and \"images/icon.jpg\" to \"/tmp/package/\" keeping relative path names", "output": "rsync -Rv src/prog.js images/icon.jpg /tmp/package/"}
{"input": "Search for all files with the same inode number 41525360", "output": "find . -follow -inum 41525360"}
{"input": "Execute 'echo -e \"\\033[31mHello World\\033[0m\"' every without color support 2 seconds", "output": "watch 'echo -e \"\\033[31mHello World\\033[0m\"'"}
{"input": "change permissions of all the script files in a directory", "output": "find /home/john/script -name \"*.sh\" -type f -exec chmod 644 {} \\;"}
{"input": "Find all the files in the current directory recursively whose permissions are 644 and show the first 10 of them", "output": "find . -perm 0644 | head"}
{"input": "find all the files which have not been modified in the last 1 year and display the total disk usage of them  in GB", "output": "find . -type f -mtime +356 -printf '%s\\n'  | awk '{a+=$1;} END {printf \"%.1f GB\\n\", a/2**30;}'"}
{"input": "Find all xml files under current directory and archive them to .bz2 archives", "output": "find . | grep \".xml$\" | parallel bzip2"}
{"input": "find all the \".mov\" files in the current folder and give it as an input to the myffmpeg.sh script file", "output": "find . -iname \"*.mov\" -exec /path/to/myffmpeg.sh {} \\;"}
{"input": "find all the files in the current folder and display adding quotations to each file", "output": "find . -exec echo -n '\"{}\" ' \\;"}
{"input": "change the ownership of all regular/normal files in the current directory", "output": "find . -type f -exec chown username {} \\;"}
{"input": "display all files which have been modified between two dates in current folder", "output": "find . -type f -newermt \"2014-01-01\" ! -newermt \"2014-06-01\""}
{"input": "find the count of text files that are present in the current working directory.", "output": "find . -maxdepth 1 -name \\*.txt -print0 | grep -cz ."}
{"input": "Find all directories under /path/to/base/cache, /path/to/base/tmp, /path/to/base/logs  and change their permission to 755", "output": "find /path/to/base/cache /path/to/base/tmp /path/to/base/logs -type d -exec chmod 755 {} +"}
{"input": "Save absolute path of java home to variable \"JAVA_HOME\"", "output": "export JAVA_HOME=$(readlink -f /usr/bin/java | sed \"s:bin/java::\")"}
{"input": "Get the total sizes of all files under current directory", "output": "find . -type f -printf '%p %s\\n' | awk '{ sum+=$2}; END { print sum}'"}
{"input": "find files in the home folder which have been modified in the last day. ( -daystart measures times from the beginning of today rather than from 24 hours ago.)", "output": "find ~/ -daystart -type f -mtime 1"}
{"input": "find the regular/normal file \"myfile\" in the folder /root", "output": "find /root/ -name myfile -type f"}
{"input": "Find files under current directory without descending into other file systems and append a null character at the end of each paths", "output": "find -x . -type f -print0"}
{"input": "Find files on the system bigger than 50MB but smaller than 100MB", "output": "find / -type f -size +50M -size -100M"}
{"input": "Find all files under $1 not matching the regex '.*/\\..*' and execute hashmove on each of them with the file path as its argument", "output": "find $1 -type f -not -regex '.*/\\..*' -exec $0 hashmove '{}' \\;"}
{"input": "Count the number of .gz files in directory tree /home/user1/data1/2012/mainDir", "output": "find /home/user1/data1/2012/mainDir -name '*.gz' | wc -l"}
{"input": "Remove trailing whitespaces in TXT files from the current directory tree", "output": "find . -iname '*.txt' -type f -exec sed -i '' 's/[[:space:]]\\{1,\\}$//' {} \\+"}
{"input": "list regular files under the user's home directory that are over 100KB and have not been accessed in over 30 days.", "output": "find $HOME -type f -atime +30 -size 100k"}
{"input": "Find all empty files in /tmp", "output": "find /tmp -type f -empty"}
{"input": "Find files by type", "output": "find -type type_descriptor"}
{"input": "Provide a list of all the files edited today to pr, and pipe pr's output to the printer", "output": "find . -type f -mtime -1 -print|xargs pr -n |lp"}
{"input": "Find all files with the name \"MyProgram.c\" in the current directory and all of it's sub-directories.", "output": "find -name \"MyCProgram.c\""}
{"input": "start new screen session or to take over the most recent detached one", "output": "screen -Rd"}
{"input": "Compress each file in all directories matching pattern \"*.1\"", "output": "find *.1  -exec tar czf '{}.tgz' '{}' --remove-files \\;"}
{"input": "find all text files which have extra extensions in the current folder", "output": "find . -name '*.text' -exec sh -c 'for i do if [ ! -f \"${i%.text}\" ]; then echo == $i; fi;done' sh {} +"}
{"input": "Make a playlist out of all the mp3 and ogg files in the home directory", "output": "find ~ -type f \\( -iname '*.mp3' -o -iname '*.ogg' \\) > mynewplaylist.m3u"}
{"input": "Find all files/directories under current directory matching the case insensitive pattern 'pattern'", "output": "find -iname pattern"}
{"input": "Find *.html files in the current directory tree that were modified less than 7 days ago", "output": "find . -mtime -7 -name \"*.html\" -print"}
{"input": "Read a line of standard input with prompt \"My prompt: \" and save it to variable \"varname\"", "output": "read -e -p \"My prompt: \" varname"}
{"input": "Recursively counts non-blank, non-comment lines in all *.c files in a current folder.", "output": "find . -type f -name '*.c' -exec cat {} \\; | sed '/^\\s*#/d;/^\\s*$/d;/^\\s*\\/\\//d' | wc -l"}
{"input": "Show the number of lines for each .php and .phtml file in the current directory tree", "output": "find . -type f \\( -name \"*.php\" -o -name \"*.phtml\" \\) -exec wc -l {} +;"}
{"input": "Modify and rewrite 'file' replacing the first instance of \"foo\" on each line with \"bar\"", "output": "sed -i 's/foo/bar/' file"}
{"input": "change the permissions of all regular/normal files in the file system", "output": "chmod 640 `find ./ -type f -print`"}
{"input": "Save the first word of the first difference in \".dir_list_2\" compared to \".dir_list_1\" into variable \"extract_dir\"", "output": "extract_dir=$(diff .dir_list_1 .dir_list_2 | grep '>' | head -1 | cut -d' ' -f2)"}
{"input": "display the number of lines in all the php files in the current folder", "output": "1 down vote wc -cl `find . -name \"*.php\" -type f`"}
{"input": "Find all TXT files in the current directory and copy them to directory \"$HOME/newdir\"", "output": "find \"$HOME\" -name '*.txt' -type f -not -path \"$HOME/newdir/*\" -print0 | xargs -0 cp -t \"$HOME/newdir\""}
{"input": "Create all directories in the path specified by variable $javaUsrLib as super user", "output": "sudo mkdir -p $javaUsrLib"}
{"input": "Remove all regular files from the current directory tree that were modified between August 10th and August 17th", "output": "find . -type f -newermt \"Aug 10\" ! -newermt \"Aug 17\" -exec rm {} \\;"}
{"input": "Compute the mean average of the word count of *.txt files in the home directory", "output": "find ~/ -name '*.txt' -print0 | xargs -0 wc -w | awk 'END { print $1/(NR-1) }'"}
{"input": "Verbosely compresses all files on fourth and fifth depth level keeping original files in place.", "output": "bzip2 -kv */*/*/*/*"}
{"input": "find all the files that have been modified in the last 1 day", "output": "find . -type f -daystart -mtime -1"}
{"input": "Compress and display the gzipped filenames of every file on the system that is greater than 100000 bytes and ends in \".log\"", "output": "sudo find / -xdev -type f -size +100000 -name \"*.log\" -exec gzip -v {} \\; 2>&1 | awk '{print $6}'"}
{"input": "Serach  in root directory all files which  have more than 2 links.", "output": "find / -links +2 -print"}
{"input": "Clears terminal screen.", "output": "echo `clear`"}
{"input": "Delete all files with indoe number $inum under current directory tree", "output": "find . -inum $inum -exec rm {} \\;"}
{"input": "Send TERM signal to process with id listed in '/var/run/DataBaseSynchronizerClient.pid' file", "output": "kill `cat /var/run/DataBaseSynchronizerClient.pid`"}
{"input": "Append \"\\r\" on each line of file \"input\" and display the printable characters", "output": "sed 's/$/\\r/g' input |od -c"}
{"input": "Format the 5th, 3rd, and 4th fields of \"...\" as a table", "output": "...| awk '{print $5\"\\t\\t\" $3\"\\t\"$4}'|column -t"}
{"input": "Search all regular files in the current directory tree for \"string\"", "output": "find . -type f | xargs -d '\\n' grep string"}
{"input": "Search the current directory tree for .VER files", "output": "find . -name \"*.VER\""}
{"input": "Lists all content in a current folder but names like *.c and *.h.", "output": "ls -d !(*@(.c|.h))"}
{"input": "count amount of jobs running", "output": "jobs | wc -l"}
{"input": "Page through the contents of 'input_file_name' hexdumped with space-separated 2-byte units.", "output": "od -xcb input_file_name | less"}
{"input": "Replace all ' ' with '-' from standard input", "output": "tr  ' ' '-'"}
{"input": "Update timestamps of all files (not directories) under current directory. Also works on older Unix systems with obsolete 'find' command.", "output": "find . -print -exec touch {} \\;"}
{"input": "Find files with extension .conf in the /etc directory tree", "output": "find /etc -name \"*.conf\""}
{"input": "Lists file descriptors of a current process.", "output": "ls -l /proc/self/fd/"}
{"input": "Search for files that were accessed less than 5 days ago.", "output": "find -atime -5"}
{"input": "Change permissions to 644 of multiple files with permissions 755", "output": "find . -perm 755 -exec chmod 644 {} \\;"}
{"input": "Find all files/directories under current directory appending a null character at the end of each file name/path", "output": "find -print0"}
{"input": "Run the find command with all shell positional arguments", "output": "`which find` \"$@\" -print0;"}
{"input": "Print only unique lines in files 'set1' and 'set2'", "output": "cat set1 set2 | sort -u"}
{"input": "Print a single line of numbers from \"001\" to \"100\"", "output": "yes | head -n 100 | awk '{printf( \"%03d \", NR )}'   ##for 001...100"}
{"input": "Recursively move \"./dir\" to \"user@host:/path\" compressing data and displaying progress during transmission", "output": "rsync -rvz --progress --remove-sent-files ./dir user@host:/path"}
{"input": "Print a single line of numbers from \"001\" to \"100\"", "output": "yes | head -n 100 | awk '{printf( \"%03d \", NR )}'"}
{"input": "Search for the regex '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' in all files under /etc", "output": "find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;"}
{"input": "Create a compressed archive of \"/home\" and split the contents into files with at most 4000 MiB each and use prefix \"/media/DRIVENAME/BACKUPNAME.tgz\"", "output": "tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz"}
{"input": "Search the /path/to/directory tree for regular files modified 61 days ago and then remove them", "output": "find /path/to/directory -type f -mtime 61 -exec rm -f {} \\;"}
{"input": "Show the current UTC date in '%Y-%m-%dT%k:%M:%S%z' format", "output": "date -u '+%Y-%m-%dT%k:%M:%S%z'"}
{"input": "Search the current directory tree for *.wav files that have \"export\" in their pathnames", "output": "find -type f -name \"*.wav\" | grep export"}
{"input": "find all js files under the build direcotry except build/external directory.", "output": "find build -not \\( -path build/external -prune \\) -name \\*.js"}
{"input": "find all directory list which have empty list in /tmp directory .", "output": "find /tmp -type d -empty"}
{"input": "list all files under .performance_test directory except .performance_test/prune_me directory", "output": "find \".performance_test\" -not -path \".performance_test/prune_me*\" -exec bash -c 'echo \"$0\"' {} \\;"}
{"input": "display all instances of \"foo.cpp\" file in the current folder which are not in the sub directory tree \".svn\"", "output": "find . -name 'foo.cpp' '!' -path '.svn'"}
{"input": "find all foo.bar files in the entire file system", "output": "find / -name foo.bar -print"}
{"input": "Prints listing of a root folder including hidden files, and saves output to 'output.file'.", "output": "ls -a | tee output.file"}
{"input": "Remove a leading \"machine\" from the system host name and save the result to variable \"machnum\"", "output": "machnum=$(hostname | sed 's/^machine//')"}
{"input": "Recursively remove all \"*.txt\" files and answer \"n\" to any prompt", "output": "yes n | rm -r *.txt"}
{"input": "Page through the information of the system's PHP setup.", "output": "less -f <(php -i)"}
{"input": "List all regular files in and below the home directory that have been modified in the last 90 minutes", "output": "find ~ -type f -mmin -90 | xargs ls -l"}
{"input": "find all the files in the /usr folder that have been modified after the file /usr/FirstFile.", "output": "find /usr -newer /usr/FirstFile -print"}
{"input": "Format the contents of \"[file]\" in a neat table", "output": "cat file | column -t"}
{"input": "Force create a symbolc link named \"softlink_name\" to \"source_file_or_directory_name\" without dereferencing \"softlink_name\"", "output": "ln -sfn source_file_or_directory_name softlink_name"}
{"input": "Locate all *.csv regular files under the current directory tree", "output": "find . -type f -name \"*.csv\""}
{"input": "Find all files/directories under current directory tree with inode number 211028 and move them to 'newname.dir'", "output": "find . -inum 211028 -exec mv {} newname.dir \\;"}
{"input": "Compresses with compression level 9 all files under the current folder but already compressed '*.bz2' files, performing in background.", "output": "find \"$1\" -type f | egrep -v '\\.bz2' | xargs bzip2 -9 &"}
{"input": "Remove the regular files from the current directory tree that are newer than /tmp/date.start but not newer than /tmp/date.end", "output": "find ./ -type f -newer /tmp/date.start ! -newer /tmp/date.end -exec rm {} \\;"}
{"input": "display all text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search)", "output": "find /home/you -iname \"*.txt\" -mtime -60 -print"}
{"input": "delete all the \".doc\" files in the current folder", "output": "find . -name '*.doc' -exec rm \"{}\" \\;"}
{"input": "Find files with group write permission and remove the permission", "output": "find . -perm -20 -exec chmod g-w {} ;"}
{"input": "Check if \"server1\" and \"server2\" have the same list of RPMs installed", "output": "diff <(ssh server1 'rpm -qa | sort') <(ssh server2 'rpm -qa | sort')"}
{"input": "List *.pl directories in the current directory tree", "output": "find . -name \"*.pl\" -exec ls -ld {} \\;"}
{"input": "Sort strings in a file temp.txt.", "output": "sort temp.txt > temp.txt.sort && mv temp.txt.sort temp.txt"}
{"input": "Find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$'  in their names", "output": "find . -regextype posix-egrep -regex '^.*/[a-z][^/]*$' -type f"}
{"input": "Find all *.foo files under current directory and print their contents", "output": "cat `find . -name '*.foo' -print`"}
{"input": "Find all regular files whose names do not end in \"*.html\"", "output": "find . -type f -not -name \"*.html\""}
{"input": "Unzip all files matching \"file_*\" and pipe into \"agrep -dEOE 'grep'\"", "output": "find . -name \"file_*\" -follow -type f -print0 | xargs -0 zcat | agrep -dEOE 'grep'"}
{"input": "Get A record for domain $domain", "output": "dig $domain"}
{"input": "Search the regular files from directory tree 'folder_name' for \"your_text\"", "output": "find folder_name -type f -exec grep your_text  {} \\;"}
{"input": "display all the doc files in the current folder ( files ending with \".doc\" )", "output": "find . -name '*.doc'"}
{"input": "change the permissions of all the directories in the current folder", "output": "find . -type d | xargs chmod 2775"}
{"input": "Read a single character from standard input and save to variable \"y\"", "output": "y=$(bash -c \"read -n 1 c; echo \\$c\")"}
{"input": "display the version of find command", "output": "find --version"}
{"input": "find regular which case-insensitive name is foo in current directory", "output": "find . -iname foo -type f"}
{"input": "Print variable \"$module\" in formatted columns with at most 80 characters per line", "output": "echo $modules | column -t | fold | column -t"}
{"input": "Find all directories with space in their names under current directory and rename them by replacing all spaces with _", "output": "find -name \"* *\" -type d | rename 's/ /_/g'"}
{"input": "List all *.jpg files/directories in entire file system", "output": "find / -name \"*.jpg\" -print"}
{"input": "Find all CSS files", "output": "find . -name \"*.css\""}
{"input": "Find files modified more recently than file poop", "output": "find . -newer poop"}
{"input": "Compress all directories found in $LOGDIR wherein a file's data has been modified within the last 24 hours", "output": "find $LOGDIR -type d -mtime +0 -exec compress -r {} \\;"}
{"input": "Prints help on 'cp' utility.", "output": "cp --help"}
{"input": "Find all .sh files in or below the current directory and move them to folder ~/back.scripts", "output": "find . -name \"*.sh\" -print0 | xargs -0 -I file mv file ~/back.scripts"}
{"input": "Rename \"fghfilea\" to \"jklfilea\"", "output": "mv fghfilea jklfilea"}
{"input": "Archive \"path/subfolder\" to \"path\", skipping files that are newer at the destination.", "output": "rsync -vuar --delete-after path/subfolder/ path/"}
{"input": "Find all *.jpg files under current directory and print only unique names", "output": "find . -name *.jpg | uniq -u"}
{"input": "Print amount of space available on the file system containing path to the current working directory in megabytes.", "output": "df . -B MB | tail -1 | awk {'print $4'} | cut -d'%' -f1"}
{"input": "Find all *.md files in entire file system and convert them to HTML (*.md.html) files", "output": "find / -name \"*.md\" -type f -exec sh -c 'markdown \"$0\" > \"$0.html\"' {} \\;"}
{"input": "Delete all '-' character from $1 and save the resultant string to variable 'COLUMN'", "output": "COLUMN=`echo $1 | tr -d -`"}
{"input": "Create a symbolic link named \".bash_profile\" to \".bashrc\"", "output": "ln -s .bashrc .bash_profile"}
{"input": "Find all files and directories with permissions 664", "output": "find . -perm 664"}
{"input": "Print which files differ in \"folder1\" and \"folder2\" excluding \"node_modules\" recursively, output in two columns, and paginate the output", "output": "diff -rqyl folder1 folder2 --exclude=node_modules"}
{"input": "Find all *.swp files/directories under current directory and print the list to a file named 'rm'", "output": "find . -name \"*.swp\" > rm"}
{"input": "Find files on the system created during the last 50 days", "output": "find / -ctime -50"}
{"input": "Change permissions to 644 for *.html files under /usr/local", "output": "find /usr/local -name \"*.html\" -type f -exec chmod 644 {} \\;"}
{"input": "Find all directories under current directory whose paths are 5 characters long", "output": "find . -regextype posix-extended -type d -regex \".{5}\""}
{"input": "Find all PHP files under current directory that contain only one non-blank line", "output": "find . -type f -name '*.php' -exec grep -Hcm2 '[^[:space:]]' {} + | sed -n '/:1$/{s///;p}'"}
{"input": "Make directory and parents as needed to \"~/temp/bluecove/target/\"", "output": "mkdir -p ~/temp/bluecove/target/"}
{"input": "Search the regular files of the current directory tree for string \"texthere\"", "output": "find -type f -exec grep -Hn \"texthere\" {} +"}
{"input": "print difference in days between two dates", "output": "echo $(( ( $(date -ud '2003-08-02 17:24:33' +'%s') - $(date -ud '2003-04-21 22:55:02' +'%s') )/60/60/24 )) days"}
{"input": "Print lines in the sorted contents of \"file1\" that are not in the sorted contents of \"file2\"", "output": "comm -23 <(sort file1) <(sort file2)"}
{"input": "Find files/directories that are bigger than 10000 KB in size uder '/usr/local' directory tree", "output": "find /usr/local -size +10000k"}
{"input": "Read a line from standard input into variable \"text\" with the prompt \" Enter Here: \"", "output": "read -p \" Enter Here : \" text"}
{"input": "Display the file size of file '/data/sflow_log' in bytes", "output": "du -sb /data/sflow_log | cut -f1"}
{"input": "Convert the contents of \"foo.md\" to GitHub style markdown and display with \"lynx\"", "output": "cat foo.md | pandoc -f markdown_github | lynx -stdin"}
{"input": "Find all files/directories under /path/to/dir and set directory permission to 0755 and file permission to 0644", "output": "find /path/to/dir -type d -exec chmod 0755 '{}' \\; -o -type f -exec chmod 0644 '{}' \\;"}
{"input": "Set the variable \"me\" to the name of the running script.", "output": "me=`basename \"$0\"`"}
{"input": "Sets shell option 'nounset'.", "output": "shopt -s -o nounset"}
{"input": "find all the directories in the folder /raid with the extension local_sd_customize.", "output": "find /raid -type d -name \".local_sd_customize\" -print"}
{"input": "find all the normal/regualar files in the current folder which have a size of 10KB and display a long listing details of them.", "output": "find . -type f -size +10000 -exec ls -al {} \\;"}
{"input": "use find -exec with multiple commands", "output": "find . -name \"*.txt\" -exec echo {} \\; -exec grep banana {} \\;"}
{"input": "Print count of unique lines in all files like 'list_part*'", "output": "cat list_part* | sort --unique | wc -l"}
{"input": "find all the files in the current directory whose size is equal to exactly 126MB.", "output": "find . -size 126M"}
{"input": "Print the contents of \"/tmp/nums\" as input to \"addnums\"", "output": "cat /tmp/nums | addnums"}
{"input": "Remove all white space from \"infile.txt\" and wrap each line to 80 characters", "output": "cat infile.txt | tr -d \"[:space:]\" | fold -80"}
{"input": "Make directory \"/var/svn\"", "output": "sudo mkdir /var/svn"}
{"input": "Read a single character from standard input with prompt \"Is this a good question (y/n)? \" and timeout of 3 seconds and save the response to variable \"answer\"", "output": "read -t 3 -n 1 -p \"Is this a good question (y/n)? \" answer"}
{"input": "Find all files/directories named 'date' under /usr", "output": "find /usr -name date"}
{"input": "Unzip and untar \"tarball.tar.gz\"", "output": "zcat tarball.tar.gz | tar x"}
{"input": "Create a local SSH tunnel from \"localhost\" port 16379 to \"localhost\" port 6379 using key \"keyfile.rsa\" and disables the interactive shell", "output": "ssh -i keyfile.rsa -T -N -L 16379:localhost:6379 someuser@somehost"}
{"input": "Find all the files without permission 777 under current directory and show a few lines of output from the beginning", "output": "find . -type f ! -perm 777 | head"}
{"input": "Find files with a question mark in their names", "output": "find . -name \\*\\\\?\\*"}
{"input": "Calculate the MD5 checksums of all files from directory tree //path/to/source/Directory and save them as Output.txt", "output": "find //path/to/source/Directory -type f -exec md5sum {} + | awk '{print $0}' > Output.txt"}
{"input": "Find all directories containing 'linux' in their names under '/root' directory tree", "output": "find  /root -type d -iname \"*linux*\""}
{"input": "Send 5 pings to broadcast address \"10.10.0.255\" and print the unique IPs who responded", "output": "ping -c 5 -b 10.11.255.255 | sed -n 's/.* \\([0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\).*/\\1/p' | sort | uniq"}
{"input": "display all the files in the current folder which are in the path ending with the folder f", "output": "find .  -path '*f'"}
{"input": "Filter contents of 'file' through awk commands written in script.awk, display the result.", "output": "awk -f script.awk file"}
{"input": "Removes 'folderName', and removes all content within if 'folderName' is folder.", "output": "rm -rf folderName"}
{"input": "Send Output From Find The Find Command To A File", "output": "find / -name *.mp3 -fprint nameoffiletoprintto"}
{"input": "Counts the number of lines in each *.java file in a git repository.", "output": "git ls-files | grep \"\\.java$\" | xargs wc -l"}
{"input": "Replace all newlines from the contents of \"file\" except the last with spaces", "output": "sed ':a;N;$!ba;s/\\n/ /g' file"}
{"input": "Compress \"hello world\" and save to variable \"hey\"", "output": "hey=$(echo \"hello world\" | gzip -cf)"}
{"input": "Find all regular files under and below dir/ and change their names from UTF8 to the ASCII/TRANSLIT encoding", "output": "find dir/ -type f -exec mv {} $(echo {}.fix | iconv -f UTF8 -t ASCII//TRANSLIT ) \\;"}
{"input": "Find all regular files with permissions 777 under and below /home/user/demo/, and change their permissions to 755", "output": "find /home/user/demo -type f -perm 777 -print -exec chmod 755 {} \\;"}
{"input": "date --date=\"222 days ago\" +\"%m\"", "output": "Prints what month it was 222 days ago"}
{"input": "Find files on the system that are bigger than 20 megabytes and show the sorted list of their filenames", "output": "find / -type f -size +20M -exec ls -lh {} \\; 2> /dev/null | awk '{ print $NF \": \" $5 }' | sort -nk 2,2"}
{"input": "Find all .php files starting from the root directory and ignoring /media", "output": "find / -name \"*.php\" -print -o -path '/media' -prune"}
{"input": "Gets MAC address of eth0 network interface.", "output": "ifconfig | grep -i hwaddr | cut -d ' ' -f9"}
{"input": "Find all directories in the current one with \"linkin park\" in their names and copy them to /Users/tommye/Desktop/LP", "output": "find . -maxdepth 1 -type d -iname \"*linkin park*\" -exec cp -r {} /Users/tommye/Desktop/LP \\;"}
{"input": "List all available commands in Mac OS", "output": "echo $PATH | tr ':' '\\n' | xargs -I {} find {} -maxdepth 1 -type f -perm '++x'"}
{"input": "Save IP address of your SSH session in variable \"WORKSTATION\"", "output": "WORKSTATION=`who -m|awk '{print $5}'|sed 's/[()]//g'`"}
{"input": "Print \"y\" for each line in \"file2.txt\" found in \"file1.txt\" and a blank newline otherwise", "output": "comm -2 file1.txt file2.txt | awk -F'\\t' '{print (NF==2?\"y\":\"\")}'"}
{"input": "Find all your text files", "output": "find . -name \"*.txt\" -print"}
{"input": "Insert the current host name on line 15 of \"test.html\"", "output": "sed -i \"15i `hostname`\" test.html"}
{"input": "Convert *.au files to *.wav files using `sox'", "output": "find -type f -name '*.au' | awk '{printf \"sox %s %s\\n\",$0,$0\".wav\" }' | bash"}
{"input": "find directories  that have been modified in the last seven days", "output": "find . -mtime -7 -type d"}
{"input": "Send ping requests to \"yourhostname.local\"", "output": "ping youhostname.local"}
{"input": "Find all files in current directory that were modified less than 1 day ago excluding hidden files and put the output to full_backup_dir variable", "output": "full_backup_dir=$(find . -depth \\( -wholename \\./\\.\\* \\) -prune -o -mtime -1 -print)"}
{"input": "List all regular files modified more than 61 days", "output": "find -type f -mtime 61 -exec ls -ltr {} \\;"}
{"input": "Find all PHP files in the current directory recursively", "output": "find . -name \\*.php -type f"}
{"input": "Find files under /some/path that are not executable by the owner", "output": "find /some/path -type f ! -perm -100 -ls"}
{"input": "Print all lines from the last occurrence of the regex 'pattern' to the end of the file 'file'", "output": "tac file | sed '/pattern/q' | tac"}
{"input": "search for the file foo.txt in the current folder and open it in vi editor", "output": "find -name foo.txt -execdir vim '{}' ';'"}
{"input": "display the count of total number of text files in the folder /home/you which have been modified in the last 60*24 hours", "output": "find /home/you -iname \"*.txt\" -mtime -60 | wc -l"}
{"input": "Print 'Empty dir' if $some_dir is empty", "output": "if find /some/dir/ -maxdepth 0 -empty | read v; then echo \"Empty dir\"; fi"}
{"input": "Print content of all files found regarding seach options '[whatever]'", "output": "find [whatever] -print0 | xargs -0 cat"}
{"input": "Finds all logged in users.", "output": "w | awk '{print $1}'"}
{"input": "Print unique lines of sorted file \"A.txt\" compared to sorted file \"B.txt\"", "output": "comm -2 -3 <(sort A.txt) <(sort B.txt)"}
{"input": "Silently download contents from https://raw.github.com/Homebrew/homebrew/go/install and show an error if failed, execute with ruby after the download is completed", "output": "ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\""}
{"input": "Update timestamps of all files and directories under directory /path/to/dir.", "output": "find /path/to/dir -print0 | xargs -0 touch"}
{"input": "List all directories of the $topdir directory tree that contain a Makefile and at least one .py file", "output": "find \"$topdir\" -name '*.py' -printf '%h\\0' | xargs -0 -I {} find {} -mindepth 1 -maxdepth 1 -name Makefile -printf '%h\\n' | sort -u"}
{"input": "Count all directories under current directory", "output": "find . -type d -exec ls -dlrt {} \\; | wc --lines"}
{"input": "Makes 'time' built-in to show only real execution time.", "output": "TIMEFORMAT=%R && time ls -l"}
{"input": "Forcibly removes files  '/tmp/stored_exception', '/tmp/stored_exception_line', '/tmp/stored_exception_source'", "output": "rm -f /tmp/stored_exception /tmp/stored_exception_line /tmp/stored_exception_source"}
{"input": "Read a line of standard input with prompt \"Enter your choice: \" in an interactive shell and save the response to variable \"choice\"", "output": "read -e -p \"Enter your choice: \" choice"}
{"input": "Find all leaf directories that include only one occurrence of \"modules\"", "output": "find -regex '.*/modules\\(/.*\\|$\\)' \\! -regex '.*/modules/.*/modules\\(/.*\\|$\\)' -type d -links 2"}
{"input": "Mount \"ext4\" filesystem \"/dev/xvdf\" on \"/vol\"", "output": "sudo mount /dev/xvdf /vol -t ext4"}
{"input": "kill a number of background jobs", "output": "jobs -p | tail -n [number of jobs] | xargs kill"}
{"input": "find all normal/regular files in current folder and display the total lines in them", "output": "find . -type f -exec wc -l {} +"}
{"input": "display all the html files in the current folder", "output": "find . -name \\*.html"}
{"input": "Search all files in the current directory tree whose names end in \"1\" for string \"1\"", "output": "find . -name \"*1\" -exec grep \"1\" {} \\;"}
{"input": "Remove all files with names like \"vmware-*.log\" from the current directory tree", "output": "find . -name vmware-*.log -delete"}
{"input": "Print the current user name and inode number of \"/home\"", "output": "echo `whoami` `stat -c %i \"/home\"`"}
{"input": "Find all the files which are greater than 50MB and less than 100MB", "output": "find / -size +50M -size -100M"}
{"input": "Find all files/directories named 'foo' in the entire filesystem", "output": "find / -name foo"}
{"input": "Find all *.html files under current directory and for each file replace the first occurrence of STRING and previous lines with the content of common_header file", "output": "find . -type f -name '*.html' -exec sed -i -e '1r common_header' -e '1,/STRING/d' {} \\;"}
{"input": "Search the current directory recursively for regular files last changed less than 2 days ago", "output": "find . type -f -ctime -2"}
{"input": "Shows only IP4, not IP6 address of network interface eth0.", "output": "/usr/bin/ifconfig eth0 | grep --word-regexp inet | awk '{print $2}'"}
{"input": "Read a line from standard input into variable \"YESNO\" ignoring backslash escapes and using the prompt \"$(echo $@) ? [y/N] \"", "output": "read -r -p \"$(echo $@) ? [y/N] \" YESNO"}
{"input": "search for all tar.gz compress files  in the current folder", "output": "find -name *.tar.gz"}
{"input": "Read a line from standard input with a timeout of 0.1 seconds and prompt \"This will be sent to stderr\"", "output": "read -t 0.1 -p \"This will be sent to stderr\""}
{"input": "set alias \"histgrep\" for command \"history | grep\"", "output": "alias histgrep=\"history | grep\""}
{"input": "Execute \"bash -c your_script\" every 2 seconds", "output": "watch bash -c your_script"}
{"input": "Display inputfile all on one line (replace newlines by spaces)", "output": "awk 1 ORS=' ' file"}
{"input": "List all *.txt files under current directory that contains the regex 'pattern'", "output": "find . -type f -name '*.txt' -exec egrep -l pattern {} \\;"}
{"input": "Remove everything in a current folder without prompting.", "output": "find -mindepth 1 -maxdepth 1 -print0 | xargs -0 rm -rf"}
{"input": "Remove empty directories", "output": "find -type d -exec rmdir --ignore-fail-on-non-empty {} + ;"}
{"input": "Sort file \"a.csv\" by the first comma separated value of each line and print only unique entries", "output": "tac a.csv | sort -u -t, -r -k1,1 |tac"}
{"input": "Find all *.html files under current directory", "output": "find . -type f -name '*.html'"}
{"input": "change the owner of all the regular/normal files which belong to the root user to \"tom\" in the current folder", "output": "find .-type f -user root -exec chown tom {} \\;"}
{"input": "Executes 'true'. then makes 'xargs' fail executing 'false' and return 123 exit code.", "output": "true | xargs false"}
{"input": "delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename \".svn\"", "output": "find . -iname .svn -print | xargs rm -rf"}
{"input": "Pipe content of 'somedata.txt' file to the input of command \"$outfile\"", "output": "cat somedata.txt | \"$outfile\""}
{"input": "Find all regular files under current directory", "output": "find . -type f"}
{"input": "Find all regular files in <path> and execute process with all of them as arguments", "output": "find <path> -type f -exec sh -c 'for f; do echo process $f;  done' sh {} +"}
{"input": "Print out the contents of all *.txt files in the home directory", "output": "find ~ -name '*.txt' -print0 | xargs -0 cat"}
{"input": "Get the directory with least access time under current directory", "output": "find . -type d -printf \"%A@ %p\\n\" | sort -n | tail -n 1 | cut -d \" \" -f 2-"}
{"input": "Prints newline, word, and byte count for each *.py in a current folder.", "output": "wc *.py"}
{"input": "Create a symbolic link named \"$1/link\" to the current working directory", "output": "ln -s \"`pwd`\" $1/link"}
{"input": "Archive \"/path/to/files\" on host \"remotemachine\" authentifying as user \"user\" and compressing data during transmission, copy symlinks as symlinks.", "output": "rsync -avlzp user@remotemachine:/path/to/files /path/to/this/folder"}
{"input": "find symbolic links with pattern` '*sysdep.c'", "output": "find . -lname '*sysdep.c'"}
{"input": "Find all target files outside the current working directory with symbolic links in the current working directory", "output": "find . -type l -exec readlink -f '{}' \\; | grep -v \"^`readlink -f ${PWD}`\""}
{"input": "Create a tar archive of files from directory tree \"data\"", "output": "find data/ -print0 | tar --null -T - --create -f archive.tar"}
{"input": "Installs package \"nodejs\" answering 'yes' on all questions.", "output": "yum install -y nodejs"}
{"input": "Find files/directories under current directory and write them to a file as null terminated strings.", "output": "find -fprint0"}
{"input": "Print lines 15967 to 16224 in file \"dump.txt\"", "output": "cat dump.txt | head -16224 | tail -258"}
{"input": "Find all files starting from the current directory which are larger than 100MB", "output": "find . -size +100M"}
{"input": "Replace \"  \" with \" $UID \" in the output of \"history\"", "output": "history | sed \"s/  / $UID /\""}
{"input": "Display last 100 lines of file-with-line-too-long.txt, waiting for user input after each page.", "output": "tail -1000 file-with-line-too-long.txt | more"}
{"input": "Reports count of characters in the value of ${FOO_NO_LEAD_SPACE} variable as follows: \"length(FOO_NO_LEAD_SPACE)==<counted number of characters>\"", "output": "echo -e \"length(FOO_NO_LEAD_SPACE)==$(echo -ne \"${FOO_NO_LEAD_SPACE}\" | wc -m)\""}
{"input": "Find all files whose names begin with 'Makefile' in the /usr/ports directory tree and count the number of lines in them containing ^M", "output": "find /usr/ports/ -name Makefile\\* -exec grep `printf '\\15'` -l '{}' '+' | wc -l"}
{"input": "find all the file that have not been modified in the last 3 days ( considers day starting not 24 hours )", "output": "find ./ -daystart -mtime +3"}
{"input": "SSH into me@machine, run \"./executeMyScript\", and spawn a bash shell", "output": "ssh -t me@machine ./executeMyScript '&&' bash -i"}
{"input": "display files in current folder ending with \"pdf\" or \"PDF\"", "output": "find . -name '*.pdf' -or -name '*.PDF'"}
{"input": "Prints the absolute directory path of the current script preceded by the string \"dirname/readlink: \"", "output": "echo \"dirname/readlink: $(dirname $(readlink -f $0))\""}
{"input": "Shifts the positional parameters to the left by n.", "output": "shift [n]"}
{"input": "run command \"set -a; . /path/to/nullmailer-vars; set +a; /usr/sbin/logcheck\" with a bash as user root", "output": "su -s /bin/bash -c \"set -a; \\                     . /path/to/nullmailer-vars; \\                     set +a; \\                     /usr/sbin/logcheck\" logcheck"}
{"input": "Remove the last 3 characters from 987654321, keeping only 987654", "output": "echo 987654321 | rev | cut -c 4- | rev"}
{"input": "Print file system disk space usage with sizes in powers of 1000", "output": "a=$( df -H )"}
{"input": "Search for all .html files in directory \"www\" and output only the basename (without containing path) of each.", "output": "find www -name \\*.html -type f -exec basename {} \\;"}
{"input": "Split \"t.txt\" into files with at most 30000000 lines each and use a prefix \"t\" and numeric suffixes of length 2", "output": "split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t"}
{"input": "delete all the files in the file system which belong to the user edwarda after user confirmation", "output": "find / -user edwarda -ok rm \"{}\" \\;"}
{"input": "Search the current directory recursively for MOV files, following symlinks", "output": "find . -iname \"*.mov\" -follow"}
{"input": "Lookup information for user \"vivek\"", "output": "finger vivek"}
{"input": "Find all *.ogg and *.mp3 (case insensitive) files/directories under your home directory", "output": "find $HOME -iname '*.ogg' -o -iname '*.mp3'"}
{"input": "search for all the files in the folder /data/images which are modified after /tmp/foo", "output": "find /data/images -newer /tmp/foo"}
{"input": "Create a symolic link in \"/usr/local/bin/\" to \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl\"", "output": "ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/"}
{"input": "Find files that are writable by the user, the group, or both", "output": "find . -perm +220  -exec ls -l {} \\; 2> /dev/null"}
{"input": "Find all files/directories named 'filename' that belong to user 'username' and group 'groupname' in the entire filesystem", "output": "find / -user username -group groupname -name filename"}
{"input": "Save the absolute path of the current script to variable \"SELF\"", "output": "SELF=`readlink /proc/$$/fd/255`"}
{"input": "Removes empty folder, and hides error message if one is not empty.", "output": "rmdir --ignore-fail-on-non-empty $newBaseDir/Data/NewDataCopy"}
{"input": "search for regular files in the current folder which path is not  \"./.*\" and not \"./*/.*\"", "output": "find ./ -type f -name \"*\" ! -path \"./.*\" ! -path \"./*/.*\""}
{"input": "display all the tex files in the current folder", "output": "find . -name \"*.tex\""}
{"input": "Open a local SSH port on 1080 for application-level port forwarding", "output": "ssh -D1080 root@localhost -g"}
{"input": "Recursively change the group ownership to \"laravel\" in \"./storage\"", "output": "sudo chown -R :laravel ./storage"}
{"input": "Search non-recursively directory tree `MyApp.app' for directories whose name is 'Headers' and delete them in an optimized way", "output": "find MyApp.app -name Headers -type d -prune -exec rm -rf {} +"}
{"input": "check the type of files in the folder /usr/bin", "output": "find /usr/bin | xargs file"}
{"input": "Count the number of directories in the current directory and below", "output": "find . -type f -exec basename {} \\; | wc -l"}
{"input": "change the group of all directories in the current folder", "output": "find . -type d -exec chgrp usergroup {} \\;"}
{"input": "Find all directories in current directory without going into sub-directories", "output": "find . -type d -maxdepth 1"}
{"input": "Prints week day of a 31 day in a current month.", "output": "cal | awk 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print a[i]}' FIELDWIDTHS=\"3 3 3 3 3 3 3 3\" date=31"}
{"input": "Delete all HTML files under tree ~/mydir", "output": "find ~/mydir -iname '*.htm' -exec rm {} \\;"}
{"input": "Mount \"project1/link1\" as a bind directed at \"/absolute/path/to/some/where/else\"", "output": "mount --bind /absolute/path/to/some/where/else project1/link1"}
{"input": "Search for files which are writable by somebody", "output": "find . -perm /222"}
{"input": "Find files in the current directory and below that are less than 500 kB in size", "output": "find . -size -500k -print"}
{"input": "Remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node' with superuser privilege", "output": "sudo rm -rf bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node"}
{"input": "Recursively changes group ownership of everything within current folder to 'git'.", "output": "chgrp -R git ./"}
{"input": "Find all regular files starting from level 3 of directory tree ~/container and move them to the current directory", "output": "find ~/container  -mindepth 3 -type f -exec mv {} . \\;"}
{"input": "Find all of the hidden files in the current directory and its sub-directories.", "output": "find . -type f -name \".*"}
{"input": "Search the current directory tree for regular files modified within the past 24 hours whose names do not end with \".DS_Store\"", "output": "find . -mtime -1 ! -name '.DS_Store' -type f -exec basename {} \\;"}
{"input": "Mount remote \"cifs\" filesystem \"//server/source/\" on \"/mnt/source-tmp\" with username \"Username\" and password \"password\"", "output": "mount -t cifs //server/source/ /mnt/source-tmp -o username=Username,password=password"}
{"input": "Set permissions of all directories under \"/opt/lampp/htdocs\" to 711", "output": "find /opt/lampp/htdocs -type d -exec chmod 711 {} \\;"}
{"input": "Execute /usr/bin/find with $* arguments where current directory is the first argument", "output": "/usr/bin/find ./ $*"}
{"input": "Find all files in the /var/tmp directory tree with uid=1000", "output": "find /var/tmp -uid 1000"}
{"input": "Print the commands that would execute \"myfile\" on all .ogv files from the current directory tree", "output": "find ./ -name *.ogv -exec echo myfile {} \\;"}
{"input": "change the ownership of all the files in the file system from edwarda to earnestc", "output": "find / -user edwarda -print | xargs chown earnestc"}
{"input": "Find all files that belong to group developer", "output": "find /home -group developer"}
{"input": "Gets IP address of 'eth0' network interface.", "output": "ifconfig eth0 | awk '/inet /{sub(/[^0-9]*/,\"\"); print $1}'"}
{"input": "Print total size of file systems in kilobytes.", "output": "df | tail -n +2 | tr -s ' ' | cut -d ' ' -f 2 | paste -s -d+ | bc"}
{"input": "Creates temporary folder in /tmp/ (by default) with 10-letter suffux.", "output": "mktemp -d -t"}
{"input": "Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones", "output": "find ~/code -type d -name '[^\\.]*' | tr '\\n' ':' | sed 's/:$//'"}
{"input": "find all the files ending with jpg in current folder and display their count ( case insensitive )", "output": "find ./ -iname '*.jpg' -type f | wc -l"}
{"input": "Print the full path prefix for all files in the current directory tree as a list", "output": "tree -fi"}
{"input": "find from / a file called 'toBeSearched.file', redirecting error messages to the output and filtering any lines containing the text \"Permission denied\"", "output": "find /. -name 'toBeSearched.file' 2>&1 | grep -v 'Permission denied'"}
{"input": "Remove all empty files in /tmp/ and below", "output": "find /tmp -type f -empty -print | xargs rm -f"}
{"input": "create a tar of all png & jpg images in the current folder", "output": "find . \\( -iname \"*.png\" -o -iname \"*.jpg\" \\) -print -exec tar -rf images.tar {} \\;"}
{"input": "login as user username", "output": "su - username"}
{"input": "find files under the current directory called \"foo\" or \"bar\"", "output": "find . \\( -name \"foo\" -o -name \"bar\" \\)"}
{"input": "display all the files in the current folder that are at least one week old (7 days) but less then 30 days old", "output": "find . -mtime +30 -a -mtime -7 -print0"}
{"input": "Run `fastqc' on all the fastqc files in the current directory tree", "output": "find . -name \"*.fq\"  -exec cat '{}' ';' | fastqc  /dev/stdin"}
{"input": "find all the files in the current folder with the name \"test-a\" and move them to the folder test-10. execdir runs the command in the directory where the file is found.", "output": "find ~ -type f -name test-a -execdir mv {} test-10 \\;"}
{"input": "find all the fles that have .ssh in the end and redirect the output to ssh-stuff", "output": "find / -name .ssh* -print | tee -a ssh-stuff"}
{"input": "display all the regular/normal files in current directory", "output": "find -type f -printf '\"%p\""}
{"input": "Build an \"svn hotcopy\" command for each subdirectory of /usr/local/svn/repos/", "output": "find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf \"%f\\0\" | xargs -0 -I{} echo svnadmin hotcopy /usr/local/svn/repos/\\{\\} /usr/local/backup/\\{\\}"}
{"input": "Copy \"/home/username/path/on/server/\" to \"username@your.ip.address.here:/Users/username/path/on/machine/\" and convert encoding from UTF-8 to UTF-8-MAC", "output": "rsync --iconv=UTF-8,UTF-8-MAC /home/username/path/on/server/ 'username@your.ip.address.here:/Users/username/path/on/machine/'"}
{"input": "Find all hidden files under /tmp", "output": "find /tmp -type f -name \".*\""}
{"input": "remove all the files in the current folder which have not been modified in the last 10 days", "output": "find . -mtime +10 | xargs rm"}
{"input": "Print the directory name of the real full path of \"relative/path/to/file\" where each symbolic link component must exist", "output": "dirname `readlink -e relative/path/to/file`"}
{"input": "Find all files/directories that belong to the group 'audio' under '/dev' directory tree", "output": "find /dev -group audio"}
{"input": "Clears the terminal screen.", "output": "clear"}
{"input": "Save the first two letters of the system host name to variable \"DC\"", "output": "DC=`hostname | cut -b1,2`"}
{"input": "Find all directories under var/ directory and change their permission to 700", "output": "find var/ -type d -exec chmod 700 {} \\;"}
{"input": "Lists all files in a current folder, separating names with comma.", "output": "ls | xargs -I {} echo {}, | xargs echo"}
{"input": "start 2 sleep processes in the background", "output": "sleep 100 | sleep 200 &"}
{"input": "List all .jpg files in the home directory tree", "output": "find . -name \"*.jpg\" -print0 | xargs -0 ls"}
{"input": "find all the files that were modified two days ago", "output": "find . -daystart -ctime 1 -type f"}
{"input": "set alias \"c1\" for command \"awk '{print \\$1}'\"", "output": "alias c1=\"awk '{print \\$1}'\""}
{"input": "Find \"*prefs copy\" files in the /mnt/zip directory tree and remove them", "output": "find /mnt/zip -name \"*prefs copy\" -print0 | xargs rm"}
{"input": "Print a list of all duplicate filenames in the current directory tree if there is no white space in filenames", "output": "find . |sed 's,\\(.*\\)/\\(.*\\)$,\\1/\\2\\t\\1/\\L\\2,'|sort|uniq -D -f 1|cut -f 1"}
{"input": "Print pathname of a file that is connected to the standard output of the command \"yes\"", "output": "echo <(yes)"}
{"input": "Find all files/directories under current directory that were accessed more than 25 but less than 35 minutes ago", "output": "find -amin +25 -amin -35"}
{"input": "Find file `hosts'", "output": "find /etc -name hosts"}
{"input": "Print source of the file system containing $path.", "output": "df -P $path | tail -1 | cut -d' ' -f 1"}
{"input": "Print IP addresses of the host name", "output": "hostname -I | cut -d' ' -f1"}
{"input": "Print all the banned IPs from your server along with their origin (country) using the geoip-bin package", "output": "zcat /var/log/fail2ban.log* | gawk  '/.*Ban.*/  {print $7};' | sort | uniq -c | sort | gawk '{ \"geoiplookup \" $2 \"| cut -f2 -d: \" | getline geoip; print $2 \"\\t\\t\" $1 \" \" geoip}'"}
{"input": "Start bash in a completely empty environment, without parsing /etc/bashrc or ~/.bashrc", "output": "env -i bash --norc"}
{"input": "Find all directories under current directory and set their permission to 775", "output": "find -type d | xargs chmod 775"}
{"input": "Find all 400 permission files under /data directory and change their permission to 755", "output": "find /data -type f -perm 400 -print | xargs chmod 755"}
{"input": "Find all executable upvoter-* files/symlinks under maximum 1 level down the {} directory", "output": "find {} -name 'upvoter-*' \\( -type f -or -type l \\) -maxdepth 1 -perm +111"}
{"input": "Print second section of space-separated data coming from stdin.", "output": "cut -d ' ' -f 2"}
{"input": "Descend into every directory under /etc and print the file/directory names with relative paths", "output": "find /etc -execdir echo \"{}\" ';'"}
{"input": "Pipe output of \"yes\" to \"more\" and append the first 3 lines to \"file\"", "output": "yes | awk 'FNR<4 {print >>\"file\"; close(\"file\")}  1' | more"}
{"input": "Change the user to daisy for directories and subdirectories owned by harry", "output": "find . -type d -user harry -exec chown daisy {} \\;"}
{"input": "Find all *.xml files under current directory, search for '<?xml' in those files and print the paths of the matched files.", "output": "find . -name \\*.xml | while read i; do grep '<?xml' \"$i\" >/dev/null; [ $? == 0 ] && echo $i; done"}
{"input": "Find all PHP files under current directory that contain only one line", "output": "find . -type f -name '*.php' -exec wc -l {} \\; | egrep \"^\\s*1\\s\""}
{"input": "Find all files which  begin with 'a' or 'b' from current directory downwards and print them.", "output": "find . -name [ab]* -print"}
{"input": "Find all identical files in the HOME directory and subdirectories and tell if there are hard links", "output": "find $HOME -type f | samefile -r"}
{"input": "search for the word \"nameserver\" in all the regular/normal files in the /etc directory and display the name of the file along with the matched line", "output": "find /etc/ -iname \"*\" -type f -print0 | xargs -0 grep -H \"nameserver\""}
{"input": "Change the permission to 755 for all directories under current directory", "output": "find . -type d | xargs chmod -v 755"}
{"input": "Perform a default Plesk configuration", "output": "find /var/www/vhosts/*/httpdocs -type f -iwholename \u201c*/wp-includes/version.php\u201d -exec grep -H \u201c\\$wp_version =\u201d {} \\;"}
{"input": "Search for the string 'nameserver' in all files under /etc", "output": "find /etc -type f -print0 2>/dev/null | xargs -0 grep --color=AUTO -Hn 'nameserver' 2>/dev/null"}
{"input": "Counts all top-level files in a current folder.", "output": "ls -1 | wc -l"}
{"input": "Count the number of .gz files in the current directory tree", "output": "find -name \"*.gz\" | wc -l"}
{"input": "Search for the pattern '^use strict' in all *.pl files under current directory", "output": "find . -name '*.pl' | xargs    grep -L '^use strict'"}
{"input": "Search the /home/weedly directory tree for regular files named myfile", "output": "find /home/weedly -name myfile -type f -print"}
{"input": "Export variable \"JAVA_HOME\" as symlink resolved absolute path of two parent directories above \"/usr/bin/javac\"", "output": "export JAVA_HOME=$(readlink -ze /usr/bin/javac | xargs -0 dirname -z | xargs -0 dirname)"}
{"input": "Find all *.java files under current directory and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files", "output": "find /home/www -name \"*.java\" -type f -print0 | xargs -0 sed -i 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "run somebashstatement with the filename as argument, for files recursively in /path that match 'pattern'", "output": "find /path -name 'pattern' -exec bash -c 'somebashstatement \"$1\"' -- {} \\;"}
{"input": "using exec in find command to dispaly the searched files", "output": "find . ... -exec cat {} \\; -exec echo \\;"}
{"input": "Shows state of 'extglob' shell option.", "output": "shopt -o extglob"}
{"input": "Print $d if $d is an empty directory", "output": "find \"$d\" -prune -empty -type d"}
{"input": "Count number of lines in all files matching \"*R1*.fastq.gz\"", "output": "zcat *R1*.fastq.gz | wc -l"}
{"input": "Rename absolute path of symbolic link \"dirln\" to \"dir2\"", "output": "mv \"$(readlink -f dirln)\" dir2"}
{"input": "Print info about all mounted file systems", "output": "df"}
{"input": "Print 'file' file, splitting lines into pieces with no more that 3 words in each one.", "output": "cat file | xargs -n3"}
{"input": "Execute 'python -m unittest discover 2>&1 | pyrg' every second and display with color support", "output": "watch -n 1 --color 'python -m unittest discover 2>&1 | pyrg'"}
{"input": "Print all lines in file that do not match \"pattern\"", "output": "sed -n '/pattern/!p' file"}
{"input": "Rename file file.txt.123456 to file.txt", "output": "mv file.txt.123456 $(ls file.txt.123456 | rev | cut -c8- | rev)"}
{"input": "Delete all .svn files/directories under current directory", "output": "find . -name .svn | xargs rm -fr"}
{"input": "Print \"yes\" 4 times followed by 1 \"no\"", "output": "yes yes | sed -e 5s/yes/no/ -e 5q"}
{"input": "Find all *.p[lm] files under /users/tom directory that matches the regex '->get(\\|#hyphenate' in their contents", "output": "find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(\\|#hyphenate' {} +"}
{"input": "find all the php files in the current folder", "output": "find . -name \u201c*.[php|PHP]\u201d -print"}
{"input": "Search the /mnt/raid/upload directory tree for files that have not been modified within the last 5 days", "output": "find /mnt/raid/upload -mtime +5 -print"}
{"input": "Search directory lpi104-6 for files with inode number 1988884", "output": "find lpi104-6 -inum 1988884"}
{"input": "Convert *.doc files in the current directory tree to the .txt format", "output": "find . -name '*.doc' | while read i; do antiword -i 1 \"${i}\" >\"${i/doc/txt}\"; done"}
{"input": "Change permissions to 644 recursively only for files", "output": "find . -type f -exec chmod 644 {} \\;"}
{"input": "Run the sh \"for\" construct in a subshell (runs ./myscript.sh for each file whose name ends with .fasta in mydir) - the subshell is immune to SIGHUP signals sent to it, and the output is redirected to \"output.txt\".", "output": "nohup sh -c 'for i in mydir/*.fasta; do ./myscript.sh \"$i\"; done >output.txt' &"}
{"input": "change group of the file myfile to group friends", "output": "chown :friends myfile"}
{"input": "Find all *.jpg (case insensitive) files under current directory", "output": "find . -iname '*.jpg'"}
{"input": "Print user and group information of all users logged in", "output": "who | awk '{print $1}' | xargs -n 1 id"}
{"input": "Copy *.txt files from the dir/ directory tree along with their parent directories", "output": "find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents"}
{"input": "Print which files differ in \"dir_one\" and \"dir_two\" recursively and sort the output", "output": "diff -qr dir_one dir_two | sort"}
{"input": "Print first field from semicolon-seprated line <line>.", "output": "echo \"<line>\" | cut -d \";\" -f 1"}
{"input": "Find files in the current directory tree whose size is less than 24000 bytes", "output": "find . -size -24000c"}
{"input": "Print numbers from 1 to 10 with 2 values per line", "output": "seq 10 | sed '2~2G' | awk -v RS='' '{$1=$1; print}'"}
{"input": "find all pdf files in current folder and rename all these files", "output": "find . \\( -name '*.pdf' -or -name '*.PDF' \\) -execdir sh -c 'mv -v \"$1\" \"$(echo \"$1\" | tr \" \" \"_\" | tr -d \"{()},\\!'\\''\" | tr \"A-Z\" \"a-z\" | sed \"s/_-_/_/g\")\"' _ {} \\;"}
{"input": "Recursively bind \"/sys\" to \"/var/snmp3/sys\"", "output": "mount --rbind /sys /var/snmp3/sys"}
{"input": "Rename file extension '.andnav' to '.tile' for all files/directories under current directory tree", "output": "find . -name \"*.andnav\" | rename \"s/\\.andnav$/.tile/\""}
{"input": "Rename \"file001abc.txt\" to \"abc1.txt\"", "output": "mv file001abc.txt abc1.txt"}
{"input": "Find the total size of files whose name begins with \"file\" within the current directory tree", "output": "find -iname 'file*' -exec du -cb {} + | grep total$ | cut -f1 | paste -sd+ - | bc"}
{"input": "Report available space on the file system containing /tmp in kilobytes.", "output": "df -k /tmp | tail -1 | tr -s ' ' | cut -d' ' -f4"}
{"input": "Search the .c files residing in the Lib/ directory tree for lines beginning with \"PyErr\"", "output": "find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr"}
{"input": "Lists all directories in the current folder.", "output": "ls -d ./*/"}
{"input": "Recursively add \".jpg\" to all files without an extension in the directory tree \"/path\"", "output": "find /path -type f -not -name \"*.*\" -exec mv \"{}\" \"{}\".jpg \\;"}
{"input": "List the files in the /etc directory tree containing text \"old1.old2.co.com\"", "output": "find /etc -type f -print | xargs grep -il old1\\.old2\\.co\\.com"}
{"input": "Find all files/directories under current directory tree that contain '1' or 'k' in their names", "output": "find . -name \"*[1k]*\""}
{"input": "Search /usr/bin for regular files that were last accessed more than 100 days ago", "output": "find /usr/bin -type f -atime +100"}
{"input": "For all users in the system who have their cron jobs display user name and crontab.", "output": "getent passwd | cut -d: -f1 | perl -e'while(<>){chomp;$l = `crontab -u $_ -l 2>/dev/null`;print \"$_\\n$l\\n\" if $l}'"}
{"input": "Replaces any occurences of '*favicon.ico*' in any subfolder with file '/root/favicon.ico'.", "output": "find . | grep favicon\\.ico | xargs -n 1 cp -f /root/favicon.ico"}
{"input": "Make directory \"~/practice\"", "output": "mkdir ~/practice"}
{"input": "Create a symbolic link named \"temp\" to \"newtarget\"", "output": "ln -s newtarget temp"}
{"input": "Prints running process that has id 'pid' with command line arguments.", "output": "pstree -a pid"}
{"input": "Find all regular files under $DIRECTORY_TO_PROCESS matching the case insensitive regex \".*\\.$FILES_TO_PROCES\" where $FILES_TO_PROCES is a variable and not matching the name pattern '$find_excludes' where $find_excludes is another variable, then print the files with null delimiter instead of newline", "output": "find \"$DIRECTORY_TO_PROCESS\" -type f -iregex \".*\\.$FILES_TO_PROCES\" ! -name \"$find_excludes\" -print0"}
{"input": "Search for line number 111 in file \"active_record.rb\"", "output": "nl -ba  -nln  active_record.rb  | grep '^111 '"}
{"input": "Find all empty directories in minimum 2 levels down the root directory", "output": "find root -mindepth 2 -type d -empty"}
{"input": "Find all files under current directory and search for 'something' in those files", "output": "find . -print | xargs grep something"}
{"input": "Archive and compress all files in \"data\" directory into \"data.tar.gz\"", "output": "tar -cvf - data/* | gzip > data.tar.gz"}
{"input": "find files in home directory which are modified yesterday", "output": "find ~/ -daystart -type f -mtime 1"}
{"input": "Read all *.txt file paths under /foo into a Bash array ($files)", "output": "IFS=$'\\n' read -d '' -ra files < <(find /foo -name \"*.txt\")"}
{"input": "Show the mv commands that would rename the *.so files in the current directory tree prepending their names with \"lib\"", "output": "find . -name \"*.so\" -printf \"mv '%h/%f' '%h/lib%f'\\n\" | less -S"}
{"input": "find all the log files in the file system", "output": "find / -name \"*.log\""}
{"input": "Search for 'string-to-find' in all files under current directory tree matching the regex 'filename-regex.\\*\\.html' in their paths and show the matched lines along with the filenames", "output": "find . -regex filename-regex.\\*\\.html -exec grep -H string-to-find {} \\;"}
{"input": "Search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory", "output": "find . -name $1 -type f -exec grep -i $2 '{}' \\;"}
{"input": "Wrap each line in \"yourfile\" to fit in 79 characters and right pad any lines shorter with spaces", "output": "fold -w79 yourfile | sed -e :a -e 's/^.\\{0,78\\}$/& /;ta'"}
{"input": "Use the contents of compressed files \"input1.txt.gz\" and \"input2.txt\" as arguments to \"command\"", "output": "command $(zcat input1.txt.gz) $(zcat input2.txt)"}
{"input": "Search for hidden files non-recursively", "output": "find . -name '.?*' -prune"}
{"input": "Finds users with X session in system and puts the result into USERS variable", "output": "USERS=$(awk '/\\/X/ {print $1}' <(w))"}
{"input": "Change directory to the real path of the directory containing the current script", "output": "cd $(readlink -f $(dirname $0))"}
{"input": "list all zero-length files under the current directory", "output": "find . -empty -exec ls {} \\;"}
{"input": "Find all *.rpm files/directories under current directory", "output": "find . -name '*.rpm'"}
{"input": "Create intermediate directories foo and bar as required and directory foo/bar/baz", "output": "mkdir -p foo/bar/baz"}
{"input": "Go to first directory specified in PATH which contains the command 'oracle'", "output": "cd $(which oracle | xargs dirname)"}
{"input": "change the permission of all the rpm files in the entire file system to 755", "output": "find / -name *.rpm -exec chmod 755 '{}' \\;"}
{"input": "Compress a file named '{}' in the current directory", "output": "gzip \"{}\""}
{"input": "display all the files in the current folder that end with \".ksh\"", "output": "find . -name \"*.ksh\" -prune"}
{"input": "search all jpg files in current folder", "output": "find . -type f -name \"*.jpg\""}
{"input": "Display all the files/directories under '/home/bozo/projects' directory tree that have been modified within the last day", "output": "find /home/bozo/projects -mtime -1"}
{"input": "Find all file names in the current directory tree that begin with \"headdump\" and write them to file `delete.txt'", "output": "find . -name headdump* >delete.txt"}
{"input": "display all the regular files in the current folder which dont not have the permission 777", "output": "find . -type f ! -perm 777"}
{"input": "Prints brief information about available package with word 'zsh'.", "output": "yum list zsh"}
{"input": "Move \"$PHANTOM_JS\" to \"/usr/local/share\" directory", "output": "sudo mv $PHANTOM_JS /usr/local/share"}
{"input": "Open \"charm\" executable file in vim", "output": "sudo vim `which charm`"}
{"input": "Find all .less files in the current directory tree", "output": "find . -name *.less"}
{"input": "Search the directory given as variable $backuppath recursively for files that were last modified less than 10 days ago and save the list of them to file.list", "output": "find \"${backuppath}\" -mtime -10 > file.list"}
{"input": "Find all regular files starting from level 3 of directory tree ~/container and move them to the current directory's parent", "output": "find ~/container  -mindepth 3 -type f -exec mv {} .. \\;"}
{"input": "Change permissions of all directories residing under and below ./debian to 755", "output": "find ./debian -type d | xargs chmod 755"}
{"input": "find all the files in the current folder which have been changed in the last 60 minutes", "output": "find . -cmin -60"}
{"input": "Make directories and parents for each file path in \"somefile.txt\" excluding the file name", "output": "xargs -n 1 dirname <somefile.txt | xargs mkdir -p"}
{"input": "Set 644 permission to all regular files under current directory", "output": "find . -type f -exec chmod 644 {} \\;"}
{"input": "find all the video files in the home folder", "output": "find ~ -type f -exec file -i {} + | grep video"}
{"input": "get all the files that have been modified within the last 30 days", "output": "find . -mtime -30 -print"}
{"input": "kill all background processes", "output": "kill -INT $(jobs -p)"}
{"input": "Print a dump of the plain hex data in \"$VAR1\" as printable characters", "output": "echo -ne \"$VAR1\" | xxd -r -p | od -c"}
{"input": "Find all mysong.ogg files/directories under your home directory", "output": "find $HOME -name 'mysong.ogg'"}
{"input": "display all the regular/normal files in the current folder that are not accessed in the last 10 minutes", "output": "find . -type f -amin +10"}
{"input": "find all files in the current folder which have not been accessed in the last 7 days or which are bigger than 20KB", "output": "find . -atime +7 -o -size +`expr 10 \\* 1024 \\* 2` -print"}
{"input": "Change owner to \"root\" and group to \"www-data\" of \"/foobar/test_file\"", "output": "sudo chown root:www-data /foobar/test_file"}
{"input": "Copy a file xyz.c to all the .c files present in the C directory and below", "output": "find ./C -name \"*.c\" | xargs -n1  cp xyz.c"}
{"input": "find all files in the current directory do not display the files which do not have read permission to all users", "output": "find . ! -perm -g+r,u+r,o+r -prune"}
{"input": "Find all directories under path_to_dir directory", "output": "find path_to_dir -type d"}
{"input": "Format space separated fields in \"filename\" as a table", "output": "column -t -s' ' filename"}
{"input": "Attach to a not detached screen session. (Multi display mode).", "output": "screen -xr 14313"}
{"input": "Find all .sql files in the current directory recursively and print their path names separated by zeroes", "output": "find . -name '*.sql' -print0"}
{"input": "Search for 'text' in all regular files under current directory tree", "output": "find . -type f -exec grep \"text\" {} /dev/null \\;"}
{"input": "Calculate MD5 sums for all regular files in the current directory tree", "output": "find . -type f | while read f; do g=`md5sum $f` > $f.md5; done"}
{"input": "search for the pattern \"tgt/etc/file1\" in the files tgt/etc/file2, tgt/etc/file3", "output": "find . -type f -name \\* | grep tgt/etc/file1 tgt/etc/file2 tgt/etc/file3"}
{"input": "Replace all instances of \";\" with \"\\n\" in \"bla@some.com;john@home.com\"", "output": "echo \"bla@some.com;john@home.com\" | sed -e 's/;/\\n/g'"}
{"input": "Print input \"your, text, here\" formatted to fit 70 characters per line breaking at spaces", "output": "echo 'your, text, here' | fold -sw 70"}
{"input": "Find all fglrx-libglx* files under and below debian/fglrx/", "output": "find debian/fglrx/ -name 'fglrx-libglx*'"}
{"input": "display the size of all the files in the folder \"${START_DIR}\" which  have been modified in the last \"${DAYS}\"*24 hours", "output": "find ${START_DIR} -mtime -${DAYS} |xargs stat -c \"%s\"|awk '{sum += $1}END{print sum}'"}
{"input": "Find files created in the last minute; works on Mac OS X", "output": "find / -newerct '1 minute ago' -print"}
{"input": "Display an infinite number of lines consisting of \"y\", until the user presses the Q key.", "output": "yes | more"}
{"input": "Save the directory name of the current bash script to variable \"path\" if it is found in one of the directories specified by PATH.", "output": "path=\"$( dirname \"$( which \"$0\" )\" )\""}
{"input": "find the file \"myfile.txt\" in the folder /home/user/myusername/", "output": "find /home/user/myusername/ -name myfile.txt -print"}
{"input": "Create a symbolic link named the basename of \"$file\" to \"$file\"", "output": "ln -s $file `basename $file`"}
{"input": "Find all files/directories under /home/foo/public_html/ that were modified less than 60 minutes ago", "output": "grep ! error_log | find /home/foo/public_html/ -mmin -60"}
{"input": "Print content of all files ending with '*.foo' under the current directory", "output": "cat $(find . -name '*.foo')"}
{"input": "find all the files in the folder \"myfiles\" which have been modified exactly 48 hours back.", "output": "find /myfiles -mtime 2"}
{"input": "find all the text files in the folder /home/calvin which are atleast below 2 levels", "output": "find /home/calvin/ -mindepth 2  -name \u201c*.txt\u201d"}
{"input": "find the md5 sum of all the regular files in multiple folders and display them in sorted order", "output": "find teste1 teste2 -type f -exec md5 -r {} \\; | sort"}
{"input": "Change permissions of \"/usr/bin/wget\" to 777", "output": "chmod 777 /usr/bin/wget"}
{"input": "Remove all regular files in the current directory", "output": "find ./ -type f -exec rm -rf {} \\;"}
{"input": "Search the current directory tree for all files except SVN ones", "output": "find .  ! -regex \".*[/]\\.svn[/]?.*\""}
{"input": "List all environment variables whose name or value contains current user's login name.", "output": "env | sed -n /\"$USERNAME\"/p"}
{"input": "Gets state of shell option 'dotglob' and saves it in 'rest_cmd' variable.", "output": "rest_cmd=$(shopt -p dotglob)"}
{"input": "Counts total number of lines in a git repository.", "output": "git grep ^ | wc -l"}
{"input": "Find all regular files starting from level 3 of directory tree ~/container and move them one level up", "output": "find ~/container  -mindepth 3 -type f | while read file; do mv \"$file\" \"$(dirname \"$file\")/..\"; done"}
{"input": "Find all files/directories named '.todo' under $STORAGEFOLDER directory tree and print the parent directory names", "output": "find \"$STORAGEFOLDER\" -name .todo -printf '%h\\n'"}
{"input": "List all *.txt files/directories under /etc", "output": "find /etc -name \"*.txt\" | xargs ls -l"}
{"input": "dispaly a long listig of all the files in the home folder which are bigger than 100KB and discard any errors", "output": "find /home -size +100000 -ls 2>/dev/null"}
{"input": "List all variables (names and values) whose name or value contains X.", "output": "env | grep \".*X.*\""}
{"input": "List all the file links", "output": "find . -type l"}
{"input": "Print a hex dump byte to byte of the output of \"printf Aa\"", "output": "printf Aa | od -t x1"}
{"input": "Replace all occurrence of \"subdomainA.example.com\" with \"subdomainB.example.com\" in all files under /home/www and below", "output": "find /home/www/ -type f|xargs perl -pi -e 's/subdomainA\\.example\\.com/subdomainB.example.com/g'"}
{"input": "Save count of lines from file $file matching with pattern $filter and not matching with pattern $nfilter in variable 'totalLineCnt'", "output": "totalLineCnt=$(cat \"$file\" | grep \"$filter\" | grep -v \"$nfilter\" | wc -l | grep -o '^[0-9]\\+');"}
{"input": "find all the text files in current folder and move all these to another folder appending \".bar\" at the end of these files", "output": "find . -name \"*.txt\" | xargs -I '{}' mv '{}' /foo/'{}'.bar"}
{"input": "Search for \"foo\" in every file in the current directory and number the output", "output": "grep foo * | nl"}
{"input": "Simulate a full login", "output": "su -"}
{"input": "Search for 'It took' in all $srch1* (case insensitive) files under current directory and run the sed script 'N;s/(.*)\\n(.*)/\\2 \\1/' on the output and redirect the final output to temp1 file", "output": "find . -iname \"$srch1*\" -exec grep \"It took\" {} \\; -print |sed -r 'N;s/(.*)\\n(.*)/\\2 \\1/' > temp1"}
{"input": "display all directories in the folder \"/myfiles\"", "output": "find /myfiles -type d"}
{"input": "Creates temporary folder, and saves current folder path   joined with created temporary folder path in 'tdir' variable.", "output": "tdir=\"$(pwd)/$(mktemp -d)\""}
{"input": "sleep for 10 seconds", "output": "sleep 10"}
{"input": "display long listing of all the symbolic links in the current folder", "output": "find . -type l -exec ls -l {} \\;"}
{"input": "find all the xml files in a directory and pass it as an argument to a jar", "output": "find /dump -type f -name '*.xml' -exec java -jar ProcessFile.jar {} \\;"}
{"input": "Print extended file information for regular files found under the home directory whose names start with my", "output": "find . -name 'my*' -type f -ls"}
{"input": "Search  all directory from /usr downwards for files whose inode number is 1234 and print them .", "output": "find /usr -inum 1234 -print"}
{"input": "Recursively lists all *.py and *.html files in a current folder.", "output": "ls **/*.py **/*.html"}
{"input": "find all the directories in the current folder and replace the", "output": "find -type d|sed -r '/^.$/{s:.:#!/bin/bash:};{s/^\\./mkdir -p &/}'"}
{"input": "Send email with subject \"Backup\" and attachment \"mysqldbbackup.sql\" and message in \"message.txt\" to \"backup@email.com\"", "output": "cat message.txt | mail -s \"Backup\" -a mysqldbbackup.sql backup@email.com"}
{"input": "Save actual working directory in variable \"target_PWD\"", "output": "target_PWD=$(readlink -f .)"}
{"input": "search for a regular/normal file myfile in the folder \"/home/weedly\"", "output": "find /home/weedly -name myfile -type f -print"}
{"input": "Find all files files under the current directory except *.txt", "output": "find . -maxdepth 1 -type f -not -regex '.*\\.txt'"}
{"input": "Find all $2 files in $1 path excluding /proc and search for the regex expanded by $3 in those files", "output": "find $1 -path /proc -prune -o -name \"$2\" -print -exec grep -Hn \"$3\" {} \\;"}
{"input": "Send one ping request to host whose name or IP address is specified by variable \"ip\", using network interface eth9.", "output": "ping ${ip} -I eth9 -c 1"}
{"input": "remove all \"Foo*\" files under current dir", "output": "find . -type f -name \"Foo*\" -exec rm {} \\;"}
{"input": "Change the owner of \"process\" to \"root\"", "output": "sudo chown root process"}
{"input": "Returns exit code 1.", "output": "false"}
{"input": "Find all files/directories containing 'foo' in their names under current directory tree", "output": "find . -name '*foo*'"}
{"input": "Find all files/directories named 'query' (case insensitive) under current directory", "output": "find -iname \"query\""}
{"input": "grep from bottom of file", "output": "tac your.log | grep stuff"}
{"input": "display all empty files in the current folder", "output": "find . -size 0k"}
{"input": "Counts lines in file file1 and shows progress bar while doing.", "output": "tail -n 100 file1 | bar | wc -l"}
{"input": "Merge the first \"$lc\" lines of \"current.txt\" and the last \"$lc\" lines of \"current.txt\" and display the result as a comma separated table", "output": "paste <(head -\"$lc\" current.txt) <(tail -\"$lc\" current.txt) | column -t -o,"}
{"input": "prints the last non-empty line of a file", "output": "tac $FILE | grep -m 1 '.'"}
{"input": "Exits from login shell.", "output": "logout"}
{"input": "Removes files 'junk1', 'junk2', 'junk3'.", "output": "rm junk1 junk2 junk3"}
{"input": "Display the last colon-separated field of variable 'var'", "output": "echo \"$var\" | rev | cut -d: -f1 | rev"}
{"input": "Get virtual private memory use of process", "output": "top -l 1 -s 0 -i 1 -stats vprvt -pid PID"}
{"input": "Assign a name when starting a screen session", "output": "screen -S 'name' 'application'"}
{"input": "Return a list of files newer than file poop", "output": "find . -mnewer poop"}
{"input": "Make DNS lookup requests for domain list in file '/path/to/host-list.txt'", "output": "dig -f /path/to/host-list.txt"}
{"input": "find Texinfo source files in /usr/local/doc", "output": "find foo -path foo/bar -print"}
{"input": "display a long listing of all the xls or csv files in the entire file system", "output": "find / -regex \".*\\.\\(xls\\|csv\\)\""}
{"input": "change the permissions of all the directories in the folder \"/path/to/someDirectory\" to 755", "output": "sudo find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755"}
{"input": "Make directories and parents for each line in \"infile\" excluding the file name", "output": "while read line; do mkdir -p \"${line%/*}\"; done < infile"}
{"input": "View manual page of the find command", "output": "man find"}
{"input": "Page through the contents of file 'file_name', positioning the view at the first occurrence of regular expression 'regex'.", "output": "less -p regex file_name"}
{"input": "Change permissions to 644 recursively for PHP files.", "output": "find . -type f -name '*.php' -exec chmod 644 {} \\;"}
{"input": "display all files in the folder bar only in the path /foo/bar/myfile (no output is generated)", "output": "find bar -path /foo/bar/myfile -print"}
{"input": "find all the xml files in current folder and which are present in the pattern list file \"/tmp/a\"", "output": "find . -name \"*.xml\" -exec grep -HFf /tmp/a {} \\;"}
{"input": "Find the top 25 files according to their size in the current directory and its subdirectories", "output": "find . -type f -exec ls -al {} \\; | sort -nr -k5 | head -n 25"}
{"input": "Find all files/directories with '.c' or '.h' extension under current directory tree and search for the regex expanded by the variable $i and show the output by paging through one screenful at a time", "output": "find . -name '*.[ch]' -exec grep $i {} | less"}
{"input": "display all the text files in the home folder", "output": "find /home -name \"*.txt\""}
{"input": "Search /var for files matching regular expression '.*/tmp/.*[0-9]*.file'", "output": "find /var -regex '.*/tmp/.*[0-9]*.file'"}
{"input": "set a crontab to create or update the timestamp of \"washere2\" in the current directory every 30 minutes.", "output": "echo \"30 * * * * touch $(pwd)/washere2\" | crontab"}
{"input": "Remove trailing white spaces from all *.rb, *.html, *.js, *.coffee, *.css, *.scss, *.erb, *.yml, *.ru files under current directory", "output": "find . \\( -name *.rb -or -name *.html -or -name *.js -or -name *.coffee -or -name *.css -or -name *.scss -or -name *.erb -or -name *.yml -or -name *.ru \\) -print0 | xargs -0 sed -i '' -E \"s/[[:space:]]*$//\""}
{"input": "display list of all the regular/normal files in the current folder which start with \"my\"", "output": "find . -name 'my*' -type f -ls"}
{"input": "Format the filename and modification time of files starting with t as a table", "output": "stat -c 'File: %n Modified: %y' t* | column -t"}
{"input": "Search all files in the current directory tree for \"SearchString\", ignoring .html files and skipping .svn directories", "output": "find . \\( -name '*.svn*' -prune  -o ! -name '*.html' \\) | xargs -d '\\n' grep -Hd skip 'SearchString'"}
{"input": "For each line in file2 whose first field appears as a first field in file1, print an output line constructed following the specified -o format.", "output": "join -11 -21 -o1.1,1.2,1.3,2.3 file1 file2"}
{"input": "find all the files in the file system which have not been modified in the last 100*24 hours", "output": "find / -mtime +100 -print"}
{"input": "list all *.txt files in the user's home directory.", "output": "find ~/ -name '*.txt'"}
{"input": "set alias \"h\" for command \"history\"", "output": "alias h='history'"}
{"input": "Remove all files with the .c extension in the current directory tree", "output": "find . -name \"*.c\" | xargs rm -rf"}
{"input": "display all the files having spaces in the current folder", "output": "find . -name \"filename including space\" -print0"}
{"input": "Print multiline text \"ONBOOT=\\\"YES\\\"\\nIPADDR=10.42.84.168\\nPREFIX=24\" to the terminal, replacing '\\n' with newline symbol, and append that text to file /etc/sysconfig/network-scripts/ifcfg-eth4 as root user.", "output": "echo -e \"ONBOOT=\\\"YES\\\"\\nIPADDR=10.42.84.168\\nPREFIX=24\" | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth4"}
{"input": "Find and delete all .zip files in the current directory tree", "output": "find . -depth -name '*.zip' -exec rm {} \\;"}
{"input": "find all \".flac\" files in current folder starting with \"cmn-\"", "output": "find . -name 'cmn-*.flac'"}
{"input": "Find all files named `file1' on the system", "output": "find / -name file1"}
{"input": "Sets 'extglob' shell option.", "output": "shopt -s extglob"}
{"input": "search for all the directories starting with the word in the current folder and give them as input to the script fixmbox", "output": "find . -name 'm?' -type d -exec ./fixmbox {} +"}
{"input": "Find all *fstab* files under and below /etc", "output": "find /etc -name *fstab*"}
{"input": "Remove all files with names like \"vmware-*.log\" from the current directory tree", "output": "find . -name \"vmware-*.log\" -exec rm '{}' \\;"}
{"input": "Prints help on 'yum' utility.", "output": "yum -h"}
{"input": "Find files/directories that have no owner or group under /path", "output": "find /path -nouser -or -nogroup"}
{"input": "Search for files with \"sitesearch\" in their names and \"demo\" in their path names", "output": "find . -iname '*sitesearch*' | grep demo"}
{"input": "Prints sorted list of logged in users.", "output": "w -h  | cut -d' ' -f1 | sort | uniq"}
{"input": "List HTML files starting from the home directory that are 50k at the most", "output": "find . \\( -size 100 -o -size -100 \\)  -name '*.html' -exec  ls -l {} \\;  2> /dev/null"}
{"input": "find all the jpg files in the current folder and resize them to 50% of their original size", "output": "find . -name \"*.JPG\" -exec convert {} -resize 50% {} \\;"}
{"input": "Prints $m latest modified files within the $d folder, using $f format for printing timestamp.", "output": "find \"$d\" -type f -printf \"%T@ :$f %p\\n\" | sort -nr | cut -d: -f2- | head -n\"$m\""}
{"input": "Join data in file1 containing one number per line with data in file2 containing a number and other information per line, keeping the same order as it is found in file1.", "output": "join -1 2 -2 1 -a1 <(cat -n file1.txt | sort -k2,2) <(sort file2.txt) | sort -k2 | cut --complement -d\" \" -f2"}
{"input": "Lists all subdirectories in current directory with a trailing slash", "output": "ls -d ./*/                     ### more reliable BSD ls"}
{"input": "Calculate the total amount of memory usage of the current user", "output": "alias memu=\"ps -u $(whoami) -o pid,rss,command | awk '{print \\$0}{sum+=\\$2} END {print \\\"Total\\\", sum/1024, \\\"MB\\\"}'\""}
{"input": "split file /usr/bin/gcc into pieces per 100000 lines", "output": "split -n 100000 /usr/bin/gcc"}
{"input": "Add \"Added line\" on top of each *.py files under current directory", "output": "for a in `find . -name '*.py'` ; do cp \"$a\" \"$a.cp\" ; echo \"Added line\" > \"$a\" ; cat \"$a.cp\" >> \"$a\" ; rm \"$a.cp\" ; done"}
{"input": "display all the text files in the current folder and discard all the errors.", "output": "find -name \"*.txt\" 2>>/dev/null"}
{"input": "Calculate the md5 sum of the tar archive of \"dir\"", "output": "tar c dir | md5sum"}
{"input": "set alias \"git-root\" for command 'cd $(git rev-parse --show-cdup)'", "output": "alias git-root='cd $(git rev-parse --show-cdup)'"}
{"input": "Write \"2-1\" to standard output and to \"/sys/bus/usb/drivers/usb/unbind\"", "output": "echo '2-1' |sudo tee /sys/bus/usb/drivers/usb/unbind"}
{"input": "Find files that are empty", "output": "find -empty -type -f"}
{"input": "Download \"Louis Theroux's LA Stories\" using rsync over ssh", "output": "rsync -ave ssh '\"Louis Theroux\"''\"'\"'\"'\"''\"s LA Stories\"'"}
{"input": "Find & calculate total number of caractor  in all .txt file from current directory", "output": "find .  -type f  -name '*.txt' -exec wc -c {} \\; | awk '{total += $1} END{print total}'"}
{"input": "Measure the execution time of the command: find /usr/src -name \"*.html\" -exec grep -H \"foo\" {} ';' | wc -l", "output": "time find /usr/src -name \"*.html\" -exec grep -H \"foo\" {} ';' | wc -l"}
{"input": "Print a sorted list of the extensions of the regular files from the current directory tree with counts per extension", "output": "find . -type f | perl -ne 'print $1 if m/\\.([^.\\/]+)$/' | sort | uniq -c | sort -n"}
{"input": "Read a single character from standard input and do not allow backslash to escape characters", "output": "read -rn1"}
{"input": "Back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory", "output": "find /etc -print0 -name \"*.txt\" | xargs -I {} -0 mv {} {}.bak"}
{"input": "display all the files in the usr folder and those that are in the path local", "output": "find /usr/ -path \"*local*\""}
